{"id": "dffded34c968-0", "text": "Last updated: September 10, 2012 \n \n \n \n \nIvan Marsic", "source": "Page 1", "chapter": "N/A"}
{"id": "9e23eabf1336-0", "text": "Copyright \u00a9 2012 by Ivan Marsic. All rights reserved. Rutgers University, New Brunswick, New Jersey \n \nPermission to reproduce or copy all or parts of th is material for non-profit use is granted on the \ncondition that the author and source are cred ited. Suggestions and comments are welcomed. \n \n Author\u2019s address: \nRutgers University \nDepartment of Electrical and Computer Engineering 94 Brett Road \nPiscataway, New Jersey 08854 \nmarsic@ece.rutgers.edu  \n \n \nBook website: http://www.ece.rutgers.edu/~marsic/books/SE/", "source": "Page 2", "chapter": "N/A"}
{"id": "6da08886c042-0", "text": "i  \nPreface \n \nThis book reviews important technologies for softwa re development with a particular focus on \nWeb applications. In reviewing these technologies I put emphasis on underlying principles and \nbasic concepts, rather than meticulousness and co mpleteness. In design and documentation, if \nconflict arises, clarity should be preferred to  precision because, as will be described, the key \nproblem of software development is having a functioning communication between the involved \nhuman parties. My main goal in writing this book has been to make it useful. \nThe developer should always keep in mind that so ftware is written for people, not for computers. \nComputers just run software\u2014a minor point. It is  people who understand, maintain, improve, and \nuse software to solve problems. Solving a probl em by an effective abstraction and representation \nis a recurring theme of software engineering.  The particular technologies evolve or become \nobsolete, but the underlying principles and con cepts will likely resurface in new technologies. \nAudience \nThis book is designed for upper-division undergra duate and graduate c ourses in software \nengineering. It intended primarily for learning, rath er than reference. I also believe that the book\u2019s \nfocus on core concepts should be appealing to practitioners who are interested in the \u201cwhys\u201d", "source": "Page 3", "chapter": "N/A"}
{"id": "6da08886c042-1", "text": "focus on core concepts should be appealing to practitioners who are interested in the \u201cwhys\u201d \nbehind the software engineering tools and tec hniques that are commonly encountered. I assume \nthat readers will have some familiarity with  programming languages and I do not cover any \nprogramming language in particul ar. Basic knowledge of discrete mathematics and statistics is \ndesirable for some advanced topics, particularly  in Chapters 3 and 4. Most concepts do not \nrequire mathematical sophistication beyond a first undergraduate course. \nApproach and Organization \nThe first part (Chapters 1\u20135) is intended to accompany a semester-long hands-on team project in \nsoftware engineering. In the spirit of agile me thods, the project consists of two iterations. The \nfirst iteration focuses on developing some key functions of the proposed software product. It is \nalso exploratory to help with sizing the effort  and setting realistic goals  for the second iteration. \nIn the second iteration the students perform the ne cessary adjustments, based on what they have \nlearned in the first iteration. Appendix G pr ovides a worked example of a full software \nengineering project. \nThe second part (Chapters 6\u20138 and most Appendi ces) is intended for a semester-long course on \nsoftware engineering of Web applications. It also assumes a hands-on student team project. The", "source": "Page 3", "chapter": "N/A"}
{"id": "6da08886c042-2", "text": "software engineering of Web applications. It also assumes a hands-on student team project. The \nfocus is on Web applications and communication between clients and servers. Appendix F briefly \nsurveys user interface design issues because I feel that proper treatment of this topic requires a \nbook on its own. I tried to make every chapter self-contained, so that entire chapters can be", "source": "Page 3", "chapter": "N/A"}
{"id": "57ffc20e7dac-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n ii\nskipped if necessary. But you will not benefit the most by reading it that way. I tried to avoid \n\u201cbotanical\u201d approach, telling you in detail what is he re and what is there in software engineering, \nso you can start from any point and walk it over in any way.  Instead, this book takes an \nevolutionary approach, where new topics sy stematically build on previous topics. \nThe text follows this outline. \nChapter 2 introduces object-oriented software engineer ing. It is short enough to be covered in few \nweeks, yet it provides sufficient knowledge for students to start working on a first version of their software product. Appendix G complements the material of Chapter 2 by showing a practical \napplication of the presented concepts. In genera l, this knowledge may be sufficient for amateur \nsoftware development, on relatively small and non-mission-critical projects. \nChapters 3 through 5 offer more detailed coverage of the topics introduced in Chapter 2. They are \nintended to provide the foundation for iterativ e development of high-quality software products. \nChapters 6 \u2013 8 provide advanced topics which can be covered selectively, if time permits, or in a \nfollow-up course dedicated to software engineering of Web applications.", "source": "Page 4", "chapter": "N/A"}
{"id": "57ffc20e7dac-1", "text": "follow-up course dedicated to software engineering of Web applications. \nThis is not a programming text, but several appendices are provided as reference material for \nspecial topics that will inevitably arise in many software projects. \nExamples, Code, and Solved Problems \nI tried to make this book as practical as possible by using realistic examples and working through \ntheir solutions. I usually find it difficult to bridge  the gap between an abstract design and coding. \nHence, I include a great deal of code. The code is in the Java programming language, which \nbrings me to another point. \nDifferent authors favor different languages and st udents often complain about having to learn yet \nanother language on not having l earned enough languages. I feel that the issue of selecting a \nprogramming language for a software engineering textbook is artificial. Programming language is \na tool and the software engineer should master a \u201ctoolbox\u201d of languages so to be able to choose the tool that best suits the task at hand. \nEvery chapter (except for Chapters 1 and 9) is accompanied with a set of problems. Solutions to \nmost problems can be found on the back of this book, starting on page 523. \nDesign problems are open-ended, without a unique or  \u201ccorrect\u201d solution, so the reader is welcome", "source": "Page 4", "chapter": "N/A"}
{"id": "57ffc20e7dac-2", "text": "to question all the designs offered in this book. I have myself gone through many versions of each \ndesign, and will probably change them again in th e future, as I learn more and think more. At the \nleast, the designs in this book represent a starting point to critique and improve. \nAdditional information about team projects and onlin e links to related topics can be found at the \nbook website: http://www.ece.rutgers .edu/~marsic/books/SE/  .", "source": "Page 4", "chapter": "N/A"}
{"id": "da6fc3f35571-0", "text": "iii  \nContents at a Glance \n \n \nPREFACE   ............................................................................................................................. ... I \nCONTENTS AT A GLANCE  ..................................................................................................................... III \nTABLE OF CONTENTS  ........................................................................................................................... V \nCHAPTER 1 INTRODUCTION  .......................................................................................................... 1  \nCHAPTER 2 OBJECT -ORIENTED SOFTWARE ENGINEERING  .............................................................. 61  \nCHAPTER 3 MODELING AND SYSTEM SPECIFICATION  ................................................................... 170  \nCHAPTER 4 SOFTWARE MEASUREMENT AND ESTIMATION  ............................................................. 217 \nCHAPTER 5 DESIGN WITH PATTERNS  ......................................................................................... 246 \nCHAPTER 6 XML  AND DATA REPRESENTATION  ........................................................................... 319  \nCHAPTER 7 SOFTWARE COMPONENTS  ....................................................................................... 361  \nCHAPTER 8 WEB SERVICES  ..................................................................................................... 374  \nCHAPTER 9 FUTURE TRENDS .................................................................................................... 410 \nAPPENDIX A JAVA PROGRAMMING  ............................................................................................. 417  \nAPPENDIX B NETWORK PROGRAMMING  ...................................................................................... 419  \nAPPENDIX C HTTP  OVERVIEW  ................................................................................................... 433  \nAPPENDIX D DATABASE -DRIVEN WEB APPLICATIONS  ................................................................... 442  \nAPPENDIX E DOCUMENT OBJECT MODEL (DOM)  ......................................................................... 443  \nAPPENDIX F USER INTERFACE PROGRAMMING  ............................................................................. 446", "source": "Page 5", "chapter": "N/A"}
{"id": "da6fc3f35571-1", "text": "APPENDIX F USER INTERFACE PROGRAMMING  ............................................................................. 446  \nAPPENDIX G EXAMPLE PROJECT : TIC-TAC-TOE GAME .................................................................. 449  \nAPPENDIX H SOLUTIONS TO SELECTED PROBLEMS  ....................................................................... 523", "source": "Page 5", "chapter": "N/A"}
{"id": "871e5c03f074-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n iv\nREFERENCES   ........................................................................................................................... 5 96 \nACRONYMS AND ABBREVIATIONS  ....................................................................................................... 606  \nINDEX  ........................................................................................................................... 6 08", "source": "Page 6", "chapter": "N/A"}
{"id": "722d5c5ede0b-0", "text": "Software Engineering \uf0b7  Contents v\n \nTable of Contents \n \n \nPREFACE   ............................................................................................................................. ... I \nCONTENTS AT A GLANCE  ..................................................................................................................... III \nTABLE OF CONTENTS  ........................................................................................................................... V \nCHAPTER 1 INTRODUCTION  .......................................................................................................... 1  \n1.1 What is Software Engineering?  ...................................................................................... 2  \n1.1.1 Why Software Engineering Is Difficult (1)  ................................................................................. 7  \n1.1.2 Book Organization  ................................................................................................................ 8  \n1.2 Software Engineering Lifecycle  ...................................................................................... 8  \n1.2.1 Symbol Language  ............................................................................................................... 11  \n1.2.2 Requirements Analysis and System Specification  .................................................................. 13  \n1.2.3 Object-Oriented Analysis and the Domain Model  .................................................................... 15  \n1.2.4 Object-Oriented Design  ....................................................................................................... 17  \n1.2.5 Project Effort Estimation and Product Quality Measurement  .................................................... 20  \n1.3 Case Studies  .............................................................................................................. 25  \n1.3.1 Case Study 1: From Home Access Control to Adaptive Homes ................................................ 26  \n1.3.2 Case Study 2: Personal Investment Assistant  ........................................................................ 30", "source": "Page 7", "chapter": "N/A"}
{"id": "722d5c5ede0b-1", "text": "1.3.2 Case Study 2: Personal Investment Assistant  ........................................................................ 30  \n1.4 The Object Model  ....................................................................................................... 39  \n1.4.1 Controlling Access to Object Elements  .................................................................................. 44  \n1.4.2 Object Responsibilities and Relationships  .............................................................................. 47  \n1.4.3 Reuse and Extension by Inheritance and Composition  ............................................................ 48  \n1.5 Student Team Projects  ................................................................................................ 49  \n1.5.1 Stock Market Investment Fantasy League  ............................................................................. 49  \n1.5.2 Web-based Stock Forecasters  ............................................................................................. 52  \n1.5.3 Remarks about the Projects  ................................................................................................. 54  \n1.6 Summary and Bibliographical Notes  ............................................................................. 57  \nCHAPTER 2 OBJECT -ORIENTED SOFTWARE ENGINEERING  .............................................................. 61  \n2.1 Software Development Methods  ................................................................................... 62  \n2.1.1 Agile Development  .............................................................................................................. 63", "source": "Page 7", "chapter": "N/A"}
{"id": "973928714498-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n vi\n2.1.2 Decisive Methodological Factors  .......................................................................................... 65  \n2.2 Requirements Engineering  .......................................................................................... 68  \n2.2.1 Requirements and User Stories  ............................................................................................ 70  \n2.2.2 Requirements Gathering Strategies  ...................................................................................... 77  \n2.2.3 Effort Estimation  ................................................................................................................. 78  \n2.3 Software Architecture  .................................................................................................. 80  \n2.3.1 Problem Architecture  ........................................................................................................... 82  \n2.3.2 Software Architectural Styles  ................................................................................................ 86  \n2.3.3 Recombination of Subsystems  ............................................................................................. 87  \n2.4 Use Case Modeling  ..................................................................................................... 88  \n2.4.1 Actors, Goals, and Sketchy Use Cases  ................................................................................. 88  \n2.4.2 System Boundary and Subsystems  ....................................................................................... 94  \n2.4.3 Detailed Use Case Specification  ........................................................................................... 96  \n2.4.4 Security and Risk Management  ...........................................................................................107  \n2.4.5 Why Software Engineering Is Difficult (2)  ..............................................................................108  \n2.5 Analysis: Building the Domain Model  .......................................................................... 109  \n2.5.1 Identifying Concepts  ...........................................................................................................110", "source": "Page 8", "chapter": "N/A"}
{"id": "973928714498-1", "text": "2.5.1 Identifying Concepts  ...........................................................................................................110  \n2.5.2 Concept Associations and Attributes  ....................................................................................113  \n2.5.3 Domain Analysis  ................................................................................................................118  \n2.5.4 Contracts: Preconditions and Postconditions  ........................................................................119  \n2.6 Design: Assigning Responsibilities  ............................................................................. 120  \n2.6.1 Design Principles for Assigning Responsibilities  ....................................................................124  \n2.6.2 Class Diagram  ...................................................................................................................130  \n2.6.3 Why Software Engineering Is Difficult (3)  ..............................................................................133  \n2.7 Test-driven Implementation  ........................................................................................ 133  \n2.7.1 Overview of Software Testing  ..............................................................................................134  \n2.7.2 Test Coverage and Code Coverage  .....................................................................................136  \n2.7.3 Practical Aspects of Unit Testing  .........................................................................................140  \n2.7.4 Integration and Security Testing  ..........................................................................................143  \n2.7.5 Test-driven Implementation  .................................................................................................146  \n2.7.6 Refactoring: Improving the Design of Existing Code  ..............................................................151  \n2.8 Summary and Bibliographical Notes  ........................................................................... 152  \nProblems  ............................................................................................................................ 1 56 \nCHAPTER 3 MODELING AND SYSTEM SPECIFICATION  ................................................................... 170", "source": "Page 8", "chapter": "N/A"}
{"id": "973928714498-2", "text": "CHAPTER 3 MODELING AND SYSTEM SPECIFICATION  ................................................................... 170  \n3.1 What is a System?  .................................................................................................... 171  \n3.1.1 World Phenomena and Their Abstractions  ............................................................................172  \n3.1.2 States and State Variables  ..................................................................................................176  \n3.1.3 Events, Signals, and Messages  ...........................................................................................181", "source": "Page 8", "chapter": "N/A"}
{"id": "71f4554d0262-0", "text": "Software Engineering \uf0b7  Contents vii\n3.1.4 Context Diagrams and Domains  ..........................................................................................183  \n3.1.5 Systems and System Descriptions  .......................................................................................185  \n3.2 Notations for System Specification  ............................................................................. 186  \n3.2.1 Basic Formalisms for Specifications  .....................................................................................186  \n3.2.2 UML State Machine Diagrams  .............................................................................................193  \n3.2.3 UML Object Constraint Language (OCL)  ..............................................................................196  \n3.2.4 TLA+ Notation  ...................................................................................................................201  \n3.3 Problem Frames  ....................................................................................................... 203  \n3.3.1 Problem Frame Notation  .....................................................................................................204  \n3.3.2 Problem Decomposition into Frames  ....................................................................................205  \n3.3.3 Composition of Problem Frames  ..........................................................................................208  \n3.3.4 Models  .............................................................................................................................. 209 \n3.4 Specifying Goals  ....................................................................................................... 210  \n3.5 Summary and Bibliographical Notes  ........................................................................... 211  \nProblems  ............................................................................................................................ 2 12 \nCHAPTER 4 SOFTWARE MEASUREMENT AND ESTIMATION  ............................................................. 217  \n4.1 Fundamentals of Measurement Theory  ....................................................................... 218  \n4.1.1 Measurement Theory  .........................................................................................................219", "source": "Page 9", "chapter": "N/A"}
{"id": "71f4554d0262-1", "text": "4.1.1 Measurement Theory  .........................................................................................................219  \n4.2 What to Measure?  .................................................................................................... 221  \n4.2.1 Use Case Points  ................................................................................................................222  \n4.2.2 Cyclomatic Complexity  .......................................................................................................231  \n4.3 Measuring Module Cohesion  ...................................................................................... 233  \n4.3.1 Internal Cohesion or Syntactic Cohesion  ..............................................................................233  \n4.3.2 Interface-based Cohesion Metrics  ........................................................................................235  \n4.3.3 Cohesion Metrics using Disjoint Sets of Elements  .................................................................236  \n4.3.4 Semantic Cohesion  ............................................................................................................237  \n4.4 Coupling  .................................................................................................................. 237  \n4.5 Psychological Complexity  .......................................................................................... 238  \n4.5.1 Algorithmic Information Content  ...........................................................................................238  \n4.6 Effort Estimation  ....................................................................................................... 240  \n4.6.1 Deriving Project Duration from Use Case Points ....................................................................241  \n4.7 Summary and Bibliographical Notes  ........................................................................... 242  \nProblems  ............................................................................................................................ 2 44 \nCHAPTER 5 DESIGN WITH PATTERNS  ......................................................................................... 246  \n5.1 Indirect Communication: Publisher-Subscriber  ............................................................. 247", "source": "Page 9", "chapter": "N/A"}
{"id": "71f4554d0262-2", "text": "5.1 Indirect Communication: Publisher-Subscriber  ............................................................. 247  \n5.1.1 Applications of Publisher-Subscriber  ....................................................................................254  \n5.1.2 Control Flow  ......................................................................................................................255", "source": "Page 9", "chapter": "N/A"}
{"id": "06869848c425-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n viii\n5.1.3 Pub-Sub Pattern Initialization  ..............................................................................................257  \n5.2 More Patterns  ........................................................................................................... 257  \n5.2.1 Command  .........................................................................................................................258  \n5.2.2 Decorator  ..........................................................................................................................261  \n5.2.3 State  .............................................................................................................................. ...262  \n5.2.4 Proxy  .............................................................................................................................. ..264 \n5.3 Concurrent Programming  .......................................................................................... 271  \n5.3.1 Threads  ............................................................................................................................27 2 \n5.3.2 Exclusive Resource Access\u2014Exclusion Synchronization  .......................................................274  \n5.3.3 Cooperation between Threads\u2014Condition Synchronization  ...................................................276  \n5.3.4 Concurrent Programming Example  ......................................................................................277  \n5.4 Broker and Distributed Computing  .............................................................................. 283  \n5.4.1 Broker Pattern  ...................................................................................................................286  \n5.4.2 Java Remote Method Invocation (RMI)  .................................................................................288  \n5.5 Information Security  .................................................................................................. 295  \n5.5.1 Symmetric and Public-Key Cryptosystems  ............................................................................297  \n5.5.2 Cryptographic Algorithms  ....................................................................................................298  \n5.5.3 Authentication  ....................................................................................................................300", "source": "Page 10", "chapter": "N/A"}
{"id": "06869848c425-1", "text": "5.5.3 Authentication  ....................................................................................................................300  \n5.5.4 Program Security  ...............................................................................................................300  \n5.6 Summary and Bibliographical Notes  ........................................................................... 302  \nProblems  ............................................................................................................................ 3 05 \nCHAPTER 6 XML  AND DATA REPRESENTATION  ........................................................................... 319  \n6.1 Structure of XML Documents  ..................................................................................... 322  \n6.1.1 Syntax  .............................................................................................................................. 322 \n6.1.2 Document Type Definition (DTD)  .........................................................................................328  \n6.1.3 Namespaces  .....................................................................................................................332  \n6.1.4 XML Parsers  .....................................................................................................................334  \n6.2 XML Schemas  .......................................................................................................... 336  \n6.2.1 XML Schema Basics  ..........................................................................................................337  \n6.2.2 Models for Structured Content  .............................................................................................342  \n6.2.3 Datatypes  ..........................................................................................................................345  \n6.2.4 Reuse  .............................................................................................................................. .352 \n6.2.5 RELAX NG Schema Language  ............................................................................................352  \n6.3 Indexing and Linking  ................................................................................................. 353  \n6.3.1 XPointer and Xpath  ............................................................................................................353  \n6.3.2 XLink  .............................................................................................................................. ..354", "source": "Page 10", "chapter": "N/A"}
{"id": "06869848c425-2", "text": "6.3.2 XLink  .............................................................................................................................. ..354 \n6.4 Document Transformation and XSL  ............................................................................ 355  \n6.5 Summary and Bibliographical Notes  ........................................................................... 358", "source": "Page 10", "chapter": "N/A"}
{"id": "0057751d6ef3-0", "text": "Software Engineering \uf0b7  Contents ix\nProblems  ............................................................................................................................ 3 59 \nCHAPTER 7 SOFTWARE COMPONENTS  ....................................................................................... 361  \n7.1 Components, Ports, and Events  ................................................................................. 362  \n7.2 JavaBeans: Interaction with Components  .................................................................... 363  \n7.2.1 Property Access  .................................................................................................................364  \n7.2.2 Event Firing  .......................................................................................................................364  \n7.2.3 Custom Methods  ................................................................................................................365  \n7.3 Computational Reflection  ........................................................................................... 366  \n7.3.1 Run-Time Type Identification  ...............................................................................................367  \n7.3.2 Reification  .........................................................................................................................368  \n7.3.3 Automatic Component Binding  ............................................................................................369  \n7.4 State Persistence for Transport  .................................................................................. 369  \n7.5 A Component Framework  .......................................................................................... 370  \n7.5.1 Port Interconnections  .........................................................................................................370  \n7.5.2 Levels of Abstraction  ..........................................................................................................372  \n7.6 Summary and Bibliographical Notes  ........................................................................... 373  \nProblems  ............................................................................................................................ 3 73 \nCHAPTER 8 WEB SERVICES  ..................................................................................................... 374  \n8.1 Service Oriented Architecture  .................................................................................... 376", "source": "Page 11", "chapter": "N/A"}
{"id": "0057751d6ef3-1", "text": "8.1 Service Oriented Architecture  .................................................................................... 376  \n8.2 SOAP Communication Protocol  .................................................................................. 377  \n8.2.1 The SOAP Message Format  ...............................................................................................378  \n8.2.2 The SOAP Section 5 Encoding Rules  ..................................................................................383  \n8.2.3 SOAP Communication Styles  ..............................................................................................386  \n8.2.4 Binding SOAP to a Transport Protocol  .................................................................................389  \n8.3 WSDL for Web Service Description  ............................................................................ 390  \n8.3.1 The WSDL 2.0 Building Blocks  ............................................................................................391  \n8.3.2 Defining a Web Service\u2019s Abstract Interface  .........................................................................394  \n8.3.3 Binding a Web Service Implementation  ................................................................................396  \n8.3.4 Using WSDL to Generate SOAP Binding  ..............................................................................397  \n8.3.5 Non-functional Descriptions and Beyond WSDL  ....................................................................398  \n8.4 UDDI for Service Discovery and Integration  ................................................................. 399  \n8.5 Developing Web Services with Axis  ............................................................................ 400  \n8.5.1 Server-side Development with Axis  ......................................................................................400  \n8.5.2 Client-side Development with Axis  .......................................................................................406  \n8.6 OMG Reusable Asset Specification  ............................................................................ 407", "source": "Page 11", "chapter": "N/A"}
{"id": "0057751d6ef3-2", "text": "8.6 OMG Reusable Asset Specification  ............................................................................ 407  \n8.7 Summary and Bibliographical Notes  ........................................................................... 408  \nProblems  ............................................................................................................................ 4 09", "source": "Page 11", "chapter": "N/A"}
{"id": "b6bc6e166b69-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n x\nCHAPTER 9 FUTURE TRENDS .................................................................................................... 410  \n9.1 Aspect-Oriented Programming  ................................................................................... 411  \n9.2 OMG MDA  ............................................................................................................... 412  \n9.3 Autonomic Computing  ............................................................................................... 412  \n9.4 Software-as-a-Service (SaaS)  .................................................................................... 413  \n9.5 End User Software Development  ................................................................................ 413  \n9.6 The Business of Software  .......................................................................................... 416  \n9.7 Summary and Bibliographical Notes  ........................................................................... 416  \nAPPENDIX A JAVA PROGRAMMING  ............................................................................................. 417  \nA.1 Introduction to Java Programming  .............................................................................. 417  \nA.2 Bibliographical Notes  ................................................................................................ 417  \nAPPENDIX B NETWORK PROGRAMMING  ...................................................................................... 419  \nB.1 Socket APIs  ............................................................................................................. 419  \nB.2 Example Java Client/Server Application  ...................................................................... 424  \nB.3 Example Client/Server Application in C  ....................................................................... 427  \nB.4 Windows Socket Programming  .................................................................................. 430  \nB.5 Bibliographical Notes  ................................................................................................ 432  \nAPPENDIX C HTTP  OVERVIEW  ................................................................................................... 433  \nC.1 HTTP Messages  ....................................................................................................... 434", "source": "Page 12", "chapter": "N/A"}
{"id": "b6bc6e166b69-1", "text": "C.1 HTTP Messages  ....................................................................................................... 434  \nC.2 HTTP Message Headers  ........................................................................................... 438  \nC.3 HTTPS\u2014Secure HTTP  ............................................................................................. 441  \nC.4 Bibliographical Notes  ................................................................................................ 441  \nAPPENDIX D DATABASE -DRIVEN WEB APPLICATIONS  ................................................................... 442  \nAPPENDIX E DOCUMENT OBJECT MODEL (DOM)  ......................................................................... 443  \nE.1 Core DOM Interfaces  ................................................................................................ 443  \nE.2 Bibliographical Notes  ................................................................................................ 445  \nAPPENDIX F USER INTERFACE PROGRAMMING  ............................................................................. 446  \nF.1 Model/View/Controller Design Pattern  ......................................................................... 446  \nF.2 UI Design Recommendations  ..................................................................................... 446  \nF.3 Bibliographical Notes  ................................................................................................ 447  \nAPPENDIX G EXAMPLE PROJECT : TIC-TAC-TOE GAME .................................................................. 449  \nG.1 Customer Statement of Requirements  ........................................................................ 450  \nG.1.1 Problem Statement  ............................................................................................................450", "source": "Page 12", "chapter": "N/A"}
{"id": "de473047a614-0", "text": "Software Engineering \uf0b7  Contents xi\nG.1.2 Glossary of Terms  ..............................................................................................................451  \nG.2 System Requirements Engineering  ............................................................................. 452  \nG.2.1 Enumerated Functional Requirements  .................................................................................452  \nG.2.2 Enumerated Nonfunctional Requirements  .............................................................................457  \nG.2.3 On-Screen Appearance Requirements  .................................................................................457  \nG.2.4 Acceptance Tests  ..............................................................................................................457  \nG.3 Functional Requirements Specification  ....................................................................... 461  \nG.3.1 Stakeholders  .....................................................................................................................461  \nG.3.2 Actors and Goals  ...............................................................................................................461  \nG.3.3 Use Cases Casual Description  ............................................................................................461  \nG.3.4 Use Cases Fully-Dressed Description  ..................................................................................464  \nG.3.5 Acceptance Tests for Use Cases  .........................................................................................470  \nG.3.6 System Sequence Diagrams  ...............................................................................................473  \nG.4 User Interface Specification  ....................................................................................... 477  \nG.4.1 Preliminary UI Design  .........................................................................................................477  \nG.4.2 User Effort Estimation  .........................................................................................................478  \nG.5 Domain Analysis  ....................................................................................................... 479  \nG.5.1 Domain Model  ...................................................................................................................479", "source": "Page 13", "chapter": "N/A"}
{"id": "de473047a614-1", "text": "G.5.1 Domain Model  ...................................................................................................................479  \nG.5.2 System Operation Contracts  ...............................................................................................486  \nG.5.3 Mathematical Model  ...........................................................................................................486  \nG.6 Design of Interaction Diagrams  .................................................................................. 488  \nG.6.1 First Iteration of Design Sequence Diagrams  ........................................................................488  \nG.6.2 Evaluating and Improving the Design  ...................................................................................493  \nG.7 Class Diagram and Interface Specification  .................................................................. 498  \nG.8 Unit Tests and Coverage  ........................................................................................... 499  \nG.8.1 Deriving the Object States  ..................................................................................................499  \nG.8.2 Events and State Transitions  ...............................................................................................505  \nG.8.3 Unit Tests for States  ...........................................................................................................506  \nG.8.4 Unit Tests for Valid Transitions  ............................................................................................510  \nG.9 Refactoring to Design Patterns  ................................................................................... 511  \nG.9.1 Roadmap for Applying Design Patterns  ................................................................................511  \nG.9.2 Remote Proxy Design Pattern  .............................................................................................511  \nG.9.3 Publish-Subscribe Design Pattern  ........................................................................................513  \nG.9.4 Command Design Pattern  ...................................................................................................513  \nG.9.5 Decorator Design Pattern ....................................................................................................513", "source": "Page 13", "chapter": "N/A"}
{"id": "de473047a614-2", "text": "G.9.5 Decorator Design Pattern ....................................................................................................513  \nG.9.6 State Design Pattern  ..........................................................................................................514  \nG.9.7 Model-View-Controller (MVC) Design Pattern  .......................................................................520  \nG.10 Concurrency and Multithreading  ................................................................................. 521", "source": "Page 13", "chapter": "N/A"}
{"id": "434ef2c09c70-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n xii\nAPPENDIX H SOLUTIONS TO SELECTED PROBLEMS  ....................................................................... 523  \nREFERENCES   ........................................................................................................................... 5 96 \nACRONYMS AND ABBREVIATIONS  ....................................................................................................... 606  \nINDEX  ........................................................................................................................... 6 08", "source": "Page 14", "chapter": "N/A"}
{"id": "c223158c87e5-0", "text": "1 Contents \n1.1 What is Software Engineering? \n1.1.1   \n1.1.2 Why Software Engineering Is Difficult (1) 1.1.3 Book Organization \n1.2 Software Engineering Lifecycle \n1.2.1 Symbol Language  1.2.2 Requirements Analysis and System \nSpecification  \n1.2.3 Object-Oriented Analysis and the Domain \nModel  \n1.2.4 Object-Oriented Design \n1.2.5 Project Effort Estimation and Product \nQuality Measurement \n1.3 Case Studies \n1.3.1 Case Study 1: From Home Access Control \nto Adaptive Homes \n1.3.2 Case Study 2: Personal Investment   \n1.4 The Object Model \n1.4.1 Controlling Access to Object Elements  \n1.4.3 Reuse and Extension by  Inheritance \nand Composition   \n1.4.2 Object Responsibilities \n1.4.4 x \n1.5 Student Team Projects \n1.5.1 Stock Market Investment Fantasy League 1.5.2 Web-based Stock Forecasters  \n1.5.3 Remarks about the Projects  \n1.6 Summary and Bibliographical Notes  \nChapter 1  \nIntroduction", "source": "Page 15", "chapter": "1"}
{"id": "c223158c87e5-1", "text": "Chapter 1  \nIntroduction \n \n \n\u201cThere is nothing new under the sun but there are lots of old \nthings we don\u2019t know.\u201d \n\u2014Ambrose Bierce, The Devil\u2019s Dictionary  \nSoftware engineering is a discipline for solving business \nproblems by designing and developing software-based systems. As with any engineering activity, a software engineer \nstarts with problem definition  and applies tools of the trade to \nobtain a problem solution . However, unlike any other \nengineering, software engin eering seems to require great \nemphasis on methodology  or method  for managing the \ndevelopment process, in addition to great skill with tools and \ntechniques. Experts justify this with the peculiar nature of the \nproblems solved by software engineering. These \u201cwicked \nproblems\u201d can be properly defined only after being solved. \nThis chapter first discusses what software engineering is about \nand why it is difficult. Then we give a brief preview of \nsoftware development. Next, cases studies are introduced that \nwill be used throughout the book to illustrate the theoretical \nconcepts and tools. Software object model forms the \nfoundation for concepts and tec hniques of modern software \nengineering. Finally, the chapter ends by discussing hands-on \nprojects designed for student teams.", "source": "Page 15", "chapter": "1"}
{"id": "2d7d47440497-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 2\n1.1 What is Software Engineering? \n \n\u201cTo the optimist, the glass is half full. To the pessimis t, the glass is half empty.  To the engineer, the glass \nis twice as big as it needs to be.\u201d \u2014Anonymous \n\u201cComputer science is no more about computers than astronomy is about telescopes.\u201d \u2014Edsger W. Dijkstra \nThe purpose of software engineering is to deve lop software-based systems that let customers \nachieve business goals. The customer may be a hospital manager who needs patient-record \nsoftware to be used by secretaries in doctors \u2019 offices; or, a manufacturing manager who needs \nsoftware to coordinate multiple parallel production activities that feed  into a final assembly stage. \nSoftware engineer must understand the customer \u2019s business needs and design software to help \nmeet them. This task requires \n\uf0b7 The ability to quickly learn new and diverse disciplines and business processes \n\uf0b7 The ability to communicate with domain experts, extract an abstract model of the \nproblem from a stream of information pr ovided in discipline-specific jargon, and \nformulate a solution that makes sense in  the context of customer\u2019s business \n\uf0b7 The ability to design a software system th at will realize the proposed solution and", "source": "Page 16", "chapter": "1"}
{"id": "2d7d47440497-1", "text": "\uf0b7 The ability to design a software system th at will realize the proposed solution and \ngracefully evolve with the evolving busin ess needs for many years in the future. \nSoftware engineering is often confused with pr ogramming. Software engineering is the creative \nactivity of understanding the business problem , coming up with an idea for solution, and \ndesigning the \u201cblueprints\u201d of the solution. Programming is the craft of implementing the given blueprints (Figure 1-1). Software engineer\u2019s focus is on understanding  the interaction between \nthe system-to-be and its users and the environment, and designing  the software-to-be based on \nthis understanding. Unlike this, programmer\u2019s focus is on the program code and ensuring that the \ncode faithfully implements the given design. This is not a one-way process, because sometimes", "source": "Page 16", "chapter": "1"}
{"id": "2a9ecc32dd6e-0", "text": "Chapter 1 \uf0b7 Introduction 3\nthe designs provided by the \u201cartist\u201d (software engineer) cannot be \u201ccarved\u201d in \u201cmarble\u201d \n(programming infrastructure) as given, and the \u201ccr aftsman\u201d (programmer) needs to work closely \nwith the designer to find a workab le solution. In an ideal world, both activities would be done by \nthe same person to ensure the best result; in r eality, given their differe nt nature and demands, \nsoftware engineering and programming are often done by different people. \nSome people say software engineering is about writing loads of documentation. Other people say \nsoftware engineering is about writing a running co de. It is neither one. Software engineering is \nabout understanding business problems, inventing so lutions, evaluating alternatives, and making \ndesign tradeoffs and choices. It is helpful to doc ument the process (not only the final solution) to \nknow what alternatives were considered and wh y particular choices were made. But software \nengineering is not about writing documentation. So ftware engineering is about delivering value \nfor the customer, and both code and documentation are valuable. \n Customer:\nRequires a computer system to achieve some business goals\nby user interaction or interaction with the environment\nin a specified manner\nSystem-to-be\nSoftware-to-beSystem-to-be\nSoftware-to-beUser\nSoftware Engineer\u2019s task:", "source": "Page 17", "chapter": "1"}
{"id": "2a9ecc32dd6e-1", "text": "Software-to-beSystem-to-be\nSoftware-to-beUser\nSoftware Engineer\u2019s task:\nTo understand how the system-to-be needs to interact with\nthe user or the environment so that customer\u2019s requirement is met\nand design the software-to-be\nProgrammer\u2019s task:\nTo implement the software-to-be\ndesigned by the software engineerEnvironment\nMay be the\nsame person\nFigure 1-1: The role for software engineering.", "source": "Page 17", "chapter": "1"}
{"id": "f5f4b3094031-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 4\nI hope to convey in this text that software is many  parts, each of which individually may be easy, \nbut the problem is that there are too may of them. It is not the difficulty of individual \ncomponents; it is the multitude that overwhelms you\u2014you simply lose track  of bits and pieces. \nLet me illustrate this point on a simple example.  Suppose one wants to construct a fence around a \nhouse. The construction involves four tasks: setting posts, cutting wood, painting, and nailing \n(Figure 1-2). Setting posts must precede painti ng and nailing, and cutting must precede nailing. \nSuppose that setting posts takes 3 units of time, cu tting wood takes 2 units of time, painting takes \n5 units of time for uncut wood and 4 units of time  otherwise, and nailing takes 2 units of time for \nunpainted wood and 3 units of time otherwise. In wh at order should these tasks be carried out to \ncomplete the project in the shortest possible time? \nIt is difficult to come up with a correct solution (or, solutions) without writing down possible \noptions and considering them one by one. It is hard to say why this problem is complicated,", "source": "Page 18", "chapter": "1"}
{"id": "f5f4b3094031-1", "text": "because no individual step seems to be difficu lt. After all, the most complicated operation \ninvolves adding small integer numbers. Software engineering is full of problems like this: all \nindividual steps are easy, yet the ove rall problem may be overwhelming. \nMistakes may occur both in understanding the problem or implementing the solution. The \nproblem is, for discrete logic, closeness to bein g correct is not acceptable; one flipped bit can \nchange the entire sense of a program. Software de velopers have not yet found adequate methods \nto handle such complexity, and this text is mos tly dedicated to present the current state of the \nknowledge of handling the complex ity of software development. Setting posts Cutting wood Painting Nailing\nFigure 1-2: Illustration of complexity on the problem of scheduling construction tasks.", "source": "Page 18", "chapter": "1"}
{"id": "8187c1856945-0", "text": "Chapter 1 \uf0b7 Introduction 5\nSoftware engineering relies on our ability to think about space and time, processes, and \ninteractions between processes and structures. C onsider an example of designing a software \nsystem to operate an automatic banking mach ine, known as Automatic Teller Machine (ATM) \n(Figure 1-3). Most of us do not know what is actually going on inside an ATM box; nonetheless, \nwe could offer a na\u00efve explanation of how ATM machines work. We know that an ATM machine \nallows us to deposit or withdr aw money, and we can imagine how to split these activities into \nsimpler activities to be performed by imaginary little \u201cagents\u201d working inside the machine. Figure \n1-4 illustrates how one might imagine what should be inside an ATM to make it behave as it \ndoes. We will call the entities inside the system  \u201cconcepts\u201d because they are imaginary. As seen, \nthere are two types of concepts: \u201cworkers\u201d and \u201cthings.\u201d \nWe know that an ATM machine plays the role of  a bank window clerk (teller). The reader may \nwonder why we should imagine many virtual agents doing a single teller\u2019s job. Why not simply \nimagine a single virtual agent doing the teller\u2019s job? ! The reason that this would not help much is", "source": "Page 19", "chapter": "1"}
{"id": "8187c1856945-1", "text": "because all we would accomplish is to transform one complicated and inscrutable object (an \nATM machine) into another complicated and inscr utable object (a virtual teller). To understand a \ncomplex thing, one needs to develop ideas a bout relationships among the parts inside. By \ndividing a complicated job into simpler tasks a nd describing how they interact, we simplify the \nproblem and make it easier to understand and solv e. This is why imagination is critical for \nsoftware engineering (as it is for any other problem-solving activity!). \nOf course, it is not enough to uncover the static structure of the system-to-be, as is done in Figure \n1-4. We also need to describe how the system el ements (\u201cworkers\u201d and \u201cthings\u201d) interact during \nthe task accomplishment. Figure 1-5 illustrates the wo rking principle (or operational principle) of \nthe ATM model from Figure 1-4 by a set of step-by-step interactions. \n \n  \n \n Bank\u2019s\nremote\ndatacenter\nBank\ncustomerATM machine123456789012345678901234567890Communication link\n \nFigure 1-3: Example: developing software for an Automatic Teller Machine (ATM).", "source": "Page 19", "chapter": "1"}
{"id": "217516dd3c6f-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 6\n \nP Window clerkBookkeeper\nSafe keeper\nDatacenter\nliaison\nDispenserSafeCashTransaction\nrecord\nPhoneSpeakerphone\nBank\u2019s\nremote\ndatacenterDomain Model\nHow may I \nhelp you?\nCustomer\nFigure 1-4: Imagined static structure of ATM shows internal components and their roles. \nB\nVerify \nthis \naccountB\nVerify \nthis \naccountCVerify \naccount \nXYZ\nXYZ valid. \nBalance: \n$100CVerify \naccount \nXYZ\nXYZ valid. \nBalance: \n$100D\nAccount \nvalid. \nBalance: \n$100D\nAccount \nvalid. \nBalance: \n$100\nG Record \n$60 lessG Record \n$60 lessA Enter \nyour PIN\nTyping in \nPIN number \n\u2026A Enter \nyour PIN\nTyping in \nPIN number \n\u2026\nE How may \nI help \nyou?\nWithdraw \n$60E How may \nI help \nyou?\nWithdraw \n$60F Release \n$60\nDispense\n$60F Release \n$60\nDispense\n$60H\nPlease take \nyour cashDispensing!H\nPlease take", "source": "Page 20", "chapter": "1"}
{"id": "217516dd3c6f-1", "text": "$60H\nPlease take \nyour cashDispensing!H\nPlease take \nyour cashDispensing!\nFigure 1-5: Dynamic interactions of the im agined components during task accomplishment.", "source": "Page 20", "chapter": "1"}
{"id": "3295a3318db0-0", "text": "Chapter 1 \uf0b7 Introduction 7\nrogramming language, like any other formal la nguage, is a set of symbols and rules for \nmanipulating them. It is when they need to meet  the real world that you discover that associations \ncan be made in different ways and some rules were not specified. A novice all too often sees only \nbenefits of building a software  product and ignores and risks. An  expert sees a broader picture \nand anticipates the risks. After all, dividing the problem in subproblems and conquering them \npiecewise does not guarantee logical rigor and strict consistency between the pieces. Risks \ntypically include conditions such as, the program can do what is expected of it and then some \nmore, unexpected capabilities (that may be exploite d by bad-intentioned people). Another risk is \nthat not all environment states are catalogued before commencing the program development. \nDepending on how you frame your assumptions, you can come up with a solution. The troubles arise if the assumptions happen to be inaccurate, wrong, or get altered due to the changing world. \n1.1.1 Why Software Engineering Is Difficult (1) \n\u201cSoftware is like entropy. It is difficult to grasp, weighs nothing, and obeys the second law of \nthermodynamics; i.e., it always increases.\u201d \u2014Norman R. Augustine", "source": "Page 21", "chapter": "1"}
{"id": "3295a3318db0-1", "text": "thermodynamics; i.e., it always increases.\u201d \u2014Norman R. Augustine \nIf you are a civil engineer building bridges then all you need to know is about bridges. Unlike \nthis, if you are developing software you need to know about software domain  (because that is \nwhat you are building) and you need to know about the problem domain  (because that is what \nyou are building a solution for). Some problems require extensive periods of dedicated research \n(years, decades, or even longer). Obviously, we cannot consider such problem research as part of \nsoftware engineering. We will assume that a theore tical solution either exists, or it can be found \nin a relatively short time by an informed non-expert. \nA further problem is that software is a formal  domain, where the inputs a nd goal states are well \ndefined. Unlike software, the real world is informal  with ill-defined inputs and goal states. \nSolving problems in these different domains de mands different styles and there is a need to \neventually reconcile these styles.  A narrow interpretation of software engineering  deals only with \nengineering the software itself. This means, gi ven a precise statement of what needs to be \nprogrammed, narrow-scope software engineering is  concerned with the design, implementation,", "source": "Page 21", "chapter": "1"}
{"id": "3295a3318db0-2", "text": "programmed, narrow-scope software engineering is  concerned with the design, implementation, \nand testing of a program that represents a soluti on to the stated problem.  A broader interpretation \nof software engineering includes discovering a solution for a real-world problem. The real-world problem may have nothing to do with software. For example, the real-world problem may be a \nmedical problem of patient monitoring, or a fina ncial problem of devising trading strategies. In \nbroad-scope software engineering there is no preci se statement of what needs to be programmed. \nOur task amounts to none less than engineer ing of change in a current business practice. \nSoftware engineering is mainly about modeling the physical world and finding good abstractions. \nIf you find a representative set of abstractions, th e development flows naturally. However, finding \nabstractions in a problem domain (also known as \u201capplication domain\u201d) involves certain level of \n\u201ccoarse graining.\u201d This means that our abstractions are unavoidably just approximations \u2014we \ncannot describe the problem domain in perfect detail: after all that would require working at the level of atomic or even subatomic particles. Given that every physical system has very many \nparts, the best we can do is to describe it in te rms of only some of its variables. Working with", "source": "Page 21", "chapter": "1"}
{"id": "3295a3318db0-3", "text": "approximations is not necessarily a problem by itself should the world structure be never changing. But, we live in a changing world: thi ngs wear out and break, organizations go bankrupt \nor get acquired or restructured, business practices  change, government regul ations change, fads", "source": "Page 21", "chapter": "1"}
{"id": "983c2a0c6ae5-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 8\nand fashions change, and so on. On a fundamental  level, one could argue that the second law of \nthermodynamics works against software engineers (o r anyone else trying to build models of the \nworld), as well. The second law of thermodynami cs states that the universe tends towards \nincreasing disorder. Whatever order was captured in those comparatively few variables that we \nstarted with, tends to get dispersed, as time go es on, into other variables where it is no longer \ncounted as order. Our (approximate) abstractions  necessarily become invalid with passing time \nand we need to start afresh. This requires time  and resources which we may not have available. \nWe will continue discussion of software developm ent difficulties in Secti ons 2.4.5 a nd 2.6.3. \nSoftware development still largel y depends on heroic effort of select few developers. Product line \nand development standardization are still largely mi ssing, but there are efforts in this direction. \nTools and metrics for product development and pr oject management are the key and will be given \nconsiderable attention in this text. \n1.1.2 Book Organization \nChapter 2 offers a quick tour of software engin eering that is based on software objects, known as", "source": "Page 22", "chapter": "1"}
{"id": "983c2a0c6ae5-1", "text": "Object-Oriented Software Engineering (OOSE). The main focus is on tools, not methodology, for solving software engineering problems. Ch apter 3 elaborates on techniques for problem \nunderstanding and specification. Chapter 4 describes  metrics for measuring the software process \nand product quality. Chapter 5 elaborates on techni ques for problem solution, but unlike Chapter \n2 it focuses on advanced tools for software de sign. Chapter 6 describes structured data \nrepresentation using XML. Chapter 7 presents so ftware components as building blocks for \ncomplex software. Chapter 8 introduces service-oriented architectures and Web services. \nI adopt an incremental and iterative refinement approach to presenting the material. For every \nnew topic, we will scratch the surface and move on, only to revisit later and dig deeper. \nThe hope with metaphors and analogies is that th ey will evoke understanding much faster and \nallow \u201ccheap\u201d broadening it, based on the existing knowledge. \n \n1.2 Software Engineering Lifecycle \n \nThe Feynman Problem-Solv ing Algorithm:     \n(i) Write down the problem (ii) think very  hard, and (iii) write down the answer. \nAny product development can be expected to pr oceed as an organized process that usually \nincludes the following phases: \n\uf0b7 Planning / Specification \n\uf0b7 Design \n\uf0b7 Implementation", "source": "Page 22", "chapter": "1"}
{"id": "983c2a0c6ae5-2", "text": "\uf0b7 Planning / Specification \n\uf0b7 Design \n\uf0b7 Implementation \n\uf0b7 Evaluation", "source": "Page 22", "chapter": "1"}
{"id": "f380d22f2228-0", "text": "Chapter 1 \uf0b7 Introduction 9\nSo is with software development. The co mmon software development phases are as follows: \n1. Requirements Specification \n- Understanding the usage scenarios and deriving the static  domain model \n2. Design \n- Assigning responsibilities to objects and specifying detailed dynamics  of their \ninteractions under different usage scenarios \n3. Implementation \n- Encoding the design in a programming language \n4. Testing \n- Individual classes/components (unit testi ng) and the entire system (integration \ntesting) \n5. Operation and Maintenance \n- Running the system; Fixing bugs and adding new features \nThe lifecycle usually comprises many other activities, some of which precede the above ones, \nsuch as marketing survey to de termine the market need for the planned product. This text is \nrestricted to engineering activities, usually  undertaken by the software developer. \nThe early inspiration for software lifecycle cam e from other engineering disciplines, where the \nabove activities usually proceed in a sequential manner (or at least it was thought so). This \nmethod is known as Waterfall Process  because developers build monolithic systems in one fell \nswoop (Figure 1-6). It requires completing the artifacts of the current phase before proceeding to \nthe subsequent one. In civil engineering, this a pproach would translate to: finish all blueprints", "source": "Page 23", "chapter": "1"}
{"id": "f380d22f2228-1", "text": "neatly before starting construction; finish the construction before testing it for soundness; etc. \nThere is also psychological attraction of the waterf all model: it is a linear process that leads to a \nconclusion by following a defined sequence of steps.  However, over the year s developers realized \nthat software development is unlike any other product development in these aspects: Deployment &\nMaintenanceRequirements\nDesign\nImplementation\nTestingWaterfall\nmethod\n \nFigure 1-6: Waterfall process for software development.", "source": "Page 23", "chapter": "1"}
{"id": "321e27801a34-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 10\n\uf0b7 Unlike most other products, software is intangible  and hard to visualize. Most people \nexperience software through what it does: what inputs it takes and what it generates as \noutputs \n\uf0b7 Software is probably the most complex  artifact\u2014a large software  product consists of so \nmany bits and pieces as well as their relationships, every single one having an important \nrole\u2014one flipped bit can change the entire sense of a program \n\uf0b7 Software is probably the most flexible  artifact\u2014it can be easily and radically modified at \nany stage of the development process, so it can quickly respond to changes in customer \nrequirements (or, at least it is so perceived) \nTherefore, software development process that follows a linear order of understanding the \nproblem, designing a solution, implementing and deploying the solution, does not produce best \nresults. It is easier to understand a complex problem by implementing and evaluating pilot \nsolutions. These insights led to adopting incremental and iterative  (or, evolutionary ) development \nmethods, which are characterized by: \n1. Break the big problem down into smaller pieces  (increments) and prioritize  them. \n2. In each iteration progress through  the development in more depth. \n3. Seek the customer feedback  and change course based on improved understanding.", "source": "Page 24", "chapter": "1"}
{"id": "321e27801a34-1", "text": "3. Seek the customer feedback  and change course based on improved understanding. \nIncremental and iterative process seeks to get to a working instance1 as soon as possible. Having \na working instance available lets the interested pa rties to have something tangible, to play with, \nmake inquiries and receive feedback. Through this  experimentation (prefe rably by end users), \nunsuspected deficiencies are discovered that driv e a new round of development using failures and \nthe knowledge of things that would not work as a springboard to new approaches. This greatly \nfacilitates the consensus reaching and building the understanding of all parties of what needs to \nbe developed and what to expect upon the comple tion. So, the key of incremental and iterative \nmethods is to progressively deepen the understanding  or \u201cvisualization\u201d of the target product, by \nboth advancing and retracting to earlier activities to rediscover more of its features. A popular \nincremental and iterative process is called Unified Process  [Jacobson et al., 1999]. Methods that \nare even more aggressive in terms of short iterations and heavy customer involvement are \ncharacterized as Agile . The customer is continuously asked to prioritize the remaining work items \nand provide feedback about the de livered increments of software. \nAll lifecycle processes have a goal of incremental refinement of the product design, but different", "source": "Page 24", "chapter": "1"}
{"id": "321e27801a34-2", "text": "All lifecycle processes have a goal of incremental refinement of the product design, but different \npeople hold different beliefs on how th is is to be achieved. This has been true in the past and it \ncontinues to be true, and I will occasionally co mment on different approaches. Personally, I \nenthusiastically subscribe to the incremental and iterative approach, and in that spirit the \nexposition in this text progresses in an increm ental and iterative manner, by successively \nelaborating the software lifecycle phases. For ev ery new topic, we will scratch the surface and \nmove on, only to revisit later and dig deeper. \nA quick review of existing software engineering textbooks reveals that software engineering is \nlargely about management. Project management requires organizational and managerial skills \n                                                      \n1 This is not necessarily a prototyp e, because \u201cprototype\u201d creates impr ession of something to be thrown \naway after initial experimentation. Conversely, a \u201cwor king instance\u201d can evolve into the actual product.", "source": "Page 24", "chapter": "1"}
{"id": "8f41dbe15a09-0", "text": "Chapter 1 \uf0b7 Introduction 11\nsuch as identifying and organizing the many task s comprising a project, allocating resources to \ncomplete those tasks, and tracking actual agai nst expected/anticipated resource utilization. \nSuccessful software projects convey a blend of caref ul objective evaluation, adequate preparation, \ncontinuous observation and assessment of the envi ronment and progress, a nd adjusting tactics. \nIt is interesting to compare th e issues considered by Brooks [1975] and compare those of the \nrecent agile methods movement\u2014both put emphasis on communication  of the development team \nmembers. My important goal here is, therefore, to present the tools that facilitate communication \namong the developers. The key such tools are: \n\uf0b7 Modular design : Breaking up the system in modules helps to cope with complexity; we \nhave already seen how the ATM system was made manageable by identifying smaller \ntasks and associated \u201cmodules\u201d (Figure 1-4). Modules provide building blocks or \n\u201cwords\u201d of a language when describing complex solutions. \n\uf0b7 Symbol language : The Unified Modeling Language (UML ) is used similar to how the \nsymbols such as \uf0a5, \uf0f2, \uf0b6, and \uf0c7, are used in mathematics. They abbreviate the exposition \nof the material and facilitate the r eader\u2019s understanding of the material.", "source": "Page 25", "chapter": "1"}
{"id": "8f41dbe15a09-1", "text": "of the material and facilitate the r eader\u2019s understanding of the material. \n\uf0b7 Project and product metrics : Metrics for planning and measuring project progress, and \nmetrics for measuring the quality of software  products provide commonly agreeable tools \nfor tracking the work quality and progress towards the completion. \n\uf0b7 Design heuristics : Also known as patterns , they create a design language for naming and \ndescribing the best practices that were proven in many contexts and projects. \nDecomposing a problem into simpler ones, so  called divide-and-conquer approach, is common \nwhen dealing with complex problems. In software development it is embodied in modularity : The \nsource code for a module can be written and main tained independently of the source code for \nother modules. As with any activity, the value of a structured approach to  software development \nbecomes apparent only when complex problems are tackled. \n1.2.1 Symbol Language \n\u201cWithout images we can neither think nor und erstand anything.\u201d \u2014Martin Luther (1483-1546) \n\u201cThere are only 10 types of people in this world. Those who know binary, and those who don\u2019t.\u201d  \n\u2014Unknown \nAs part of a design process, it is essential to co mmunicate your ideas. When describing a process", "source": "Page 25", "chapter": "1"}
{"id": "8f41dbe15a09-2", "text": "of accomplishing a certain goal, person actually thi nks in terms of the abbreviations and symbols \nas they describe the \u201cdetails\u201d of what she is doing,  and could not proceed intelligently if she were \nnot to do so. George Miller found in the 1950s that human short-term memory can store about \nseven items at a time [Miller, 1957]. The short-term  memory is what we use, for instance, to \nremember a telephone number just long enough to look away from the paper on which it is \nwritten to dial the number. It is also known as working memory  because in it information is \nassumed to be processed when first perceived. It has been likened to  the RAM (random access \nmemory) of a computer. Recall how many times you had to look back in the middle of dialing, \nparticularly if you are not familiar with the area code, which makes the number a difficult 10 \ndigits! It turns out that the Miller\u2019s hypothesis is valid for any seven \u201citems,\u201d which could be \nanything, such as numbers, faces, people, or communities\u2014as we organize information on higher", "source": "Page 25", "chapter": "1"}
{"id": "f54ae6b110fc-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 12\nlevels of abstraction, we can still remember seven  of whatever it is. This item-level thinking is \ncalled chunking . Symbols can be easier chunked into patterns, which are represented by new \nsymbols. Using symbols and hierarchical abstr action makes it easier for people to think about \ncomplex systems. \nDiagrams and symbols are indispensible to the so ftware engineer. Program code is not the best \nway to document a software system, although some  agile methodologists have claimed that it is \n(more discussion in Section 2.1.1). Code is pr ecise, but it is also riddled with details and \nidiosyncrasies of the programming language. Because  it is essentially text, is not well-suited for \nchunking and abstraction. The visual layout of code can be used to help the reader with chunking \nand abstraction, but it is highly subjec tive with few widely accepted conventions. \nOur primary symbol language is UML, but it is not strictly adhered to throughout the text. I will \nuse other notations or an ad-hoc designed one if  I feel that it conveys the message in a more \nelegant way. I would prefer to use storyboard s and comic-strip sequences to represent that", "source": "Page 26", "chapter": "1"}
{"id": "f54ae6b110fc-1", "text": "elegant way. I would prefer to use storyboard s and comic-strip sequences to represent that \nproblem and solution in a comprehensible manner.  On the other hand, they are time-consuming \nand often ambiguous, so we will settle for the dull but standardized graphics of the UML. \nExample UML symbols are shown in Figure 1-7. To  become familiar with UML, you can start at \nhttp://www.uml.org , which is the official standard\u2019s webs ite. People usually use different symbols \nfor different purposes and at different stages of  progression. During development there are many \nways to think about your design, and many ways to informally describe it. Any design model or \nmodeling language has limits to what it can expr ess and no one view of a design tells all. For \nexample, strict adherence to a standard may be cumbersome for the initial sketches; contrariwise, \ndocumenting the completed design is always recommended in UML simply because so many \npeople are already familiar with UML. \u00abinterface\u00bb\nBaseInterface\n+  operation()\nActorClassName\n#  attribute_1 : int\n#  attribute_2 : boolean#  attribute_3 : String\n+  operation_1() : void\n+  operation_2() : String\n+  operation_3(arg1 : int)\nSoftware ClassThree commoncompartments:", "source": "Page 26", "chapter": "1"}
{"id": "f54ae6b110fc-2", "text": "+  operation_3(arg1 : int)\nSoftware ClassThree commoncompartments:\n1. Classifier name\n2. Attributes\n3. Operations\nCommentClass1Implement\n+  operation()Class2Implement+  operation()\nSoftware Interface Implementation\nInteraction DiagramdoSomething()instance1 : Class1 instance5 : Class2 instance8 : Class3\ndoSomethingElse()\ndoSomethingYetElse()Inheritance\nrelationship:\nBaseInterfaceis implemented\nby two classesStereotype    \n\u00ab\uf0d7\uf0d7\uf0d7\u00bbp r o v i d e s  \nadditional info/ \nannotation/ \nexplanation\nFigure 1-7: Example UML symbols for software concepts.", "source": "Page 26", "chapter": "1"}
{"id": "5edcd0dad77c-0", "text": "Chapter 1 \uf0b7 Introduction 13\nAs can be observed throughout this  text, the graphic notation is of ten trivial and can be mastered \nrelatively quickly. The key is in the skills in cr eating various models\u2014it can take considerable \namount of time to gain this expertise. \n1.2.2 Requirements Analysis and System Specification \nWe start with the customer statement of work  (also known as customer statement of \nrequirements ), if the project is sponsored by a specific customer, or the vision statement , if the \nproject does not have a sponsor. The statement of  work describes what the envisioned system-to-\nbe is about, followed by a list of features /services  it will provide or tasks/activities it will support. \nGiven the statement of work, the first step in the software development process is called \nrequirements analysis  or systems analysis . During this activity the developer attempts to \nunderstand the problem and delimit its scope. Th e result is an elaborated statement of Bank\u2019s remote\ndatacenterSystem\n(ATM machine)Bank customer123456789 0123456789 0\nBank\u2019s remote\ndatacenterSystem\n(ATM machine)Bank customer\nWindow clerk Bookkeeper Safe keeperDatacenter\nliaisonDispenser\nSafe CashTransaction\nrecordTelephone Speakerphone(a)\n(b)", "source": "Page 27", "chapter": "1"}
{"id": "5edcd0dad77c-1", "text": "Safe CashTransaction\nrecordTelephone Speakerphone(a)\n(b)\n \nFigure 1-8: Gallery of actors (a) and concepts (b) of the system under discussion. The actors\nare relatively easy to id entify because they are external  to the system and visible; conversely,\nthe concepts are hard to identify because they are internal  to the system, hence\ninvisible/imaginary.", "source": "Page 27", "chapter": "1"}
{"id": "7badf44840ec-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 14\nrequirements. The goal is to produce the system  specification\u2014the document that is an exact \ndescription of what the planned system-to-be is to do. Requirements analysis delimits the system \nand specifies the services it offers, identifies the ty pes of users that will interact with the system, \nand identifies other systems that interact with our s. For example, the software engineer might ask \nthe customer to clarify if the ATM machine (Fig ure 1-3) will support banking for customers of \nother banks or only the bank that owns the ATM m achine. The system is at first considered a \nblack box, its services (\u201cpush buttons\u201d) are id entified, and typical interaction scenarios are \ndetailed for each service. Requirement analysis includes both fact-finding  of how the problem is \nsolved in the current practice as well as envisioning  how the planned system might work. \nRecall the ATM example from Figure 1-3. We identified the relevant players in Figure 1-4. \nHowever, this may be too great a leap for a comp lex system. A more gradual approach is to start \nconsidering how the system-to-be will interact with  the external players and defer the analysis of \nwhat happens inside the system until a later time. Figure 1-8(a) shows the players external to the", "source": "Page 28", "chapter": "1"}
{"id": "7badf44840ec-1", "text": "system (called \u201cactors\u201d). If the ATM machine w ill support banking for customers of other banks, \nthen we will need to identify additional actors. \nA popular technique for requirements analysis is use case modeling . A set of use cases describes \nthe elemental tasks a system is to perform and the relation between these tasks and the outside world. Each use case description represents a dialog between the user and the system, with the \naim of helping the user achieve a business goal. In each dialog, the user initiates actions  and the \nsystem responds with reactions . The use cases specify what information must pass the boundary \nof the system  in the course of a dialog (without considering what happens inside  the system). \nBecause use cases represent recipes for user achieving goals , each use-case name must include a BVerify \naccount \nXYZ\nXYZ valid. \nBalance: \n$100BVerify \naccount \nXYZ\nXYZ valid. \nBalance: \n$10012345678901234567890CHow may \nI help \nyou?\nWithdraw \n$6012345678901234567890CHow may \nI help \nyou?\nWithdraw \n$6012345678901234567890AEnter \nyour PIN\nTyping in \nPIN number \n\u202612345678901234567890AEnter \nyour PIN\nTyping in", "source": "Page 28", "chapter": "1"}
{"id": "7badf44840ec-2", "text": "\u202612345678901234567890AEnter \nyour PIN\nTyping in \nPIN number \n\u2026\nD\n12345678901234567890Please take \nyour cash\nCollecting \ncash \u2026D\n12345678901234567890Please take \nyour cash\nCollecting \ncash \u2026E XYZ \nwithdrew \n$60\nAcknowledgedE XYZ \nwithdrew \n$60\nAcknowledged\n \nFigure 1-9: Scenario for use case \u201cWithdraw Cash.\u201d Unlike Figure 1-5, this figure only\nshows interactions of the actors and the system.", "source": "Page 28", "chapter": "1"}
{"id": "99eeee3a5a64-0", "text": "Chapter 1 \uf0b7 Introduction 15\nverb capturing the goal achievement. Given the ATM machine example (Figure 1-3), Figure 1-9 \nillustrates the flow of events for the use case \u201cWithdraw Cash.\u201d \nUse cases are only a beginning of software engin eering process. When we elaborate use cases of \na system, it signifies that we know what  the system needs to accomplish, not how; therefore, it is \nnot just \u201ca small matter of system building \u201d (programming) that is left after we specify the use \ncases. Requirements analysis is de tailed in Sections 2.2 and 2.4. \n1.2.3 Object-Oriented Analysis and the Domain Model \n\u201c\u2026if one wants to understand any complex thing\u2014be it  a brain or an automobile\u2014one needs to develop \ngood sets of ideas about the relationships among the parts inside. \u2026one must study the parts to know the \nwhole.\u201d \u2014Marvin Minsky, The Emotion Machine  \nUse cases consider the system as a black box and help us understand how the system as a whole \ninteracts with the outside word. The next step is to model the inside of the system. We do this by \nbuilding the domain model , which shows what the black box (the system-to-be) encloses. Given a", "source": "Page 29", "chapter": "1"}
{"id": "99eeee3a5a64-1", "text": "service description, we can imagine populating th e black box with domain concepts that will do \nthe work. In other words, u se cases elaborate the system\u2019s behavioral characteristics  (sequence \nof stimulus-response steps), while the domain model details the system\u2019s structural \ncharacteristics  (system parts and their arrangement) that make it possible for the system to \nbehave as described by its use cases. \nIt is useful to consider a metaphor in which software design is seen as creating a virtual \nenterprise  or an agency . The designer is given an enterpri se\u2019s mission description and hiring \nbudget, with the task of hiring appropriate work ers, acquiring things, and making it operational. \nThe first task is to create a list of positions w ith a job description for each position. The designer \nneeds to identify the positions, the roles and r esponsibilities, and start filling the positions with \nthe new workers. Recall the ATM machine exampl e from Figure 1-3. We need to identify the \nrelevant players internal to the system (ca lled \u201cconcepts\u201d), as illustrated in Figure 1-8(b). \nIn the language of requirements analysis, the ente rprise is the system to be developed and the \nemployees are the domain concepts. As you would guess, the key task is to hire the right", "source": "Page 29", "chapter": "1"}
{"id": "99eeee3a5a64-2", "text": "employees (identify good concepts, or abstractions ). Somewhat less critical is to define their \nrelationships and each individual\u2019s attributes, whic h should be done only if they are relevant for \nthe task the individual is assigned to. I like th is metaphor of \u201chiring workers\u201d because it is in the \nspirit of what Richard Feynman considered the essence of programming, which is \u201cgetting \nsomething to do something\u201d [Feynman et al., 2000]. It also sets up the stage for the important \ntask of assigning responsibilities to software objects. \nThe idea for conducting object-oriented analysis in analogy to setting up an enterprise is inspired \nby the works of Fritz Kahn. In the early  20th century, Kahn produced a succession of books \nillustrating the inner workings of the human bod y, using visual metaphors drawn from industrial \nsociety. His illustrations drew a direct func tional analogy between human physiology and the \noperation of contemporary technologies\u2014assembly lines,  internal combustion engines, refineries, \ndynamos, telephones, etc. Kahn\u2019s work is aptly referred to as \u201cillustrating the incomprehendable\u201d \nand I think it greatly captures the task faced by a software engineer. The interested reader should \nsearch the Web for more information on Kahn.", "source": "Page 29", "chapter": "1"}
{"id": "633dfb08422f-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 16\nDomain analysis is more than just letting our imagination loose and imagining any model for the \nsystem-to-be. Design problems have unlimited num ber of alternative solutions. For example, \nconsider again the design for an ATM system  from Figure 1-4. One could imagine countless \nalternative solutions, two of which are shown in  Figure 1-10. In Figure 1-10(a), we imagine \nhaving a draftsman to draw the banknotes requested by the customer then and there. In Figure \n1-10(b), we imagine having a courier run to a n earest bank depository to retrieve the requested Window clerkBookkeeper\nDispenserTransaction\nrecord\nSpeakerphoneHow may I \nhelp you?\nCustomerDraftsmanSolution \nmodificationSolution \nmodification\n(a)\n \nRemote\nbankWindow clerkBookkeeper\nDispenserTransaction\nrecord\nSpeakerphoneHow may I \nhelp you?\nCustomerCourierSolution \nmodificationSolution \nmodification\n(b)\nFigure 1-10: Alternative solutions for an ATM system. (Compare to Figure 1-4)", "source": "Page 30", "chapter": "1"}
{"id": "ae8e45335104-0", "text": "Chapter 1 \uf0b7 Introduction 17\nmonies. How do we know which solution is best, or  even feasible? Implementing and evaluating \nall imaginable solutions is impossible, because it takes time and resources. Two factors help \nconstrain the options and shor ten the time to solution: \n\uf0b7 Knowing an existing solution for the same or similar problem \n\uf0b7 Analyzing the elements of the external worl d that the system-to-be will interact with \nI created the solution in Figure 1-4 because I have  seen how banks with human tellers operate. I \nknow that solutions in Figure 1-10 would take an unacceptable amount of time for each \nwithdrawal, and the problem statement does not men tion having a stack of blank paper and ink at \ndisposal for solution in Figure 1-10(a), or having a runner at disposal for solution in Figure \n1-10(b). The problem statement only mentions a communication line to a remote datacenter. \nThere is nothing inherent in an y of these solutions that makes some better than others. What \nmakes some solutions \u201cbetter\u201d is that they copy existing solutions and take into account what is at \nour disposal to solve the problem. The implication is that the analyst needs to consider not only", "source": "Page 31", "chapter": "1"}
{"id": "ae8e45335104-1", "text": "our disposal to solve the problem. The implication is that the analyst needs to consider not only \nwhat  needs to be done, but also how it can be done\u2014what are feasible ways of doing it. We need \nto know what is at our disposal in the external wo rld: do we have a stack of blank papers, ink, or \na courier to run between the ATM and a depository? If this information is not given, we need to \nask our customer to clarify. Fo r example, the customer may answ er that the system-to-be will \nhave at disposal only a communication line to a re mote datacenter. In this case, we demand the \ndetails of the communication protocol and the fo rmat of messages that can be exchanged. We \nneed to know how will the datacenter answer to different messages and what exceptions may \noccur. We also need to know about the hard ware that accepts the bank cards and disposes \nbanknotes. How will our software be able to  detect that the hardware is jammed? \nOur abstractions must be grounded in reality , and the grounding is provided by knowing what is \nat the disposal in the external world that the sy stem-to-be can use to function. This is why we \ncannot delimit domain analysis to what the black box (software-to-be) will envelop. Rather, we", "source": "Page 31", "chapter": "1"}
{"id": "ae8e45335104-2", "text": "need to consider entities that are both external a nd internal to the software-to-be. The external \nenvironment constrains the problem to be solved and by implication constrains the internal design \nof the software-to-be. We also need to know wh at is implementable and what not, either from \nown experience, or from that of a person familiar with the problem domain (known as the \n\u201cdomain expert\u201d).None of our abstr actions is realistic, but some are useful  and others are not. \nObject-oriented analysis is detailed in Section 2.5. \n1.2.4 Object-Oriented Design \n\u201cDesign is not just what it looks like and feels like. Design is how it works.\u201d\u2014Steve Jobs \nThe act of design involves assigning form and function to parts so to create an esthetical and \nfunctional whole. In software  development, the key activ ity in the design phase is assigning \nresponsibilities  to software objects. A software application can be seen as a set or community of \ninteracting software objects. Each object embodies one or more roles, a role being defined by a set of related responsibilities. Roles, i.e., object s, collaborate to carry out their responsibilities. \nOur goal is to create a design in which they do it in a most efficient manner. Efficient design", "source": "Page 31", "chapter": "1"}
{"id": "ae8e45335104-3", "text": "contributes to system performance, but no less important contribution is in making the design \neasier to understand by humans.", "source": "Page 31", "chapter": "1"}
{"id": "700fa42fd884-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 18\nDesign is the creative process of searching how to implement all of the customer\u2019s requirements. \nIt is a problem-solving activity and, as such, is ve ry much subject to trial and error. Breaking up \nthe system into modules and designing their interactions can be done in many ways with varying \nquality of the results. In the ATM machine exam ple, we came up with one potential solution for \nstep-by-step interactions, as illustrated Figure 1-5. The key question for the designer is: is this the \nbest possible way to assign responsibilities and organize the activities of virtual agents? One \ncould solve the same design problem with a differe nt list of players and different organization of \ntheir step-by-step interactions. As one might  imagine, there is no known way for exactly \nmeasuring the optimality of a design. Creativity and judgment are key for good software design. \nKnowledge of rules-of-thumb and heuristics ar e critical in deciding how good a design is. \nLuckily, most design work is routine design, wh ere we solve a problem by reusing and adapting \nsolutions from similar problems. \nSo, what kinds of designs are out there? Two very popular kinds of software designs are what I", "source": "Page 32", "chapter": "1"}
{"id": "700fa42fd884-1", "text": "would call Maurits Escher2 and Rube Goldberg3 designs. Both are fun to look at but have little \npractical value. Escher designs are impossible to implement in reality. Goldberg designs are \nhighly-complicated contraptions, which solve the problem, but they are very brittle. If anything \nchanges in the underlying assumptions, they fail miserably. \nA key problem of design is that we cannot know for sure if a design will work unless we \nimplement it and try it. Therefore, a software engineer who is also a skilled programmer has \nadvantage in software design, because he knows from experience how exactly to implement the \nabstract constructs and what will or will not  work. Related to this issue, some agile \nmethodologists claim that program code is the only faithful representation of program design. Although it may be faithful, code alone is insuffi cient to understand software design. One also \nneeds diagrams to \u201csee the for est for the trees.\u201d Code also usually does not document the design \nobjectives, alternative designs that were considered , merits of different designs, and the rationale \nfor the chosen designs. \n                                                      \n2 Maurits Cornelis Escher (1898-1972) is one of the world\u2019s most famous graphic artists, known for his so-\ncalled impossible structures, such as Ascending and Descending, Relativity, his Transformation Prints,", "source": "Page 32", "chapter": "1"}
{"id": "700fa42fd884-2", "text": "such as Metamorphosis I, Metamo rphosis II and Metamorphosis I II, Sky & Water I or Reptiles. \n3 Reuben Lucius Goldberg (Rube Goldberg) (1883-1970) was a Pulitzer Prize winning cartoonist, sculptor, \nand author. He is best known for his \u201cinventions\u201d\u2014elaborate sets of arms, wheels, gears, handles, cups, \nand rods, put in motion by balls, canary cages, pails, boots, bathtubs, paddles, and live animals\u2014that \ntake simple tasks and make them extraordinarily complicated.", "source": "Page 32", "chapter": "1"}
{"id": "04b78c23d7fa-0", "text": "Chapter 1 \uf0b7 Introduction 19\nConsider the garage-door opener designs in Fi gure 1-11. The top row shows a Rube Goldberg \ndesign and the bottom row shows an actual design.  What makes the latter design realistic and \nwhat is lacking in the former design? Some observations: \n\uf0b7 The Rube Goldberg design uses complex com ponents (the rabbit, the hound, etc.) with \nmany unpredictable or uncontrollable beha viors; conversely, a realistic design uses \nspecialized components with precisely controllable functions \nRail with a belt or chainOperator (includes motor and radio control mechanism)\nGarage door\nSafety reversing sensorPressing of a button on the remote control transmitter (1)\nauthenticates the device & activates the motor in the operator (2).\nThe motor pulls the chain (or belt) along the rail (3) and winds\nthe torsion spring (4).\nThe torsion spring winds the cable on the pulleys (or drums) (5)\non both sides of the door. \nThe cables lift the door, pushing the different sections of the doorinto the horizontal tracks (6)\nAt the same time, the trolley (or traveler) (7) moves along the rail (3)\nand controls how far the door opens (or closes),", "source": "Page 33", "chapter": "1"}
{"id": "04b78c23d7fa-1", "text": "and controls how far the door opens (or closes),\nas well as the force the garage door exerts by way of the curved door arm (8)  \uf020\uf0b7 \uf0b7\uf0b7Remote control transmitter 21\n3\n4 556\n67\n8Rail with a belt or chainOperator (includes motor and radio control mechanism)\nGarage doorGarage door\nSafety reversing sensorPressing of a button on the remote control transmitter (1)\nauthenticates the device & activates the motor in the operator (2).\nThe motor pulls the chain (or belt) along the rail (3) and winds\nthe torsion spring (4).\nThe torsion spring winds the cable on the pulleys (or drums) (5)\non both sides of the door. \nThe cables lift the door, pushing the different sections of the doorinto the horizontal tracks (6)\nAt the same time, the trolley (or traveler) (7) moves along the rail (3)\nand controls how far the door opens (or closes),\nas well as the force the garage door exerts by way of the curved door arm (8)  \uf020\uf0b7 \uf0b7\uf0b7Remote control transmitter 21\n3\n4 556\n67\n8\nFigure 1-11: Top row: A Rube Goldberg machine for garage door opening.", "source": "Page 33", "chapter": "1"}
{"id": "04b78c23d7fa-2", "text": "Bottom row: An actual design of a garage door opener.", "source": "Page 33", "chapter": "1"}
{"id": "7730942f9fff-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 20\n\uf0b7 The Rube Goldberg design makes unrealistic assumptions, such as that the rabbit will not \nmove unless frightened by an exploding cap. \n\uf0b7 The Rube Goldberg design uses unneces sary links in the operational chain. \nWe will continue discussion of software design wh en we introduce the object model in Section \n1.4. Recurring issues of software design include: \n\uf0b7 Design quality evaluation : Optimal design may be an unrealistic goal given the \ncomplexity of real-world applications. A mo re reasonable goal is to find criteria for \ncomparing two designs and deciding which one is better. The principles for good object-\noriented design are introduced in Section \uf0202.6 and elaborated in subsequent chapters. \n\uf0b7 Design for change : Useful software lives for years or decades and must undergo \nmodifications and extensions to account for the changing world in which it operates. \nChapter 5 describes the techniques for modifiable and extensible design. \n\uf0b7 Design for reuse : Reusing existing code and designs is economical and allows creating \nmore sophisticated systems. Chapter 7 c onsiders techniques for building reusable \nsoftware components. \nOther important design issues include desi gn for security and design for testability. \n1.2.5 Project Effort Estimation and Product Quality \nMeasurement", "source": "Page 34", "chapter": "1"}
{"id": "7730942f9fff-1", "text": "1.2.5 Project Effort Estimation and Product Quality \nMeasurement \nI will show, on an example of hedge pruning, how  project effort estimation and product quality \nmeasurement work hand in hand with incremental and iterative development, particularly in agile \nmethods. Imagine that you want to earn some extra cash this summer and you respond to an \nadvertisement by a certain Mr. McMansion to  prune the hedges around his property (Figure \n1-12). You have never done hedge pruning before, so you will need to learn as you go. The first \ntask is to negotiate the compensation and completion date. The simplest way is to make a guess \nthat you can complete the job in two weeks and you ask for a certain hourly wage. Suppose that \nMr. McMansion agrees and happily leaves for vacation. After one week, you realize that you are much behind the schedule, so to catch up you lower the quality of your work. After two weeks, \nthe hedges are pruned and Mr. McMansion is b ack from vacation. He will likely find many \nproblems with your work and may balk at paying for the work done. \nNow suppose that you employ incremental and ite rative hedge pruning. You start by dividing the \nhedges into smaller sections, because people are better at guessing the relative sizes of object", "source": "Page 34", "chapter": "1"}
{"id": "7730942f9fff-2", "text": "hedges into smaller sections, because people are better at guessing the relative sizes of object \nparts than the absolute size of an entire object. Suppose that you  came up with the partitioning \nlabeled with encircled numbers \uf081 to \uf088 in Figure 1-12. Think of hedge pruning as traveling along \nthe hedge at a certain velocity  (while pruning it). The velocity represents your work productivity . \nTo estimate the travel duration , you need to know the length of the path (or, path size). That is \n velocity Travelsize Path  duration  Travel \uf03d     ( 1 . 1 )  \nBecause you have never pruned he dges, you cannot know your velocity , so the best you can do is \nto guess it. You could measure the path size usi ng a tape measure, but you realize there is a", "source": "Page 34", "chapter": "1"}
{"id": "a90db03ab39c-0", "text": "Chapter 1 \uf0b7 Introduction 21\nproblem. Different sections seem to have varying di fficulty of pruning, so your velocity will be \ndifferent along different sections. Fo r example, it seems that section \uf083 at the corner of Back and \nSide Streets (Figure 1-12) will take much more work to prune than section \uf086 between the garden \nand Main Street. Let us assume you assign \u201cpruning  points\u201d to different sections to estimate their \nsize and complexity. Suppose you use the scale from 1 to 10. Because section \uf083 seems to be the \nmost difficult, so we assign it 10 pruning points.  The next two sections in terms of difficulty \nappear to be \uf082 and \uf088, and relative to section \uf083 you feel that they are at about 7 pruning points. \nNext are sections \uf081, \uf085, and \uf087, and you give them 4 pruning points. Finally, section \uf084 gets 3 \npruning points and section \uf086 gets 2 pruning points. The total for the entire hedge is calculated \nsimply by adding the individual sizes \n\uf028\uf029\uf0e5\n\uf03d\uf03dN\nii\n1section -for- points size Total     ( 1 . 2 )", "source": "Page 35", "chapter": "1"}
{"id": "a90db03ab39c-1", "text": "ii\n1section -for- points size Total     ( 1 . 2 )  \nTherefore, the total for the entire hedge is 10 \uf02b 2\uf0b47 \uf02b 3\uf0b44 \uf02b 3 \uf02b 2 = 41 pruning points. This \nrepresents your size estimate  of the entire hedge. It is very important that this is a relative-size \nestimate , because it measures how big individual s ections are relative to one another. So, a \nsection estimated at four pruning points is exp ected to take twice as long work as a section \nestimated at two pruning points. \nHow accurate is this estimate? Should section \uf084 be weighted 3.5 \npoints instead of 3? There are two parts to this question: (a) how \naccurate is the relative estimate for each section, and (b) is it appropriate to simply add up the individual sizes? As for the former \nissue, you may wish to break down the hedge sections  into smaller parts, because it is easier to do \neyeballing of smaller parts and co mparing to one another. Section \n\uf083 is particularly large and it \nmay be a good idea to split it up to smaller pieces. If you keep subdividing, in the extreme instead", "source": "Page 35", "chapter": "1"}
{"id": "a90db03ab39c-2", "text": "of eyeballing hedge sections you could spend week s and count all the branches and arrive at a \uf081\n\uf082\n\uf083\uf084\uf085\uf086\uf087\uf088\nFigure 1-12: Example for project estimation: Formal hedge pruning.", "source": "Page 35", "chapter": "1"}
{"id": "819853d81aa9-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 22\nmuch more accurate estimate. You could even meas ure density of branches in individual sections, \ntheir length, hardness, etc. Obviously, there is  a point beyond which only minor improvement in \nestimation accuracy is brought at a huge cost (known as the law of diminishing returns). Many \npeople agree that the cost-accuracy relationship is exponential (Figure 1-13). It is also interesting \nto note that, in the beginning of the curve, we can obtain huge gains in accuracy with modest \neffort investment. The key points for size estima tion are that (1) the pieces should be fairly small  \nand (2) they should be of similar  size, because it is easier to co mpare the relative sizes of small \nand alike pieces. \nAs for the latter issue about equation (1.2), the appropriateness of using a linear summation, a key \nquestion is if the work on one section is totally independent  on the work on another section. The \nindependence is equivalent to assuming that ev ery section will be pruned by a different person \nand each starts with an equal degree of e xperience in hedge pruning. I believe there are \nconfounding factors that can affect the accuracy of the estimate. For example, as you progress,", "source": "Page 36", "chapter": "1"}
{"id": "819853d81aa9-1", "text": "you will learn about hedge pruning and become more  proficient, so your velocity will increase \nnot because the size of some section became sm aller but because you became more proficient. In \nSection 2.2.3 I will further discuss the issue of linear superposition in the context of software \nproject estimation. \nAll you need now is the velocity estimate, a nd using equation (1.1) you can give Mr. McMansion \nthe estimate of how long the entire hedge pruni ng will take. Say you guess your velocity at 2 \npruning points per day. Using equation (1.1) you obtain 41/2 \uf0bb 21 working days or 4 weeks. You \ntell Mr. McMansion that your initial estimate is 21  days to finish the work. However, you must \nmake it clear that this is just a guess, not a hard commitment ; you cannot make hard \ncommitments until you do some work and find out what is your actual productivity (or \u201cvelocity\u201d). You also tell Mr. McMansion how you partitioned the work into smaller items \n(sections of the hedge) and ask him to prioritize  the items, so that you know his preferred", "source": "Page 36", "chapter": "1"}
{"id": "819853d81aa9-2", "text": "ordering. Say that Mr. McMansion prefers that you start from the back of the house and as a result you obtain the work backlog list shown in Fi gure 1-14. He will inspect the first deliverable \nafter one week, which is the duration of one iteration . \nHere comes the power of iterative and incremental  work. Given Mr. McMansion\u2019s prioritized \nbacklog, you pull as many items from the top of th e list as will fit into an iteration. Because the Estimation costEstimation accuracy100%\n \nFigure 1-13: Exponential cost of estimation . Improving accuracy of estimation beyond a\ncertain point requires huge cost and effort (known as the law of diminishing returns).", "source": "Page 36", "chapter": "1"}
{"id": "f84deb8d7844-0", "text": "Chapter 1 \uf0b7 Introduction 23\nfirst two items (sections \uf088 and \uf087) add up to 5.5 days, which is roughly one week, i.e., one \niteration, you start by pruning sections \uf088 and \uf087. Suppose that after the first week, you pruned \nhave about three quarters of the hedges in sections \uf088 and \uf087. In other words after the first \niteration you found that your actual velocity is 3/4 of what you originally thought, that is, 1.5 \npruning point per day. You estimate  a new completion date as follows. \nTotal number of remaining points = 1/4 \uf0b4 11 points remaining from sections \uf088 and \uf087  \n\uf02b 30 points from all other sections \n  \uf0bb 33 points  \nEstimated completion date = 22 days + 5 days already worked = 27 days total \nYou go to Mr. McMansion and tell him that your ne w estimate is that it will take you 27 days \ntotal, or 22 more days to complete the work . Although this is still an  estimate and may prove \nincorrect, you are much more confident about th is estimate, because it is based on your own \nexperience. Note that you do not need to adjust  your size estimate of 41 pruning points, because", "source": "Page 37", "chapter": "1"}
{"id": "f84deb8d7844-1", "text": "the relative sizes of hedge sections have not chan ged! Because of this velocity adjustment, you \nneed to calculate new work durations for all remaining items in the backlog (Figure 1-14). For \nexample, the new durations for sections \uf086 and \uf085 will be 1.3 days and 2.7 days, respectively. As \na result, you will pull into the second iteration th e remaining work from the first iteration plus \nsections \uf086 and \uf085. Section \uf084 that was originally planned for the second iteration (Figure 1-14) \nwill be left for the third iteration. \nIt is important to observe that initially you estimate  your velocity, but after the first increment you \nuse the measured  velocity to obtain a more accurate es timate of the project duration. You may \ncontinue measuring your velocity and re-estimati ng the total effort duration after each increment, Time2nd iteration n-th iteration\nEstimated completion dateItems pulled by the team into an iteration1)  Prune Section 8    3.5 days (7pts)Work backlog\n2)  Prune Section 7     2 days (4pts)\n3)  Prune Section 6     1 day (2pts)\n4)  Prune Section 5     2 days (4pts)", "source": "Page 37", "chapter": "1"}
{"id": "f84deb8d7844-2", "text": "4)  Prune Section 5     2 days (4pts)\n1st iteration5)  Prune Section 4    1.5 days (3p)\n6)  Prune Section 1 2 days (4pts)\n7)  Prune Section 2 3.5 days (7p)\nWork items8)  Prune Section 35 days (10p)\n21 days\n5 days\nList prioritized by the customerEstimated work duration\nFigure 1-14: The key concepts for iterative and incremental project effort estimation.", "source": "Page 37", "chapter": "1"}
{"id": "99376f1f10c7-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 24\nbut this probably will not be necessary, because after the first few increments you will obtain an \naccurate measurement of your pruning velocity. Th e advantage of incremental work is that you \ncan quickly gain accurate estimate of the entire effo rt and will not need to rush it later to complete \non time, while sacrificing product quality. \nSpeaking of product quality, next we will see how iterative  work helps improve product quality. \nYou may be surprised to find that hedge pruning involves more than simply trimming the shrub. Some of parameters that characterize the quality of hedge pruning are illustrated in Figure 1-15. \nSuppose that after the first iteration (sections \n\uf088 and \uf087), Mr. McMansion can examine the work \nand decide if the quality is satisfactory or needs to be adjusted for future iterations. \nIt is much more likely that Mr. McMansion will be  satisfied with your work if he is continuously \nconsulted then if he simply disappeared to vacation after describing the job requirements. \nRegardless of how detailed the requirements desc ription, you will inevitably face unanticipated \nsituations and your criteria of hedge esthetics ma y not match those of Mr. McMansion. Everyone \nsees things differently, and frequent interacti ons with your customer will help you better", "source": "Page 38", "chapter": "1"}
{"id": "99376f1f10c7-1", "text": "sees things differently, and frequent interacti ons with your customer will help you better \nunderstand his viewpoint and preferences. Early f eedback will allow you to focus on things that \nmatter most to the customer, rather than facing a disappointment when the work is completed. \nThis is why it is important that the customer remains engaged throughout the duration of the \nproject, and participates in all important decisi ons and inspects the quality of work any time a \nvisible progress is made. Good Shape\n(Low branches get sun)Poor Shape\n(Low branches \nshaded from sun)Heading back not \nrecommended as \nit alters the natural \nshape of the shrubRemove dead wood\nRemove water spouts \nand suckers\nSnow accumulates \non broad flat topsStraight lines require \nmore frequent trimmingPeaked and rounded tops \nhinder snow accumulationRounded forms, which \nfollow nature\u2019s tendency, \nrequire less trimming\nFigure 1-15: Quality metrics for hedge pruning.", "source": "Page 38", "chapter": "1"}
{"id": "c647186332ae-0", "text": "Chapter 1 \uf0b7 Introduction 25\nI\nfriendhave\ncodingengages in\nprogramconstructs a\nnewisIn summary, we use incremental  staging and scheduling strategy to quickly arrive at an effort \nestimate and to impr ove the development process quality . We use the iterative , rework-\nscheduling strategy to improve the product quality . Of course, for both of these strategies it is \nessential to have good metrics. Project and produc t metrics are described in Chapter 4. We will \nalso see in Section 2.2.3 how user-story points  work similar to hedge-pruning points, and how \nthey can be used to estimate developm ent effort and plan software releases. \n \n1.3 Case Studies \n Two case studies will be used in examples through out the text to illustrate software development \ntechniques. In addition, several more projects are designed for student teams later in Section 1.5. \nBoth case studies (as well as student projects)  address relatively complex problems. I favor \ncomplex projects, threading throughout the book, rather than simple, unconnected examples, because I feel that the former illustrate better the difficulties and merits of the solutions. Both \nprojects are open-ended and without a clear objective, so that we can consider different features \nand better understand the requireme nts derivation process. My hope is that by seeing software", "source": "Page 39", "chapter": "1"}
{"id": "c647186332ae-1", "text": "and better understand the requireme nts derivation process. My hope is that by seeing software \nengineering applied on complex (and realistic ) scenarios, the reader will better grasp \ncompromises that must be made both in terms of  accuracy and richness of our abstractions. This \nshould become particularly evident in Chapter 3, which deals with modeling of the problem \ndomain and the system that will be developed. \nBefore we discuss the case studies, I briefly introduce a simple diagrammatic technique for \nrepresenting knowledge about problem domains. \nConcept maps4 are expressed in terms of \nconcepts  and propositions , and are used to represent k nowledge, beliefs, feelings, etc. Concepts  \nare defined as apperceived regularities in objects, events, and ideas, designated by a label , such as \n\u201cgreen,\u201d \u201chigh,\u201d \u201cacceleration,\u201d and \u201cconfused.\u201d A proposition  is a basic unit of meaning or \nexpression, which is an expression of the relation  among concepts . Here are some example \npropositions: \n\uf0b7 Living things are composed of cells \n\uf0b7 The program was flaky \n\uf0b7 Ice cube is cold \nWe can decompose arbitrary sentences into  propositions. For example, the sentence \n\u201cMy friend is coding a new program \u201d \ncan be written as the following propositions \nProposition Concept Relation Concept", "source": "Page 39", "chapter": "1"}
{"id": "c647186332ae-2", "text": "can be written as the following propositions \nProposition Concept Relation Concept\n1. I have friend \n                                                      \n4 A good introduction about concept maps can be found here: http://en.wikipedia.org/wiki/Concept_map . \nCmapTools ( http://cmap.ihmc.us/ ) is free software that facilitates construction of concept maps.", "source": "Page 39", "chapter": "1"}
{"id": "a9158b4ca7d0-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 26\n2. friend engages in coding \n3. coding constructs a program \n4. program is new \nHow to construct a concept map? A common strategy starts with listing all the concepts that you \ncan identify in a given problem domain. Next, create the table as above, initially leaving the \n\u201cRelation\u201d column empty. Then come up with (or consult a domain expert for) the relations \namong pairs of concepts. Note that, unlike the simp le case shown in the above table, in general \ncase some concepts may be related to several ot her concepts. Finally, drawing the concept map is \neasy when the table is completed. We will learn more about propositions and Boolean algebra in \nChapter 3. \nConcept maps are designed for capturing static  knowledge and relations hips, not sequential \nprocedures. A concept map provides a semiformal  way to represent knowledge about a problem \ndomain. It has reduced ambiguity compared to free-form text, and visual illustration of \nrelationships between the concepts is easier to understand. I will use concep ts maps in describing \nthe case study problems and they can be a helpful tool is software engineering in general. But \nobviously we need other types of diagrammatic re presentations and our main tool will be UML.", "source": "Page 40", "chapter": "1"}
{"id": "a9158b4ca7d0-1", "text": "1.3.1 Case Study 1: From Home Access Control to \nAdaptive Homes \nFigure 1-16 illustrates our case-study system that is used in the rest of the text to illustrate the \nsoftware engineering methods. In a basic versi on, the system offers house access control. The \nsystem could be required to authenticate  (\u201cAre you who you claim to be?\u201d) and validate  (\u201cAre \nyou supposed to be entering this building?\u201d) pe ople attempting to enter a building. Along with \ncontrolling the locks, the system may also contro l other household devices, such as the lighting, \nair conditioning, heating, alarms, etc. \nAs typical of most software engineering project s, a seemingly innocuous problem actually hides \nmany complexities, which will be  revealed as we progress thr ough the development cycle. Figure \n1-16 already indicates some of those\u2014for exampl e, houses usually have more than one lock. \nShown are two locks, but there could be add itional ones, say for a garage entrance, etc. \nAdditional features, such as intrusion detection further complicate the system. For example, the \nhouse could provide you with an email report on secu rity status while you are away on vacation. \nPolice will also attend when they receive notifi cation from a central monitoring station that a", "source": "Page 40", "chapter": "1"}
{"id": "a9158b4ca7d0-2", "text": "Police will also attend when they receive notifi cation from a central monitoring station that a \nmonitored system has been activated. False alarms  require at least two officers to check on and \nthis is a waste of police resources. Many cities now fine residents for excessive false alarms. \nHere are some additional features to think about. You could program the system to use timers to \nturn lights, televisions and sound systems on a nd off at different times to give your home a \n\u201clived-in look\u201d when you are away. Install motion-detecting outdoor floodlights around your \nhome or automatic announcing of visitors with a chime sound. More gadgets include garage door \nopeners, active badges, and radio-frequency identif ication (RFID) tags, to detect and track the \ntenants. Also, an outside motion sensor may turn on the outdoors light even before  the user \nunlocks the door. We could dream up all sorts of services; for example, you may want to be able \nto open the door for a pizza-deliveryman remotely , as you are watching television, by point-and-", "source": "Page 40", "chapter": "1"}
{"id": "fa2bf6546a2b-0", "text": "Chapter 1 \uf0b7 Introduction 27\nclick remote controls. Moreover, the system may bring up the live video on your TV set from a \nsurveillance camera at the doors. \nLooking at the problem in a broader business context,  it is unlikely that all or even the majority of \nhouseholds targeted as potential customers of th is system will be computer-savvy enough to \nmaintain the system. Hence, in the age of outsourci ng, what better idea than to contract a security \ncompany to manage all systems in a given area. Th is brings a whole new set of problems, because \nwe need to deal with potentially thousands of di stributed systems, and at any moment many new \nusers may need to be registered or unregistered with the (centralized?) system. \nThere are problems maintaining a centralized  database of people\u2019s access privileges. A key \nproblem is having a permanent, hard-wired connection to the central computer. This sort of \nnetwork is very expensive, mainly due to the co st of human labor involved in network wiring and \nmaintenance. This is why, even in  the most secure settings, a very tiny fraction of locks tend to be \nconnected. The reader should check for an inte resting decentralized solution proposed by a \nsoftware company formerly known as CoreStreet ( http://www.actividentity.com/ ). In their proposed", "source": "Page 41", "chapter": "1"}
{"id": "fa2bf6546a2b-1", "text": "solution, the freshest list of access privileges sp reads by \u201cviral propagation\u201d [Economist, 2004]. \nFirst Iteration: Home Access Control \nOur initial goal is only to support the ba sic door unlocking and locking functions. \nAlthough at the first sight these actions appear simple, there are difficulties with both. \nFigure 1-16 shows the locks connected by  wire-lines to a central personal \ncomputer (PC). This is not necessarily how  we want to solve the problem; rather, \nthe PC just illustrates the problem. We need it to manage the users \n(adding/removing valid users) and any othe r voluminous data entry, which may be \ncumbersome from a lock\u2019s keypad\u2014using a regular computer keyboard and monitor would be much more user friendl y. The connections could be wireless, System\nLock Photosensor SwitchLight bulbAlarm bell\n1\n2\n3\n4\n5\nX\nY1\n2\n3\n4\n5\nX\nYCentral\nComputer\nBackyard doors:\nExternal &\nInternal lock\nFront doors:\nExternal &\nInternal lockCentral\nComputer\nBackyard doors:\nExternal &\nInternal lock\nFront doors:\nExternal &\nInternal lock\nFigure 1-16: Our first case-study system provi des several functions for controlling the home", "source": "Page 41", "chapter": "1"}
{"id": "fa2bf6546a2b-2", "text": "access, such as door lock control, lighting co ntrol, and intrusion detection and warning.", "source": "Page 41", "chapter": "1"}
{"id": "49cd6a31b0f7-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 28\nand moreover, the PC may not even reside in the house. In case of an apartment complex, the PC \nmay be located in the renting office.5 \nThe first choice is about the user identification.  Generally, a person can be identified by one of \nthe following:  \n\uf0b7 What you carry on you (physical key or another gadget) \n\uf0b7 What you know (password) \n\uf0b7 Who you are (biometric feature, such as fingerprint, voice, face, or iris) \nI start with two constraints set for this specific system: (1) user should not need to carry any \ngadgets for identification; and, (2) the identifi cation mechanism should be  cheap. The constraint \n(1) rules out a door-mounted reader for magnetic stri p ID cards or RFID tags\u2014it imposes that the \nuser should either memorize the key (i.e., \u201cpassw ord\u201d) or we should use biometric identification \nmechanism(s). The constraint (2) rules out e xpensive biometric identifiers, such as face \nrecognition (see, e.g., http://www.identix.com/  and http://passfaces.com/ ) or voice recognition (see,", "source": "Page 42", "chapter": "1"}
{"id": "49cd6a31b0f7-1", "text": "e.g., http://www.nuance.com/prodserv/prodverifier.html ). There are relatively cheap fingerprint readers \n(see, e.g., http://www.biometrics-101.com/ ) and this is an option, but to avoid being led astray by \ntechnology details, for now we assume that the user  memorizes the key. In other words, at present \nwe do not check the person\u2019s true identity (hen ce, no authentication)\u2014as long as she knows a \nvalid key, she will be allowed to enter (i.e., validation only). \nFor unlocking, a difficulty is w ith handling the failed attempts \n(Figure 1-17). The system must withstand \u201cdictionary attacks\u201d (i.e., \nburglars attempting to discover an identification key by systematic \ntrial). Yet it must allow the legitimate user to make mistakes.  \nFor locking coupled with light controls, a difficulty is with \ndetecting the daylight: What with a dark and gloomy day, or if the \nphoto sensor ends up in a shade. We could instead use the wall-clock time, so the light is always turned on between 7:30 P.M. and \n7:30 A.M. In this case, the limits should be adjusted for the \nseasons, assuming that the clock is automatically ad justed for daylight saving time shift. Note", "source": "Page 42", "chapter": "1"}
{"id": "49cd6a31b0f7-2", "text": "5 This is an architectural decision (see  Section 2.3 about software architecture). tenant\nkey\ncan be prevented by enforcinglock openedwishes\ncausesenters\nvalid key invalid keycan be\ndictionary attackmay signalupper bound on failed attempts\nburglar launches \nFigure 1-17: Concept map repre senting home access control.", "source": "Page 42", "chapter": "1"}
{"id": "a9e5a5019dc0-0", "text": "Chapter 1 \uf0b7 Introduction 29\nalso that we must specify which light should be tu rned on/off: the one most adjacent to the doors? \nThe one in the hallway? The kitchen light? \u2026 Or, all lights in the house? \nInterdependency question: What if the door needs to be locked after the \ntenant enters the house\u2014should the light  stay on or should different lights \nturn on as the tenant moves to different rooms? \nAlso, what if the user is not happy with the system\u2019s decision and does opposite of what the \nsystem did, e.g., the user turns off the light wh en the system turned it on? How do these events \naffect the system functioning, i.e ., how to avoid that the system becomes \u201cconfused\u201d after such an \nevent? \nFigure 1-18 illustrates some of the difficulties in specifying exactly what the user may want from \nthe system. If all we care about is whether the door is unlocked or locked, identify two possible \nstates : \u201cunlocked\u201d and \u201clocked.\u201d The system shoul d normally be in the \u201clocked\u201d state and \nunlocked only in the event the user supplies a valid  key. To lock, the user  should press a button \nlabeled \u201cLock,\u201d but to accommodate forgetful us ers, the system should lock automatically", "source": "Page 43", "chapter": "1"}
{"id": "a9e5a5019dc0-1", "text": "labeled \u201cLock,\u201d but to accommodate forgetful us ers, the system should lock automatically \nautoLockInterval  seconds after being unlocked. If the us er needs the door open longer for some \nreason, she may specify the holdOpenInterval . As seen, even with only two clearly identified \nstates, the rules for transitioning between them can become very complex. \nI cannot overstate the importance of clearly st ating the user\u2019s goals. The goal state can be \narticulated as \uf0e1unlocked AND light_on \uf0f1. This state is of necessity temporary, because the door \nshould be locked once the user enters the house a nd the user may choose to turn off the hallway \nlight and turn on the one in the kitchen, so the end state ends up being \uf0e1lockeded AND light_off \uf0f1. \nMoreover, this definition of the goal state appears to be utterly incomplete. \nDue to the above issues, there are difficultie s with unambiguously establishing the action \npreconditions. Therefore, the execution of the \u201ca lgorithm\u201d turns out to be quite complex and \neventually we have to rely only on heuristics.  Although each individual activity is simple, the \ncombination of all is overwhelm ing and cannot be entirely solved even with an extremely \ncomplex system! Big software systems have too many moving parts to conform to any set of", "source": "Page 43", "chapter": "1"}
{"id": "a9e5a5019dc0-2", "text": "complex system! Big software systems have too many moving parts to conform to any set of \nsimple percepts. What appeared a simple problem turns out not to have an algorithmic solution, \nand on the other hand we cannot guarantee that the heuristics will always work, which means that \nwe may end up with an unhappy customer. \nNote that we only scratched the surface of what appeared a simple problem, and any of the above bolt\nlocked unlocked locked unlockedIF validKey THEN unlock\nIF pushLockButton THEN lock\nIF timeAfterUnlock = max{ autoLockInterval, holdOpenInterval } THEN lockIF validKey AND holdOpenInterval THEN unlock\n \nFigure 1-18: System states and transition rules.", "source": "Page 43", "chapter": "1"}
{"id": "ba4cd10bb000-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 30\nissues can be further elaborated. The designer ma y be simply unable to explicitly represent or \nforesee every detail of the problem. This illustrate s the real problem of heuristics: at a certain \npoint the designer/programmer must stop discerning further details and related issues. But, of \ncourse, this does not mean that they will not ar ise sooner or later and cau se the program to fail. \nAnd we have not mentioned program bugs, whic h are easy to sneak-in in a complex program. \nAnything can happen (and often does). \n1.3.2 Case Study 2: Personal Investment Assistant \n\u201cThe way to make money is to buy stock at a lo w price, then when the price goes up, sell it. \nIf the price doesn\u2019t go up, don\u2019t buy it.\u201d \u2014Will Rogers \nFinancial speculation, ranging fro m straight gambling and betting to  modern trading of financial \nsecurities, has always attracted people. For many, th e attraction is in what appears to be a promise \nof wealth without much effort; for most, it is in  the promise of a steady retirement income as well \nas preserving their wealth against worldly uncerta inties. Investing in company equities (stocks)", "source": "Page 44", "chapter": "1"}
{"id": "ba4cd10bb000-1", "text": "has carried the stigma of speculation through much  of history. Only relatively recently stocks \nhave been treated as reliable investment vehicles (Figure 1-19). Nowadays, more than 50% of the \nUS households own stocks, either directly, or  indirectly through mutual funds, retirement \naccounts or other managed assets. There are ove r 600 securities exchanges around the world. \nMany people have experience with financial secu rities via pension funds, which today are the \nlargest investor in the stock market. Quite often,  these pension funds serve as the \u201cinterface\u201d to \nthe financial markets for individual investors.  Since early 1990s the innovations in personal \ncomputers and the Internet made possible for the individual investor to enter the stock markets \nwithout the help from pension funds  and brokerage firms.  The Internet also made it possible to do \nall kinds of researches and comparisons about va rious companies, in a quick and cheap fashion\u2014\nan arena to which brokerage firms and instituti onal investors had almost exclusive access owing \nto their sheer size and money-might. \nComputers have, in the eyes of some, furthe r reduced the amount of effort needed for \nparticipation in financial markets, which will be our key motivation for our second case study: \nhow to increase automation of trading in financia l markets for individual investors. Opportunities", "source": "Page 44", "chapter": "1"}
{"id": "ba4cd10bb000-2", "text": "how to increase automation of trading in financia l markets for individual investors. Opportunities \nfor automation range from automating the mechanic s of trading to analysis of how wise the \nparticular trades appear to be and when risky positions should be abandoned. \nThere are many different financial securities avai lable to investors. Most investment advisers \nwould suggest hedging the risk of investment loss by maintaining a diversified investment \nportfolio. In addition to stocks, the investor shoul d buy less-risky fixed income securities such as \nbonds, mutual funds, treasuries bills and notes or simply certificate of deposits. To simplify our \ncase study, I will ignore such prudent advice and a ssume that our investor wants to invest in \nstocks only.", "source": "Page 44", "chapter": "1"}
{"id": "2c66bee83b0e-0", "text": "Chapter 1 \uf0b7 Introduction 31\nWhy People Trade and How Financial Markets Work? \nAnyone who trades does so with the expectation of making profits. People take risks to gain \nrewards. Naturally, this immediately begets que stions about the kind of return the investor \nexpects to make and the kind of risk he is willi ng to take. Investors enter into the market with \nvaried objectives. Broadly, the investor objectives  could be classified into short-term-gain and \nlong-term-gain. The investors are also of varied  types. There are institutional investors working \nfor pension funds or mutual funds, and then there are day-traders and hedge-fund traders who \nmainly capitalize on the anomalies or the arbitr ages that exist in th e markets. Usually the \ninstitutional investors have a \u201clong\u201d outlook while  the day-traders and the hedge-funds are more \nprone to have a \u201cshort\u201d take on the market. \nHere I use the terms \u201ctrader\u201d and \u201cinvestor\u201d a nd synonymous. Some people use these terms to \ndistinguish market participants with varied objec tives and investment styles. Hence, an \u201cinvestor\u201d \nis a person with a long outlook, who invests in the company future by buying shares and holds", "source": "Page 45", "chapter": "1"}
{"id": "2c66bee83b0e-1", "text": "onto them expecting to profit in long term. C onversely, a \u201ctrader\u201d is a person with a short \noutlook, who has no long-term interest in the co mpany but only looks to profit from short-term \nprice variations and sells the shares at first such opportunity. \nAs shown in Figure 1-20(a), traders cannot ex change financial securities directly among \nthemselves. The trader only places orders  for trading with his broker and only accredited \nfinancial brokers are allowed to execute transacti ons. Before the Internet brokers played a more \nsignificant role, often provided investment advi ce in addition to executing transactions, and \ncharged significant commission fees. Nowadays, the \u201cdiscount brokers\u201d mostly provide the transaction service at a relatively small commission fee. people who trade\nprofit returnshave expectation of\nshort-term objectives\nretirement incomeare needed for\nmarket\u2019s performance historyare attracted by\nhints at\n+10% annual returns over long runshows\nnegative returns 1/3 of the timedirect participationindirect participationcan have\nbroker\nretirement planis done through\npension fund\nmutual fundis done through\nhedge fund \nFigure 1-19: Concept map of why people trade and how they do it.", "source": "Page 45", "chapter": "1"}
{"id": "406e3309187a-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 32\nMechanics of Trading in Financial Markets \nA market provides a forum where people always sell to the highest bidder. For a market to exist \nthere must be a supply and demand side. As all ma rkets, financial markets operate on a bid-offer \nbasis: every stock has a quoted bid and a quoted ask (or offer). The concept map in Figure 1-21 \nsummarizes the functioning of stock prices. The tr ader buys at the current ask and sells at the \ncurrent bid. The bid is always lower than the as k. The difference between the bid and the ask is \nreferred to as the spread . For example, assume there is a price quote of 100/105. That means the \nhighest price someone is willing to pay to buy is 100 (bid), and the lowest price there is selling \ninterest at 105 (offer or ask). Remember that th ere are volumes (number of shares) associated \nwith each of those rates as well. \nUsing the bid side for the sake of illustration, a ssume that the buyer at 100 is willing to purchase \n1,000 units. If someone comes in to sell 2,000 uni ts, he would execute the first 1,000 at 100, the", "source": "Page 46", "chapter": "1"}
{"id": "406e3309187a-1", "text": "bid rate. That leaves 1,000 units still to be so ld. The price the seller can get will depend on the \ndepth of the market. It may be that there ar e other willing buyers at 100, enough to cover the \nreminder of the order. In an active (or liquid) market this is often the case. Market exchange\nBrokers\nTraders/\nInvestorsBroker Trader Exchange\nBank\n(a) (b)\nFigure 1-20: Structure of securities market. (a ) Trading transactions can be executed only\nvia brokers. (b) \u201cBlock diagram\u201d of market interactions. \nselling stock bid price is executed atbuying stockprice quote\nlast tradeis set by\nask price is executed atcan betraded price\nindicative pricecan be\ncan be\n \nFigure 1-21: Concept map explaining how quoted stock prices are set.", "source": "Page 46", "chapter": "1"}
{"id": "9dea50443213-0", "text": "Chapter 1 \uf0b7 Introduction 33\nWhat happens in a thin market, though? In such a situation, there may not be a willing buyer at \n100. Let us assume a situation illustrated in the table below where the next best bid is by buyer \nB3 at 99 for 500 units. It is followed by B4 at 98 for 100 units, B1 for 300 units at 97, and B2 for \n200 at 95. The trader looking to sell those 1,000 re maining units would have to fill part of the \norder at 99, more at 98, another bit at 97, and the last 100 at 95. In doing so, that one 2,000 unit \ntrade lowered the bid down five points (because there would be 1 00 units left on the bid by B2). \nMore than likely, the offer rate woul d move lower in a corresponding fashion. \nTrader Seller S1 Buyer B1 Buyer B2 Buyer B3 Buyer B4 \nBid \nAsk market  \n$97 \n$95 \n$99  \n$98\nNum. of shares 1000 300 200 500 100 \nThe above example is somewhat exaggerated but it illustrates the point. In markets with low", "source": "Page 47", "chapter": "1"}
{"id": "9dea50443213-1", "text": "The above example is somewhat exaggerated but it illustrates the point. In markets with low \nvolume it is possible for one or more large transac tions to have significant impact on prices. This \ncan happen around holidays and other vacation kinds of periods when fewer traders are active, \nand it can happen in the markets that are thin ly traded (lack liquidity) in the first place. \nWhen a trader wishes to arrange a trade, he places an order , which is a request for a trade yet to \nbe executed. An order  is an instruction to a broker/dealer  to buy, sell, deliver, or receive \nsecurities that commits the issuer of th e \u201corder\u201d to the terms specified. An order ticket  is a form \ndetailing the parameters of an Order instruction.  Buy or sell orders differ in terms of the time \nlimit, price limit, discretion of the broker handlin g the order, and nature of the stock-ownership \nposition (explained below). Four types of or ders are most common and frequently used: \n1. Market order:  An order from a trader to a broker to buy or sell a stock at the best \navailable price. The broker should execute the order immediately, but may wait for a", "source": "Page 47", "chapter": "1"}
{"id": "9dea50443213-2", "text": "available price. The broker should execute the order immediately, but may wait for a \nfavorable price improvement. A market order to buy 10 shares of Google means buy the stock at whatever the lowest ask (offer) pri ce is at the time the trade is executed. The \nbroker could pay more (or less) than the pr ice quoted to the trader, because in the \nmeantime the market may have shifted (also recall the above example). Market orders are \nthe quickest but not necessarily the opt imal way to buy or sell a security. \n2.\n Limit order:  An order to buy or sell at a specific price, or better. The trader using a limit \norder specifies the maximum buy price or  the minimum sale price at which the \ntransaction shall be executed. That means wh en buying it would be at the limit price or \nbelow, while the reverse is true for a sell order. For example, a limit order to sell 100 \nGoogle shares at 600 means the trade will be executed at or above 600. A limit order can only be filled if the stock\u2019s market price reaches the limit price. \n3.\n Stop order:  (also referred to as a stop-loss order ) A delayed market order to buy or sell a \nsecurity when a certain price is reached or pa ssed. A stop order is set at a point above (for", "source": "Page 47", "chapter": "1"}
{"id": "9dea50443213-3", "text": "a buy) or below (for a sell) the current pri ce. When the current price reaches or passes \nthrough the specified level, the stop order is converted into an active market order \n(defined above in item 1). For example, a sell stop at 105 would be triggered if the market price touches or falls below 105. A buy stop order is entered at a stop price above \nthe current market price. Investors generally use a buy stop order to limit a loss or to \nprotect a profit on a stock that they have sold short. A sell stop order is entered at a stop", "source": "Page 47", "chapter": "1"}
{"id": "3221a29a5717-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 34\nprice below the current market price. Investors generally use a sell stop order to limit a \nloss or to protect a profit on a stock that they own. \n4. Stop Limit Order:  A combination of the stop and limit orders. Unlike the simple stop \norder, which is converted into a market orde r when a certain price is reached, the stop \nlimit order is converted into a limit order. Hen ce, the trader can control the price at which \nthe order can be executed and will get a fill at or better than the limit order price. \nFor information on other, more advanced order t ypes, the reader should search the Web. There \nare two types of security-ownership positions: long and short, see Figure 1-22(a). A long position  \nrepresents actual ownership of the security regardless of whether personal funds, financial \nleverage (borrowed funds), or both are used in its purchase. Profits are realized if the price of the \nsecurity increases. (a) long position stock price appreciation\nshort position stock price depreciationprofits through\nprofits throughowning stock\nmeans\nowning cash earned by selling borrowed stock\nmeansselling stockis exited by\nbuying stockis exited by\nreturning borrowed stockcreates\nprofit = salePrice \u2013 purchasePrice \u2013 commissionsprofit\ncreates profit", "source": "Page 48", "chapter": "1"}
{"id": "3221a29a5717-1", "text": "returning borrowed stockcreates\nprofit = salePrice \u2013 purchasePrice \u2013 commissionsprofit\ncreates profit\nprofit = salePrice \u2013 purchasePrice \u2013 loanInterest \u2013 commissions \n \n(b) trader\nbrokerborrows shares from\nshort position\nbuying sharesis exited by\nask priceis executed atselling borrowed sharesshare price depreciation expects\ncreates a\nbid priceis\nexecuted\natperforms\ncommissionscollects\ninterest on loantriggers\nrepossessed shares yieldsare returned tosale proceedsgeneratesare\nheld by\ninterest on sale proceeds31\n2\n4\n \nFigure 1-22: (a) Concept map of two types of stock-ownership positions: long and short.\n(b) Concept map explaining how short position functions.", "source": "Page 48", "chapter": "1"}
{"id": "40b5c9c6c9f0-0", "text": "Chapter 1 \uf0b7 Introduction 35\nA short position  involves first a sale of the stock, follo wed by a purchase at, it is hoped, a lower \nprice, Figure 1-22(b). The trader is \u201cshort\u201d (does not own the stock) and begins by borrowing a \nstock from the investment broker, who ordinarily hol ds a substantial number of shares and/or has \naccess to the desired stock from other investment  brokers. The trader then sells the borrowed \nstock at the market price. The short position ho lder owes the shares to the broker; the short \nposition can be covered by buying back the shares  and returning the purchased shares to the \nbroker to settle the loan of shares. This sequence of  steps is labeled by numbers in Figure 1-22(b). \nThe trader hopes that the stock price will drop and the difference between the sale price and the \npurchase price will result in a positive profit. \nOne can argue that there is no such thing as a \u201cbad market,\u201d there is only the wrong position in \nthe market. If the trader believes that a particul ar stock will move upwards, he should establish a \nlong position. Conversely, if he believes that th e stock will slide, he should establish a short \nposition6. The trader can also hedge his bets by ho lding simultaneously both long and short", "source": "Page 49", "chapter": "1"}
{"id": "40b5c9c6c9f0-1", "text": "positions on the same stock. \nComputerized Support for Individual Investor Trading \nWe need to consider several choices and constraint s for the system-to-be. First, we need to decide \nwhether the system-to-be will provide brokerage services, or will just provide trading advice. \nOnline brokerage firms already offer front-end system s for traders, so it will be difficult to insert \nour system-to-be between a trader and a broker. Offering our system-to-be as tool for on-a-side analysis (out of the trading loop) would have  limited appeal. The other option is to include \nbrokerage services, which will introduce significan t complexity into the system. An important \nconstraint on applicability of our system is th at real-time price quotations currently are not \navailable for free. We choose to consider both optio ns in this book. The first five chapters will \nconsider a case study of a system that incl udes a trader/broker services. Chapter 8 on Web \nservices will consider stock analyst services. Both versions are desc ribed in Section 1.5. \nKnowing how to place a trading order does not qualify  one as a trader. It w ould be equivalent of \nsaying that one knows how to drive a car just after learning how to use the steering wheel or the", "source": "Page 49", "chapter": "1"}
{"id": "40b5c9c6c9f0-2", "text": "brake. There is much more to driving a car th an just using the steering wheel or the brake. \nSimilarly, there is much more to trading than ju st executing trades. To continue with the analogy, \nwe need to have a \u201croad map,\u201d a \u201ctravel plan,\u201d and we also need to know how to read the \u201croad \nsigns,\u201d and so on. \nIn general, the trader would care to know if a trading opportunity arose and, once he places a \ntrading order, to track the status of the order. The help of computer technology has always been \nsought by traders for number crunching and scenario an alysis. The basic desire is to be able to tell \nthe future based on the knowledge of the past. Some financial economists view price movements \non stock markets as a purely \u201crandom walk,\u201d and believe that the past prices cannot tell us \nanything useful about future behavior of the pri ce. Others, citing chaos theory, believe that useful \n                                                      \n6 This is the idea of the so called inverse funds , see more here: B. Steverman: \u201cShorting for the 21st century: \nInverse funds allow investors to place bets  on predictions of a drop in stocks,\u201d Business Week , no. 4065, \np. 78, December 31, 2007.", "source": "Page 49", "chapter": "1"}
{"id": "dcf1a1a959d0-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 36\nregularities can be observed and e xploited. Chaos theory states that seemingly random processes \nmay in fact have been generated by a deterministic  function that is not random [Bao, et al., 2004]. \nBao, Yukun, Yansheng Lu, Jinl ong Zhang. \u201cForecasting stock prices by SVMs regression,\u201d \nArtificial Intelligence: Methodology, System s, and Applications, vol. 3192, 2004. \nA simple approach is to observe prices price i(t) of a given stock i over a window of time tcurrent  \uf02d \nWindow , \u2026, tcurrent  \uf02d 2, tcurrent  \uf02d 1, tcurrent . We could fit a regression line through the observed \npoints and devise a rule that a positive line slope  represents a buying opportunity, negative slope \na need to sell, and zero slope calls for no action. Obviously, it is not most profitable to buy when \nthe stock already is gaining nor it is to sell wh en the stock is already sliding. The worst-case \nscenario is to buy at a market top or to sell when markets hit bottom. Ideally, we would like to \ndetect the turning points and buy when the price is just about to start rising or sell when the price", "source": "Page 50", "chapter": "1"}
{"id": "dcf1a1a959d0-1", "text": "is just about to start falling. Detecting an ongoing  trend is relatively easy; detecting an imminent \nonset of a new trend is difficult but most desirable. SymmetricalTriangles\nAscending Descending\n\u201cWedge\u201d50\n45\n40\n3550\n45\n40\n35\n\u201cFlag\u201d30\n25\n20\n1530\n25\n20\n15\n\u201cPennant\u201d30\n25\n20\n1530\n25\n20\n1550\n45\n40\n35?\n50\n45\n40\n35?\n50\n45\n40\n35?\n50\n45\n40\n35?\n70\n65\n60\n55 ?70\n65\n60\n55 ?\nMajor trendNecklineLeft\nshoulderHeadRight\nshoulder\nHead and Shoulders TopMajor trendNecklineLeft\nshoulderHeadRight\nshoulder\nHead and Shoulders TopMajor trend\nNeckline\nLeft\nshoulder\nHeadRight\nshoulder\nHead and Shoulders BottomMajor trend\nNeckline\nLeft\nshoulder\nHeadRight\nshoulder\nHead and Shoulders BottomTrading\nvolume  \nFigure 1-23: Technical analysis of stock price trends: Some example types of trend patterns.\nIn all charts the horizontal axis represents ti me and the vertical axis stock price range. Each\nvertical bar portrays the high and low prices of a particular stock for a chosen time unit.", "source": "Page 50", "chapter": "1"}
{"id": "dcf1a1a959d0-2", "text": "vertical bar portrays the high and low prices of a particular stock for a chosen time unit.\nSource: Alan R. Shaw, \u201cMarket timing and technical analysis,\u201d in Sumner N. Levine\n(Editor), The Financial Analyst\u2019s Handbook, Second Edition , pp. 312-372, Dow Jones-Irwin,\nInc., Homewood, IL, 1988.", "source": "Page 50", "chapter": "1"}
{"id": "da1180e7a1cc-0", "text": "Chapter 1 \uf0b7 Introduction 37\nThis is where technical analysis  comes into picture. Technical analysts believe that market prices \nexhibit identifiable regularities (or patterns or i ndicators) that are bound to be repeated. Using \ntechnical analysis, various trends could be \u201cunear thed\u201d from the historical prices of a particular \nstock and potentially those could be \u201cprojected into future\u201d to have some estimation around \nwhere that stock price is heading. Technical analys ts believe that graphs give them the ability to \nform an opinion about any security without followi ng it in real time. They have come up with \nmany types of indicators that can be observe d in stock-price time series and various \ninterpretations of the meaning of those indicator s. Some chart formations are shown in Figure \n1-23. For example, the triangles and flags represen t consolidations or corrective moves in market \ntrends. A flag is a well-defined movement cont rary to the main trend. The head-and-shoulder  \nformations are used as indicators of trend reve rsals and can be either top or bottom. In the \n\u201cbottom\u201d case, for example, a major market lo w is flanked on both sides (shoulders) by two \nhigher lows. Cutting across the shoulders is so me resistance level called the neckline. ( Resistance", "source": "Page 51", "chapter": "1"}
{"id": "da1180e7a1cc-1", "text": "higher lows. Cutting across the shoulders is so me resistance level called the neckline. ( Resistance  \nrepresents price levels beyond which the market ha s failed to advance.) It is important to observe \nthe trading volume to confirm the price moveme nts. The increasing volume, as you progress \nthrough the pattern from left to right, tells yo u that more and more traders see the shifting \nimprovement in the company\u2019s fortunes. A \u201cbreakout \u201d (a price advance) in this situation signals \nthe end of a downtrend and a new direction in the price trend. Technical analysts usually provide \nbehavioral explanations for the price acti on and formation of trends and patterns. \nHowever, one may wonder if just looking at a se quence of price numbers can tell us everything \nwe need to know about the viability of an inve stment?! Should we not look for actual causes of \nprice movements? Is the company in bad financia l shape? Unable to keep up with competition? \nOr, is it growing rapidly? There is ample material available to the investor, both, in electronic and \nin print media, for doing a sound research before making the investment decision. This kind of \nresearch is called fundamental analysis , which includes analysis of important characteristics of \nthe company under review, such as:", "source": "Page 51", "chapter": "1"}
{"id": "da1180e7a1cc-2", "text": "the company under review, such as: \n1. Market share: What is the market standing of the company under review? How much share of \nthe market does it hold? How does that compare against the competitors? \n2. Innovations: How is the company fairing in terms of innovations? For example in 3M company \nno less than 25% of the revenues come from the i nnovative products of last 5 years. There is even \nan index for innovations available for review a nd comparison (8th Jan\u20192007 issue of Business \nWeek could be referred to). \n3. Productivity: This relates the input of all the major factors of production \u2013 money, materials \nand people to the (inflation adjusted) value of tota l output of goods and services from the outside \n4. Liquidity and Cash-flow: A company can run without profits for long years provided it has \nenough cash flows, but hardly the reverse is true. A company, if it has a profitable unit, but not \nenough cash flows, ends of \u201cputting that on sale\u201d or \u201cspinning that unit out.\u201d \nIn addition to the above indicators, number cr unching is also a useful way to fine-tune the \ndecision. Various financial numbers are readily available online, such as \n- Sales - EPS: Earning per Share", "source": "Page 51", "chapter": "1"}
{"id": "da1180e7a1cc-3", "text": "- Sales - EPS: Earning per Share \n- P/E \u2013 ttm: Trailing 12 months\u2019 ratio of Price per Share to that of Earning per Share", "source": "Page 51", "chapter": "1"}
{"id": "cf9a7df6680e-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 38\n- P/E \u2013 forward: Ratio of Estimated Price per Sh are for coming 12 months to that of Estimated \nEarning of coming 12 months \n- ROI: Return on Investment \nThe key barometer of stock market volatility is the Chicago Board Options Exchange's Volatility \nIndex, or VIX, which measures the fluctuations  of options contracts based on the S&P 100-stock \nindex. \nIn fact, one could argue that the single most important decision an investor can make is to get out \nof the way of a collapsing market7. \nWhere the investor is usually found to be handicappe d is when she enters into the market with the \nobjective of short term gains. The stock market , with its inherent volatility offers ample \nopportunities to exploit that volatility but what the inve stor lacks is an appropriate tool to assist in \nthis \u201cdecision-making\u201d process. \nThe investor would ideally like to \u201center\u201d the ma rket after it is open and would \u201cexit\u201d the market \nbefore it is closed, by the end of that day. The in vestor would seek a particular stock, the price of \nwhich she is convinced would rise by the end of the day, would buy it at a \u201clower\u201d price and", "source": "Page 52", "chapter": "1"}
{"id": "cf9a7df6680e-1", "text": "would sell it at a higher price. If she gets inkling,  somehow, that a particular stock is going to go \nup, it will be far easier for her to invest in that stock. Usually time is of essence here and this is \nwhere technical analysis  comes into picture. \nAgain, we must clearly state what the user needs: the user\u2019s goals. It is not very helpful to state \nthat the user\u2019s goal is \u201cto make money.\u201d We must be as specific as possible, which can be \nachieved by keeping asking questions \u201cHow?\u201d An ex ample of goal refinement is shown in Figure \n1-24. Note that in answering how to identify a trading opportunity, we also need to know whether our trader has a short-term or long-term outlook to  investment. In addition, different trader types \nmay compose differently the same sub-goals (low-l evel goals) into high-level goals. For example, \nthe long-term investor would primarily consider the company\u2019s prospects ( G1.2.1), but may \nemploy time-series indicators ( G1.2.2) to decide the timing of their investments. Just because one \n                                                      \n7 Michael Mandel, \u201cBubble, bubble, who\u2019s in trouble?\u201d Business Week , p. 34, June 26, 2006. Question : How?\nPossible answers :\nQuestion : How?", "source": "Page 52", "chapter": "1"}
{"id": "cf9a7df6680e-2", "text": "Possible answers :\nQuestion : How?\nPossible answers :Trader\u2019s goal G1: To profit from investment\nTrader\u2019s goal G1.1: To identify trading opportunity\nTrader\u2019s goal G1.2: To ensure timely & reliable transactionTrader\u2019s goal G1.3: To track order status\nLong-term investor\u2019s goal G1.2.1 : To identify growth/value stock\nShort-term trader\u2019s goal G1.2.2 : To identify arbitrage opportunity (\u201cindicators\u201d in time series)\nFigure 1-24: Example of refining the representation of user\u2019s goals.", "source": "Page 52", "chapter": "1"}
{"id": "06f5dcee47f3-0", "text": "Chapter 1 \uf0b7 Introduction 39\nanticipates that an investment will be held  for several years because of its underlying \nfundamentals, that does not mean that he should overlook the opportunity for buying at a lower \nprice (near the bottom of an uptrend). \nIt is important to understand the larger context of the problem that we are trying to solve. There \nare already many people who are trying to forecast financial markets. Companies and \ngovernments spend vast quantities of resources atte mpting to predict financial markets. We have \nto be realistic of what we can achieve with re latively minuscule resources and time period of one \nacademic semester. \nFrom the universe of possible market data, we have access only to a subset, which is both due to \neconomic (real-time data are available with paid  subscription only) and computational (gathering \nand processing large data quantities requires gr eat computing power) reasons. Assuming we will \nuse freely available data and a modest computing power, the resulting data subset is suitable only \nfor certain purposes. By implication, this limits our  target customer and what he can do with the \nsoftware-to-be. \nIn conclusion, our planned tool is not for a \u201cprofe ssional trader.\u201d This tool is not for institutional", "source": "Page 53", "chapter": "1"}
{"id": "06f5dcee47f3-1", "text": "investor or large brokerage/financial firm. This t ool is for an ordinary single investor who does \nnot have acumen of financial concepts, yet would like  to trade smartly. This tool is for an investor \nwho does not have too much time to do a thoro ugh research on all aspects of a particular \ncompany, neither does he have understanding and mastery over financ ial number crunching. It is \nunlikely to be used for \u201cfrequency trading,\u201d because we lack computing power and domain \nknowledge needed for such sophisticated uses. \n \n1.4 The Object Model \n \n\u201cYou cannot teach beginners top-down programming , because they don\u2019t know which end is up.\u201d \n\u2014C.A.R. Hoare \nAn object  is a software packaging of data and code together into a unit within a running \ncomputer program. Objects can interact by calling other objects for their services. In Figure 1-25, \nobject Stu calls the object Elmer  to find out if 905 and 1988 ar e coprimes. Two integers are \nsaid to be coprime  or relatively prime  if they have no common factor other than 1 or, \nequivalently, if their greatest common divisor is 1. Elmer  performs computation and answers", "source": "Page 53", "chapter": "1"}
{"id": "06f5dcee47f3-2", "text": "positively. Objects do not accept arbitrary calls. In stead, acceptable calls are defined as a set of \nobject \u201cmethods.\u201d This fact is indicated by the method areCoprimes()  in Figure 1-25. A \nmethod  is a function (also known as operation, procedure, or subroutine) associated with an \nobject so that other objects can call on its serv ices. Every software object supports a limited \nnumber of methods. Example methods for an ATM machine object are illustrated in Figure 1-26. \nThe set of methods along with the exact format  for calling each method (known as the method \n\u201csignature\u201d) represents the object\u2019s interface  (Figure 1-27). The interface specifies object\u2019s \nbehavior \u2014what kind of calls it accepts and what it does in response to each call.", "source": "Page 53", "chapter": "1"}
{"id": "436cf2d6a6cf-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 40\nSoftware objects work together to carry out the ta sks required by the program\u2019s business logic. In \nobject-oriented terminology, objects communicate with each other by sending messages . In the \nworld of software obj ects, when an object A calls a method on an object B we say, \u201c A sends a \nmessage to B.\u201d In other words, a client  object requests the execution of a method from a server  \nobject by sending it a message. The message is  matched up with a method defined by the \nsoftware class to which the receiving object bel ongs. Objects can alternate between a client role \nand a server role. An object is in a client role wh en it is the originator of an object invocation, no \nmatter whether the objects are located in the same memory space or on different computers. Most \nobjects play both client and server roles. \nIn addition to methods, software objects have attributes or properties. An attribute  is an item of \ndata named by an identifier that represents so me information about the object. For example, a \nperson\u2019s attribute is the age, or height, or wei ght. The attributes contain the information that \ndifferentiates between the various  objects. The currently assigned values  for object attributes \ndescribe the object\u2019s internal state  or its current condition of existence. Everything that a", "source": "Page 54", "chapter": "1"}
{"id": "436cf2d6a6cf-1", "text": "describe the object\u2019s internal state  or its current condition of existence. Everything that a \nsoftware object knows (state) and can do (behavio r) is expressed by the attributes and the \nmethods within that object. A class  is a collection of objects that share the same set of attributes \nand methods (i.e., the interface). Think of a clas s as a template or blueprint from which objects \nare made. When an instance object is  created, we say that the objects are instantiated . Each \ninstance object has a distinct identity and its own copy of attributes and methods. Because objects \nare created from classes, you must design a cla ss and write its program code before you can \ncreate an object. \nObjects also have special methods called constructors , which are called at the creation of an \nobject to \u201cconstruct\u201d the values of object\u2019s data members (attributes). A constructor prepares the \nnew object for use, often accepting parameters whic h the constructor uses to set the attributes. \nUnlike other methods, a constructor never has a retu rn value. A constructor should put an object \nin its initial, valid, safe state, by initializing the attributes with meaningful values. Calling a \nconstructor is different from calling other methods  because the caller need s to know what values", "source": "Page 54", "chapter": "1"}
{"id": "436cf2d6a6cf-2", "text": "constructor is different from calling other methods  because the caller need s to know what values \nare appropriate to pass as pa rameters for initialization. Elmer Stuelmer .areCoprimes(\n905, 1988\n)Prime factorization:\n905   = 5 \uf0b4181\n1988 = 2 \uf0b42 \uf0b47 \uf0b471\nResult:\nYES!\nFigure 1-25: Client object sends a message to a server object by invoking a method on it.\nServer object is the method receiver.", "source": "Page 54", "chapter": "1"}
{"id": "a1e001f8065b-0", "text": "Chapter 1 \uf0b7 Introduction 41\n \n 1234  5678  123451234  5678  12345method-1:\nAccept cardmethod-2:\nRead codemethod-3:\nTake selection123456789012345678901234567890Object:\nATM machine\n1\n234\n567\n8\n9 01\n234\n567\n8\n9 01\n234\n567\n8\n9 0\nFigure 1-26: Acceptable calls are defined by object \u201cmethods,\u201d as shown here by example\nmethods for an ATM machine object. \nmethod-1\nmethod-2\nmethod-3attributesInterface\nFigure 1-27: Software object interface is a set of object\u2019s methods with the format for\ncalling each method.", "source": "Page 55", "chapter": "1"}
{"id": "631606f212ec-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 42\nTraditional approach to program development, known as procedural approach , is process \noriented in that the solution is represented as a sequence of steps  to be followed when the \nprogram is executed. The processor receives certain  input data and first does this, then that, and \nso on, until the result is outputted. The object-oriented approach  starts by breaking up the whole \nprogram into software objects with  specialized roles and creating a division of labor . Object-\noriented programming then, is describing what messages get exchanged between the objects in \nthe system. This contrast is illustrated on the sa fe home access system case study (Section 1.3.1). \nExample 1.1 Procedural approach versus Object-oriented approach \nThe process-based or procedural approach represents solution as a sequence of steps  to be followed \nwhen the program is executed, Figure 1-28(a). It is a global  view of the problem as seen by the single \nagent advancing in a stepwise fashion towards the solution. The step-by-step approach is easier to understand when the whole problem is relatively si mple and there are few alternative choices along the \npath. The problem with this approach is when the number of steps and alternatives becomes overwhelming. \nObject-oriented (OO) approach adopts a local  view of the problem. Each object specializes only in a", "source": "Page 56", "chapter": "1"}
{"id": "631606f212ec-1", "text": "relatively small subproblem and performs its task  upon receiving a message from another object, \nFigure 1-28(b). Unlike a single agent travelling ove r the entire process, we can  think of OO approach \nas organizing many tiny agents into a \u201cbucket brig ade,\u201d each carrying its task  when called upon, Figure \n1-28(c). When an object completes its task, it sends a message to another object saying \u201cthat does it for me; over to you\u2014here\u2019s what I did; now it\u2019s your tu rn!\u201d Here are pseudo-Java code snippets for two \nobjects, KeyChecker and LockCtrl: \nListing 1-1: Object-oriented code for classe s KeyChecker (left) and LockCtrl (right). \npublic class KeyChecker { \n    protected LockCtrl lock_; \n    protected java.util.Hashtable \n        validKeys_; \n    ... \n \n /** Constructor  */ \n    public KeyChecker( \n        LockCtrl lc, ...) { \n        lock_ = lc; \n        ... \n    } \n \n /** This method waits for and  \n  * validates the user-supplied key  \n  */ \n    public keyEntered( \n        String key \n    ) { \n        if ( \n         validKeys.containsKey(key)\n        ) {", "source": "Page 56", "chapter": "1"}
{"id": "631606f212ec-2", "text": "if ( \n         validKeys.containsKey(key)\n        ) { \n            lock_.unlock(id); \n        } \n    } else { \n            // deny access  \n            // & sound alarm bell?  \n        } public class LockCtrl { \n    protected boolean \n        locked_ = true; // start locked  \n    protected LightCtrl switch_; \n    ... \n \n /** Constructor  */ \n    public LockCtrl( \n        LightCtrl sw, ...) { \n        switch_ = sw; \n        ... \n    } \n \n /** This method sets the lock state  \n  *  and hands over control to the switch  \n  */ \n    public unlock() { \n        ... operate the physical lock device  \n        locked_ = false; \n        switch_.turnOn(); \n    } \n \n    public lock(boolean light) { \n        ... operate the physical lock device  \n        locked_ = true; \n        if (light) { \n            switch_.turnOff(); \n        }", "source": "Page 56", "chapter": "1"}
{"id": "3defefc3fb1b-0", "text": "Chapter 1 \uf0b7 Introduction 43\n    } \n}     } \n} \nTwo important observations: \nObject roles/responsibilities are focused (each object is focused on one task, as its name says); later, \nwe will see that there are more responsibilities, like calling other objects \nObject\u2019s level of abstraction must be carefully chosen: here, we chose key checker and its method \nkeyEntered(), instead of specifying the method of  key entry (type in code vs. acquire biometric \nidentifier), and LockCtrl does not specify how exactly the lock device functions. Too low level specifies such details (which could be specified in a derived class), or too high abstraction level just says control-the-access(). \nThe key developer skill in object-oriented software development is performing the division of labor  for \nsoftware objects. Preferably, each object should have  only one clearly defined task (or, responsibility) \nand that is relatively easy to achieve. The main difficulty in assigning responsibilities arises when an object needs to communicate with other objects in accomplishing a task. \nWhen something goes wrong, you want to know where to look or whom to single out. This is \nparticularly important for a complex system, with many functions and interactions. Object-oriented \napproach is helpful becau se the responsibilities tend to be know n. However, the responsibilities must", "source": "Page 57", "chapter": "1"}
{"id": "3defefc3fb1b-1", "text": "be assigned adequately in the first place. That is why assigning responsibilities to software objects is \nprobably the most important skill in software development. Some responsibilities are obvious. For example, in Figure 1-28 it is natural to assign the control of the light switch to the LightCtrl object. \nHowever, assigning the responsibility of communicati ng messages is harder. For example, who should \nsend the message to the LightCtrl object to turn the switch on? In Figure 1-28, LockCtrl is charged with this responsibility. Another logical choice is KeyChecker, perhaps even more suitable, because it is the KeyChecker who ascertains the validity of a key and knows whether or not unlocking and lighting actions should be initiated. More details  about assigning responsibilities are presented in \nSection 2.6. \n \nThe concept of objects allows us to divide soft ware into smaller pieces to make it manageable. \nThe divide-and-conquer approach goes under di fferent names: reductionism, modularity, and \nstructuralism. The \u201cobject orientation\u201d is al ong the lines of the reduc tionism paradigm: \u201cthe \n(b)Key \nCheckerKey \nCheckerLock \nCtrlLock \nCtrlLight \nCtrlLight \nCtrlunlock() turnOn()\nUnlock the \nlockYesNo\nTurn the\nlight on Valid \nkey\n?\n(a)\nKey", "source": "Page 57", "chapter": "1"}
{"id": "3defefc3fb1b-2", "text": "Turn the\nlight on Valid \nkey\n?\n(a)\nKey \nCheckerKey \nCheckerLock \nCtrlLock \nCtrlLight \nCtrlLight \nCtrlunlock() turnOn()\n(c)\n \nFigure 1-28: Comparison of process-oriented (procedural) and object-oriented methods on\nthe safe home access case study. (a) A flowchar t for a procedural solution; (b) An object-\noriented solution. (c) An object can be thought of as a person with expertise and\nresponsibilities.", "source": "Page 57", "chapter": "1"}
{"id": "cdf4b05b3d31-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 44\ntendency to or principle of analysing complex th ings into simple constituents; the view that a \nsystem can be fully understood in terms of its is olated parts, or an idea in terms of simple \nconcepts\u201d [Concise Oxford Dictionary, 8th Ed., 1991]. If your car does not work, the mechanic \nlooks for a problem in one of the parts\u2014a dead  battery, a broken fan belt, or a damaged fuel \npump. A design is modular  when each activity of the system is performed by exactly one unit, \nand when inputs and outputs of each unit are well defined. Reductionism is the idea that the best \nway to understand any complicated thing is to investigate the natu re and workings of each of its \nparts. This approach is how humans solve problem s, and it comprises the very basis of science. \n \n SIDEBAR 1.1: Object Orientation  \n  \n\uf0a8 Object orientation is a worldview that emerge d in response to real-world problems faced by \nsoftware developers. Although it has had many successes and is achieving wide adoption, as \nwith any other worldview, you may question its soundness in the changing landscape of software development. OO stipulates that data and processing be packaged together, data being", "source": "Page 58", "chapter": "1"}
{"id": "cdf4b05b3d31-1", "text": "encapsulated  and unreachable for external manipulation other than through object\u2019s methods. It \nmay be likened to disposable cameras where film  roll (data) is encapsula ted within the camera \nmechanics (processing), or early digital gadgets with a built-in memory. People have not really \nliked this model, and most devices now come with a replaceable memory card. This would \nspeak against the data hiding and for separation of data and processing. As we will see in \nChapter 8, web services are challenging the object-oriented worldview in this sense. \nThere are three important aspects of object  orientation that will be covered next: \n\uf0b7 Controlling access to object elements, known as encapsulation \n\uf0b7 Object responsibilities and relationships \n\uf0b7 Reuse and extension by inheritance and composition \n1.4.1 Controlling Access to Object Elements \nModular software design provides means for break ing software into meaningful components, \nFigure 1-29. However, modules are only loose gr oupings of subprograms a nd data. Because there \nis no strict ownership of data, subprograms can infringe on each other\u2019s data and make it difficult \nto track who did what and when. Object oriented approach goes a step further by emphasizing \nstate encapsulation , which means hiding  the object state, so that it can be observed or modified", "source": "Page 58", "chapter": "1"}
{"id": "cdf4b05b3d31-2", "text": "only via object\u2019s methods. This approach enab les better control over interactions among the \nmodules of an application. Traditional software modules, unlike software objects, are more \n\u201cporous;\u201d encapsulation helps prevent \u201cleaking\u201d  of the object state and responsibilities. \nIn object-orientation, object data are more than just program data\u2014they are object\u2019s attributes , \nrepresenting its individual characteristics or proper ties. When we design a class, we decide what \ninternal state it has and how that state is to app ear on the outside (to other objects). The internal \nstate is held in the attributes, also known as class instance variables . UML notation for software \nclass is shown in Figure 1-30. Many progra mming languages allow making the internal state \ndirectly accessible through a variable manipulation, which is a bad practice. Instead, the access to \nobject\u2019s data should be controlled. The extern al state should be exposed through method calls,", "source": "Page 58", "chapter": "1"}
{"id": "9fc84cf9860b-0", "text": "Chapter 1 \uf0b7 Introduction 45\ncalled getters  and setters , to get or set the instance variable s. Getters and setters are sometimes \ncalled accessor  and mutator  methods, respectively. For example,  for the class LightController in \nFigure 1-31 the getter and setter methods for the attribute lightIntensity  are \ngetLightIntensity()  and setLightIntensity() , respectively. Getter and setter \nmethods are considered part of object\u2019s interface . In this way, the interface exposes object\u2019s \nbehavior, as well as its attri butes via getters and setters. \nAccess to object attributes a nd methods is controlled using access designations , also known as \nvisibility  of attributes and methods. When an obj ect attribute or method is defined as public , \nother objects can directly access it. When an attribute or method is defined as private , only \nthat specific object can access it (not even the de scendant objects that inherit from this class). \nAnother access modifier, protected , allows access by related object s, as described in the next \nsection. The UML symbols for access designations in  class diagrams are as follows (Figure 1-30): \n+ for public , global visibility; # for protected  visibility; and, \u2212 for private  within-the-\nclass-only visibility.", "source": "Page 59", "chapter": "1"}
{"id": "9fc84cf9860b-1", "text": "class-only visibility. \nWe separate object design into three parts: its public interface , the terms and conditions of use \n(contracts ), and the private details of ho w it conducts its business (known as implementation ). \nThe services presented to a client object comprise the interface . The interface is the fundamental \nmeans of communication between objects. Any behavi or that an object provides must be invoked \nby a message sent using one of the provided interface methods. The interface should precisely \ndescribe how client objects of the class intera ct with the class. Only  the methods that are \ndesignated as public  comprise the class interface (\u201c+\u201d symbol in UML class diagrams). For \nexample, in Figure 1-31 the class HouseholdDeviceController has three public methods that \nconstitute its interface. The private method sendCommandToUSBport()  is not part of the Methods\n(behavior) Attributes\n/data\n(state)\nSoftware Object 1Subprograms\n(behavior)\nData\n(state)\nSoftware Module 2 Software Module 3 Software Module 1\nSoftware Object 2 Software Object 3(a)\n(b)\nFigure 1-29: Software modules (a) vs. software objects (b).", "source": "Page 59", "chapter": "1"}
{"id": "60a33474af50-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 46\ninterface. Note that interfaces do not normally in clude attributes\u2014only methods. If a client needs \nto access an attribute, it should use the getter and setter methods. \nEncapsulation is fundamental to object orientati on. Encapsulation is the process of packaging \nyour program, dividing its classes into the public  interface and the private implementation. The \nbasic question is, what in a class (which elemen ts) should be exposed and what should be hidden. \nThis question pertains equally to attributes and behavior. (Recall that attributes should never be \nexposed directly, but instead by using getter a nd setter methods.) Encapsulation hides everything \nthat is not necessary for other classes to know about. By localizing attributes and behaviors and \npreventing logically unconnected functions from ma nipulating object elements, we ensure that a \nchange in a class will not cause a rippling eff ect around the system. This property makes for \neasier maintaining, testing, and extending the classes. \nObject orientation continues with the black-box approach of focusing on interface. In Section \n1.2.2, the whole system was considered as a black box, and here we focus on the micro-level of \nindividual objects. When specifying an interface, we are only interested in what  an object does,", "source": "Page 60", "chapter": "1"}
{"id": "60a33474af50-1", "text": "not how it does it. The \u201chow\u201d part is considered in implementation. Class implementation  is the \nprogram code that specifies how the class conducts  its business, i.e., performs the computation. \nNormally, the client object does not care how the computation is performed  as long as it produces \nthe correct answer. Thus, the implementation can ch ange and it will not affect the client\u2019s code. \nFor example, in Figure 1-25, object Stu does not care that the object Elmer  answers if numbers \nare coprimes. Instead, it may use any other object that provides the method areCoprimes()  as \npart of its interface. \nAny Mathematician Stuanymathematician .areCoprimes(\n905, 1988\n)[ some correct\ncomputation ]\nResult:\nYES!\n ClassName\n\u2013 attribute_1 : int\n\u2013 attribute_2 : boolean\n#  attribute_3 : String\n+  operation_1() : void\n+  operation_2() : String\n#  operation_3(arg1 : int)Three compartments:\n1. Classifier name\n2. Attributes\n3. Operationsprivate attributesprivate attributes\nprotected attributeprotected attribute\npublic operationspublic operations\nprotected operationprotected operation\nFigure 1-30: UML notation for software class.", "source": "Page 60", "chapter": "1"}
{"id": "1f2ff00eb88f-0", "text": "Chapter 1 \uf0b7 Introduction 47\nContracts can specify different terms and conditions of object. Contract may apply at design time \nor at run time. Programming languages such as Ja va and C# have two la nguage constructs for \nspecifying design-time contracts. \nRun time contracts specify the conditions unde r which an object methods can be called upon \n(conditions-of-use guarantees), and what outcome  methods achieve when they are finished \n(aftereffect guarantees). \nIt must be stressed that the interchangeable object s must be identical in every way\u2014as far as the \nclient object\u2019s perceptions go. \n1.4.2 Object Responsibilities and Relationships \nThe key characteristic of object-orientation is the concept of responsibility  that an object has \ntowards other objects. Careful assignment of  responsibilities to objects makes possible the \ndivision of labor, so that each object is focused on its specialty. Other characteristics of object orientation, such as polymorphism, encapsulation,  etc., are characteristics local to the object \nitself. Responsibilities characterize the whole system  design. To understand how, you need to read \nChapters 2, 4, and 5. Because objects work toge ther, as with any organization you would expect \nthat the entities have defined roles and respons ibilities. The process of determining what the", "source": "Page 61", "chapter": "1"}
{"id": "1f2ff00eb88f-1", "text": "that the entities have defined roles and respons ibilities. The process of determining what the \nobject should know (state) and what it should do (behavior) is known as assigning the \nresponsibilities . What are object\u2019s responsibilities? The key object responsibilities are: \n1.\n Knowing something ( memorization  of data or object attributes) \n2. Doing something on its own ( computation  programmed in a \u201cmethod\u201d) \n3. Calling methods of other objects ( communication  by sending messages) \nWe will additionally distinguish a special t ype of doing/computation responsibilities: \n2.a) Business rules for implementi ng business policies and procedures \nBusiness rules are important to distinguish becau se, unlike algorithms for data processing and \ncalculating functions, they require knowledge of  customer\u2019s business context and they often \nchange. We will also distingui sh communication responsibilities: \n3.a) Calling constructor methods; this is special because the caller must know the \nappropriate parameters for in itialization of the new object. \nAssigning responsibilities essentially means decidi ng what methods an object gets and who \ninvokes those methods. Large part of this book  deals with assigning object responsibilities, \nparticularly Section 2.6 and Chapter 5. \nThe basic types of class relationships are inheritance , where a class inherits elements of a base", "source": "Page 61", "chapter": "1"}
{"id": "1f2ff00eb88f-2", "text": "The basic types of class relationships are inheritance , where a class inherits elements of a base \nclass, and composition , where a class contains a reference to another class. These relationships \ncan be further refined as: \n\uf0b7 Is-a relationship (hollow triangle symbol \u2206 in UML diagrams): A class \u201cinherits\u201d from \nanother class, known as base class, or parent class, or superclass \n\uf0b7 Has-a  relationship: A class \u201ccontains\u201d another class Base ClassBase Class\nContainerContainer", "source": "Page 61", "chapter": "1"}
{"id": "d08cfd16649f-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 48\n- Composition  relationship (filled diamond symbol \u2666 in UML diagrams ): The \ncontained item is an integral part of the containing item, such as a leg in a desk \n- Aggregation  relationship (hollow diamond symbol \u25ca): The contained item is an \nelement of a collection but it can also exist on its own, such as a desk in an office \n\uf0b7 Uses-a  relationship (arrow symbol \u2193 in UML diagrams): A class \u201cuses\u201d another class \n\uf0b7 Creates  relationship: A class \u201ccreates\u201d anothe r class (calls a constructor method) \nHas-a and Uses-a relationships can be seen as types of composition. \n1.4.3 Reuse and Extension by Inheritance and \nComposition \nOne of the most powerful characteristics of obj ect-orientation is code reuse. Procedural \nprogramming provides code reuse to a certain degr ee\u2014you can write a procedure and then reuse \nit many times. However, object-oriented programmi ng goes an important step further, allowing \nyou to define relationships betwee n classes that facilitate not onl y code reuse, but also better \noverall design, by organizing classes and fact oring in commonalities of various classes. \nTwo important types of relationships in the object model enable reuse and extension: inheritance", "source": "Page 62", "chapter": "1"}
{"id": "d08cfd16649f-1", "text": "Two important types of relationships in the object model enable reuse and extension: inheritance  \nand composition . Inheritance relations are static\u2014they ar e defined at the compile time and cannot \nchange for the object\u2019s lifetime. Composition is dynamic, it is defined at run time, during the participating objects\u2019 lifetimes, and it can change. \nWhen a message is sent to an object, the object must have a method defined to respond to that \nmessage. The object may have its own method define d as part of its interface, or it may inherit a \nmethod from its parent class. In an inheritance hi erarchy, all subclasses i nherit the interfaces from \ntheir superclass. However, becau se each subclass is a separa te entity, each might require a \nseparate response to the same message. For exam ple, in Figure 1-31 subclasses Lock Controller \nand Light Controller inherit the three public met hods that constitute the interface of the superclass \nHousehold Device Controller. The private method is private to the superclass and not available to \nthe derived subclasses. Light Controller overrides  the method \nactivate()  that it inherits from \nits superclass, because it needs to adjust the light  intensity after turning on the light. The method \ndeactivate()  is adopted unmodified. On the other hand, Lock Controller overrides both", "source": "Page 62", "chapter": "1"}
{"id": "d08cfd16649f-2", "text": "deactivate()  is adopted unmodified. On the other hand, Lock Controller overrides both \nmethods activate()  and deactivate()  because it requires additional behavior. For \nexample, in addition to disarming the lock, Lock Controller\u2019s method deactivate()  needs to \nstart the timer that counts down how long time th e lock has remained unlocked, so it can be \nautomatically locked. The method activate()  needs to clear the timer, in addition to arming \nthe lock. This property that the same method be haves differently on different subclasses of the \nsame class is called polymorphism . \nInheritance applies if several objects have some  responsibilities in common. The key idea is to \nplace the generic algorithms in a base class  and inherit them into different detailed contexts of \nderived classes . With inheritance, we can program by  difference. Inheritance is a strong \nrelationship, in that the derivatives are inextri cably bound to their base classes. Methods from the \nbase class can be used only in its own hierar chy and cannot be reused in other hierarchies.", "source": "Page 62", "chapter": "1"}
{"id": "af4ccc9ce7d6-0", "text": "Chapter 1 \uf0b7 Introduction 49\n \n1.5 Student Team Projects \n \n\u201cKnowledge must come through action; you can have no test which is not fanciful, save by trial.\u201d \n\u2014Sophocles \n\u201cI have been impressed with the urgency of do ing. Knowing is not enough; we must apply. \nBeing willing is not enough; we must do.\u201d \u2014Leonardo da Vinci \nThe book website, given in Preface, describes several student team projects. These projects are \nselected so each can be accomplished by a team of undergraduate students in the course of one \nsemester. At the same time, the basic version ca n be extended so to be suitable for graduate \ncourses in software engineering and some of the projects can be extended even to graduate theses. \nHere I describe only two projects and more proj ects along with additiona l information about the \nprojects described here is available at  the book\u2019s website, given in Preface. \nEach project requires the student to learn one or more technologies specific for that project. In \naddition, all student teams should obtain a UML diagramming tool. \n \n1.5.1 Stock Market Investment Fantasy League \nThis project is fashioned after major sports fant asy leagues, but in the stock investment domain.", "source": "Page 63", "chapter": "1"}
{"id": "af4ccc9ce7d6-1", "text": "You are to build a website  which will allow investor players to make virtual investments in real-\nworld stocks using fantasy money. The system a nd its context are illustrated in Figure 1-32. Each LightController\n\u2013 lightIntensity : int\n+  activate( )\n+  getLightIntensity(value : int)+  setLightIntensity( ) : intLightController\n\u2013 lightIntensity : int\n+  activate( )\n+  getLightIntensity(value : int)+  setLightIntensity( ) : intInheritancerelationship:Base classis extended\nby two classes\nLockController\n\u2013 autoLockInterval : long\n+  activate( )\n+  deactivate( )\u2013 startAutolockTimer( )\u2013 performAutoLock( ) : booleanLockController\n\u2013 autoLockInterval : long\n+  activate( )\n+  deactivate( )\u2013 startAutolockTimer( )\u2013 performAutoLock( ) : booleanHouseholdDeviceController\n\u2013 deviceStatus : boolean\n+  activate( )\n+  deactivate( )+  isActivated( ) : boolean\u2013 sendCommandToUSBport(cmd : string)HouseholdDeviceController\n\u2013 deviceStatus : boolean\n+  activate( )\n+  deactivate( )+  isActivated( ) : boolean\u2013 sendCommandToUSBport(cmd : string)\nFigure 1-31: Example of object inheritance.", "source": "Page 63", "chapter": "1"}
{"id": "a66182946809-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 50\nplayer has a personal account with fantasy mone y in it. Initially, the player is given a fixed \namount of startup funds. The player uses these funds to virtually buy the stocks. The system then \ntracks the actual stock movement on real-world ex changes and periodically adjusts the value of \nplayers\u2019 investments. The actual stock prices ar e retrieved from a third-party source, such as \nYahoo! Finance, that monitors stock exchanges and maintains up-to-date stock prices. Given a \nstock in a player\u2019s portfolio, if the corresponding actual stock loses value on a real-world stock exchange, the player\u2019s virtual investment lose s value equally. Likewise, if the corresponding \nactual stock gains value, the player\u2019s virt ual investment grows in the same way. \nThe player can sell the existing stocks or buy ne w ones at any time. This system does not provide \nany investment advice. When player sells a stock,  his/her account is credited with fantasy money \nin the amount that corresponds to the current  stock price on a stock exchange. A small \ncommission fee is charged on all trading trans actions (deducted from the player\u2019s account). \nYour business model calls for advertisement revenues to support financially your website. \nAdvertisers who wish to display their products on  your website can sign-up at any time and create", "source": "Page 64", "chapter": "1"}
{"id": "a66182946809-1", "text": "their account. They can upload/cancel advertisem ents, check balance due, and make payments \n(via a third party, e.g., a credit card company or PayPal.com). Every time a player navigates to a \nnew window (within this website), the system random ly selects an advertisement and displays the \nadvertisement banner in the window. At the same time, a small advertisement fee is charged on \nthe advertiser\u2019s account. A more ambitious version of the system  would fetch an  advertisement \ndynamically from the advertiser\u2019s we bsite, just prior to displaying it. \nTo motivate the players, we consider two mechanis ms. One is to remunerate the best players, to \nincrease the incentive to win. For example, on ce a month you will award 10 % of advertisement \nprofits to the player of the month. The remuneration is conducted via a third party, such as \nPayPal.com. In addition, the system may support learning by analyzing successful traders and extracting information about their trading strategi es. The simplest service may be in the form \nstock buying recommendations: \u201cplayers who bought this stock also bought these five others.\u201d \nMore complex strategy analysis may be devised. Stock Market Investment Fantasy League System\nPlayersSystem\nadmin\n(e.g., Google/Yahoo! Finance) (e.g., PayPal)Web \nclientsServers \nand data \nstorage", "source": "Page 64", "chapter": "1"}
{"id": "a66182946809-2", "text": "clientsServers \nand data \nstorage\nStock \nreporting \nwebsitePayment\nsystemReal-world\nstock \nexchanges\nAdvertisers\nFigure 1-32: Stock market fantasy league system  and the context within which it operates.", "source": "Page 64", "chapter": "1"}
{"id": "2b7ec6048add-0", "text": "Chapter 1 \uf0b7 Introduction 51\nStatement of Requirements \nFigure 1-33 shows logical grouping of func tions requested from our system-to-be. \nPlayer portfolio consists of positions \u2014individual stocks owned by the player. Each position \nshould include company name, ticker symbol, the number of shares owned by this player, and \ndate and price when purchased. Player should be able to specify stocks to be tracked without \nowning any of those stocks. Player should also be  able to specify buy- and sell thresholds for \nvarious stocks; the system should alert (via email)  the player if the current price exceeds any of \nthese thresholds. \nStock prices should be re trieved periodically to valuate the por tfolios and at the moment when the \nuser wishes to trade. Because price retrieva l can be highly resource demanding, the developer \nshould consider smart strategies for retrieval. Fo r example, cache management strategies could be \nemployed to prioritize the stocks based on the number of players that own it, the total number of shares owned, etc. \nAdditional Information \nI would strongly encourage the reader to look at  Section 1.3.2 for an overview of financial \ninvestment. Additional informati on about this project can be f ound at the book website, given in \nPreface. \nhttp://finance.yahoo.com/ Web Client for Advertisers", "source": "Page 65", "chapter": "1"}
{"id": "2b7ec6048add-1", "text": "Preface. \nhttp://finance.yahoo.com/ Web Client for Advertisers\n\u2022 Account management\n\u2022 Banner uploading and removal\u2022 Banner placement selectionWeb Client for Players\n\u2022R e g i s t r a t i o n\u2022 Account/Portfolio management\u2022 Trading execution & history\n\u2022 Stock browsing/searching\n\u2022 Viewing market prices & historySystem Administration \nFunctions\n\u2022 User management\n\u2022 Selection of players for awards\n\u2022 Dashboard for monitoring\nthe league activities\nPlayer Management\n\u2022 Account balance\u2022 Trading support\u2022 Transactions archiving\u2022 Portfolio valuation\u2022 Periodic reporting (email)Advertiser Management\n\u2022 Account balance\u2022 Uploading new banners\u2022 Banner placement selectionReal-World Market\nObservation & Analysis\n\u2022 Retrieval of stock prices\n- On-demand vs. periodic\n\u2022A n a l y s i s\n- Technical & fundamental\n\u2022?User Functions\nBackend Operations\nLeague Management\n\u2022 Player ranking\n\u2022 Awards disbursement control\n\u2022 Trading performance analysis\u2022 Coaching of underperformers\nFigure 1-33: Logical grouping of required functions for Stock Market Fantasy League.", "source": "Page 65", "chapter": "1"}
{"id": "a3d3ca9a373a-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 52\nhttp://www.marketwatch.com/ \nSee also Problem 2.29 and Problem 2.32 at the end of Chapter 2, the solutions of which can be \nfound at the back of the text. \n \n1.5.2 Web-based Stock Forecasters \n\u201cBusiness prophets tell what is going to happen, bu siness profits tell what has happened.\u201d \u2014Anonymous \nThere are many tools available to investors but none of them removes entirely the element of \nchance from investment decisions. Large tradi ng organizations can employ sophisticated \ncomputer systems and armies of analysts. Our goal is to help the individual investor make better \ninvestment decisions. Our system will use the Delphi method,8 which is a systematic interactive \nforecasting method for obtaining consensus expect ation from a panel of independent experts. \nThe goal of this project is to have multiple stude nt teams implement Web services (Chapter 8) for \nstock-prediction. Each Web service (WS) will track  different stocks and, when queried, issue a \nforecast about the price movement for a given st ock. The client module acts as a \u201cfacilitator\u201d \nwhich gathers information from multiple Web serv ices (\u201cindependent experts\u201d) and combines \ntheir answers into a single recommendation. If di fferent Web services offer conflicting answers,", "source": "Page 66", "chapter": "1"}
{"id": "a3d3ca9a373a-1", "text": "their answers into a single recommendation. If di fferent Web services offer conflicting answers, \nthe client may repeat the process of queryi ng and combining the answers until it converges \ntowards the \u201ccorrect\u201d answer. \nThere are three aspects of this project that we need to decide on: \uf0b7\n What kind of information should be considered by each forecaster? (e.g., stock prices, trading \nvolumes, fundamental indicators, general economic indicators, latest news, etc. Stock prices \nand trading volumes are fast-changing so must  be sampled frequently and the fundamental \nand general-economy indicators are slow-moving so could be sampled at a low frequency.) \n\uf0b7 Who is the target customer? Organization or individual, their time horizon (day trader vs. long-\nterm investor) \n\uf0b7 How the application will be architected? The user  will run a client program which will poll the \nWS-forecasters and present their predictions. Should the client be entirely Web-based vs. \nlocally-run application? A Web-based applica tion would be downloaded over the Web every \ntime the user runs the client; it could be de veloped using AJAX or a similar technology. \nAs a start, here are some suggested answers: \n\uf0b7 Our target customers are individuals who are trad ing moderately frequently  (up to several times", "source": "Page 66", "chapter": "1"}
{"id": "a3d3ca9a373a-2", "text": "per week), but not very frequently (several times per day). \n\uf0b7 The following data should be gathered and st ored locally. Given a list of about 50\u2013100 \ncompanies, record their quoted prices and volumes at the maximum available sampling \n                                                      \n8 An introductory description is available here: http://en.wikipedia.org/wiki/Delphi_method  . An in-depth review \nis available here: http://web.njit.edu/~turoff/Papers/delphi3.html  (M. Turoff and S. R. Hiltz: \u201cComputer Based \nDelphi Processes,\u201d in M. Adler and E. Ziglio (Editors), Gazing Into the Oracle: The Delphi Method and \nIts Application to Social Policy and Public Health , London, UK: Kingsley Publishers, 1995.)", "source": "Page 66", "chapter": "1"}
{"id": "c536565102a6-0", "text": "Chapter 1 \uf0b7 Introduction 53\ndensity (check http://finance.yahoo.com/ ); also record some broad market indices, such as DJIA \nor S&P500. \n\uf0b7 The gathered data should be used for developing the prediction model , which can be a simple \nregression-curve fitting, artificial neural network,  or some other statistical method. The model \nshould consider both the individual company\u2019s data as well as the broad market data. Once \nready for use, the prediction model should be activ ated to look for trends and patterns in stock \nprices as they are collected in real time. \nPotential services that will be provi ded by the forecaster service include: \n\uf0b7 Given a stock x, suggest an action, such as \u201cbuy,\u201d \u201csell,\u201d \u201chold,\u201d or \u201csit-out;\u201d we will \nassume that the forecaster provides recommendation for one stock at a time \n\uf0b7 Recommend a stock to buy, from all stocks that are being tracked, or from all in a given \nindustry/sector \nA key step in specifying the foreca ster service is to determine its Web service interface : what will \ngo in and what will come out of your planne d Web service? Below I list all the possible \nparameters that I could think of, which the client and the service could exchange. The", "source": "Page 67", "chapter": "1"}
{"id": "c536565102a6-1", "text": "parameters that I could think of, which the client and the service could exchange. The \ndevelopment team should use their judgment to deci de what is reasonable and realistic for their \nown team to achieve within the course of an academic semester, and select only some of these \nparameters for their Web service interface. \nParameters sent by the facilitator to a forecaster  (from the client to a Web service) in the \ninquiry include: \n\uf0b7 Stock(s) to consider: individual  (specified by ticker symbol), select-one-for-sector  (sector \nspecified by a standard category), any (select the best candidate) \n\uf0b7 Trade to consider: buy, sell, hold, sit-out      OR Position to consider: long, short , any  \n\uf0b7 Time horizon for the investment: integer number \n\uf0b7 Funds available: integer number for the capital amount/range \n\uf0b7 Current portfolio (if any) or current position for the specified symbol \nSome of these parameters may not be necessary, particularly in the first instantiation of the \nsystem. Also, there are privacy issues, particularly with the last two items above, that must be taken into account. The forecaster Web-services ar e run by third parties and the trader may not \nwish to disclose such information to third parties. \nResults returned by a forecaster to the facilitator  (for a single stock per inquiry):", "source": "Page 67", "chapter": "1"}
{"id": "c536565102a6-2", "text": "\uf0b7 Selected stock (if the inquiry reques ted selection from \u201csector\u201d or \u201cany\u201d) \n\uf0b7 Prediction: price trend or numeric value at time t in the future \n\uf0b7 Recommended action and position: buy, sell, hold, sit-out, go-short \n\uf0b7 Recommended horizon for the recommended action: time duration \n\uf0b7 Recommendation about placing a protective sell or buy Stop Order. \n\uf0b7 Confidence level (how confident is the for ecaster about the prediction): range 0 \u2013 100 %", "source": "Page 67", "chapter": "1"}
{"id": "12d1671f1028-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 54\nThe performance of each prediction service should be evaluated as follows. Once activated, each \npredicted price value should be stored in a local database. At a future ti me when the actual value \nbecomes known, it should be recorded along with the previously predicted value. A large number \nof samples should be collected, say over the period of tens of days. We use absolute mean error \nand average relative error as indi ces for performance evaluation. The average relative error  is \ndefined as \uf028\uf029\uf0e5\uf0e5\uf02dii i i i y yy\u02c6 , where yi and \u0177i are the actual and predicted prices at time i, \nrespectively. \nStatement of Requirements \n \nExtensions \nRisk analysis to analy ze \u201cwhat if\u201d scenarios. \nAdditional information about this project can be  found at the book website, given in Preface. \n \n1.5.3 Remarks about the Projects \nMy criteria in the selection of these projects was th at they are sufficiently complex so to urge the \nstudents to enrich their essential skills (crea tivity, teamwork, communication) and professional \nskills (administration, leadership, decision, and management abilities when facing risk or \nuncertainty). In addition, they expose the students to at least one discipline or problem domain in", "source": "Page 68", "chapter": "1"}
{"id": "12d1671f1028-1", "text": "addition to software engineering, as demanded by  a labor market of growing complexity, change, \nand interdisciplinarity. \nThe reader should observe that each project requires some knowledge of the problem domain. \nEach of the domains has myriads of details and selecting the few that are relevant requires a \nmajor effort. Creating a good model of any domai n requires skills and expertise and this is \ncharacteristic of almost all software engineeri ng projects\u2014in addition to software development \nskills, you always must learn something else in order to build a software product. \nThe above projects are somewhat deceptive insofar as the reader  may get impression that all \nsoftware engineering projects are well defined and the discovery of what needs to be developed is \ndone by someone else so the developer\u2019s job is ju st software development. Unfortunately, that is \nrarely the case. In most cases the customer has a very vague idea of what they would like to be \ndeveloped and the discovery process requires a ma jor effort. That was the case for all of the \nabove projects\u2014it took me a great deal of fieldwor k and help from many people to arrive at the \nproject descriptions presented above. In the wo rst case you may not even know who will be your \ncustomer, as is the case for traffic monitoring (described at the book website, given in Preface)", "source": "Page 68", "chapter": "1"}
{"id": "12d1671f1028-2", "text": "and the investment fantasy league (Section 1.5.1) . In such cases, you need to invent your own \ncustomers\u2014you need to identify who might benefit from your product and try and interest them \nin participating in the development.", "source": "Page 68", "chapter": "1"}
{"id": "63dc2b63b2b8-0", "text": "Chapter 1 \uf0b7 Introduction 55\nFrederick Brooks, a pioneer of software \nengineering, wrote that \u201cthe hardest \nsingle part of building a software system \nis deciding precisely what to build\u201d [Brooks, 1995: p. 199]. By this token, \nthe hardest work on these projects is \nalready done. The reader should not feel short-changed, though, because \ndifficulties in deriving system \nrequirements will be illustrated. \nExample 1.2 RFID tags in retail \nThe following example illustrates of \nhow a typical idea for a software engineering project might evolve. The management of a grocery supermarket (our customer) contact ed us with an idea \nfor a more effective product promotion. Their plan is to us e a computer system \nto track and influence people\u2019s buying habits. A set of logical rules would define the conditions for generating promotional offers for customers, based on the products the customer has already chosen. For example, if customer removed a product A from a shelf, then \nshe may be offered a discount coupon on product B. Alternatively, the \ncustomer may be asked if she may also need product C. This last feature serves \nas a reminder, rather than for offering discount coupons. For example, if a customer removes a soda bottle from a shelf, she may be prompted to buy potato chips, as well.", "source": "Page 69", "chapter": "1"}
{"id": "63dc2b63b2b8-1", "text": "To implement this idea, the store will \nuse Radio Frequency Identification (RFID) tags on all store items. Each tag carries a 96-bit EPC (Electronic Product Code). The RFID tag \nreaders will be installed on each shelf on the sales fl oor, as well as in the cashier registers at the sales \npoint. When a tag is removed from the region of a reader\u2019s coverage, the reader will notify the computer system that the given tag disappeared from its coverage area. In turn, the system will apply \nthe logical rules and show a promo tional offer on a nearest display. We assume that each shelf will \nhave an \u201coffers display\u201d that will show promotional of fers or reminders related to the last item that was \nremoved from this shelf. \nAs we consider the details of the idea, we realize th at the system will not be able to identify individual \ncustomers and tailor promotional offers based on the customer identity. In addition to privacy concerns, identifying individual customers is a difficult technological problem and the store management ruled out potential solutions as too expensive. We do not care as much to know who the customer is; rather, we want to know the historic information about other items that this customer placed in her cart previously during  the current shopping episode to cu stomize the offer. Otherwise, the \ncurrent offer must be based exclusively on the currently removed item and not on prior shopping", "source": "Page 69", "chapter": "1"}
{"id": "1f8f80087d2e-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 56\nhistory. Next, we come up with an idea of installing RFID tag readers in the shopping carts, so we can \ntrack the current items in each shopping cart. Howe ver, the supermarket management decides against \nthis approach, because of a high pr ice of the readers and concerns about their robustness to weather \nand handling or vandalism. \nAs a result, we conclude that l ogical IF-THEN-ELSE rules for deciding  about special offers will take \nas input only a single product identity , based on the RFID tag of the item the customer has just \nremoved from the shelf. The discount coupon will be a \u201cvirtual coupon,\u201d which means that the customer is told about the discounted product, and the discount amount will be processed at the cashier\u2019s register during the chec kout. The display will persist for a specified amount of time and then \nautomatically vanish. The next ques tion is whether each display will be  dedicated to a single product \nor shared among several adjacently shelved products? If the display will be shared, we have a problem \nif other items associated with this display are removed (nearly) simultaneously. How do we show \nmultiple offers, and how to target each to the appr opriate customer? A simple but difficult question is,", "source": "Page 70", "chapter": "1"}
{"id": "1f8f80087d2e-1", "text": "when the displayed coupon should vanish? What if the next customer arrives and sees it before it vanishes? Perhaps there is nothing bad with that, but now we realize that we have a difficulty targeting  \nthe coupons. In addition, because the system does not know what is in the customer\u2019s cart, it may be that the customer already took the product that the system is suggesting. After doing some market research, we determine that small displays are re latively cheap and an indi vidual display can be \nassigned to each product. We give up targeting customers, and just show a virtual coupon as specified by the logical rules. \nGiven that the store already operates in the same way with physical, paper-based coupons, the question \nis if it is worth to install electronic displays or use RFID tags? Is there any advantage of upgrading the \ncurrent system? If the RFID system input is us ed, then the coupon will appear when an item is \nremoved. We realize that this makes no sense and just show the product coupon all the time, same as with paper-based coupons. An advantage of electronic displays is that they preclude having the store staff go around and place new cou pons or remove expired ones. \nWe started with the idea of introducing RFID tags  and ended up with a solution that renders them", "source": "Page 70", "chapter": "1"}
{"id": "1f8f80087d2e-2", "text": "useless. An argument can be made that tags can be used to track product popularity and generate promotional offers based on the current demand or lack thereof. A variation of this project, with a different goal, will be considered in Problem 2.15 at the end of Chapter 2. \n \nThere are several lessons to be learned about software engineering from the above example: \n\uf0b7 One cannot propose a solution without a deep understanding of the problem domain and \nworking closely with the customer \n\uf0b7 Requirements change dynamically because of new insights that were not obvious initially \n\uf0b7 Final solution may be quite different from the initial idea. \n \nhe project descriptions presented earlier in this chapter are relatively precise and include \nmore information than what is usually known as the customer statement of work , which is an \nexpression, from a potential customer, of what they  require of a new software system. I expressed \nthe requirements more precisely to make them suitable for one-semester (undergraduate) student \nprojects. Our focus here will be on what c ould be called \u201ccore software engineering.\u201d \nOn the other hand, the methods commonly found in  software engineering textbooks would not \nhelp you to arrive at the above descriptions. Software engineering usually takes from here\u2014it \nassumes a defined problem and focuses on finding a solution. Having defined a problem sets the T", "source": "Page 70", "chapter": "1"}
{"id": "b1c1e2eee525-0", "text": "Chapter 1 \uf0b7 Introduction 57\nconstraints within which to seek for the soluti on. If you want to broaden the problem or reframe \nit, you must go back and do some fieldwork. Su ppose you doubt my understanding of financial \nmarkets or ability to extract the key aspects of th e security trading process (Section 1.3.2) and you \nwant to redefine the problem statement. For that , software engineering me thods (to be described \nin Chapter 2) are not very useful. Rather, you need  to employ ethnography or, as an engineer you \nmay prefer Jackson\u2019s \u201cproblem frames\u201d [Jackson 200 1], see Chapter 3. Do I need to mention that \nyou better become informed about the subject doma in? For example, in the case of the financial \nassistant, the subject domain is finance. \n \n1.6 Summary and Bibliographical Notes \n Because software is pure invention, it does not have  physical reality to keep it in check. That is, \nwe can build more and more complex systems, a nd pretend that they simply need a little added \ndebugging. Simple models are important that let us understand the main issues. The search for \nsimplicity is the search for a st ructure within which the complex becomes transparent. It is", "source": "Page 71", "chapter": "1"}
{"id": "b1c1e2eee525-1", "text": "important to constantly simplify the structure. De tail must be abstracted away and the underlying \nstructure exposed. \nAlthough this text is meant as an introduction to  software engineering, I focus on critical thinking \nrather than prescriptions about structured devel opment process. Software development can by no \nmeans be successfully mastered from a single source of instruction. I expect that the reader is \nalready familiar with programming, algorithms, and basic computer architecture. The reader may \nalso wish to start with an introductory book on  software engineering, such as [Larman, 2005; \nSommerville, 2004]. The Unified Modeling Langua ge (UML) is used extensively in the \ndiagrams, and the reader unfamiliar with UML sh ould consult a text such as [Fowler, 2004]. I \nalso assume solid knowledge of the Java pr ogramming language. I do offer a brief introduction-\nto/refresher-of the Java programming language in Appendix A, but the reader lacking in Java \nknowledge should consult an excellent source by Eckel [2003]. \nThe problem of scheduling construction tasks (Section 1.1) is described in [Goodaire & \nParmenter, 2006], in Section 11.5, p. 361. One solution involves first setting posts, then cutting,", "source": "Page 71", "chapter": "1"}
{"id": "b1c1e2eee525-2", "text": "then nailing, and finally painting. This sequence is shown in Figure 1-2 and completes the job in \n11 units of time. There is a second solution that al so completes the job in 11 units of time: first \ncut, then set posts, then nail, and finally paint. \nAlthough I emphasized that complex software systems defy simple models, there is an interesting \nview advocated by Stephen Wolfram in his NKS (New Kind of Science): \nhttp://www.wolframscience.com/  , whereby some systems that appear extremely complex can be \ncaptured by very simple models. \nIn a way, software development parallels the probl em-solving strategies in the field of artificial \nintelligence or means-ends analysis. First we need to determine what  are our goals (\u201cends\u201d); next, \nrepresent the current state; then, consider how (\u201cmeans\u201d to employ) to minimize the difference \nbetween the current state and the goal state. As w ith any design, software design can be seen as a", "source": "Page 71", "chapter": "1"}
{"id": "4c982b1bd777-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 58\ndifference-reduction activity, formulated in term s of a symbolic description of differences. \nFinally, in autonomic computing, the goals ar e represented explicitly in the program that \nimplements the system. \nThere are many reasons why some systems succeed (e.g., the Web, the Internet, personal \ncomputer) and others fail, including: \n\uf0b7 They meet a real need \n\uf0b7 They were first of their kind \n\uf0b7 They coevolved as part of package with other successful technologies and were more \nconvenient or cheaper (think MS Word versus WordPerfect) \n\uf0b7 Because of their technical excellence \nEngineering excellence alone is not guarantee for success but a clear lack of it is a guarantee for \nfailure. \nThere are many excellent and/or curious website s related to software engineering, such as: \nTeaching Software Engineering \u2013 Lessons from MIT, by Hal Abelson and Philip Greenspun: \nhttp://philip.greenspun.com/teachi ng/teaching-softw are-engineering   \nSoftware Architecture \u2013 by Dewayne E. Perry: http://www.ece.utexas.edu/~perry/work/swa/   \nSoftware Engineering Academic Genealogy \u2013 by Tao Xie:  \nhttp://www.csc.ncsu.edu/fa culty/xie/sefamily.htm", "source": "Page 72", "chapter": "1"}
{"id": "4c982b1bd777-1", "text": "http://www.csc.ncsu.edu/fa culty/xie/sefamily.htm   \n \nSection 1.2.1: Symbol Language \nMost people agree that symbols are useful, even if some authors invent their own favorite \nsymbols. UML is the most widely accepted graphical notation for software design, although it is sometimes criticized for not bein g consistent. Even in mathema tics, the ultimate language of \nsymbols, there are controversies about symbols even  for such established subjects as calculus (cf., \nNewton\u2019s vs. Leibnitz\u2019s symbols for calculus), lest  to bring up more recent subjects. To sum up, \nyou can invent your own symbols if you feel it absolutely necessary, but before using them, \nexplain their meaning/semantics and ensure that it is always easy to look-up the meanings of your \nsymbols. UML is not ideal, but it is the best currently available and most widely adopted. \nArguably, symbol language has a greater importanc e than just being a way of describing one\u2019s \ndesigns. Every language comes with a theory behi nd it, and every theory comes with a language. \nSymbol language (and its theory) helps you articulate your thoughts. Einstein knew about the general relativity theory for a long time, but only when he employed tensors was he able to \narticulate the theory (", "source": "Page 72", "chapter": "1"}
{"id": "4c982b1bd777-2", "text": "articulate the theory (\nhttp://en.wikipedia.org/wiki/History_of_general_relativity ). \nSection 1.2.3: Object-Oriented Anal ysis and the Domain Model \nI feel that this is a more gradual and intuitive approach than some existing approaches to domain \nanalysis. However, I want to emphasize that it is ha rd to sort out software engineering approaches \ninto right or wrong ones\u2014the developer should settle  on the approach that produces best results", "source": "Page 72", "chapter": "1"}
{"id": "f032df078720-0", "text": "Chapter 1 \uf0b7 Introduction 59\nfor him or her. On the downside of this freedom  of choice, choices ranging from the dumbest to \nthe smartest options can be defended on th e basis of a number of situation-dependent \nconsiderations. \nSome authors consider object-oriented analysis (OOA)  to be primarily the analysis of the existing \npractice and object-oriented design (OOD) to be concerned with designing a new solution (the \nsystem-to-be). \nModular design was first introduced by David Parnas in 1960s. \nA brief history of object orientation [from Tec hnomanifestos] and of U ML, how it came together \nfrom 3 amigos. A nice introduction to programmi ng is available in [Boden, 1977, Ch. 1], \nincluding the insightful parallels with knitti ng which demonstrates surprising complexity. \nAlso, from [Petzold] about ALGOL, LISP, PL/I. \nObjects: http://java.sun.com/docs/books /tutorial/java/concepts/object.html \nN. Wirth, \u201cGood ideas, through the looking glass,\u201d IEEE Computer , vol. 39, no. 1, pp. 28-39, \nJanuary 2006.", "source": "Page 73", "chapter": "1"}
{"id": "f032df078720-1", "text": "January 2006. \nH. van Vliet, \u201cReflections on software engineering education,\u201d IEEE Software , vol. 23, no. 3, pp. \n55-61, May-June 2006. \n[Ince, 1988] provides a popular account of the state-of-the-art of software engineering in mid \n1980s. It is worth reading if only for the insight that not much has changed in the last 20 years. \nThe jargon is certainly different and the scale of the programs is significantly larger, but the \nissues remain the same and the so lutions are very similar. Then, the central issues were reuse, \nend-user programming, promises and perils of formal methods, harnessing the power of hobbyist \nprogrammers (today known as open source), and prot otyping and unit testing (today\u2019s equivalent: \nagile methods). \nSection 1.3.1: Case Study 1: From Home Access Control to \nAdaptive Homes \nThe Case Study #1 Project (Section 1.3.1) \u2013 Literature about the home access problem domain: \nA path to the future may lead this project  to an \u201cadaptive house\u201d [Mozer, 2004]. See also: \nIntel: Home sensors could monitor seniors, aid diagnosis (ComputerWorld)", "source": "Page 73", "chapter": "1"}
{"id": "f032df078720-2", "text": "Intel: Home sensors could monitor seniors, aid diagnosis (ComputerWorld)  \nhttp://www.computerworld.com/networkingtopic s/networking/story/0, 10801,98801,00.html \nAnother place to look is: University of Florida\u2019s Gator Tech Smart House [Helal et al., 2005], \nonline at: http://www.harris.cise.ufl.edu/gt.htm  \nFor the reader who would like to know more a bout home access control, a comprehensive, 1400-\npages two-volume set [Tobias, 2000] discusses all aspects of locks, protective devices, and the \nmethods used to overcome them. For those who like to tinker with electronic gadgets, a great \ncompanion is [O\u2019Sullivan & T. Igoe, 2004]. \nBiometrics: \nWired START: \u201cKeystroke biometrics: That doesn\u2019t even look like my typing,\u201d Wired , p. 42, \nJune 2005. Online at: http://www.wired.co m/wired/archive/13.06/start.html?pg=9", "source": "Page 73", "chapter": "1"}
{"id": "b7ef8cbfcf4a-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 60\nResearchers snoop on keyboard sounds; Computer ea vesdropping yields 96 percent accuracy rate. \nDoug Tygar, a Berkeley computer science professor and the study's principal investigator \nhttp://www.cnn.com/2005/TECH/internet/09/ 21/keyboard.sniffing.ap/index.html \nKeystroke Biometric Password; Wedne sday, March 28, 2007 2:27 PM/EST \nBioPassword purchased the rights to keystroke biometric technology held by the Stanford \nResearch Institute. On March 26, 2007, the co mpany announced BioPassword Enterprise Edition \n3.0 now with optional knowledge-based authentica tion factors, integration with Citrix Access \nGateway Advanced Edition, OWA (Microsoft Ou tlook Web Access) and Windows XP embedded \nthin clients. \nhttp://blogs.eweek.com/permit_deny/content001 /seen_and_heard/keystroke _biometric_password.\nhtml?kc=EWPRDEMNL040407EOAD \nSee also [Chellappa et al., 2006] for a recent review on the state-of-the-art in biometrics. \nSection 1.4: The Object Model \nThe concept of information hiding originates from David Parnas [1972].", "source": "Page 74", "chapter": "1"}
{"id": "b7ef8cbfcf4a-1", "text": "The concept of information hiding originates from David Parnas [1972]. \n \nD. Coppit, \u201cImplementing large project s in software engineering courses,\u201d Computer Science \nEducation , vol. 16, no. 1, pp. 53-73, March 2006. P ublisher: Routledge, part of the Taylor & \nFrancis Group \n J. S. Prichard, L. A. Bizo, and R. J. Stratford,  \u201cThe educational impact of team-skills training: \nPreparing students to work in groups,\u201d British Journal of Educational Psychology , vol. 76, no. 1, \npp. 119-140, March 2006. \n(downloaded: NIH/Randall/MATERIALS2/) \nM. Murray and B. Lonne, \u201cAn innovative use of  the web to build graduate team skills,\u201d Teaching \nin Higher Education , vol. 11, no. 1, pp. 63-77, January 2006.  Publisher: Routledge, part of the \nTaylor & Francis Group", "source": "Page 74", "chapter": "1"}
{"id": "1f57ff9aa3cb-0", "text": "61 Contents \n2.1 Software Development Methods \n2.1.1 Agile Development \n2.1.2 Decisive Methodological Factors \n2.2 Requirements Engineering \n2.2.1 Requirements and User Stories  2.2.2 Requirements Gathering Strategies \n2.2.3 Effort Estimation \n2.3 Software Architecture \n2.3.1 Problem Architecture \n2.3.2 Software Architectural Styles \n2.3.3 Recombination of Subsystems \n2.4 Use Case Modeling \n2.4.1 Actors, Goals, and Sketchy Use Cases  2.4.2 System Boundary and Subsystems 2.4.3 Detailed Use Case Specification \n2.4.4 Security and Risk Management \n2.4.5 Why Software Engineering Is Difficult (2) \n2.5 Analysis: Building the Domain Model \n2.5.1 Identifying Concepts 2.5.2 Concept Associations and Attributes 2.5.3 Domain Analysis \n2.5.4 Contracts: Preconditions and \nPostconditions \n2.6 Design: Assigning Responsibilities \n2.6.1 Design Principles for Assigning \nResponsibilities \n2.6.2 Class Diagram \n2---3   \n2.6.3 Why Software Engineering Is Difficult (3)", "source": "Page 75", "chapter": "2"}
{"id": "1f57ff9aa3cb-1", "text": "2.6.3 Why Software Engineering Is Difficult (3) \n2.7 Test-driven Implementation \n2.7.1 Overview of Software Testing 2.7.2 Test Coverage and Code Coverage  \n2.7.3 Practical Aspects of Unit Testing \n2.7.4 Integration and Security Testing 2.7.5 Test-driven Implementation \n2.7.6 Refactoring: Improving the Design of \nExisting Code \n2.8 Summary and Bibliographical Notes \nProblems  \nChapter 2  \nObject-Oriented Software Engineering \n \n \n\u201cWhen a portrait painter sets out to create a likeness, he relies \nabove all upon the face and the expression of the eyes, and \npays less attention to the other parts of the body. In the same \nway, it is my intention to dwell upon those actions which \nilluminate the workings of the soul.\u201d \u2014Plutarch \nThis chapter describes concep ts and techniques for object-\noriented software development. The first chapter introduced the stages of software engineering lifecycle (Section 1.2). \nNow, the tools and techniques for each stage are gradually \ndetailed and will be elabor ated in later chapters. \nWe start with the methodology and project management \nissues, which is a first concer n faced with large-scale product", "source": "Page 75", "chapter": "2"}
{"id": "1f57ff9aa3cb-2", "text": "issues, which is a first concer n faced with large-scale product \ndevelopment. Next we review elements of requirements engineering: how system requirements are gathered, analyzed, \nand documented. Real-world projects rarely follow exclusive \n\u201cbottom-up\u201d approach, from requirements through objects to program code. Instead, high-level factors commonly \nconsidered under \u201csoftware architecture\u201d influence the system \ndesign in a top-down manner. The rest of this chapter takes a bottom-up approach, with top-down forces shaping our design \nchoices. \nA popular approach to requirements engineering is use case \nmodeling, which elaborates usage scenarios of the system-to-\nbe. A similar approach, common in agile methods, centers on \nuser stories. Requirements engineering is followed by domain modeling, where we model the problem domain with the main \nemphasis on modeling the internal elements (\u201cobjects\u201d) of our \nsystem-to-be. Following analysis, the design stage specifies how objects interact to produce desired behaviors of the \nsystem-to-be. This chapter concludes with the techniques for \nsoftware implementation and testing. While studying this chapter, the reader may find it useful to check Appendix G \nand see how the concepts are applied in an example project.", "source": "Page 75", "chapter": "2"}
{"id": "c23696c67157-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 62\n2.1 Software Development Methods \n \n\u201cPlan, v.t. To bother about the best method of accomplishing an accidental result.\u201d \n\u2014Ambrose Bierce, The Devil\u2019s Dictionary  \nThe goal of software methodologis ts is to understand how  high quality software can be developed \nefficiently. The hope is that new insights will em erge about effective product development, so \nboth students and experts might benefit from learning and applying methodology. Ideally, the \ndeveloper would adhere to the prescribed steps and a successful project would result\u2014regardless \nof the developer\u2019s knowledge a nd expertise. Methodology developm ent often works by observing \nhow expert developers work a nd deriving an abstract model of the development process. In \nreality, life cycle methods are often not followed; when they are, it is usually because of \nemployer\u2019s policy in place. Why is it so, if fo llowing a method should be a recipe for success? \nThere are several reasons why methodologies are i gnored or resisted in practice. One reason is \nthat methodology is usually derived from past e xperience. But, what worked for one person may \nnot work for another. Both developers and project s have different character istics and it is difficult", "source": "Page 76", "chapter": "2"}
{"id": "c23696c67157-1", "text": "to generalize across either one. Software developmen t is so complex that it is impossible to create \nprecise instructions for every scenario. In a ddition, method developmen t takes relatively long \ntime to recognize and extr act \u201cbest practices.\u201d By the time a method is mature, the technologies it \nis based on may become outdated. The method ma y simply be inappropriate for the new and \nemerging technologies and market conditions. \nA development method usually lays out a prescriptive process by mandating a sequence of \ndevelopment tasks . Some methods devise very elaborate processes with a rigid, documentation-\nheavy methodology. The idea is that even if ke y people leave the project or organization, the \nproject should go on as scheduled because everythi ng is properly documented. This approach is \nknown as \u201cBig Design Up Front\u201d (BDUF). However,  experience teaches us that it is impossible \nto consider all potential scenarios just by thin king. And, regardless of how well the system is \ndocumented, if key people leave, the project suffers . It is much more sensible to develop initial \nversions of the system-to-be from a partial understa nding of the problem, let users play with such \na prototype, and then redesign and develop a ne w iteration based on the gained understanding. \nOne difficulty with product development is th at when thinking about a development plan,", "source": "Page 76", "chapter": "2"}
{"id": "c23696c67157-2", "text": "One difficulty with product development is th at when thinking about a development plan, \nengineer usually thinks in terms of methodology: what  to do first, what next, etc. Naturally, first \ncomes discovery (studying the problem domain and finding out how the problem is solved now \nand proposing how it can be solved better with  the to-be-developed technology); then comes \ndevelopment (designing and implementing the syst em); lastly, the system is deployed and \nevaluated. This sequential thinking naturally l eads to the \u201cwaterfall model\u201d (Section 1.2) and \nheavy documentation. \nThe customer does not see it that way. The customer would rather see some rudimentary \nfunctionality soon, and then refinement and extension. \nRecent methods, known as agile , attempt to deemphasize pro cess-driven documentation and \ndetailed specifications. They also consider the number and experience of the people on the \ndevelopment team. \nFour major software development me thodologies can be classified as:", "source": "Page 76", "chapter": "2"}
{"id": "8b7a100d2cea-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 63\n\uf0b7 Structured analysis and design (SAD) , developed in late 1960s and 1970s \n\uf0b7 Object-oriented analysis and design (OOAD), developed in 1980s and 1990s \n\uf0b7 Agile software development (ASD), developed in late 1990s and 2000s \n\uf0b7 Aspect-oriented software development (AOSD), developed in 2000s \nThe structured analysis and design (SAD) methodology emerged in the 1970s and introduced \nfunctional decomposition and data-flow analysis as key modeling tools. \nThe object-oriented analysis and design (OOAD) methodology emerged in the late 1980s and was \nwidely adopted by the mid 1990s. It introduced  use cases and the Unified Modeling Language \n(UML) as key modeling tools. \nThe ideas of agile software development (ASD) emerged at the end of 1990s and rapidly gained \npopularity in the software industry as a \u201cli ghtweight\u201d way to develop software. Agile \ndevelopment is reviewed in Section 2.1.1. \nThe aspect-oriented software development (AOSD)  methodology emerged in the late 1990s. It is", "source": "Page 77", "chapter": "2"}
{"id": "8b7a100d2cea-1", "text": "not a replacement for any of the other methodol ogies. Rather, it helps deal with scattered \ncrosscutting concerns. Functional features of a software system could be divided into two \ncategories: (1) core features  that provide basic functionality a nd allow the end-user to achieve \nspecific business goals; and, (2) supplementary features  that provide support for entitlements, \nconnectivity, concurrency, system interface, et c. Many of the complementary features can be \nscattered across the application and tangled with  core features, which is why they are called \ncrosscutting concerns . By \u201ctangled\u201d I mean that these crosscutting concerns are invoked in the \ncontext of core features and are part of the affe cted core functionality. Aspect-oriented software \ndevelopment helps deal with crosscuttin g concerns in a systematic manner. \n2.1.1 Agile Development \n\u201cPeople forget how fast you did a job\u2014but they rememb er how well you did it.\u201d \u2014An advertising executive \n\u201cWhy do we never have time to do it right, bu t always have time to do it over?\u201d \u2014Anonymous \nAgility is both a development philosophy a nd a collection of concepts embedded into \ndevelopment methodologies. An agile approach to  development is essentially a results-focused \nmethod that iteratively manages changes and risk s. It also actively engages customers in", "source": "Page 77", "chapter": "2"}
{"id": "8b7a100d2cea-2", "text": "method that iteratively manages changes and risk s. It also actively engages customers in \nproviding feedback on successive implementati ons, in effect making them part of the \ndevelopment team. Unlike pr ocess-driven documentation, it promotes outcome-driven \ndocumentation. The emphasis of agile practices is on traveling lightweight, producing only those \nartifacts (documentation) that are absolutely nece ssary. The philosophy of the agile approach is \nformulated by the Manifesto for Agile Software Development ( http://agilemanifesto.org/ ). \nAgile development evangelists recommend that  the development should be incremental and \niterative, with quick turnover, and light on documen tation. They are believers in perfection being \nthe enemy of innovation. Agile methods are not meant to entirely replace methodologies such as \nstructured analysis and design, or object-oriented  analysis and design. Rather, agile methods are \noften focused on how to run the development pro cess (\u201cproject management\u201d), perhaps using the \ntools for software development inherited from ot her methods, but in a different way. A popular", "source": "Page 77", "chapter": "2"}
{"id": "d3d34608126c-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 64\nagile-development tool is user stories , which are intended to represent the system requirements, \nestimate effort and plan soft ware releases (Section 2.2.3). \n SIDEBAR 2.1: Agile vs. Sloppy  \n  \n\uf0a8 I have had students complain that demanding readability, consistency, and completeness in \nproject reports runs against the spirit of ag ile development. Some software engineering \ntextbooks insist on showing snapshots of hand drawn UML diagrams, as opposed to neat \ndiagrams created electronically, to emphasize the evanescent nature of designs and the need for \ndynamic and untidy artifacts. This may work for closely knit teams of professionals, working \nin adjacent offices exclusively on their project . But, I found it not to be conducive for the \npurpose of grading student reports: it is very difficult to discern sloppiness from agility and \nassign grades fairly. Communication, after all,  is the key ingredient of teamwork, and \ncommunication is not improved if readability, cons istency, and completene ss of project reports \nare compromised. I take it that agility means:  reduce the amount of documentation but not at \nthe expense of the communicative value of project  artifacts. Brevity is a virtue, but we also", "source": "Page 78", "chapter": "2"}
{"id": "d3d34608126c-1", "text": "know that redundancy is the most effective way to  protect the message from noise effects. (Of \ncourse, you need to know the right type of redundancy!) \nAgile methodologists seem not to have much faith in visual representations, so one can find few \nif any graphics and diagrams in agile software  development books. Some authors take the agile \nprinciples to the extreme and I would caution against this. I have seen claims that working code is \nthe best documentation of a software product. I can believe that there are people for whom \nprogram code is the most comprehensible doc ument, but I believe that most people would \ndisagree. Most people would find easiest to understand carefully designed diagrams with \naccompanying narrative in a plain natural language. Of course, the tradeoff is that writing proper \ndocumentation takes time, and it is difficult to maintain the documentation consistent with the \ncode as the project progresses. \nEven greater problem is that the code documents only the result  of developer\u2019s design decisions, \nbut not the reasoning behind those decisions. Code is a solution to a problem. It is neither a \ndescription of the problem, nor of the process by which the problem was solved. Much of the \nrationale  behind the solution is irretrievably lost or hidden in the heads of the people who chose", "source": "Page 78", "chapter": "2"}
{"id": "d3d34608126c-2", "text": "it, if they are still around. After a period of time,  even the person who made a design decision \nmay have difficulty explaining it if the reasons  for the choice are not explicitly documented. \nHowever, although documentation is highly desirable it is also costly and difficult to maintain in \nsynchrony with the code as the lifecycle progre sses. Outdated documentation may be source of \nconfusion. It is said that the code is the only unambiguous source of information. Such over-\ngeneralizations are not helpful. It is like sayi ng that the building itself is the only unambiguous \nsource of information and one need not be bothered  with blueprints. You may not have blueprints \nfor your home or even not know where to find them , but blueprints for large public buildings are \ncarefully maintained as they better be. After all, it is unethical to leave a customer with working \ncode, but without any documentation. There is a spec trum of software projects, so there should be \na matching spectrum of documentation approach es, ranging from full documentation, through \npartial and outdated one, to no documentation. I believe that even outdated documentation is \nbetter than no documentation. Outdated documents  may provide insight into the thinking and \nevolution that went into the software developm ent. On most projects, documentation should be", "source": "Page 78", "chapter": "2"}
{"id": "d3d34608126c-3", "text": "evolution that went into the software developm ent. On most projects, documentation should be \ncreated with the understanding that it will not alwa ys be up to date with the code, resulting in", "source": "Page 78", "chapter": "2"}
{"id": "ea9f22b1ad07-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 65\n\u201cstale\u201d parts. A discrepancy usuall y arises in subsequent iterations, so we may need to prioritize \nand decide what to keep updated and what to mark as stale. \nThere are other issues with maintaining adequate  documentation. The developer may even not be \naware of some choices that he made, because th ey appear to be \u201ccommon sense.\u201d Other decisions \nmay result from company\u2019s policies that are documented separately and may be changed \nindependently of the program documentation. It is  useful to consider again the exponential curve \nin Figure 1-13, which can be modified for documentation instead of estimation. Again, a relatively small effort yields significant gain s in documentation accuracy. However, after a \ncertain point the law of diminishing returns tr iggers and any further improvement comes at a \ngreat cost. It is practically impossible to achieve perfect documentation. \n SIDEBAR 2.2: How Much Diagramming?  \n  \n\uf0a8 I often hear inquiries and complaints that the amount of diagramming in this book is \nexcessive. This book is primarily intended fo r students learning software engineering and \ntherefore it insists on tidiness and comprehensiv eness for instructive purposes. If I were doing \nreal projects, I would not diagram and document every detail, but only the most difficult and", "source": "Page 79", "chapter": "2"}
{"id": "ea9f22b1ad07-1", "text": "real projects, I would not diagram and document every detail, but only the most difficult and \nimportant parts. Unfortunately, we often disc over what is \u201cdifficult and important\u201d only long \nafter the project is completed or after a problem arises. Experience teaches us that the more \neffort you invest in advance, the more you will be thankful for it later. The developer will need \nto use their experience and judgment as well as contextual constraints (budget, schedule, etc.) \nto decide how much diagramming is appropriate. \nMany books and software professionals place great emphasis on the management software \nengineering projects. In other words, it is not about the engineering per se  but it is more about \nhow you go about engineering software, in partic ular, knowing what are the appropriate steps to \ntake and how you put them together. Management is surely important, particularly because most \nsoftware projects are done by teams, but it shoul d not be idolized at the detriment of product \nquality. This book focuses on techniqu es for developing quality software. \n2.1.2 Decisive Methodological Factors \nSoftware quality can be greatly improved by paying attention to factors such as traceability, \ntesting, measurement, and security. \nTraceability \nSoftware development process starts with an init ial artifact, such as customer statement of work,", "source": "Page 79", "chapter": "2"}
{"id": "ea9f22b1ad07-2", "text": "Software development process starts with an init ial artifact, such as customer statement of work, \nand ends with source code. As th e development progresses, being able to trace the links among \nsuccessive artifacts is key. If you do not make exp licit how an entity in the current phase evolved \nfrom a previous-phase entity, then it is unclear wh at was the purpose of doing all that previous \nwork. Lack of traceability renders the past creations  irrelevant and we might as well have started \nwith this phase. It makes it difficult for tester s to show that the system complies with its \nrequirements and maintainers to assess the impact of a change. Therefore, it is essential that a \nprecise link is made from use cases back to re quirements, from design diagrams back to use \ncases, and from source code back to design diagrams. Traceability  refers to the property of a \nsoftware artifact, such as a use case or a class, of being traceable to the original requirement or", "source": "Page 79", "chapter": "2"}
{"id": "a11eefe44ccd-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 66\nrationale that motivated its existence. Traceab ility must be maintained across the lifecycle. \nMaintaining traceability involves recording, stru cturing, linking, grouping, and maintaining \ndependencies between requirements and other so ftware artifacts. We will see how traceability \nworks on examples in this chapter. \nRequirements\nEngineering\n(Section 2.2)Req-1UC-1\nUC-2\nReq-KUC-M\nUC-N\nUse Cases\n(Section 2.3)CO-1\nCO-2\nCO-3\nCO-S\nCO-T\nOOA/OOD\n(Sections 2.4 & 2.5)Implementation\n(Section (2.7)Requirements Use Cases Concepts/Objects Source Code\nCode-1\nCode-2\nCode-3\nCode-W\nCode-X\n \nTesting \nThe key idea of Test-Driven Development (TDD)  is that every step in the development process \nmust start with a plan of how to verify that the result meets some goal. The developer should not \ncreate a software artifact (such as a system requirement, a UML diagram, or source code) unless \nhe has a plan of how it will be tested. For exam ple, a requirement is not well-specified if an", "source": "Page 80", "chapter": "2"}
{"id": "a11eefe44ccd-1", "text": "automated computer program cannot be written to test it for compliance. Such a requirement is \nvague, subjective, or contradi ctory and should be reworked. \nThe testing process is not simply confined to coding. Testing the system design with \nwalkthroughs and other design review technique s is very helpful. Agile TDD methodology \nprescribes to make progress just enough to pa ss a test and avoid detailed analysis. When a \nproblem is discovered, fix it. This approach may not be universally appropriate, e.g., for mission \ncritical applications. Therein, when a problem is  discovered, it might have led to a major human \nor economic loss. Discovering that you missed some thing only when system failed in actual use \nmay prove very costly. Instead, a thorough analysis is needed in advance of implementation. \nHowever, the philosophy of thinking while creati ng a software artifact about how it will be tested \nand designing for testability applies more broadly than agile TDD. \nSoftware defects (or, bugs) are typically not found by looking at source code. Rather, defects are \nfound by mistreating software and observing how it fails, by reverse engineering it (approach \nused by people who want to exploit its security  vulnerabilities), and by a user simply going about \nhis business until discovering that a program has done  something like delete all of the previous", "source": "Page 80", "chapter": "2"}
{"id": "a11eefe44ccd-2", "text": "his business until discovering that a program has done  something like delete all of the previous \nhour\u2019s work. Test plans and test results are impor tant software artifacts and should be preserved \nalong with the rest of software documentati on. More about testing in Section 2.7.", "source": "Page 80", "chapter": "2"}
{"id": "47ad39d6be8a-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 67\nAgile TDD claims to improve the code, and det ect design brittleness and lack of focus. It may \nwell do that, but that is not the main purpose of testing, which is to test the correctness , not \nquality of software. Even a Rube-Goldberg desi gn can pass tests under the right circumstances. \nAnd we cannot ever check all circumstances for co mplex software systems. Therefore, it would \nbe helpful to know if our system works correctly (testing) and if it is of high quality, not a Rube-\nGoldberg machine. This is why we need software measurement. \nMeasurement \nWhile testing is universally practiced and T DD widely adopted, metrics and measurement are \nrelatively rarely used, particularly for assessi ng software product quality. Agile methods have \nemphasized using metrics for project estimation, to  track progress and plan the future iterations \nand deliverables. Software product metrics ar e intended to assess program quality, not its \ncorrectness (which is assessed by  testing and verification). Metr ics do not uncover errors; they \nuncover poor design. \nMore about software measurement in Chapter 4. \nSecurity \nMost computers, telephones, and other computing devices are nowadays connected to the public", "source": "Page 81", "chapter": "2"}
{"id": "47ad39d6be8a-1", "text": "Most computers, telephones, and other computing devices are nowadays connected to the public \nInternet. Publicly accessible Web applications and services can be a bused and twisted to \nnefarious ends. Even if the computer does not c ontain any \u201csensitive\u201d information, its computing \nand communication resources may be abused to  send out spam and malware as part of a \ndistributed botnet. Such hijacked systems provide  a \u201csafe\u201d means of distribution of illicit goods or \nservices on someone else\u2019s server without th at person\u2019s knowledge. Because of ubiquitous \nconnectivity, anyone\u2019s security problems imp act everyone else, with only rare exceptions. \nThere are two kinds of technology-based security th reats in software systems. One arises because \nof bad software, where the attacker exploits softwa re defects. The other arises because of network \ninterconnectedness, when the attacker exploits othe r infected systems to poison the traffic to or \nfrom targeted computers. Hence, ev en if software is designed with security features to prevent \nunauthorized use of system resources, it may be de nied data or services from other computers. \nAttackers rely on exploitable software defect s as well as continuing to develop their own \ninfrastructure. An experienced developer must unde rstand both the principles of software design", "source": "Page 81", "chapter": "2"}
{"id": "47ad39d6be8a-2", "text": "infrastructure. An experienced developer must unde rstand both the principles of software design \nand the principles of network security. Otherwis e, he will be prone to making na\u00efve mistakes \nwhen assessing the security benefits of a particul ar approach to software  development. This book \nfocuses on better software design a nd does not cover network security. \nThe Security Development Lifecycle  (SDL), promoted by Microsoft and other software \norganizations, combines the existing approaches to software development with security-focused \nactivities throughout the development lifecycle. S ecurity risk management focuses on minimizing \ndesign flaws  (architectural and design-level problems) and code bugs  (simple implementation \nerrors in program code). Identifying security flaws is more difficult than looking for bugs, \nbecause it requires deep understanding of the bus iness context and software architecture and \ndesign. We work to avoid design flaws  while building secure software systems. Techniques \ninclude risk analysis, abuse cases (trying to misu se the system while thi nking like an attacker), \nand code quality auditing.", "source": "Page 81", "chapter": "2"}
{"id": "76e708b4083d-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 68\nFunctional security features should not be confused  with software security. Software security is \nabout developing high quality, problem-free soft ware. Functional security features include \ncryptography, key distribution, firewalls, defau lt security configuration, privilege separation \narchitecture, and patch quality and response time. Poorly designed software is prone to security \nthreats regardless of built-in security functionalit y. Security functionality design is detailed in \nSection 5.5. \n \n2.2 Requirements Engineering \n \n\u201cThe hardest single part of building a software system is deciding what to build. No part of the work so \ncripples the resulting system if done wrong. No other part is more difficult to rectify later.\u201d\u2014Fred Brooks \n\u201cYou start coding. I\u2019ll go find out what they want.\u201d \u2014Computer analyst to programmer \nRequirements engineering helps software engineer s understand the problem they are to solve. It \ninvolves activities that lead to understanding the business context, what the customer wants, how \nend-users will interact with the software, a nd what the business impact will be. Requirements \nengineering starts with the problem definition: customer statement of work  (also known as \ncustomer statement of requirements ). This is an informal descrip tion of what the customers think", "source": "Page 82", "chapter": "2"}
{"id": "76e708b4083d-1", "text": "customer statement of requirements ). This is an informal descrip tion of what the customers think \nthey need from a software system to do for them. The problem could be identified by \nmanagement personnel, through market research, by ingenious observation, or some other means. \nThe statement of work captures the perceived n eeds and, because it is opinion-based, it usually \nevolves over time, with changing market conditio ns or better understanding of the problem. \nDefining the requirements for the system-to-be includes both fact-finding  about how the problem \nis solved in the current practice as well as envisioning  how the planned system might work. The \nfinal outcome of requirements engineering is a requirements specification document. \nThe key task of requirements engineering is fo rmulating a well-defined problem to solve. A well-\ndefined problem  includes \n\uf0b7 A set of criteria (\u201crequirements\u201d) according to which proposed solutions either definitely \nsolve the problem or fail to solve it \n\uf0b7 The description of the resources and com ponents at disposal to solve the problem. \nRequirements engineering involves different stake holders in defining the problem and specifying \nthe solution. A stakeholder  is an individual, team, or organiza tion with interests in, or concerns \nrelated to, the system-to-be. Generally, the sy stem-to-be has several types of stakeholders:", "source": "Page 82", "chapter": "2"}
{"id": "76e708b4083d-2", "text": "customers, end users, business analysts, system s architects and developers, testing and quality \nassurance engineers, project managers, the futu re maintenance organiza tion, owners of other \nsystems that will interact with the system-to-be, etc. The stakeholders all have a stake, but the \nstakes may differ. End users will be interested  in the requested functionality. Architects and \ndevelopers will be interested in how to effec tively implement this functionality. Customers will \nbe interested in costs and timelines. Often compro mises and tradeoffs need to be made to satisfy \ndifferent stakeholders.", "source": "Page 82", "chapter": "2"}
{"id": "308211836029-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 69\nAlthough different methodologies provide different  techniques for requirements engineering, all \nof them follow the same requirements process: requirements gathering, requirements analysis, \nand requirements specification (Figure 2-1). The pr ocess starts with customer\u2019s requirements or \nsurveying the potential market and ends with a specification document that details how the \nsystem-to-be will behave. This is simply a logical  ordering of requirements engineering activities, \nregardless of the methodology that is used. Of c ourse, the logical order does not imply that each \nstep must be perfectly complete d before the next is taken. \nRequirements gathering  (also known as \u201crequirements e licitation\u201d) helps the developer \nunderstand the business context. The customer needs to define what is required: what is to be \naccomplished, how the system will fit into the needs of the business, and how the system will be \nused on a day-to-day basis. This turns out to be  very hard to achieve, as discussed in Section \n2.2.2. The statement of work is rarely precise  and complete enough for th e development team to \nstart working on the software product. \nRequirements analysis  involves refining of and reasoning about the requirements received from \nthe customer during requirements gathering. Analysis  is driven by the creation and elaboration of", "source": "Page 83", "chapter": "2"}
{"id": "308211836029-1", "text": "the customer during requirements gathering. Analysis  is driven by the creation and elaboration of \nuser scenarios that describe how the end-user w ill interact with the system. Negotiation with the \ncustomer will be needed to determine the prioritie s, what is essential, and what is realistic. A \npopular tool is the use cases (Section 2.4). It is important to ensure that the developer\u2019s \nunderstanding of the problem coincides with the customer\u2019s understanding of the problem. \nRequirements specification  represents the problem statement in a semiformal or formal manner to \nensure clarity, consistency, and completeness.  It describes the function and quality of the \nsoftware-to-be and the constraints that will go vern its development. A specification can be a \nwritten document, a set of graphical models, a form al mathematical model, a collection of usage \nscenarios (or, \u201cuse cases\u201d), a prototype, or any combination of these. Th e developers could use \nUML or another symbol language for this purpose. Requirements \nanalysisRequirements \ngatheringRequirements \nspecification\nAgile Development \nUser StoriesAspect-Oriented \nRequirements\nObject-Oriented \nAnalysis & Design\nStructured \nAnalysis & Design\nFigure 2-1: Requirements process in different methodologies.", "source": "Page 83", "chapter": "2"}
{"id": "6bc53d91c90a-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 70\nAs mentioned, logical ordering of the development lifecycle does not imply that we must achieve \nperfection in one stage before we progress to th e next one. Quite opposite, the best results are \nachieved by incremental and iterative attention to different stages of the requirements engineering \nprocess. This is an important lesson of the ag ile development philosophy. Traditional prescriptive \nprocesses are characterized by their heavy emphasis on getting all the requirements right and \nwritten early in the project. Agile projects, on the other hand, acknowledge that it is impossible to \nidentify all the requirements in one pass. Agile software development introduced a light way to \nmodel requirements in the form of user stories , which are intended to capture customer needs, \nand are used to estimate effort and plan releas es. User stories are described in Section 2.2.3. \nSection 2.3.1 introduces different problem ty pes and indicates that different tools for \nrequirements engineering work best with differe nt types of problems. In addition to problem \ntypes, the effectiveness of re quirements tools depends on the in tended stakeholders. Different \nrequirements documents may be needed for differe nt stakeholders. For example, the requirements \nmay be documented using customer \u2019s terminology so that custom ers unfamiliar with software", "source": "Page 84", "chapter": "2"}
{"id": "6bc53d91c90a-1", "text": "may be documented using customer \u2019s terminology so that custom ers unfamiliar with software \nengineering jargon may review and approve the specification of the system-to-be. A \ncomplementary document may be prepared for deve lopers and testing engineers in a semi-formal \nor formal language to avoid am biguities of natural languages. \n2.2.1 Requirements and User Stories \n\u201cThe best performance improvement is the transition from the nonworking state to the working state.\u201d \n\u2014John Ousterhout \nThe statement of requirements is intended to preci sely state the capabilities of the system that the \ncustomer needs developed. Software system re quirements are usually written in the form of \nstatements \u201c The system shall \u2026 \u201d or \u201c The system should \u2026 \u201d The \u201cshall\u201d form is used for features \nthat must be implemented and the \u201cshould\u201d form  for desirable but not mandatory features. IEEE \nhas published a set of guidelines on how to write software requirements. This document is known \nas IEEE Standard 830. \nStatement of Requirements, Case Study 1: Secure Home Access \nTable 2-1 enumerates initial requirements for the home access contro l system extracted \nfrom the problem description in Section 1.3. 1. Each requirement is assigned a unique \nidentifier. The middle column shows the priority weight  (PW) of each requirement, with a", "source": "Page 84", "chapter": "2"}
{"id": "6bc53d91c90a-2", "text": "greater number indicating a higher priority. The priority weight may be assigned by the \ncustomer or derived from the urgency-to-deliv er the requested capabilities to the customer. \nThe range of priority weights is decided arbitrar ily, in our example it is 1\u20135. It is preferable \nto have a small range (10 or less), because th e priorities are assigned subjectively and it is \ndifficult to discern finely-grained priorities.  Larger projects with numerous requirements \nmay need larger range of priorities. \nAn important issue is the granularity of requirements . Some of the requirements in Table \n2-1 are relatively complex or compound requ irements. Test-Driven Development (TDD) \nstipulates writing requirements so that they ar e individually testable. In a software lifecycle, \nrequirements eventually result in source code, whic h is then Verified and Validated by running a \ntest set that exercises each requirement individually (Section 2.7.1). In the end, a report is created", "source": "Page 84", "chapter": "2"}
{"id": "4fcb862367e1-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 71\nthat says what requirements passed and what  requirements failed. For this purpose, no \nrequirement should be written such that there are several \u201ctests\u201d or things to verify \nsimultaneously. If there is a compound requirement th at failed, it may not be clear what part of \nthe requirement has failed. For example, if we we re to test requirement REQ1 in Table 2-1, and \nthe door was found unlocked when it should have be en locked, the entire requirement would fail \nVerification. It would be impossible to tell from th e report if the system accidentally disarmed the \nlock, or the autolock feature failed. Therefore,  when we group several \u201celemental\u201d requirements \nwhich apply to one functional unit into one co mpound requirement, we have a problem of not \nbeing able to individually test requirements in this group. By splitting up REQ1 we obtain: \nREQ1a: The system shall keep the doors locked at all times, unless commanded otherwise by \nauthorized user. \nREQ1b: When the lock is disarmed, a countdown shall be initiated at the end of which the lock \nshall be automatically armed (if still disarmed). \nHowever, requirements fragmentation accommodates onl y the testing needs. Other considerations", "source": "Page 85", "chapter": "2"}
{"id": "4fcb862367e1-1", "text": "However, requirements fragmentation accommodates onl y the testing needs. Other considerations \nmay favor compounding of \u201celemental\u201d requireme nts which apply to one functional unit. A \nproblem with elemental requirements is that none  of them describes a stand-alone, meaningful \nunit of functionality\u2014only together they make sense. From customer\u2019s viewpoint, good requirements should describe the smallest  possible meaningful units of functionality. \nAlthough the choice of requirements granularity is  subject to judgment and experience and there \nis no clear metrics, the best approach is to organize one\u2019s requirements hierarchically. Table 2-1: Requirements for the first case study, safe home access system (see Section 1.3.1). \nIdentifier Priority Requirement \nREQ1 5 The system shall keep the door locked  at all times, unless commanded otherwise by \nauthorized user. When the lock is disa rmed, a countdown shall be initiated at the \nend of which the lock shall be automatically armed (if still disarmed). \nREQ2 2 The system shall lock the door when commanded by pressing a dedicated button. \nREQ3 5 The system shall, given a valid key code, unlock the door and activate other devices.\nREQ4 4 The system should allow mistakes while  entering the key code. However, to resist", "source": "Page 85", "chapter": "2"}
{"id": "4fcb862367e1-2", "text": "\u201cdictionary attacks,\u201d the number of allowed fa iled attempts shall be small, say three, \nafter which the system will block and the alarm bell shall be sounded. \nREQ5 2 The system shall maintain a history log of all attempted accesses for later review. \nREQ6 2 The system should allow adding new authorized persons at runtime or removing \nexisting ones. \nREQ7 2 The system shall allow configuring th e preferences for device activation when the \nuser provides a valid key code, as well as  when a burglary attempt is detected. \nREQ8 1 The system should allow searching th e history log by specifying one or more of \nthese parameters: the time frame, the actor role, the door location, or the event type \n(unlock, lock, power failure, etc.). This function shall be available over the Web by \npointing a browser to a specified URL. \nREQ9 1 The system should allow filing inquiries  about \u201csuspicious\u201d accesses. This function \nshall be available over the Web.", "source": "Page 85", "chapter": "2"}
{"id": "baa35a402636-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 72\nNote that Table 2-1 contains two types of requireme nt prioritization. There is an implicit priority \nin \u201cshall\u201d vs. \u201cshould\u201d wording, as well as explic it Priority Weight column. We need to ensure \nthat they are consistent. In principle, all featur es that must be implemen ted (\u201cshall\u201d type) should \nbe of higher priority then any feature that is not mandatory. Any in consistency between the \nprioritizations must be resolved with the cu stomer. To avoid potential inconsistencies and \nambiguities, agile methods adopt a work backlog (Fi gure 1-14) that simply lists the work items in \nthe order in which they should be done. \nFollowing the Test-Driven Development paradigm, we write tests for the requirements during the \nrequirements analysis. These tests are known as user acceptance tests  (UATs) and they are \nspecified by the customer (Section 2.7.1). The system-to-be will be created to fulfill the customer\u2019s vision, so the customer decides that  a requirement has been correctly implemented \nand therefore the implementation is \u201caccepted. \u201d Acceptance tests capture the customer\u2019s \nassumptions about how the functionality specified  with the requirement will work, under what", "source": "Page 86", "chapter": "2"}
{"id": "baa35a402636-1", "text": "assumptions about how the functionality specified  with the requirement will work, under what \ncircumstances it may behave differently, and what could go wrong. The cu stomer can work with \na programmer or tester to write the actual test cases. A \ntest case  is a particular choice of input \nvalues to be used in testing a pr ogram and expected output values. A test is a finite collection of \ntest cases. For example, for the requirement REQ3 , the customer may suggest these test cases: \n\uf0b7 Test with the valid key of a current tenant on his or her apartment (pass) \n\uf0b7 Test with the valid key of a current te nant on someone else\u2019s apartment (fail) \n\uf0b7 Test with an invalid key on any apartment (fail) \n\uf0b7 Test with the key of a removed tenant on his or her previous apartment (fail) \n\uf0b7 Test with the valid key of a just-added tenant on his or her apartment (pass) \nThese test cases provide only a coarse descripti on of how a requirement will be tested. It is \ninsufficient to specify only input data and expect ed outcomes for testing functions that involve \nmulti-step interaction. Use case acceptance test s in Section 2.4.3 will provide step-by-step \ndescription of acceptance tests.", "source": "Page 86", "chapter": "2"}
{"id": "baa35a402636-2", "text": "description of acceptance tests. \nThe table includes the requirement REQ7 that allo ws the user to configure the preferences for \nactivating various household devices in response to different events . The preferences would be set \nup using a user interface (sketched in Figure 2-2). This is not to advocate user interface design at \nthis early stage of project development. Howeve r, the developer should use all reasonable means \nto try and understand the customer\u2019s needs as early as possible. Drawing sketches of user \ninterfaces is a useful tool for eliciting what the customer needs and how he would like to interact \nwith the system. \nTable 2-1 contains only a few requirements that a ppear to be clear at the outset of the project. \nSome of the requirements are somewhat imprecise and will be enhanced later, as we learn more \nabout the problem and about the tools used in so lving it. Other requirements may be discovered \nor the existing ones altered as the developmen t lifecycle iteratively progresses. Refining and \nmodifying the initial requirements is the goal of requirements analysis.", "source": "Page 86", "chapter": "2"}
{"id": "f6d7d40cf75e-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 73\nStatement of Requirements, C ase Study 2: Investment Assistant \nHere we extract initial requirements for the pers onal investment assistant system based on the \ndescription given in Section 1.3.2. The requirements are shown in Table 2-2. \nThe statement of requirements is only a digest, and the reader should keep in mind that it must be \naccompanied with a detailed description of custom er\u2019s business practices and rules, such as the \nmarket functioning described earlier. \nThe stock trading ticket  in REQ2 is a form containing the client\u2019s instructions to the broker or \ndealer. A stock trading ticket contains four pa rts: the client\u2019s information, the security \ninformation, the order information and any speci al instructions. The ticket specifies the action \n(buy/sell), the order type (market/limit/stop), the symbol of the stock to trade, the number of \nshares, and additional parameters in case of  limit and stop orders. If the action is to buy, the \nsystem shall check that the investor has sufficient funds in his/her account. \nThe order management window lists working, fill ed, cancelled, and parked orders, as well as \nexceptions and all orders. In the working wi ndow, an order can be cancelled, replaced, and", "source": "Page 87", "chapter": "2"}
{"id": "f6d7d40cf75e-1", "text": "designed as \u201cgo to market\u201d for immediate execu tion, as well as be chained for order-cancels-\norder status. \nSimilar to Table 2-1, Table 2-2 contains only a few requirements that appear to be clear at the \noutset of the project. Other requirements may be  discovered or the existing ones enhanced or \naltered as the development lifecycle progresses. Device Preferences\nFile   Configure   Help\nClose ApplyActivate for burglary attemptActivate for burglary attempt\nAlarm bellAlarm bell\nPolicePolice \u2026\u2026Activate for valid keyActivate for valid key\nLightsLights\nMusicMusicAirAir--conditioningconditioning\nHeatingHeatingSend SMSSend SMS\n \nFigure 2-2: Envisioning the preference configur ation for the control of household devices.", "source": "Page 87", "chapter": "2"}
{"id": "8d4aecfba034-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 74\nUser Stories \nAgile development methods have promoted \u201cuse r stories\u201d as an alternative to traditional \nrequirements. A user story  is a brief description of a piece of system functionality as viewed by a \nuser. It represents something a user would be likely to do in a single sitting at the computer \nterminal. User stories are written in a free-form, with no mandatory syntax, but generally they are \nfitting the form: \nuser-role + capability + business-value \nHere is an example of a user story for our case study of secure home access: Table 2-2: Requirements for the second case study , investment assistant (see Section 1.3.2). \nIdentifier PW Requirement \nREQ1 5 The system shall support registering new investors by providing a real-world email, \nwhich shall be external to our website. Requi red information shall include a unique login \nID and a password that conforms to guidelines, as well as investor\u2019s first and last name \nand other demographic information. Upon succe ssful registration, the system shall set up \nan account with a zero balance for the investor. \nREQ2 5 The system shall support placing orders by filling out a form known as \u201corder ticket,\u201d \nwhich contains  the client\u2019s information, the stock information, the order information, and", "source": "Page 88", "chapter": "2"}
{"id": "8d4aecfba034-1", "text": "which contains  the client\u2019s information, the stock information, the order information, and \nany special instructions. The ticket shall be  emailed to the client and enqueued for \nexecution when the specified conditions are satisfied. \nREQ3 5 The system shall periodically review the enqueued orders and for each order ticket in the \nqueue take one of the following actions: \n(i) If the order type is Market Order, the system shall execute the trade instantly; \n(ii) Else, if the order conditions are matched, c onvert it to a Market Order at the current \nstock price; (iii) Else, if the order has expired or been can celled, remove it from the queue, declare it a \nFailed Order and archive as such; \n(iv) Else, leave the order untouched. \nIf either of actions ( i), (ii), or ( iii) is executed, the system shall archive the transaction and \nnotify the trader by sending a \u201cbrokerage trade confirmation.\u201d \nREQ4 2 The system shall allow the trader to manage his or her pending orders, for example to \nview the status of each order or modify the order, where applicable. \nREQ5 2 The system shall continuously gather the ti me-series of market data (stock prices, trading \nvolumes, etc.) for a set of companies or  sectors (the list to be decided).", "source": "Page 88", "chapter": "2"}
{"id": "8d4aecfba034-2", "text": "REQ6 3 The system shall process the mark et data for two types of information: \n(i) on-demand user inquiries about technical indicators and company fundamentals (both \nto be decided), comparisons, future predictions, risk analysis, etc. (ii) in-vigilance watch for trading opportunitie s or imminent collapses and notify the \ntrader when such events are detected \nREQ6 3 The system shall record the history of user\u2019s actions for later review. \nAs a tenant, I can unlock the doors to enter my apartment.\nuser-role capability business-value", "source": "Page 88", "chapter": "2"}
{"id": "d20a951e5d2d-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 75\nThe business-value part is often omitted to maintain  the clarity and conciseness of user stories. \nTable 2-3 shows the user stories for our first cas e study of home access control (Section 1.3.1). If \nwe compare these stories to the requirements deri ved earlier (Table 2-1), we will find that stories \nST-1 and ST-2 roughly correspond to requirement  REQ1, story ST-3 corresponds to REQ2, story \nST-4 corresponds to REQ3 and REQ4, and story ST-6 corresponds to REQ8, etc. Note, however, \nthat unlike the IEEE-830 statements \u201cThe system sha ll \u2026,\u201d user stories put the user at the center. \nTypes of Requirements \nSystem requirements make explicit the characte ristics of the system-to-be. Requirements are \nusually divided into functional and non-functional. Functional requirements  determine the \nsystem\u2019s expected behavior and the effects it  should produce in the problem domain. These \nrequirements generally represent the main product features. \nNon-functional requirements  describe some quality characteristic that the system-to-be shall \nexhibit. They are also known as \u201cquality\u201d or \u201ce mergent\u201d requirements, or the \u201c-ilities\u201d of the", "source": "Page 89", "chapter": "2"}
{"id": "d20a951e5d2d-1", "text": "system-to-be. An example non-functional requirement  is: Maintain a persis tent data backup, for \nthe cases of power outages. \nThe term FURPS+  refers to the non-functional system properties: \n\uf0b7 Functionality  lists additional functional requirements that might be considered, such as \nsecurity , which refers to ensuring data integr ity and authorized access to information \n\uf0b7 Usability  refers to the ease of use, esthetics,  consistency, and documentation\u2014a system \nthat is difficult and confusing to use will likely fail to accomplish its intended purpose \n\uf0b7 Reliability  specifies the expected frequency of system failure under certain operating \nconditions, as well as recovera bility, predictability, accuracy, and mean time to failure \n\uf0b7 Performance  details the computing speed, efficiency, resource consumption, throughput, \nand response time Table 2-3: User stories for the first case study , safe home access. (Compare to Table 2-1.) \nThe last column shows the estimated effort si ze for each story (described in Section 2.2.3). \nIdentifier User Story Size \nST-1 As an authorized person (tenant or landlord), I can keep the doors locked at \nall times. 4 \npoints", "source": "Page 89", "chapter": "2"}
{"id": "d20a951e5d2d-2", "text": "all times. 4 \npoints\nST-2 As an authorized person (tenant or landlord), I can lock the doors on demand. 3 pts \nST-3 The lock should be automatically locked after a defined period of time. 6 pts \nST-4 As an authorized person (tenant or landlord), I can unlock the doors. \n(Test: Allow a small number of mistakes, say three.) 9 \npoints\nST-5 As a landlord, I can at runtime manage authorized persons. 10 pts\nST-6 As an authorized person (tenant or landlord), I can view past accesses. 6 pts \nST-7 As a tenant, I can configure the prefer ences for activation of various devices. 6 pts \nST-8 As a tenant, I can file compla int about \u201csuspicious\u201d accesses. 6 pts", "source": "Page 89", "chapter": "2"}
{"id": "60aa053091f4-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 76\n\uf0b7 Supportability  characterizes testability, adaptabili ty, maintainability, compatibility, \nconfigurability, installability, scalability, and localizability \nFor example, in terms of usability of our sa fe home access case study, we may assume a low-\nbudget customer, so the system will be installed and configured by the developer, instead of \n\u201cplug-and-play\u201d operation. \nAll requirements must be written so that they are testable  in that it should be obvious how to \nwrite acceptance tests  that would demonstrate that the product meets the requirement. We have \nseen earlier example of acceptance tests for functi onal requirements in Tabl e 2-1. Non-functional \nrequirements are more susceptible for vague form ulations. For example, we often hear that a \nsystem should be \u201ceasy to use.\u201d It is difficult to de sign tests to verify such a claim. There is little \nvalue in writing requirements that are not testable. \nFor example, for our case study of safe home access system, we envisioned three types of \ncomputing devices. Users will use these devices in different contexts and for different tasks, so \nwe can expect that they have different usab ility requirements. We should consider the time", "source": "Page 90", "chapter": "2"}
{"id": "60aa053091f4-1", "text": "we can expect that they have different usab ility requirements. We should consider the time \nconstraints of user type and produce order-of-ma gnitude time limits for computer interaction \nrequired to accomplish a certain activity. For exampl e, the user interacting with the door device \nexpects that the number of keystrokes, clicks, or touches will be minimized for quick task \ncompletion. The property manager interacting with  the desktop computer is less concerned with \nefficiency and more with rich features to review the data and examine trends. Similarly, the reliability requirements for different devices are likely to be different. The door device must be \nhighly reliable (e.g., system failure rate of 4 in a year or less), while the desktop application can \ntolerate much lower reliability level. \nAlthough at first it may appear easy, the dis tinction between functional and non-functional \nrequirements is often difficult to make. More of ten than not, these requirements are intertwined \nand satisfying a non-functional requirement usua lly necessitates modifications in the system \nfunction. For example, if performance objectives  cannot be met, some functional features may \nneed to be left out. \nThe reader should be cautioned against regardi ng non-functional requirements as secondary to \nfunctional requirements. The satisfaction of non-fu nctional requirements must be as thoroughly", "source": "Page 90", "chapter": "2"}
{"id": "60aa053091f4-2", "text": "functional requirements. The satisfaction of non-fu nctional requirements must be as thoroughly \nand rigorously ensured as that of functional re quirements. In either case, satisfaction of a \nrequirement results in visible properties of th e system-to-be, which means they will affect \ncustomer or user satisfaction with the product. \n \nn most cases, not all requirements can be reali zed because of budgetary or time constraints. \nTherefore, it is necessary to prioritize  the requirements. We have seen examples of assigning \npriority weights to requirements in Table 2-1 a nd Table 2-2, where the weights were guessed by \nthe customer. A systematic method for prioritizing software product requirements is the cost-\nvalue approach . The basic idea is to determine for each candidate requirement its cost of \nimplementing and how much value the requirement w ould have. It is critical that the customer is \ninvolved in requirements prioritization, assisted  by tools that help highlight the tradeoffs. \nRequirements prioritization is not helpful if all or most requirements are assigned high priority. \nWe distinguish four types of requirements: I", "source": "Page 90", "chapter": "2"}
{"id": "03f5ddcf75bc-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 77\n1. Essential : have to be realized to make the system acceptable to the customer. \n2. Desirable : highly desirable, but not mandatory requirements \n3. Optional : might be realized if time and resources permit \n4. Future : will not be realized in the current version of the system-to-be, but should be \nrecorded for consideration in future versions \nThe priority of requirements determines the order in which they will be implemented. \n2.2.2 Requirements Gathering Strategies \n\u201cEverything true is based on need.\u201d \u2014George Bernard Shaw \n\u201cWell, as the new Hummer H2 ads observe, \u2018need\u2019 is  a highly subjective word.\u201d \u2014Peter Coffee (in 2003) \nIf the developer is lucky, the customer will arrive with a clear statement of work that needs to be \ndone (\u201ccustomer statement of requirements\u201d). In re ality, this rarely happens. Requirements for the \nsystem-to-be should be devised based on observi ng the current practice and interviewing the \nstakeholders, such as end users, managers, etc. To put it simply, you can\u2019t fix it if you don\u2019t know \nwhat\u2019s broken. Structured interviews help in un derstanding what stakeholders do, how they might", "source": "Page 91", "chapter": "2"}
{"id": "03f5ddcf75bc-1", "text": "interact with the planned system, and the difficu lties they are facing with the existing technology. \nAgile methodologists recommend that the customers or users stay continuously involved \nthroughout the project duration, instead of  only providing the requirements initially and \ndisappearing until the system is completed. (The reader may wish to check again Section 1.2.5 \nabout the benefits of contin uous customer involvement.) \nHow to precisely specify what sy stem needs to do is a problem, but sometimes it is even more \ndifficult is to get the customer to say what he  or she expects from the system. Gathering domain \nknowledge by interviews is difficult because domai n experts use terminology and jargon specific \nto their domain that is unfamiliar and hard for an  outsider to grasp. While listening to a domain \nexpert talk, a software engineer may find hersel f thinking \u201cThese all are words that I know, but \ntogether they mean nothing to me.\u201d Some things may be so fundamental or seem too obvious to a \nperson doing them habitually, that he thinks those are not worth mentioning. \nIn addition, it is often difficult for the user to imagine the work with a yet-to-be-built system. \nPeople can relatively easily offer suggestions on how to improve the work practices in small", "source": "Page 91", "chapter": "2"}
{"id": "03f5ddcf75bc-2", "text": "People can relatively easily offer suggestions on how to improve the work practices in small \nways, but very rarely can they think of great leaps, such as, to change their way of doing business on the Internet before it was around, or to change  their way of writing from pen-and-paper when \nword processors were not around. So, they often cannot tell you what they need or expect from \nthe system. What often happens is that the custom er is paralyzed by not knowing what technology \ncould do and the developer is stuck by not know ing what the customer n eeds to have. Of great \nhelp in such situation is having a working in stance, a prototype, or performing a so called \nWizard-of-Oz experiment with a mock-up system. \nSee also Ch. 2 of \u201cWicked Problems\u201d\u2014problems that cannot be fully defined. \nA popular technique for functional requirements en gineering is the use case modeling, which is \ndescribed in Section 2.4.", "source": "Page 91", "chapter": "2"}
{"id": "ba181ada2bb5-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 78\ne should keep in mind that we are trying to  achieve several goals in requirements \nengineering. As Figure 2-1 illustrates, we are trying to understand the problem in the \ncontext of current practice (requirements gather ing), then envision, elaborate, and negotiate \npotential solutions (requirements analysis), and fina lly write down an engineering description of \nwhat needs to be developed (requirements specifi cation). Different tools have been proposed for \nrequirements engineering. As one would expect, non e of these tools works best for all tasks of \nrequirements engineering and for all types of pr oblems. Some tools work great for requirements \ngathering, but may not be suitable for requirement s analysis or specification. For example, user \nstories (Section 2.2.1) work well in requirements gathering and analysis, but may be less suitable \nfor specification. Other tools work well on all th ree tasks, but not for all problem types. For \nexample, use case modeling (Section 2.4) works well on all three tasks, but only for certain \nproblem types. Further details are provided in the sections that follow. More tools that are better \nsuited for different problem types will be described in Chapter 3. \n2.2.3 Effort Estimation", "source": "Page 92", "chapter": "2"}
{"id": "ba181ada2bb5-1", "text": "2.2.3 Effort Estimation \nRequirements and user stories can be used to estimate effort and plan software \nreleases. The estimation process works ve ry similarly to the example described \nin Section 1.2.5. Similar to \u201chedge prun ing points\u201d described in Section 1.2.5, \nto measure the relative size of the user stories we assign user-story points  to \neach user story. My preliminary estimat es of the relative sizes of the user \nstories on the scale 1\u201310 are shown in the rightmost column of Table 2-3. \nI have to admit that, as I am making these estima tes, I do not have much confidence in them. I am \nvery familiar with the home access case study  and went many times over the solutions in \nsubsequent chapters. While making the estimate s in Table 2-3, I am trying to make a holistic  \nguess, which requires a great deal of subjectivity. It  is impossible to hold all those experiences in \none\u2019s head at once and combine them in a syst ematic manner. The resulting estimates simply \nreflect a general feeling about the size of each us er story. This may be sufficient to start the \nproject, but I prefer using more structured met hods for software size estimation. One such method", "source": "Page 92", "chapter": "2"}
{"id": "ba181ada2bb5-2", "text": "is based on use case points , described later in Chapter 4. Ho wever, more structured methods \ncome at a cost\u2014they require time to derive the design details. I recommend that the reader should \nalways be mindful about which part of the e xponential curve in Figure 1-13 he is operating on. \nThe desired accuracy of the estimate is acceptable only if the effort to achieve it (or, cost) is \nacceptable, as well. \nTo apply equation (1.1) and estimate the effort  (duration) needed to develop the system, we also \nneed to know the development team\u2019s velocity . In physics, velocity is defined as the distance an \nobject travels during a unit of time. If in software  project estimation size is measured in story \npoints, then the development team\u2019s velocity  is defined as the number of user-story points that the \nteam can complete per single itera tion (the unit of time). That is, the velocity represent\u2019s the \nteam\u2019s productivity . \nIn software projects linear sum of sizes for individua l user stories is rarely appropriate because of \nreuse or shared code. Some functionality will be shar ed by several stories, so adding up sizes for \nindividual stories when estimated independently is not appropriate. Let me illustrate on an", "source": "Page 92", "chapter": "2"}
{"id": "ba181ada2bb5-3", "text": "individual stories when estimated independently is not appropriate. Let me illustrate on an \nanalogy. Consider you are charged to build high ways from city A to cities B and C (Figure 2-3). W", "source": "Page 92", "chapter": "2"}
{"id": "2fd28e0965b9-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 79\nYou eyeball a geographic map of the area and you estimate that the highway A\u2013C will be twice \nlonger than the highway A\u2013B. So, you esti mate the size for the entire effort as 1 \uf0b4s + 2\uf0b4s = 3\uf0b4s, \nwhere s is a scaling constant. However, upon more careful inspection you realize that parts of \nhighways to cities B and C can be shared (reused ), as illustrated in Figure 2-3(c). If you choose \nthis option, you cannot estimate the total size just by adding the individual sizes (AB \uf02b AC). \nInstead, you need to consider them together. Th e total effort will be considerably smaller. \nReuse is common in software objects (consider how  ubiquitous subroutines and libraries are!). \nTherefore, my concern is that simply adding th e story sizes introduces a gross inaccuracy in the \noverall effort estimation. Recall the exponential re lationship of cost and accuracy (Figure 1-13). \nThe reader would be mistaken to assume that reuse always means less work. Considering again \nthe highway analogy, the solution in Figure 2-3(c) may require more effort or cost than the one in", "source": "Page 93", "chapter": "2"}
{"id": "2fd28e0965b9-1", "text": "Figure 2-3(b). The infrastructure-sharing solution in Figure 2-3(c) requires building highway \ninterchanges and erecting traffic signs. You may w onder, why should anyone bother with reuse if \nit increases the effort? The reason may be to pr eserve resources (conser ve the land and protect \nnature), or to make it easier to connect all thre e cities, or for esthetic reasons, etc. Reducing the \ndeveloper\u2019s effort is not always the most impor tant criterion for choosing problem solutions. The \ncustomer who is sponsoring the project decides about the priorities. \nAgile methodologists recommend avoiding de pendencies between user stories. \nHigh dependencies between stories make st ory size estimation difficult. (Note that \nthe assumption is as follows. The individual story sizes are still combined in a linear \nsum, but the dependencies are tackled by ad justing the individual size estimations.) \nWhen dependencies are detected, the developer can try these ways around it: \n\uf0b7 Combine the dependent user stories in to one larger but independent story \n\uf0b7 Find a different way of splitting the stories \nAn expert developer might easily do this. But then, the expert might as well get an accurate effort \nestimate by pure guessing. The problem is with  beginner developers, who need the most a City ACity C\nCity BAB\nCAB\nC\nAB", "source": "Page 93", "chapter": "2"}
{"id": "2fd28e0965b9-2", "text": "City BAB\nCAB\nC\nAB\nC AB\nC\n(a)(b)\n(c)\nFigure 2-3: Combining the part sizes illustrated on a highway building example (a). Cities\nmay be connected independently (b), or pa rts of the product may be \u201creused\u201d (c).", "source": "Page 93", "chapter": "2"}
{"id": "301074117f9a-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 80\nsystematic way of estimating the project effort . The beginner may find it difficult to detect and \ntackle dependencies between user stories. \n \n2.3 Software Architecture \n \n\u201cConceptual integrity is the most important consideration in system design.\u201d \n\u2014Fred Brooks, The Mythical Man-Month  \nA simplest manifestation of a system-level desi gn is the familiar \u201cblock diagram,\u201d which shows \nthe subsystems or modules (as rectangular boxes) and their relations (lines  connecting the boxes). \nHowever, software architecture is much more than decomposing the system into subsystems. \nSoftware architecture  is a set of high-level decisions made during the development and \nevolution of a software system. A decision is \u201carch itectural\u201d if, given the current level of system \nscope (Figure 2-4), the decision must be made by considering the current scope level. Such \ndecision could not be made from a more narrowly-scoped, local perspective. \nFigure 2-5 System or product\nSubsystems/Modules\nPackages\nClasses/Objects\nMethodshighest abstraction level\nlowest levelProduct line (or product family)\nFigure 2-4: Hierarchy of software system scope levels. At the highest scope level is a\nproduct line\u2014a family of products.", "source": "Page 94", "chapter": "2"}
{"id": "3efd017c7a25-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 81\nArchitectural decisions should focus on high impact, high priority areas that are in strong \nalignment with the business strategy. We already discussed some architectural decisions for our \ncase study system for safe home access in Section 1.3.1 (footnote 5). It might have looked as a \nsimple decision with a se lf-evident choice to have a central computer and embedded computers at \neach door. \nSome key questions that we are faced with include: Q1: How to decompose the system (into parts)? \nQ2: How the parts relate to one another? \nQ3: How to document the syst em\u2019s software architecture? \nOne way to start is by considering an abstraction hierarchy of different parts of the system (Figure \n2-4). Such diagrams show only the parts of the system and their inclusion hierarchy. They do not \nconvey the dependencies in terms of mutual servi ce uses: which part uses the services of what \nother parts? \nA good path to designing software architecture (i.e ., solution architecture) starts by considering \nthe problem architecture  (Section 2.3.1). That is, we start with the requirements (i.e., the problem \nstatement), which define how the system  will interact with its environment.", "source": "Page 95", "chapter": "2"}
{"id": "3efd017c7a25-1", "text": "statement), which define how the system  will interact with its environment. \nObjects through their relationships form confedera tions, which are composed of potentially many \nobjects and often have complex behavior. The synergy of the cooperative efforts among the \nmembers creates a new, highe r-level conceptual entity. \nOrganizations are partitioned into departme nts\u2014design, manufacturing, human resources, \nmarketing, etc. Of course, partitioning makes sense for certain size of the organization; \npartitioning a small organization into departme nts and divisions does not make much sense. \nSimilarly, software system s should be partitioned into subsystems  or modules  where each \nsubsystem performs a set of logically related functions. Product/system A scopeProduct B scopeProduct line scope\nSubsystem scopeproduct or system \narchitecture decisionsproduct line \narchitecture decisions\nsystemic impact\nlocal impact\nClass scope\nFigure 2-5: Architectural decisions are made at certain scope levels and cannot be made at\nlower hierarchical levels.", "source": "Page 95", "chapter": "2"}
{"id": "aab0f30ed4cf-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 82\nFigure 2-6 \nAssume we have an embedded processor with a keypad, wired to other hardware components of \nthe system, as shown in Figure 2-7. The embedded processor accepts \u201ccommands\u201d from the \ncomputer via a RS-232 serial port and simply passes them on the corresponding device. The \nmany intricacies of serial communication are omitted and the interested reader is directed to the \nbibliography review at the end of this chapte r. The embedded processor may in an advanced \ndesign become a full-featured computer, communicat ing with the main computer via a local area \nnetwork (LAN). \nSystem architects may decompose an application in to subsystems early in design. But subsystems \ncan be also discovered later, as the complexity of the system unfolds. \n2.3.1 Problem Architecture \nThe most powerful ways of dealing with comple x problems include recognizing and exploiting \nregularities (or, patterns), and dividing the probl em into smaller subproblems and solving each \nindividually (known as divide-a nd-conquer approach). When faced with a difficult software \nengineering problem, it helps to recognize if it resembles to known typical problems. If it does, \nwe employ known solutions. ComputerRS-232\nInterface cableKeypad and\nEmbedded processorLight bulb\nSwitch\nAlarm bellPhotosensor", "source": "Page 96", "chapter": "2"}
{"id": "aab0f30ed4cf-1", "text": "Interface cableKeypad and\nEmbedded processorLight bulb\nSwitch\nAlarm bellPhotosensor\nFigure 2-7: Hardware components for the system implementation. Subsystem \nfor device \ncontrolSubsystem \nfor \nadministrationSubsystem \nfor remote \ndata access\nOn embedded \ncomputerOn office \ndesktopOn tenant\u2019s \nsmartphoneSafe Home Access System\nDecision on software-to-\nhardware mappingDecision on system \ndecomposition\nFigure 2-6: Architectural decisi ons for safe home access system.", "source": "Page 96", "chapter": "2"}
{"id": "d98246e0c774-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 83\nProblem can be decomposed in different ways, su ch as \u201cprojection\u201d vs. \u201cpartition\u201d (Figure 2-8). \nThere are significant differences between them. Partition isolates the parts from one another\u2014it \nsimplifies by removing the relationships. Projec tion just simplifies the representation (by \nremoving some dimensions), while preserving the re lationships between the parts. It allows any \nkind of overlap between the elements of one subpr oblem and the elements of another. We favor \nproblem projection for its relationship-preserving trait. \nFor example, consider our first case study of safe home access. Figure 2-9 shows the elements of \nthe problem domain and how they relate to the sy stem-to-be. There are eleven sub-domains of the \nproblem domain. The key sub-domains are the tenant (1), landlord (2), and the lock (3). Some \nsub-domains are people or physical objects and so me sub-domains are digital artifacts, such as \nthe list of valid keys (4), tenant accounts (10), and log of accesses (11). The system-to-be is \nshown as composed of subsystems  (shown as smaller boxes inside the system\u2019s box) that \nimplement different requirements from Table 2-1. As  seen, the concerns of different requirements", "source": "Page 97", "chapter": "2"}
{"id": "d98246e0c774-1", "text": "overlap and the system-to-be cannot be partitioned neatly into isolated subsystems. Initially, we \nconsider different requirements as  subproblems of the entire problem  and describe the subsystems \nthat solve different subproblems. Then we consid er how the subsystems are integrated and how \nthey interact to satisfy all the requirements. \nWe start by identifying some typical elementary  problems encountered by software engineers. \nThis classification of problems is empirical, not de duced by logical reasoning. Of course, there is \nno proof that it is complete, unique, non-overlapping, etc. \nThere are three key players in software engineering problems: the user who uses the system to \nachieve a goal, the software system (to be developed, i.e., the system-to-be), and the (a) (b)\nFigure 2-8: Contrasting decomposition ty pes: (a) projection; (b) partition.", "source": "Page 97", "chapter": "2"}
{"id": "c8cf8faca2fc-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 84\nenvironment\u2014the rest of the world that may incl ude other systems, considered as \u201cblack boxes\u201d \nbecause we either do not know or do not care a bout their structure. Figure 2-10 illustrates some \ntypical elementary software engineering problems.  In problems of type 1.a) the user feeds the \nsystem with a document and the system transfor ms the input document to an output document. \nAn example is a compiler that transforms source code written in a computer language (the source \nlanguage) into another computer language (the target language, often having a binary form known \nas \u201cobject code\u201d). Another example is a PDF write r, which takes a Web page or a word-processor \ndocument and generates a PDF document. \nIn problems of type 1.b) the system helps the us er edit and maintain a richly structured body of \ninformation (Figure 2-10). The information must typically be manipulated in many different \nways. The data is long-lived and its integrity is  important. Example applications include word-\nprocessing, graphics authoring, or relational database systems. \nIn problems of type 2 the system is programmed to control the environment (Figure 2-10, second \nrow). The system continuously observes the envi ronment and reacts to predefined events. For", "source": "Page 98", "chapter": "2"}
{"id": "c8cf8faca2fc-1", "text": "row). The system continuously observes the envi ronment and reacts to predefined events. For \nexample, a thermostat monitors the room temp erature and regulates it by switching heating or \ncooling devices on or off to maintain the te mperature near a desired setpoint value. PROBLEM DOMAIN\nSoftware-to-be\n(1) Tenant(4) List of \nvalid keys\n(3) Lock(6) Photosensor\n(7) Light\n(8) Alarm bell\n(9) Desktop computerSubsystem-2\nSubsystem-1\nSubsystem-3\nSubsystem-4(2) Landlord(3) Key(5) Device \npreferences\n(10) Tenant \naccounts(11) Log of \naccessesREQ1, REQ2, \nREQ3, REQ4 REQ3\nREQ5, REQ7, \nREQ8, REQ9REQ4\nFigure 2-9: Components of the problem doma in for safe home access. Requirements from\nTable 2-1 specify what the software-to-be sh ould accomplish in the problem domain. We\ncan decompose the software-to-be into subsystems related to the requirements satisfaction.", "source": "Page 98", "chapter": "2"}
{"id": "5a7afc18f297-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 85\nIn problems of type 3.a) the system monitors th e environment and displays the information for the \nuser. The display may be continuo us or filtered to notify the user only of predefined events. For \nexample, a patient-monitoring system measures  physiological signals and displays them \ncontinuously on a computer screen. Additionall y, the system may be programmed to look for \ntrends, or sudden changes, or anomalous values  and alert the clinician (user) by audio signals. \nIn problems of type 3.b) the system helps the us er control the environment. The system receives \nand executes the user\u2019s commands. An example is controlling industrial pro cesses. In our first \ncase study of safe home access (Section 1.3.1), th e user commands the system to disarm the door \nlock (and possibly activate other household devices). \nComplex software engineering problems may co mbine several elementary problems from Figure \n2-10. Consider our case study of safe home ac cess (Figure 2-9). We already mentioned that it \nincludes the type 3.b) problem of commanding the system to disarm the lock. The requirements \n(Table 2-1) also include managing the database  of current tenant accounts (REQ5), which is a", "source": "Page 99", "chapter": "2"}
{"id": "5a7afc18f297-1", "text": "problem of type 1.b). The system should also monitor if the door is unlocked for an extended period of time and lock it automatically (R EQ1), which is a problem of type 2. 1.User works with computer system\n(environment irrelevant/ignored)\n2.Computer system controls the environment\n(user not involved)\n3.Computer system intermediates between\nthe user and the environmentUser System\nSystem Environment\nUser System EnvironmentUserSystem\nRepository\nUser System Environment\nUser System EnvironmentSystem IN doc OUT doc1.a)System transforms input document to output document\n1.b)User edits information stored in a repository\n3.a)System observes the environment and displays information\n3.b)System controls the environment as commanded by the user\nFigure 2-10: Some of the typical elementary problems encountered in software engineering.", "source": "Page 99", "chapter": "2"}
{"id": "3d0af9be59ad-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 86\nTo deal with complex problems that involve several subproblems, we apply the divide-and-\nconquer approach. We decompose the problem into simpler problems, design computer \nsubsystems to solve each subproblem individually , and then compose the subsystems into an \nintegrated system that solves the original complex problem. \nFigure 2-11 illustrates the elementary \u201cbuilding bricks\u201d that correspond to different subproblem \ntypes in Figure 2-10. We continue the discussion of problem decomposition and subsystem \nspecification in Section 2.4.2. More details w ill be provided later, in Section 3.3, when we \nintroduce problem frames. \n2.3.2 Software Architectural Styles \nSo far the development process was presented as a systematic derivation of a software design \nfrom system requirements. Although this process is  iterative, every iteration presumably starts \nwith (possibly revised) requirements and progre sses towards an implementation. However, in \nreality such \u201cbottom-up\u201d design approaches at the local level of objects are insufficient to achieve \noptimal designs, particularly for large systems. There are many contextual constraints and influences other than requirements that determ ine the software architecture. For example, the \ndevelopment team may prefer certain designs based on their expertise; their actual progress", "source": "Page 100", "chapter": "2"}
{"id": "3d0af9be59ad-1", "text": "development team may prefer certain designs based on their expertise; their actual progress \ncompared to the plan; currently prevailing practices; available assets, such as lack of expertise in \ncertain areas, such as databases or visualization;  hardware and networking constraints; etc. Most \nproblems do not start completely new developmen t, but rather reuse existing designs, software \npackages, libraries, etc. For example, many c ontemporary systems are based on Web architecture, \nusing a browser to access a database or Web services (see Appendix D). Complementary to Controlling \nsubsystemControlled \nsubsystem3.b) Commanded behavior:\nOperatorMonitoring \nsubsystemMonitored \nsubsystem3.a) Information display:\nDisplay2. Required behavior:Controlling \nsubsystemControlled \nsubsystemFeeding \nsubsystemTransformation \nsubsystemReceiving \nsubsystem1.a) Transformation:\nData \neditor\nData repository1.b) Simple workpieces:\nUser\nFigure 2-11: Problem architectures of typical software engineering problems.", "source": "Page 100", "chapter": "2"}
{"id": "7a0ded93869a-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 87\nbottom-up approach are system-level ( macro-level ), global design approaches which help us to \n\u201csee the forest for the trees.\u201d These \u201ctop-down\u201d approaches decompose the system into logical \nunits or follow some global organizational patterns. \nProgram Flow Control \nOne can also set up \u201cdaemons\u201d that spend their lifet ime on the lookout for a certain type of event, \nand do what they have to do whenever  a happening of that type occurs. A more flexible IF-\nTHEN-ELSE is to say, \u201cIf this happens, use that method to choose an appropriate procedure from \nthis list of procedures,\u201d where the contents of th e list in question can vary as the program runs. \nIF-THEN-ELSE partitions the set of all possible situations in two or more cases. The partition \nmay turn out to be too rigid, there may be some  exception cases that were not anticipated and \nnow need to be accounted for. Possibly even by th e user! A key issue is, How to let the user to \n\u201crewire\u201d the paths/flows within the program if a need arises? \nThe program code that implements  software classes and subsyste ms is usually organized into \nsoftware packages . Each package contains a set of logically related classes (Figure 2-12).", "source": "Page 101", "chapter": "2"}
{"id": "7a0ded93869a-1", "text": "2.3.3 Recombination of Subsystems \nAfter decomposition, different subsystems are us ually developed and test ed independently. At \nsome point, all subsystems need to be recombin ed and integrated into the whole system-to-be. \nThe recombination (or composition) problem is unsolved and very tricky. Key issues: \n\uf0b7 Cross-platform compatibility, particularly trust and privilege issues \n\uf0b7 Concurrent data access in multithreaded systems \nThe key problem of recombination of subsystems or  frames into the system-to-be is the diversity \nof infrastructures and platforms used for developm ent. Modern software applications are rarely \nwritten as a single monolithic program. Instead, they are built on top of complex middleware \nframeworks such as .NET and Java technology,  using multiple programming languages, and run User Interface LayerUser Interaction User Authentication\nManagement of\nSensors and DevicesArchiving\nCommunication w.\nPolice Station\nDomain Layer\n(Application Logic)Technical Services\nLayer  \nFigure 2-12: Software packages for the ca se study system. The system has a layere d\narchitecture , with the three layers as indicated.", "source": "Page 101", "chapter": "2"}
{"id": "5334810d90ec-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 88\non several computers with different operating sy stems. Developers rely on outside libraries, \nframeworks, COTS (Commercial-Off-The-Shelf) co mponents, etc. The subsystems are usually \ndistributed over different computers. This diversity of platforms introduces many unknowns that \nare hard or impossible to control by the developer. \nEven most secure components can be  assembled into an unsecure mess. \n \n2.4 Use Case Modeling \n A use case  is a description of how a user will use the planned system to accomplish business \ngoals. As any description, it can be sketchy or it  can be very detailed. Both versions (and many \ndegrees of detail in between) have  important uses in requirements engineering. It is natural to \nstart with summary descriptions of use cases a nd gradually progress towards detailed descriptions \nthat thoroughly specify the planned system. \nUse cases were already introduced in Section 1.2.2 and the current section presents details of use \ncase modeling. We start with summary descri ptions of use cases and end with detailed \ndescriptions that represent the specification of the planned system. \n2.4.1 Actors, Goals, and Sketchy Use Cases \nIn system development, we are mainly concerned with the actors that interact directly with the", "source": "Page 102", "chapter": "2"}
{"id": "5334810d90ec-1", "text": "In system development, we are mainly concerned with the actors that interact directly with the \nsystem-to-be, including end users and other systems.  However, all stakeholde rs have certain goals \nfor the system-to-be and occasionally it may be ap propriate to list those goals. The consideration \nof system requirements starts with identifying the actors for the system-to-be. \nActors and Their Goals \nAn actor  is any entity (human, physical object, or another system) external  to the system-to-be \nthat interacts  with the system-to-be. Actors have their responsibilities  and seek the system\u2019s \nassistance in managing those responsibilities. In our  case-study example of secure home access, \nresident\u2019s responsibilities are to maintain the home secured and in proper order, as well as seek \ncomfortable living. The property manager\u2019s res ponsibilities include keeping track of current and \ndeparted residents. Maintenan ce personnel\u2019s responsibilities include checks and repairs. There are \nalso some physical devices depicted in Figure 1-16 that are not part of the system-to-be but \ninteract with it. They also count as actors for our system, as will be seen later. \nTo carry out its responsibilities, an actor sets goals , which are time and context-dependent. For", "source": "Page 102", "chapter": "2"}
{"id": "5334810d90ec-2", "text": "example, a resident leaving the apartment for wo rk has a goal of locking the door; when coming \nback, the resident\u2019s goal is to ope n the door and enter the apartment. \nTo achieve its goals, an actor performs some actions. An action  is the triggering of an interaction \nwith the system-to-be. While preparing a respons e to the actor\u2019s action, the system-to-be may \nneed assistance from external entities other than th e actor who initiated the process. Recall how in", "source": "Page 102", "chapter": "2"}
{"id": "3d7590e37fbe-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 89\nFigure 1-9 the system-to-be (ATM machine) n eeded assistance from a remote datacenter to \nsuccessfully complete the use case \u201cWithdraw Cash.\u201d This is why we will distinguish initiating \nactors  and participating actors . If a participating actor delivers, then the initiating actor is closer \nto reaching the goal. All actors should have defi ned responsibilities. The system-to-be itself is an \nactor and its responsibility is to assist the (in itiating) actors in achieving their goals. In this \nprocess, system-to-be may seek help from other systems or (participating) actors. \nTo this point we have identified the following actors: \n\uf0b7 Tenant  is the home occupant \n\uf0b7 Landlord  is the property owner or manager \n\uf0b7 Device  is a physical device to be controlled by  the system-to-be, such as lock-mechanism \nand light-switch, that are controlled by our system (see Figure 1-16) \n\uf0b7 Other potential actors: Maintenance, Police, etc. (some will be introduced later) \nWhen deciding about introducing new actors, the key question is: \u201c Does the system provide \ndifferent service(s) to the new actor? \u201d It is important to keep in mind that an actor is associated", "source": "Page 103", "chapter": "2"}
{"id": "3d7590e37fbe-1", "text": "with a role rather than with a person . Hence, a single actor should be created per role, but a \nperson can have multiple roles, which means that a single person can appear as different actors. \nAlso, different persons may play the same actor role, perhaps at different times. \nIn addition, our system may receive assistance fro m other systems in the course of fulfilling the \nactor\u2019s goal. In this case, the other systems will become different actors if they offer different \ntype of service to the system-to-be. Examples will be seen later. \nTable 2-4 summarizes preliminary use cases for our case-study example. \nTable 2-4: Actors, goals, and the associated use cases for the home access control system. \nActor Actor\u2019s Goal (what the actor intends to accomplish) Use Case Name \nLandlord To disarm the lock and enter, and get space lighted up. Unlock (UC-1) \nLandlord To lock the door & shut the lights (sometimes?). Lock (UC-2) \nLandlord To create a new user account and allow access to home. AddUser (UC-3) \nLandlord To retire an existing user account and disable access. RemoveUser (UC-4) \nTenant To find out who accessed the home in a given interval of \ntime and potentially file complaints. InspectAccessHistory", "source": "Page 103", "chapter": "2"}
{"id": "3d7590e37fbe-2", "text": "time and potentially file complaints. InspectAccessHistory \n(UC-5) \nTenant To disarm the lock and enter, and get space lighted up. Unlock (UC-1) \nTenant To lock the door & shut the lights (sometimes?). Lock (UC-2) \nTenant To configure the device activation preferences. SetDevicePrefs (UC-6)\nLockDevice To control the physi cal lock mechanism. UC-1, UC-2 \nLightSwitch To control the lightbulb. UC-1, UC-2 \n[to be \nidentified] To auto-lock the door if it is left unlocked for a given \ninterval of time. AutoLock (UC-2) \nBecause the Tenant and Landlord actors have diffe rent responsibilities and goals, they will utilize \ndifferent use cases and thus they should be seen differently by the system. The new actor can use \nmore (or less, subset or different) use cases than the existing actor(s), as seen in Table 2-4. We", "source": "Page 103", "chapter": "2"}
{"id": "54a2c31af38b-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 90\nResident\nTenant Landlord\nActor generalization.could distinguish the Maintenance actor who can  do everything as the Landlord, except to \nmanage users. If we want to include the Maintena nce but the same use cases apply for this actor \nas for the Tenant, this means that there is no r eason to distinguish them\u2014we just must come up \nwith an actor name that covers both. \nNote that the last row contains a yet- to-be-identified actor, whose goal is to \nautomatically arm the lock after a certain  period of time expires, to account for \nforgetful persons. Obviously, this is not  a person\u2019s goal, but neither is it the \nsystem\u2019s goal because system-to-be does nothing on its own\u2014it must receive an \nexternal stimulus to take action. We will see later how this can be solved. \nAn actor  can be a person or another system which interacts with our system-to-be. \nThere are two main categories of actors, defined relative to a particular use case: \n1. Initiating actor  (also called primary actor  or simply user): initiates the use \ncase to realize a goal, which depends on the actor\u2019s responsibilities and the \ncurrent context \n2. Participating actor  (also called secondary actor ): participates in the use", "source": "Page 104", "chapter": "2"}
{"id": "54a2c31af38b-1", "text": "2. Participating actor  (also called secondary actor ): participates in the use \ncase but does not initiate it; there are two subcategories: \n(a) Supporting actor : helps the system-to-be to complete the use \ncase\u2014that is, our system-to-be initiates the supporting actor \n(b) Offstage actor : passively participates in the use case, i.e., \nneither initiates nor helps complete the use case, but may be \nnotified about some aspect of it \nActors may be defined in generalization hi erarchies, in which an abstract actor \ndescription is shared and augmented by one or more specific actor descriptions. \nTable 2-4 implies that a software system is de veloped with a purpose/re sponsibility\u2014this purpose \nis assisting its users (actors) to achieve their goals. Use cases are usage scenarios and therefore \nthere must be an actor intentionally using this system. The issue of developer\u2019s intentions  vs. \npossible usage scenarios  is an important one and can be tricky to resolve. There is a tacit but \nimportant assumption made by individual develope rs and large organizations alike, and that is \nthat they are able to control the types of app lications in which their products will ultimately be \nused. Even a very focused tool is designed not without potential to do other things\u2014a clever user", "source": "Page 104", "chapter": "2"}
{"id": "54a2c31af38b-2", "text": "may come up with unintended uses, whet her serendipitously or intentionally. \nSummary Use Cases \nA use case  is a usage scenario  for an external entity, known as actor , and the system-to-be. A use \ncase represents an activity  that an actor can perform on the system and what the system does in \nresponse. It describes what happens when an actor  disturbs our system from its \u201cstationary state\u201d \nas the system goes through its motions until it reache s a new stationary state. It is important to \nkeep in mind that the system is reactive , not proactive; that is, if left undisturbed, the system \nwould remain forever in the equilibrium state. \nTable 2-4 names the preliminary use cases for our  case-study example. The reader may observe \nthat the summary use cases are similar to user stor ies (Table 2-3). Like user stories, summary use 1\n2\n3\n4\n5\nXY1\n2\n3\n4\n5\nXY", "source": "Page 104", "chapter": "2"}
{"id": "69b3db0bb7f8-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 91\ncases do not describe details of the business process. They just identify the user\u2019s role (actor type) \nand the capability that the system-to-be will provide  (to assist in achieving the actor\u2019s goals). \nThe same technique for effort estimation that work s for user stories (Section 2.2.3) can be applied \nto summary use cases. We can use again user story points and the development velocity to \nestimate the project duration by applying equation (1 .1), given in Section 1.2.5. Later, in Section \n4.2.2, we will describe use case points  for software size measurem ent and effort estimation. \nHowever, use case points cannot be applied on summa ry use cases, because they require detailed \nuse case descriptions. Detailed use case descriptions require time and effort to obtain, so they will \nbecome available only at a later stage in the project lifecycle (see Section 2.4.3). \nCasual Description of Use Cases \n \n \n  \n SIDEBAR 2.3: The Task-Artifact Cycle  \n  \n\uf0a8 Use case analysis as well as task analysis  (Kirwan & Ainsworth, 1992) emerged in the", "source": "Page 105", "chapter": "2"}
{"id": "69b3db0bb7f8-1", "text": "tradition of mechanization of work and the division of labor pioneered by F. W. Taylor \n(Kanigel, 2005), which assumes that detailed pro cedure can be defined for every task. So far \nwe aimed to define the use cases in a te chnology-independent manner\u2014the system usage \nprocedure should be independent of the device/ar tifact that currently implements the use case. \nHowever, this is not easy or perhaps even po ssible to achieve, because the user activities will \ndepend on what steps are assumed to have been automated . For example, the details of the use \ncase UC-1 (Unlock) depend on the user id entification technology. If a face-recognition \ntechnology were available that automatically recognizes authorized from unauthorized users, \nthen UC-1 becomes trivial and requires no explicit user activities. \nConsider a simple example of deve loping a digital wristwatch. For a \nregular watch, the owner needs to manually adjust time or date when \ntraveling to a different ti me zone or at the end of  a month. Therefore, we \nneed to define the use cases for thes e activities. On the other hand, if the \nwatch is programmed to know about the owner\u2019s current GPS location, \ntime zones, calendar, leap years, da ylight-saving schedule, etc., and it", "source": "Page 105", "chapter": "2"}
{"id": "69b3db0bb7f8-2", "text": "time zones, calendar, leap years, da ylight-saving schedule, etc., and it \nhas high quality hardware, then it needs no buttons at all. Some of this \ninformation could be automatically updated if the watch is wirelessly \nconnected to a remote server. This watch would always show the correct \ntime because everything is automated. It has no use cases that are initiated by the human owner, unlik e a manually-operated watch. The \ninterested reader should consult (Vicente, 1999: p. 71, 100-106) for \nfurther critique of how tasks affect artifacts and vice versa.", "source": "Page 105", "chapter": "2"}
{"id": "e6f21824aed3-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 92\nUse Case Diagram \nFigure 2-13 sums up the actors, use cases, and their relationships in a so-called use case \ndiagram . There are two use-case categories distingui shed: \u201cfirst-\u201d vs. \u201csecond tier.\u201d The \u201cfirst \ntier\u201d use cases represent meaningful services provided by the system to an actor. The \u201csecond \ntier\u201d use cases represent elaborati ons or sub-services of the main services. In a sense, they are \nequivalent of subroutines  in programs because they capture some repetitive activity and can be \nreused in multiple locations. The figure also shows the relationship of use cases in different tiers. \nThe two stereotypical - or clich\u00e9 types of relationship are: \n\uf0b7 \u00abextend\u00bb \u2013 optional  extensions of the main case \n\uf0b7 \u00abinclude\u00bb \u2013 required  subtasks of the main case \nThe developer can introduce new stereotypes or clich\u00e9s for representing the use case \nrelationships. Note also that the labels on co mmunication lines (\u00abinitiate\u00bb and \u00abparticipate\u00bb) are \noften omitted to avoid cluttering. \nThe AuthenticateUser use case is not a good candida te for first tier use cases, because it does not", "source": "Page 106", "chapter": "2"}
{"id": "e6f21824aed3-1", "text": "represent a meaningful stand-alone goal for an in itiating actor. It is, however, useful to show it \nexplicitly as a second tier use case, particularly because it reveals which use cases require user \nauthentication. For example, one could argue th at Lock does not need authentication, because \nperforming it without authentication does not represent a security threat. Similarly, Disable \nshould not require authentication because that would defeat the purpose of this case. It is of note \nthat these design decisions, such as which use case does or does not require authentication, may \nneed further consideration and justification. Th e reader should not take these lightly, because \neach one of them can have serious consequences, a nd the reader is well advised to try to come up \nwith scenarios where the above design decisions may not be appropriate. \n \n SIDEBAR 2.4: Is Login a Use Case?  \n  \u00abparticipate\u00bb\n\u00abinitiate + participate\u00bb\u00abparticipate\u00bb\u00abparticipate\u00bb\u00abparticipate\u00bb\n\u00abparticipate\u00bbFirst tier use cases Second tier use casessystem\nboundary\ncommunication\u00abinclude\u00bb\nuse case\u00abinitiate\u00bb\n\u00abinitiate\u00bb\nTimerLightSwitchLockDevice\n\u00abinitiate\u00bbTenant\nLandlordactor\n\u00abinitiate\u00bbUC1: Unlock\nUC2: LockUC7: AuthenticateUser", "source": "Page 106", "chapter": "2"}
{"id": "e6f21824aed3-2", "text": "\u00abinitiate\u00bbUC1: Unlock\nUC2: LockUC7: AuthenticateUser\nFigure 2-13: UML use case diagram for the de vice-control subsystem of the home access\nsystem. Compare with Table 2-4.", "source": "Page 106", "chapter": "2"}
{"id": "27b646eff663-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 93\n\uf0a8 A novice developer frequently identifies user l ogin as a use case. On the other hand, expert \ndevelopers argue that login is not a use case. Recall that use case is motivated by user\u2019s goal; \nThe user initiates inter action with the system to achieve a certain goal. You are not logging in \nfor the sake of logging in\u2014you are logging in to do some work, and this work is your use case. \nAddUser\nSetDevicePrefs Landlord\u00abinclude\u00bb\n\u00abinclude\u00bbLogin\nLandlordAddUser\nSetDevicePrefsLoginBAD: GOOD:\n \nThe reader should not mistake the use case diagra m for use cases. The diagram serves only to \ncapture an overview of the system services in a concise visual form . It summarizes the system \nfeatures and their relationships, without deta iling how each feature should operate. Unlike this, \nuse cases  are text stories  that detail exactly what happens wh en an actor attempts to obtain a \nservice from the system. A helpful analogy is a boo k\u2019s index vs. contents: a table-of-contents or \nindex is certainly useful, but the actual content re presents the book\u2019s main value. Similarly, a use \ncase diagram provides a useful overview index, but you need the actual use cases (contents) to", "source": "Page 107", "chapter": "2"}
{"id": "27b646eff663-1", "text": "understand what the system does or is supposed to do. \nFigure 2-14 shows the use cases for the second s ubsystem of the safe home access system, which \nsupports various account management activities. The diagrams in Figure 2-13 and Figure 2-14 \nform the use case diagram of the entire system. Account Management Subsystem\n\u00abinitiate\u00bb\nTenantLandlord\u00abinclude\u00bb\n\u00abinclude\u00bb \u00abparticipate\u00bb\n\u00abinitiate\u00bb\u00abinclude\u00bb\u00abinclude\u00bb\u00abinitiate\u00bb\n\u00abinitiate\u00bbUC8: LoginUC4: RemoveUser\nUC6: SetDevicePrefsUC3: AddUser\nUC5: InspectAccessHistory\n \nFigure 2-14: Use cases for the account-manageme nt subsystem of the home access system.", "source": "Page 107", "chapter": "2"}
{"id": "4007261f62f8-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 94\nFigure 2-15 shows additional rela tionships among use cases that can be used to improve the \ninformativeness of use case diagrams. For exam ple, use cases that share common functionality \ncan be abstracted in a more general, \u201cbase\u201d us e case (Figure 2-15(a)). If a user\u2019s goal has several \nsubgoals, some of which are optional , we can indicate this information in a use case diagram \nusing the \u00abextend\u00bb  stereotype. For example, we may design a use case to allow the user to \nmanage his account. As part of account manageme nt, optional activities that may or may not take \nplace are the inspection of access history and co nfiguring the device-activation preferences \n(Figure 2-15(b)). \n2.4.2 System Boundary and Subsystems \n \nDetermining the System Boundary \nUnfortunately, there are no firm guidelines of delineating the boundary of the system under \ndevelopment. Drawing the system boundary is a ma tter of choice. However, once the boundary is \ndrawn, the interactions for all the actors must be shown in use cases in which they interact with \nthe system-to-be. ManageUsers\nUC4: RemoveUser UC3: AddUserManageUsers", "source": "Page 108", "chapter": "2"}
{"id": "4007261f62f8-1", "text": "UC4: RemoveUser UC3: AddUserManageUsers\nUC4: RemoveUser UC3: AddUser\u00abextend\u00bb\u00abextend\u00bb\nUC6: SetDevicePrefsUC5: InspectAccessHistory\nManageAccount\n\u00abextend\u00bb\u00abextend\u00bb\nUC6: SetDevicePrefsUC5: InspectAccessHistory\nManageAccount\n(a) (b)\nFigure 2-15: More relationships among use cases: (a) Use case generalization; (b) Optional\nuse cases, denoted with the \u00abextend\u00bb stereotype.", "source": "Page 108", "chapter": "2"}
{"id": "b8aeecefc12e-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 95\nConsider a variation of the home access contro l system which will be used for an apartment \nbuilding, or a community of apartment buildin gs, rather than a single-family home. The \nmanagement demands user identif ication based on face recognition, instead of alphanumeric \npassword keys. Roughly speaking, a face recognition system works by taking an image of a \nperson\u2019s face (\u201cmug shot\u201d), compares it with the known faces, and outputs a Boolean result: \n\u201cauthorized\u201d or \u201cunauthorized\u201d user. Here are two variations (see Figure 2-16): \n(a) You procure face recognition software, insta ll it on your local computer, and link it up \nwith a standard relational/SQL database fo r memorizing the faces of legitimate users. \n(b) After a preliminary study, you find that main taining the database of legitimate faces, \nalong with training the recognition system on new faces and unlearning the faces of \ndeparted residents, are overly complex and costly. You decide that the face recognition \nprocessing should be outsourced to a specialized security company, FaceReco, Ltd. This company specializes in user authentication,  but they do not provide any application-\nspecific services. Thus, you still need to deve lop the rest of the access control system.", "source": "Page 109", "chapter": "2"}
{"id": "b8aeecefc12e-1", "text": "The first task is to identify the actors, so the issue is: Are the new tools (face recognition software \nand relational database) ne w actors or they are part of the system and should not be distinguished \nfrom the system? In case (a), they are not worth distinguishing , so they are part of the planned \nsystem. Although each of these is a complex softwa re system developed by a large organization, \nas far as we (the developer) are concerned, they are just modules  that provide data-storage and \nuser-authentication. Most importantly, they are under our control, so there is nothing special \nabout them as opposed to any other module of the planned system. \nTherefore, for case (a), everything remains the sa me as in the original design. The use case \ndiagram is shown in Figure 2-13 and Figure 2-14. Apartment building\nSecurity\ncameraLocal\ncomputerCase (a):\nLocal face recognition\nCase (b):\nRemote face recognition FaceReco, Ltd.FaceReco, Ltd.NetworkNetworkFace\nimage\nFigure 2-16: Alternative cases of face rec ognition the for secure home access system.", "source": "Page 109", "chapter": "2"}
{"id": "710fd35aa92c-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 96\nFor case (b), a part of the new use case diagram is shown in Figure 2-17 (the rest remains the \nsame as in Figure 2-13 and Figure 2-14). Now we need to distinguish a new actor, the FaceReco \nCompany which provides authentication services. Ther e is a need-to-know that they are part of \nthe process of fulfilling some goal(s) of initiating actors. \nSubsystems and Software Architecture \n \n Figure 2-18 shows the traceability matrix  that maps the system requirements to use cases. Its \npurpose is to check that all requirements are covere d by the use cases and none of the use cases is \ncreated without a reason (i.e., without a requireme nt from which it was de rived). If a use case is \nderived from a requirement, then the corres ponding entry in the matrix is checked. The Max PW  \n(priority weight) row shows the maximum priority  of any checked requirement in the column \nabove. The bottom row shows the Total PW  of each use case obtained by summing up the \npriorities of the checked require ments in the column above. The Max PW  and Total PW  values \nare used to schedule the work on implementing th e sue cases. The highest-priority use cases will", "source": "Page 110", "chapter": "2"}
{"id": "710fd35aa92c-1", "text": "be elaborated, implemented, and delivered the first. \n2.4.3 Detailed Use Case Specification \nA detailed use case description represen ts a use case of the system as a sequence of interactions  \nbetween external entities (actors) and the system -to-be. Detailed use cases are usually written as \nusage scenarios  or scripts , listing a specific sequence of acti ons and interactions between the \nactors and the system. For use case scenarios, we will use a stepwise, \u201crecipe-like\u201d description. A \nscenario describes in a step-b y-step manner activities that an actor does and how the system \nresponds. A scenario is also called a use case instance , in the sense that it represents only one of \u00abinitiate\u00bb\nLandlordTenant\n\u00abinclude\u00bb\u00abparticipate\u00bb\n\u00abinclude\u00bb\u00abinitiate\u00bb\nUC8: LoginUC4: RemoveUserUC3: AddUserUC2: Lock\n\u00abinclude\u00bbUC1: Unlock\nUC7: AuthenticateUser\nFaceReco, Ltd.LockDevice\n\u00abparticipate\u00bb\n\u00abparticipate\u00bb\n\u00abparticipate\u00bb\nFigure 2-17: Part of the modified use case diagram for that includes a new actor: FaceReco.\nSee text for details.", "source": "Page 110", "chapter": "2"}
{"id": "25beb18e3f26-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 97\nseveral possible courses of action for a given use case. Use cases specify what information must \npass the boundary of a system when a user or another system interacts with it. \nWe usually first elaborate the \u201cnormal\u201d scenario, also called main success scenario , which \nassumes that everything goes perfect. Because ever ything flows straightforward, this scenario \nusually does not include any conditions or branching\u2014it flows linearly . It is just a causal \nsequence of action/reaction or stimulus/res ponse pairs. Figure 2-19 shows the use case schema .9 \nAlternate scenarios  or extensions  in a use case can result from: \n\uf0b7 Inappropriate data entry , such as the actor making a wrong menu-item choice (other than \nthe one he/she originally intended), or th e actor supplies an invalid identification. \n\uf0b7 System\u2019s inability to respond as desired , which can be a temporary condition or the \ninformation necessary to formulate the response may never become available. \nFor each of the alternate cases we must create an event flow that describes what exactly happens \nin such a case and lists the participating actors. Alternate scenarios are even more important than \nthe main success scenario , because they often deal with security issues. \nAlthough we do not know what new uses the us er will invent for the system, purposeful", "source": "Page 111", "chapter": "2"}
{"id": "25beb18e3f26-1", "text": "development is what governs the system design. For example, attempt to burglarize a home may \nbe a self-contained and meaningful goal for certain t ypes of system users, but this is not what we \nare designing the system for\u2014this is not a legal use case; rather, this must be anticipated and \ntreated as an exception to a legal use case. We will consider such \u201cabuse cases\u201d as part of security \nand risk management (Section 2.4.4). \n                                                      \n9 The UML standard does not specify a use case schema, so the format for use cases varies across different \ntextbooks. Additional fields may be used to show other important information, such as non-functional \nrequirements associated  with the use case. 5         2         2        2       1          5        2    1UC1   UC2   UC3   UC4   UC5   UC6   UC7   UC8\nREQ1\nREQ2\nREQ3REQ4\nREQ5\nREQ6\nREQ7\nREQ8\nREQ952\n54\n2\n1\n2\n1\n1Req\u2019t PW\nMax PW\n15        3         2        2       3          9        2     3 Total PWX\nX\nX\nXX\nX\nX\nXX\nX\nXX\nXX\nXX", "source": "Page 111", "chapter": "2"}
{"id": "25beb18e3f26-2", "text": "X\nX\nXX\nX\nX\nXX\nX\nXX\nXX\nXX\nXX\n \nFigure 2-18: Requirements-to-use-cases traceabili ty matrix for the safe home access case\nstudy. Priority weight (PW) given in Table 2-1.  (Traceability continued in Figure 2-28.)", "source": "Page 111", "chapter": "2"}
{"id": "a539bbc9a6a9-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 98\nA note in passing, the reader should observe that use cases are not specific to the object-oriented \napproach to software engineering. In fact, they are decidedly process-oriented rather than object-\noriented, for they focus on the description of activ ities. As illustrated in Figure 1-9(a), at this \nstage we are not seeing any objects; we see th e system as a \u201cblack box\u201d and focus on the \ninteraction protocol between the actor(s) and th e black box. Only at the stage of building the \ndomain model we encounter objects, which populate the black box. \nDetailed Use Cases \nDetailed use cases elaborate the summary use cases  (Table 2-4). For example, for the use case \nUnlock, the main success scenar io in an abbreviated form may look something like this: \nUse Case UC-1: Unlock \nRelated Requirem\u2019ts: REQ1, REQ3, REQ4, and REQ5 stated in Table 2-1 \nInitiating Actor: Any of: Tenant, Landlord \nActor\u2019s Goal: To disarm the lock and enter, and get space lighted up automatically. \nParticipating Actors: LockDevice, LightSwitch, Timer  \nPreconditions: \u2022 The set of valid keys stored in the system database is non-empty.", "source": "Page 112", "chapter": "2"}
{"id": "a539bbc9a6a9-1", "text": "Preconditions: \u2022 The set of valid keys stored in the system database is non-empty. \n\u2022 The system displays the menu of available functions; at the door Use Case UC-#: Name / Identifier  [verb phrase]\nRelated Require\u2019ts: List of the requirements that are addressed by this use case \nInitiating Actor: Actor who initiates  interaction with the system to accomplish a goal \nActor\u2019s Goal: Informal description of the initiating actor\u2019s goal \nParticipating Actors:  Actors that will help achieve the goal or need to know  about the outcome  \nPreconditions: What is assumed  about the state of the system before the interaction starts \nPostconditions: What are the results  after the goal is achieved or abandoned; i.e., what \nmust be true about the system at the time the execution of this use case is \ncompleted \nFlow of Events for Main Success Scenario:\n\uf0ae 1. The initiating actor  delivers an action  or stimulus  to the system (the arrow indicates \nthe direction of interaction, to- or from the system) \n\uf0ac 2. The system \u2019s reaction  or response  to the stimulus; the system can also send a message \nto a participating actor, if any \n\uf0ae 3. \u2026 \nFlow of Events for Extensions (Alternate Scenarios):", "source": "Page 112", "chapter": "2"}
{"id": "a539bbc9a6a9-2", "text": "\uf0ae 3. \u2026 \nFlow of Events for Extensions (Alternate Scenarios): \nWhat could go wrong? List the exceptions to th e routine and describe how they are handled \n\uf0ae 1a. For example, actor enters invalid data \n\uf0ac 2a. For example, power outage, network failure, or requested data unavailable  \n  \u2026 \n  \nThe arrows on the left indicate the direction of communication: \uf0ae Actor\u2019s action;  \uf0ac System\u2019s reaction \n Figure 2-19: A general schema for UML use cases.", "source": "Page 112", "chapter": "2"}
{"id": "2bd8537c6dbe-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 99\nkeypad the menu choices are \u201cLock\u201d and \u201cUnlock.\u201d \nPostconditions: The auto-lock timer has started countdown from autoLockInterval . \nFlow of Events for Main Success Scenario:\n\uf0ae 1. Tenant /Landlord  arrives at the door and selects the menu item \u201cUnlock\u201d \n 2. include:: AuthenticateUser  (UC-7) \n\uf0ac 3. System  (a) signals to the Tenant /Landlord  the lock status, e.g., \u201cdisarmed,\u201d (b) signals \nto LockDevice  to disarm the lock, and (c) signals to LightSwitch  to turn the light on \n\uf0ac 4. System  signals to the Timer  to start the auto-lock timer countdown \n\uf0ae 5. Tenant /Landlord  opens the door, enters the home [and shuts the door and locks] \nIn step 5 above, the activity of locking the \ndoor is in brackets, because this is covered \nunder the use case Lock, and does not concern \nthis use case. Of course, we want to ensure that this indeed happens, which is the role of \nan auto-lock timer, as explained later. An \nextension scenario for the above use case may specify how the system-to-be will behave", "source": "Page 113", "chapter": "2"}
{"id": "2bd8537c6dbe-1", "text": "extension scenario for the above use case may specify how the system-to-be will behave \nshould the door be unlocked manually, using a \nphysical key. \nAlthough extensions or alternate scenarios are \nnot listed in the description of UC-1, for each \nof the steps in the main success scenario we mu st consider what could go wrong. For example, \n\uf0b7\n In Step 1, the actor may make a wrong menu selection \n\uf0b7 Exceptions during the actor authentication are considered related to UC-7 \n\uf0b7 In Step 5, the actor may be held outside for a while, e.g., greeting a neighbor \nFor instance, to address the exceptions in Step 5,  we may consider installing an infrared beam in \nthe doorway that detects when the person crosses it. Example alternate sc enarios are given next \nfor the AuthenticateUser and Lock use cases. \nIn step 2 of UC-1, I reuse a \u201csubroutine\u201d use cas e, AuthenticateUser, by keyword \u201cinclude,\u201d \nbecause I anticipate this will occur in other use ca ses, as well. Here is the main scenario for \nAuthenticateUser as well as the excep tions, in case something goes wrong: \nUse Case UC-7: AuthenticateUser  (sub-use case) \nRelated Requirements: REQ3, REQ4 stated in Table 2-1", "source": "Page 113", "chapter": "2"}
{"id": "2bd8537c6dbe-2", "text": "Related Requirements: REQ3, REQ4 stated in Table 2-1 \nInitiating Actor: Any of: Tenant, Landlord \nActor\u2019s Goal: To be positively identified by the system (at the door interface). \nParticipating Actors: AlarmBell, Police  \nPreconditions: \u2022 The set of valid keys stored in the system database is non-empty. \n\u2022 The counter of authentication attempts equals zero. \nPostconditions: None worth mentioning. \nFlow of Events for Main Success Scenario:", "source": "Page 113", "chapter": "2"}
{"id": "0ce404430d91-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 100\n\uf0ac 1. System  prompts the actor for identification, e.g., alphanumeric key \n\uf0ae 2. Tenant /Landlord  supplies a valid identification key \n\uf0ac 3. System  (a) verifies that the key is valid, and (b) signals to the actor the key validity \nFlow of Events for Extensions (Alternate Scenarios): \n2a. Tenant /Landlord  enters an invalid identification key \n\uf0ac 1. System  (a) detects error, (b) marks a failed attempt, and (c) signals to the actor \n\uf0ac  1a. System  (a) detects that the count of failed attempts exceeds the maximum \nallowed number, (b) signals to sound AlarmBell , and (c) notifies the Police  actor \nof a possible break-in \n\uf0ae 2. Tenant /Landlord  supplies a valid identification key \n 3. Same as in Step 3 above \nWhen writing a usage scenario, you should focus on what is essential  to achieve \nthe initiating actor\u2019s goal and avoid the deta ils of how this actually happens. Focus \non the \u201cwhat\u201d and leave out the \u201chow\u201d for the subsequent stages of the \ndevelopment lifecycle. For example, in St ep 2 of the use case AuthenticateUser, I", "source": "Page 114", "chapter": "2"}
{"id": "0ce404430d91-1", "text": "just state that the user should provide iden tification; I do not detail whether this is \ndone by typing on a keypad, by scanning an RFID tag, or by some biometric \ntechnology.  \nAt the time of writing detailed use cases, we also  write the corresponding user acceptance tests. In \nthe context of use cases, a user acceptance test case  is a detailed procedure that fully tests a use \ncase or one of its flows of events. Recall that use cases are part of requirements engineering, and \nthe customer should help with specifying the accepta nce tests. The focus is on what the user does, \nnot what the system does. This means that the test cases must be designed around the actual tasks \nthat the user will need to perform. Use-case-bas ed acceptance tests are si milar to acceptance tests \ndescribed in Section 2.2.1. As mentioned, tes ting functions that involve multi-step interaction \nrequires more than just specifying the input data  and expected outcomes. Here we are able to \nprovide detailed steps for pass and fail conditions , because by now we have elaborated step-by-\nstep scenarios for use cases. Here is an exam ple test case for testing the use case UC-1. \nTest-case Identifier: TC-1.01 \nUse Case Tested: UC-1, main success scenario, and UC-7", "source": "Page 114", "chapter": "2"}
{"id": "0ce404430d91-2", "text": "Use Case Tested: UC-1, main success scenario, and UC-7 \nPass/fail Criteria: The test passes if the user enters a key that is contained in the database, \nwith less than a maximum allowed number of unsuccessful attempts \nInput Data: Numeric keycode, door identifier \nTest Procedure: Expected Result: \nStep 1. Type in an incorrect keycode and a \nvalid door identifier System beeps to indicate failure; \nrecords unsuccessful attempt in the database; \nprompts the user to try again \nStep 2. Type in the correct keycode and door \nidentifier System flashes a green light to indicate success; \nrecords successful access in the database; \ndisarms the lock device \nAn acceptance test needs to convince the cust omer that the system works as expected. Latch \nbolt\nDead \nboltStrike \nplate", "source": "Page 114", "chapter": "2"}
{"id": "0bb94cbb44f9-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 101\nWe continue the elaboration of use cases with the main success scenario for the Lock use case: \nUse Case UC-2: Lock \nRelated Requirements: REQ1, REQ2, and REQ5 stated in Table 2-1 \nInitiating Actor: Any of: Tenant, Landlord, or Timer \nActor\u2019s Goal: To lock the door & get the lights shut automatically (?) \nParticipating Actors: LockDevice, LightSwitch, Timer \nPreconditions: The system always displays the menu of available functions. \nPostconditions: The door is closed and lock armed & the auto-lock timer is reset. \nFlow of Events for Main Success Scenario:\n\uf0ae 1. Tenant /Landlord  selects the menu item \u201cLock\u201d \n\uf0ac 2. System  (a) signals affirmation, e.g., \u201clock armed,\u201d (b) signals to LockDevice  to arm \nthe lock (if not already armed), (c) signal to Timer  to reset the auto-lock counter, and \n(d) signals to LightSwitch  to turn the light off (?) \nFlow of Events for Extensions (Alternate Scenarios):\n2a. System senses that the door is not closed, so the lock cannot be armed", "source": "Page 115", "chapter": "2"}
{"id": "0bb94cbb44f9-1", "text": "2a. System senses that the door is not closed, so the lock cannot be armed \n\uf0ac 1. System  (a) signals a warning that the door is open, and (b) signal to Timer  to start the \nalarm counter \n\uf0ae 2. Tenant /Landlord  closes the door \n\uf0ac 3. System  (a) senses the closure, (b) signals affirmation to the Tenant /Landlord , (c) \nsignals to LockDevice  to arm the lock, (d) \uf020 signal to Timer  to reset the auto-lock \ncounter, and (e) signal to Timer  to reset the alarm counter \nNote that in this case, the auto-lock timer appear s as both the initiating and participating actor for \nthis use case. (This is also indicated in the use case diagram in Figure 2-13.) This is because if the \ntimeout time expires before the timer is reset, Timer automatically initiate s the Lock use case, so \nit is an initiating actor. Alternatively, if the user  locks the door before the timeout expires, the \ntimer will be reset, so it is an offstage actor, as well. \nI also assume that a single Timer system can handl e multiple concurrent requests. In the Lock use", "source": "Page 115", "chapter": "2"}
{"id": "0bb94cbb44f9-2", "text": "case, the timer may be counting down the time si nce the lock has been disarmed. At the same \ntime, the system may sense that the door is not cl osed, so it may start the alarm timer. If the door \nis not shut within a given interval, the system  activates the AlarmBell actor and may notify the \nPolice actor. \nYou may wonder why not just say that the system will somehow handle the auto-lock \nfunctionality rather than going into the details of  how it works. Technically, the timer is part of \nthe system-to-be, so why should it be declared an ex ternal actor?! Recall that the system is always \npassive\u2014it reacts to an external stimulus but doe s nothing on its own initiative. Thus, to get the \nsystem perform auto-lock, somebody or something must trigger it to do so. This is the responsibility of Timer. Timer is an external stimulus source  relative to the software under \ndevelopment, although it will be part of the end hardware-plus-software system. \nNext follows the description of the ManageUsers use case: \nUse Case UC-3: AddUser \nRelated Requirements: REQ6 stated in Table 2-1", "source": "Page 115", "chapter": "2"}
{"id": "3350e694a81d-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 102\nInitiating Actor: Landlord \nActor\u2019s Goal: To register new or remove departed residents at runtime. \nParticipating Actors: Tenant  \nPreconditions: None worth mentioning. (But note that this use case is only available \non the main computer and not at the door keypad.) \nPostconditions: The modified data is stored into the database. \nFlow of Events for Main Success Scenario:\n\uf0ae 1. Landlord  selects the menu item \u201cManageUsers\u201d \n 2. Landlord  identification: Include  Login  (UC-8) \n\uf0ac 3. System  (a) displays the options of activities av ailable to the Landlord (including \u201cAdd \nUser\u201d and \u201cRemove User\u201d), and (b) prompts the Landlord  to make selection \n\uf0ae 4. Landlord  selects the activity, such as \u201cAdd User,\u201d and enters the new data \n\uf0ac 5. System  (a) stores the new data on a persiste nt storage, and (b) signals completion \nFlow of Events for Extensions (Alternate Scenarios):\n4a. Selected activity entails adding new users: Include  AddUser  (UC-3) \n4b. Selected activity entails removing users: Include  RemoveUser  (UC-4)", "source": "Page 116", "chapter": "2"}
{"id": "3350e694a81d-1", "text": "The Tenant is a supporting actor for this use case,  because the tenant will input his identification \n(password or a biometric print) during the registra tion process. Note that in UC-3 we include the \nsubordinate use case Login (UC-8), which is not  the same as AuthenticateUser, numbered UC-7. \nThe reason is that UC-7 is designed to authenti cate persons at the entrance(s). Conversely, user \nmanagement is always done from the central comput er, so we need to design an entirely different \nuse case. The detailed description of the use cas e AddUser will be given in Problem 2.19 and \nRemoveUser is similar to it. \nIn Table 2-4 we introduced UC-5: Inspect Access  History, which roughly addresses REQ8 and \nREQ9 in Table 2-1. I will keep it as a single use case, although it is relatively complex and the \nreader may wish to split it into two simpler use ca ses. Here is the description of use case UC-5: \n \nUse Case UC-5: Inspect Access History \nRelated Requirements: REQ8 and REQ9 stated in Table 2-1 \nInitiating Actor: Any of: Tenant, Landlord \nActor\u2019s Goal: To examine the access history for a particular door.", "source": "Page 116", "chapter": "2"}
{"id": "3350e694a81d-2", "text": "Actor\u2019s Goal: To examine the access history for a particular door. \nParticipating Actors: Database, Landlord  \nPreconditions: Tenant/Landlord  is currently logged in the system and is shown a \nhyperlink \u201cView Access History.\u201d \nPostconditions: None. \nFlow of Events for Main Success Scenario:\n\uf0ae 1. Tenant/Landlord  clicks the hyperlink \u201cView Access History\u201d \n\uf0ac 2. System  prompts for the search criteria (e.g., tim e frame, door location, actor role, event \ntype, etc.) or \u201cShow all\u201d \n\uf0ae 3. Tenant/Landlord  specifies the search criteria and submits  \n\uf0ac 4. System  prepares a database query that best matches the actor\u2019s search criteria and", "source": "Page 116", "chapter": "2"}
{"id": "91d392c99101-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 103\nretrieves the records from the Database   \n\uf0ae 5. Database  returns the matching records  \n \n\uf0ac 6. System  (a) additionally filters the retrieved reco rds to match the actor\u2019s search criteria; \n(b) renders the remaining records for display; and (c) shows the result for \nTenant/Landlord \u2019s consideration  \n\uf0ae 7. Tenant/Landlord  browses, selects \u201cinteresting\u201d records (if any), and requests further \ninvestigation (with an accompanying complaint description)  \n \n\uf0ac 8. System  (a) displays only the selected records and confirms the request; (b) archives the \nrequest in the Database  and assigns it a tracking number; (c) notifies Landlord  about \nthe request; and (d) informs Tenant/Landlord  about the tracking number \n \nThe following example illustrates deriving a use case in a different domain. The main point of \nthis example is that use cases serve as a vehi cle to understand the business context and identify \nthe business rules that need to be implemented by the system-to-be. \nExample 2.1 Restaurant Automation, terminating a worker employment \nConsider the restaurant automation project described on the book website (giv en in Preface). One of", "source": "Page 117", "chapter": "2"}
{"id": "91d392c99101-1", "text": "the requirements states that the restaurant manager will be able to manage the employment status: \nREQ8: The manager shall be able to manage employee records for newly hired employees, job \nreassignments and promotions, and employment termination. \nBased on the requirement, a student team derived a use case for employment termination, as shown: \nUse Case UC-10: Terminate Empl oyee    (FIRST VERSION) \nRelated Requirem\u2019ts: REQ8 \nInitiating Actor: Manager \nActor\u2019s Goal: To fire or layoff an employee. \nParticipating Actors:  \nPreconditions:  \nPostconditions: \nFailed End Condition: \uf0b7 System successfully updated Employee List. \n\uf0b7 Employee List failed to update \nFlow of Events for Main Success Scenario:\n\uf0ae 1. Manager  selects Delete  option next to employee\u2019s name \n\uf0ac 2. System  asks Manager  to confirm that the selected employee should be deleted from list \n\uf0ae 3. Manager confirms action to delete the employee \n\uf0ac 4. (a) System removes the employee from Employee List; (b) updates Employee List \nFlow of Events for Extens ions (Alternate Scenarios):\n3a. Manager selects Cancel  option \n\uf0ac 1.  System does not delete the employee", "source": "Page 117", "chapter": "2"}
{"id": "91d392c99101-2", "text": "\uf0ac 1.  System does not delete the employee \nSo then, dismissing an employee is as simple as deleting a list item! I pointed out that in real world \nnothing works so simple. We are not talking about some  arbitrary database entries that can be edited as \nsomeone pleases. These entries have certain mean ing and business significance and there must be \nsome rules on how they can be edited. This is why the developer must talk to the customer to learn the business rules and local laws. Even a student team doing an academic project (and not having a real \ncustomer) should visit a local restaurant and learn how it operates. As a minimum, they could do some Web research. For example, employee rights in the state of New York are available here: \nhttp://www.ag.ny.gov/bureaus/labor/rights.html . The manager must ensure that the employee received any \nremaining pay; that the employee returned all comp any belongings, such as a personal computer, or \nwhatever; the manager may also need to provide some justification for the termination; etc. As a result, it is helpful to refine our requirement:", "source": "Page 117", "chapter": "2"}
{"id": "bbf9ccb9ab45-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 104\nREQ8\uf0a2: The manager shall be able to manage employee records for newly hired employees, job \nreassignments and promotions, and employment termination in accord with local laws . \nBack to the drawing board, and the second version looked like this: \nUse Case UC-10: Terminate Empl oyee    (SECOND VERSION) \nRelated Requirem\u2019ts: REQ8 \nInitiating Actor: Manager \nActor\u2019s Goal: To fire or layoff an employee. \nParticipating Actors:  \nPreconditions: \uf0b7 Removed employee is not currently logged into the system. \n\uf0b7 Removed employee is has already clocked out. \n\uf0b7 Removed employee has returned all company belongings. \nPostconditions: \nFailed End Condition: \uf0b7 System successfully updated Employee List. \n\uf0b7 Employee List failed to update. \nFlow of Events for Main Success Scenario:\n\uf0ae 1. Manager  selects Delete  option next to employee\u2019s name \n\uf0ac 2. System  asks Manager  to confirm that the selected employee should be deleted from list \n\uf0ae 3. Manager confirms action to delete the employee \n\uf0ac 4. (a) System confirms the employee has been paid; (b) removes the employee from \nEmployee List; (c) updates Employee List", "source": "Page 118", "chapter": "2"}
{"id": "bbf9ccb9ab45-1", "text": "Employee List; (c) updates Employee List \nFlow of Events for Extens ions (Alternate Scenarios):\n3a. Manager selects Cancel  option \n\uf0ac 1. System does not delete the employee \n4a. System alerts Manager that the employee has not been paid \n\uf0ac 1. System does not remove the employee from employee roster and aborts this use case \n\uf0ac 2. System opens Payroll <<include>> ManagePayroll  (UC-13) \nI thought this is an amazing trick: whatever you find difficult to solve in your use case, just state it in \nthe preconditions, so that the initiating actor ensures that the system can do its work smoothly! The user serves the system instead the system serving the user. Compared to th e first version, almost \nnothing was changed except that all the hard issues are now resolved as preconditions. Also, in step 4(a), it is not clear how can System confirm that the employee has been paid? And if the employee has \nnot been paid, the alternative scenario throws the user into another use case, ManagePayroll  (UC-13), \nwhere he will again just update some database r ecord. However, updating a database record does not \nensure that the employee has actually received his payment! \nIn the age of automation, we should strive to have computer systems do more work and human users", "source": "Page 118", "chapter": "2"}
{"id": "bbf9ccb9ab45-2", "text": "do less work. A professionally prepared use case for restaurant employment termination should look something like this: \nUse Case UC-10: Terminate Employee    (THIRD VERSION) \nRelated Requirem\u2019ts: REQ8 \nInitiating Actor: Manager \nActor\u2019s Goal: To fire or layoff an employee. \nParticipating Actors:  \nPreconditions:  \nPostconditions: \n \nFailed End Condition: Employee\u2019s record is moved to a table of past employees for auditing \npurposes. \nFlow of Events for Main Success Scenario:\n\uf0ae 1. Manager  enters the employee\u2019s name or identifier \n\uf0ac 2. System  displays the employee\u2019s current record \n\uf0ae 3. Manager reviews the record and requests termination of employment \n\uf0ac 4. System asks the manager to select the reason  for termination, such as layoff, firing, etc. \nand the date when the termination will take effect", "source": "Page 118", "chapter": "2"}
{"id": "8e46c92f2414-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 105\n\uf0ae 5. Manager selects the reason for termination and the effective date \n\uf0ac 6. (a) System checks that in case of firing the decision is justified with past written warnings \ndocumenting poor performance, irresponsibility or breaches of policy. \n(b) System informs the Manager about th e benefits the employee will receive upon \ndeparture, such as severance pay or unused vacation days, and asks the Manager to confirm after informing the employee (in person or by email) \n\uf0ae 7. Manager confirms that the employee has been informed. \n\uf0ac 8. (a) System makes a record of any outstanding wages and the date by which they should \nbe mailed to the employee as required by the local laws. A new record is created in a \ntable of pending actions. (b) System checks if the employee is currently logged in into the company\u2019s computer \nsystem; if yes, it automatically logs off and blocks the employee\u2019s account \n(c) System checks the employee record and informs the Manager the employee before \nleaving should return any restaurant-owned uniforms, keys or property that was issued to \nthe employee \n\uf0ae 9. Manager confirms that the employee has returned all company belongings \n\uf0ac 10. System moves the employee record to a table of past employees, informs the Manager,", "source": "Page 119", "chapter": "2"}
{"id": "8e46c92f2414-1", "text": "and queries the Manager if he or she wishes to post a classifieds advertisement for a new \nemployee \n\uf0ae 11. Manager declines the offer and quits this use case \nFlow of Events for Extens ions (Alternate Scenarios):\n6a. System determines that the decision firing has not been justified with past written warnings \n\uf0ac 1. System informs the Manager th at because of a lack of just ification, the company may be \nliable to legal action, and asks the Manager to decide whether to continue or cancel \n\uf0ae 2. Manager selects one option and the System continues from Step 6(b) in Main Scenario \n9a. Manager selects the items currently with the employee \n\uf0ac 1. System (a) asks the Manager whether to continue or suspend the process until the \nemployee has returned all company belongings; (b) saves the current unfinished transaction in a work-in-progress  table and sets a period to send reminders for completion \n   \nNote that preconditions are not indicated because I could not think of any condition that, if not met, \nwould make impossible the execution of this use case. Similarly, no postconditions are indicated. One may think that an appropriate precondition is that this employee should exist in the database. However, it is conceivable that in Step 2 of  the main success scenario the system  cannot find any record of this", "source": "Page 119", "chapter": "2"}
{"id": "8e46c92f2414-2", "text": "employee, in which case this should be handled as an alternate scenario. \nAn additional feature to consider may be that the system initiates a classifieds advertisement to fill the \nvacant position created by terminating this employee.  It is great to invent new features, but the \ndeveloper must make it clear that adding new features will likely postpone the delivery date and increase project costs. Only our customer can make such decisions. \n \n \nSystem Sequence Diagrams \nA system sequence diagram  represents in a visual form a usag e scenario that an actor experiences \nwhile trying to obtain a service from the system. In  a way, they summarize textual description of \nthe use case scenarios. As noted, a use case may have different scenarios, the main success \nscenario and the alternate ones. A system sequen ce diagram may represent one of those scenarios \nin entirety, or a subpart of a scenario. Figure 2- 20 shows two examples for the Unlock use case.", "source": "Page 119", "chapter": "2"}
{"id": "5a81e15eaf64-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 106\nThe key purpose of system sequence diagrams (as is  the case with use cases) is to represent what \ninformation must pass the system boundary and in  what sequence. Therefore, a system sequence \ndiagram can contain only a single box, named Syst em, in the top row, which is our system-to-be. \nAll other entities must be actors. At this stag e of the development cycle, the system is still \nconsidered atomic and must not be d ecomposed into its constituent parts. \nIt may appear that we are \u201cpeering inside\u201d the bl ack box when stating what system does internally \nduring the actor \uf0ab system exchanges. But, note that we are specifying the \u201c what \u201d that the black \nbox does, not \u201c how\u201d this gets done. \nActivity Diagrams \n \n (a)select function(\u201cunlock\"): SystemUser\n\u00abinitiating actor\u00bb\nprompt for the key\nenter key\nverify key\nsignal: valid key, lock open\nopen the lockLightSwitch\n\u00absupporting actor\u00bb\nturn on the lightLockDevice\n\u00absupporting actor\u00bbTimer\n\u00aboffstage actor\u00bb\nstart (\"duration\u201c)select function(\u201cunlock\"): SystemUser\n\u00abinitiating actor\u00bb\nprompt for the key\nenter key\nverify key\nsignal: valid key, lock open", "source": "Page 120", "chapter": "2"}
{"id": "5a81e15eaf64-1", "text": "prompt for the key\nenter key\nverify key\nsignal: valid key, lock open\nopen the lockLightSwitch\n\u00absupporting actor\u00bb\nturn on the lightLockDevice\n\u00absupporting actor\u00bbTimer\n\u00aboffstage actor\u00bb\nstart (\"duration\u201c) \n(b)select function(\u201cunlock\"): SystemUser\n\u00abinitiating actor\u00bb\nprompt for the key\nenter key\nverify key\nsignal: invalid key\nprompt to try againAlarmBell\n\u00absupporting actor\u00bb\nloop\nsound alarmPolice\n\u00aboffstage actor\u00bb\nnotify intrusion\n \nFigure 2-20: UML System sequence diagrams for the Unlock use case: (a) main success\nscenario; (b) burglary attempt scenario. The diagram in (b) shows UML \u201cloop\u201d interaction\nframe, which delineates a fragment that may execute multiple times.", "source": "Page 120", "chapter": "2"}
{"id": "e5a95edccdc2-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 107\nUse Cases for Requirements Engineering \nUse cases are a popular tool for gathering re quirements and specifying system behavior. \nHowever, I do not want to leave the reader with an illusion that use cases are the ultimate solution \nfor requirements analysis. As any other tool, they  have both virtues and s hortcomings. I hope that \nthe reader experienced some virtues from the pr eceding presentation. On the shortcomings side, \nthe suitability of use cases for gathering requi rements may be questioned because you start \nwriting the use cases given the requirements. Al so, use cases are not equally suitable for all \nproblems. Considering the projects defined in Section 1.5 and the book website (given in \nPreface), use cases seem to be suitable for the re staurant automation project. In general, the use \ncase approach is best suited for the reactive  and interactive  systems. However, they do not \nadequately capture activities for systems that are heavily algorithm-driven , such as the virtual \nbiology lab and financial markets simulation (both described at the book website, given in \nPreface), or data-intensive , such as databases or large data  collections. Some alternative or \ncomplementary techniques are described in Chapter 3. \n2.4.4 Security and Risk Management", "source": "Page 121", "chapter": "2"}
{"id": "e5a95edccdc2-1", "text": "2.4.4 Security and Risk Management \nA business process risk is the chance of something happening that will have an impact on the \nprocess objectives, such as financial or reputa tional damage, and is measured in terms of \nlikelihood and consequence. Identif ying and preempting the serious risks that will be faced by the \nsystem is important for any software system, not only for the ones that work in critical settings, \nsuch as hospitals, etc. Potential risks depend on the environment in which the system is to be \nused. The root causes and potential consequences of  the risks should be analyzed, and reduction \nor elimination strategies devised. Some risks are intolerable  while others may be acceptable  and \nshould be reduced only if economically viable. Betw een these extremes are risks that have to be \ntolerated only because their reduc tion is impractical or grossly expensive. In such cases the \nprobability of an accident arising because of the hazard should be made as low as reasonably \npractical  (ALARP). \n \nRisk Identification Risk Type Risk Reduction Strategy \nLock left disarmed (when it should be armed)  Intolerable  Auto-lock after autoLockInterval   \nLock does not disarm (faulty mechanism)  AL ARP Allow physical key use as alternative \nTo address the intolerable risk, we can design an automatic locking system which observes the", "source": "Page 121", "chapter": "2"}
{"id": "e5a95edccdc2-2", "text": "To address the intolerable risk, we can design an automatic locking system which observes the \nlock state and auto-locks it after autoLockInterval  seconds elapses. The auto-locking system \ncould be made stand-alone, so its failure proba bility is independent of the main system. For \nexample, it could run in a different runtime enviro nment, such as separate Java virtual machines, \nor even on a separate hardware and energy source. \nThe probability of a risk occurrence is us ually computed based on historical data. \na risk condition capturing the situation upon which the risk of a given fault may occur. a fault in a \nbusiness process is an undesired state of a proces s instance which may lead to a process failure \n(e.g. the violation of a policy may lead to a process instance being interrupted). Identifying a fault \nin a process requires determining the condition upon which the fault occurs. If a risk is detected", "source": "Page 121", "chapter": "2"}
{"id": "0133efc64c96-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 108\nIdeaDisciplined development\nProduct\nSOFTWARE ENGINEERINGduring requirements analysis, remedial actions shoul d be taken to rectify the use case design and \nprevent an undesired state of the business process (fault for short), from occurring. \nRisk Identification phase, where risk analysis is carried out to identify risks in the process model \nto be designed. Traditional risk analysis methods  such as IEC 61025 Fault Tree Analysis (FTA) \nand Root Cause Analysis can be employed in this ph ase. The output of this phase is a set of risks, \neach expressed as a risk condition. \nM. Soldal Lund, B. Solhaug, and K. Stolen. Model-Driven Risk Analysis . Springer, 2011. \nRisk analysis involves more than just consider ing \u201cwhat could go wrong\u201d in different steps of \nuse-case scenarios. It is possible that each step is executed correctly, but system as a whole fails. \nSuch scenarios represent misuse cases . For example, an important requirement for our safe-\nhome-access system is to prevent dictionary att acks (REQ4 in Table 2-1). As described later in \nSection 2.5.2, we need to count the unsuccessful a ttempts, but also need to reset the counter if the", "source": "Page 122", "chapter": "2"}
{"id": "0133efc64c96-1", "text": "user leaves before providing a valid key or  reaching the maximum allowed number of \nunsuccessful attempts. To detect such s ituations, the system may run a timer for \nmaxAttemptPeriod  duration and then reset the counter of unsuccessful attempts. \nAssume that an intruder somehow lear ned the maximum of allowed unsuccessful \nattempts and maxAttemptPeriod . The intruder can try a dictionary attack with the \nfollowing misuse case: \ninvalid-key, invalid, \u2026 \uf0a3 maxNumOfAttempts  ; wait maxAttemptPeriod  ; invalid, invalid, \u2026 \n \nTo ensure fault tolerance, a stand-alone system  should monitor the state-variable values and \nprohibit the values out of the safe range, e.g., by overwriting the illegal value. Ideally, a different backup system should be designed for each state vari able. This mechanism can  work even if it is \nunknown which part of the main program is fa ulty and causes the illegal value to occur. \nA positive aspect of a stand-alone, one-task-only  system is its simplicity and lack of \ndependencies, inherent in the main system, which makes it resilient; a negative aspect is that the \nlack of dependencies makes it myopic, not much aware of its environment and unable to respond \nin sophisticated manner. \n2.4.5 Why Software Engineering Is Difficult (2)", "source": "Page 122", "chapter": "2"}
{"id": "0133efc64c96-2", "text": "2.4.5 Why Software Engineering Is Difficult (2) \n\u201cIt\u2019s really hard to design products by focus groups. A lot of times, people don\u2019t know what they want until \nyou show it to them.\u201d \u2014Steve Jobs, BusinessWeek , May 25 1998 \nA key reason, probably the most important one, is that \nwe usually know only approximately what we are to \ndo. But, a general understanding of the problem is not \nenough for success. We must know exactly what to do because programming does not admit vagueness\u2014it is \na very explicit and precise activity. \nHistory shows that projects succeed more often when requirements are well managed. \nRequirements provide the basis for agreement with the users and the customer, and they serve as \nthe foundation for the work of the developmen t team. Software defects often result from", "source": "Page 122", "chapter": "2"}
{"id": "d10685651d77-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 109\nmisunderstanding the requirements, not only because  of inadequate developmental skills. This \nmeans that requirements provide a vital linkage to  ensure that teams deliver systems that solve \nreal business problems. You need to ensure that you \u201cdo the right thing the right way.\u201d \nWhen faced with a difficult decision, it is a good id ea to ask the customer for help. After all, the \ncustomer can judge best what solution will wo rk best for him and he will easier accept \ncompromises if they were involved in making them. However, this is not always simple. Consider \nthe projects described at the book website (given in  Preface). Asking the customer works fine in \nthe restaurant automation project. Even in the vi rtual biology lab, we can interview a biology \ncourse instructor to help with clarifying the im portant aspects of cell biology. However, who is \nyour customer in the cases of vehicle traffic monitoring and stock investment fantasy league \n(Section 1.5.1)? As discussed in the description of  the traffic-monitoring project, we are not even \nsure whom the system should be targeted to. \nMore about requirements engineering and system specification can be found in Chapter 3.  \n2.5 Analysis: Building the Domain Model", "source": "Page 123", "chapter": "2"}
{"id": "d10685651d77-1", "text": "2.5 Analysis: Building the Domain Model \n \n\u201cI am never content until I have constructed a mechanical model of the subject I am studying. \nIf I succeed in making one, I understand; otherwis e I do not.\u201d \u2014Lord Kelvin (Sir William Thomson) \nUse cases looked at the system\u2019s environment (act ors) and the system\u2019s external behavior. Now \nwe turn to consider the inside of the system. This  shift of focus is contrasted in Figure 2-21. In \nSection 1.2.3 I likened object-oriented analysis to setting up an enterprise. The analysis phase is \nconcerned with the \u201c what \u201d aspect\u2014identifying what workers n eed to be hired and what things \nacquired. Design (Section 2.6) deals with the \u201c how\u201d aspect\u2014how these workers interact with \neach other and with the things at their workpl ace to accomplish their share in the process of \nfulfilling a service request. Of course, as any ma nager would tell you, it is difficult to make a 123456789 0123456789 0Concept 2Concept 1\nActor\n(Bank\ncustomer)ActorSystem(b) (a)\nConcept 3\nConcept nDomain Model\nActor\n(Remote\ndatacenter)Actor (ATM machine)", "source": "Page 123", "chapter": "2"}
{"id": "d10685651d77-2", "text": "Actor\n(Remote\ndatacenter)Actor (ATM machine)\nFigure 2-21: (a) Use case model sees the syst em as a \u201cblack box.\u201d (b) Domain model peers\ninside the box to uncover the constituent entiti es and their (static) relations that make the\nblack box behave as described by its use cases.", "source": "Page 123", "chapter": "2"}
{"id": "33a7fa1fd302-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 110\nclear boundary between the \u201cwhat\u201d and the \u201chow.\u201d  We should not be purists about this\u2014the \ndistinction between Analysis and Design is pr imarily to indicate where the emphasis should be \nduring each stage of development. \nWe already encountered concepts  and their relations  in Section 1.3 when describing concept \nmaps as a diagrammatic representation of know ledge about problem domains. Domain model \ndescribed here is similar to a concept map, a lthough somewhat more complex, as will become \napparent soon. \n2.5.1 Identifying Concepts \nBack to our setting-up-an-enterprise approach, we n eed to hire workers with appropriate expertise \nand acquire things they will work with. To a nnounce the openings under a classifieds section, we \nstart by listing the positions or, better, responsibilities , for which we are hiring. We identify the \nresponsibilities by examining the use case scenario s and system sequence diagrams. For example, \nwe need a worker to verify whether or not the ke y entered by the user is valid, so we title this \nposition KeyChecker. We also need a worker to k now (memorize, or keep track of) the collection \nof valid keys, so we advertise an opening for Ke yStorage. Further, to operate the lock and the", "source": "Page 124", "chapter": "2"}
{"id": "33a7fa1fd302-1", "text": "light/switch, we come up with LockOperator and LightOperator positions, respectively. Note that \nconcept name is always a noun phrase . \nIn building the domain model, a useful strategy is to start from the \u201cperiphery\u201d (or \u201cboundary\u201d) of \nthe system, as illustrated in Figure 2-22. That is, we start by assigning concepts that handle \ninteractions between the organization and the outsi de world, that is, between the actors and the \nsystem. Each actor interacts with at least one  boundary object. The boundary object collects the \ninformation from the actor and translates it into a fo rm that can be used by \u201cinternal\u201d objects. As \nwell, the boundary object may translate the information in the other direction, from \u201cinternal\u201d objects to a format suitable for an actor. \nOrganizations are often fronted by a point-of-contact person. A common pattern is to have a \nspecialized worker to take orders from the clie nts and orchestrate the workings of the workers Actor A\nActor BActor DActor CBoundary conceptsStep 1: Identifying the boundary concepts\nActor A\nActor BActor CStep 2: Identifying the internal concepts\nActor DConcept 1Concept 1\nConcept 2Concept 2Internal\nconceptsConcept 2Concept 2Concept 3Concept 3", "source": "Page 124", "chapter": "2"}
{"id": "33a7fa1fd302-2", "text": "conceptsConcept 2Concept 2Concept 3Concept 3\nConcept 4Concept 4Concept 1Concept 1Concept 3Concept 3\nConcept 5Concept 5\nConcept 4Concept 4Concept 6Concept 6\nFigure 2-22: A useful strategy for building a do main model is to start with the \u201cboundary\u201d \nconcepts that interact directly with the acto rs (Step 1), and then identify the internal \nconcepts (Step 2).", "source": "Page 124", "chapter": "2"}
{"id": "2a54706b970b-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 111\ninside the system. This type of object is known as Controller. For a complex system, each use \ncase or a logical group of use cases may be assigned a different Controller object. \nWhen identifying positions, remember  that no task is too small\u2014if it needs to be done, it must be \nmentioned explicitly and somebody should be give n the task responsibility. Table 2-5 lists the \nresponsibilities and the worker titles (concept name s) to whom the responsibilities are assigned. \nIn this case, it happens that a single responsibilit y is assigned to a single worker, but this is not \nnecessarily the case. Complex responsibilities may be assigned to multiple workers and vice versa \na single worker may be assigned multiple simple responsibilities. Further discussion of this issue \nis available in the solution of Problem 2.29 at the end of this chapter. \nTable 2-5: Responsibility descriptions for the home access case study used to identify the \nconcepts for the domain model. Types \u201cD\u201d and \u201cK\u201d denote doing  vs. knowing  \nresponsibilities, respectively. \nResponsibility Description Typ Concept Name \nCoordinate actions of all concepts associated with a use case, a logical \ngrouping of use cases, or the entire system and delegate the work to other concepts. D Controller", "source": "Page 125", "chapter": "2"}
{"id": "2a54706b970b-1", "text": "Container for user\u2019s authentication da ta, such as pass-code, timestamp, \ndoor identification, etc. K Key \nVerify whether or not the key-code entered by the user is valid. D KeyChecker \nContainer for the collection of valid keys a ssociated with doors and users. K KeyStorage \nOperate the lock device to armed/ disarmed positions. D LockOperator \nOperate the light switch to turn the light on/off. D LightOperator \nOperate the alarm bell to signal possible break-ins. D AlarmOperator \nBlock the input to deny more attempts if too many unsuccessful attempts. D Controller \nLog all interactions with the system in persistent storage. D Logger \nBased on Table 2-5 we draw a draft domain model for our case-study #1 in Figure 2-23. During \nanalysis, objects are used only to represent possible system state; no effort is made to describe \nhow they behave. It is the task of design (Sec tion 2.6) to determine how the behavior of the \nsystem is to be realized in terms of the behavior  of objects. For this reason, objects at analysis \ntime have no methods/operations  (as seen in Figure 2-23). \nUML does not have designated symbols for domain c oncepts, so it is usual to adopt the symbols", "source": "Page 125", "chapter": "2"}
{"id": "2a54706b970b-2", "text": "that are used for software classes. I added a sm iley face or a document symbol to distinguish \n\u201cworker\u201d vs. \u201cthing\u201d concepts. Workers get assi gned mainly doing responsibilities, while things \nget assigned mainly knowing respons ibilities. This labeling serves only as a \u201cscaffolding,\u201d to aid \nthe analyst in the process of id entifying concepts. The distinction may not always be clear cut, \nbecause some concepts may combine both knowing-  and doing types of responsibilities. In such \ncases, the concepts should be left unlabeled. This  is the case for KeycodeEntry and StatusDisplay \nin Figure 2-23. Like a real-world scaffolding, wh ich is discarded once construction is completed, \nthis scaffolding is also temporary in nature. \nAnother useful kind of scaffolding is classifyi ng concepts into the following three categories: \n\u00abboundary\u00bb, \u00abcontrol\u00bb, and \u00abentity\u00bb. This is also shown in Figure 2-23. At first, Key may be \nconsidered a \u00abboundary\u00bb because keys are excha nged between the actors and the system. On the \nother hand, keys are also stored in KeyStorage. This particular concept corresponds to neither one \nof those, because it contains other information, such as timestamp and the door identifier. Only", "source": "Page 125", "chapter": "2"}
{"id": "3177ec1b64d7-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 112\npass-codes identifying the actors are exchange d between the actors and the system (concept: \nKeycodeEntry) and this information is  transferred to the Key concept. \nFigure 2-23 shows a single concept for operating hou sehold devices. This concept is obtained by \nabstracting common properties of different devi ce-operating concepts in Table 2-5. We show \nsuch generalization diagrammatically as in Fi gure 2-24. Currently, the single concept appears \nsufficient and, given that we prefer parsim onious designs, we leave Figure 2-23 unmodified. \nLater, more detailed consideration will reveal the need for distinguishing different device \noperators (see Figure 2-25(b)). \nResponsibilities for use case UC-5: Inspect Access History can be derived based on the detailed \ndescription of UC-5 (Section 2.4.3). We can gather the doing (D) and knowing (K) \nresponsibilities as given in Table 2-6. \nTable 2-6: Responsibility descriptions for UC-5:  Inspect Access History of the home access \ncase study. \nResponsibility Description Type Concept Name \nRs1. Coordinate actions of concepts associated with this use case and \ndelegate the work to other concepts. D Controller", "source": "Page 126", "chapter": "2"}
{"id": "3177ec1b64d7-1", "text": "delegate the work to other concepts. D Controller \nRs2. Form specifying the search parameters for database log retrieval K Search Request \u00abentity\u00bb\nKeyChecker\n\u00abcontrol\u00bb\nController\u00abentity\u00bb\nKey\u00abentity\u00bb\nKeyStorageSymbolizes\u201cworker \u201d-type\nconcept.\n\u00abboundary\u00bb\nKeycodeEntry\n\u00abboundary\u00bb\nStatusDisplay\nResidentSymbolizes\u201cthing \u201d-type\nconcept.Symbolizes\u201cthing \u201d-type\nconcept.\nLockDevice\nLightSwitch\u00abboundary\u00bb\nHouseholdDeviceOperator\n \nFigure 2-23: Partial domain model for th e case study #1, home access control. \n\u00abboundary\u00bb\nLockOperator\u00abboundary\u00bb\nHouseholdDeviceOperator\n\u00abboundary\u00bb\nMusicPlayerOperator\u00abboundary\u00bb\nLightOperator\u00abboundary\u00bb\nAlarmOperator\n \nFigure 2-24: Generalization of the concept HouseholdDeviceOperator (Figure 2-23) as a\nconceptual superclass  obtained by identifying commonality among the concepts that operate\ndifferent household devices.", "source": "Page 126", "chapter": "2"}
{"id": "2b7a1d604413-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 113\n(from UC-5, Step 2). \nRs3. Render the retrieved records into an HTML document for sending \nto actor\u2019s Web browser for display. D Page Maker \nRs4. HTML document that shows the actor the current context, what \nactions can be done, and outcom es of the previous actions. K Interface Page \nRs5. Prepare a database query that best matches the actor\u2019s search \ncriteria and retrieve the records from the database (from UC-5, Step 4). D Database \nConnection \nRs6. Filter the retrieved records to match the actor\u2019s search criteria (from \nUC-5, Step 6). D Postprocessor \nRs7. List of \u201cinteresting\u201d records for further investigation, complaint \ndescription, and the tracking number. K Investigation \nRequest \nRs8. Archive the request in the database and assign it a tracking number (from UC-5, Step 8). D Archiver \nRs9. Notify Landlord about the reque st (from UC-5, Step 8). D Notifier \nNote that upon careful examination we may conclu de that responsibility Rs6 is relatively simple \nand it should be assigned to the Pa ge Maker (Postprocessor concept w ould be rejected). Similarly,", "source": "Page 127", "chapter": "2"}
{"id": "2b7a1d604413-1", "text": "responsibilities Rs8 and Rs9 may be  deemed relatively simple and assigned to a single concept \nArchiver (Notifier concept would be rejected). \nLet us assume that we reject Postprocessor a nd keep Notifier because it may need to send follow-\nup notifications. \nThe partial domain model corresponding to the subs ystem that implements UC -5 is shown later in \nFigure 2-26, completed with attributes and associations. \nt is worth noting at this point how an artifact fro m one phase directly feeds into the subsequent \nphase. We have use case scenarios feed into the system sequence diagrams, which in turn feed \ninto the domain model. This traceability property  is critical for a good development method \n(process), because the design elaboration progresse s systematically, without great leaps that are \ndifficult to grasp and/or follow. \nDomain model is similar to a concept map (describ ed in Section 1.3)\u2014it also represents concepts \nand their relations, here called a ssociations\u2014but domain model is a bit more complex. It can \nindicate the concept\u2019s stereotype as well as its attributes (described in the next section). \nNote that we construct a single domain model  for the whole system. The domain model is \nobtained by examining different use case scenario s, but they all end up contributing concepts to", "source": "Page 127", "chapter": "2"}
{"id": "2b7a1d604413-2", "text": "the single domain model. \n2.5.2 Concept Associations and Attributes \nAssociations \nAssociations (describe who needs to work together and why, not how they work together). \nAssociations for use case UC-5: Inspect Access History can be derived based on the detailed \ndescription of UC-5 (Section 2.4.3). \nTable 2-7: Identifying associations fo r use case UC-5: Inspect Access History. \nConcept pair Association d escription Association name I", "source": "Page 127", "chapter": "2"}
{"id": "0ed403068e46-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 114\nController \uf0ab Page \nMaker Controller passes requests to Page Maker and \nreceives back pages prepared for displaying conveys requests \nPage Maker \uf0ab \nDatabase ConnectionDatabase Connection passes the retrieved data to \nPage Maker to render them for display provides data \nPage Maker \uf0ab \nInterface Page Page Maker prepares the Interface Page prepares \nController \uf0ab \nDatabase ConnectionController passes search requests to Database \nConnection conveys requests \nController \uf0ab \nArchiver Controller passes a list of \u201cinteresting\u201d records and \ncomplaint description to Archiver, which assigns the tracking number and creates Investigation Request conveys requests \nArchiver \uf0ab \nInvestigation Request Archiver generates Invest igation Request generates \nArchiver \uf0ab Database \nConnection Archiver requests Database Connection to store \ninvestigation requests into the database requests save \nArchiver \uf0ab Notifier Archiver requests Notifier to notify Landlord about \ninvestigation requests requests notify \nFigure 2-25(a) (completed from Figure 2-23) and Fi gure 2-26 also show the associations between \nthe concepts, represented as lines connecting the concepts. Each line also has the name of the \nassociation and sometimes an optional \u201cr eading direction arrow\u201d is shown as \u25ba. The labels on", "source": "Page 128", "chapter": "2"}
{"id": "0ed403068e46-1", "text": "the association links do not signify the function ca lls; you could think of these as just indicating \nthat there is some collaboration anticipated betw een the linked concepts. It is as if to know \nwhether person X and person Y collaborate, so they can be s eated in adjacent cubicles/offices. \nSimilarly, if objects are associated, they logically belong to the same \u201cpackage.\u201d \nThe reader should keep in mind that it is more important to identify the domain concepts than \ntheir associations (and attr ibutes, described next). Every  concept that the designer can discover \nshould be mentioned. Conversely, for an associati on (or attribute), in order to be shown it should \npass the \u201cdoes it need to be mentioned?\u201d test. If the association in question is obvious, it should \nbe omitted from the domain model. For example, in Figure 2-25(a), the association \uf0e1\uf020Controller\u2013\nobtains\u2013Key \uf020\uf0f1 is fairly redundant. Several other associa tions could as well be omitted, because the \nreader can easily infer them, and this should be don e particularly in schematics that are about to \nbecome cluttered. Remember, clarity should be pref erred to accurateness, and, if the designer is", "source": "Page 128", "chapter": "2"}
{"id": "0ed403068e46-2", "text": "not sure, some of these can be mentioned in the text accompanying the schematic, rather than drawn in the schematic itself.", "source": "Page 128", "chapter": "2"}
{"id": "aee4c6850c4d-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 115\nAttributes \nThe domain model may also include concept attributes, as is for example shown in Figure 2-25. \nExample attributes are deviceStatuses  (with valid values \u201c activated \u201d and \u201cstopped \u201d) \nthat record the current state of the physical  devices operated by H ouseholdDeviceOperator. \nCareful consideration reveals that a single hous ehold-device-operator concept is not sufficient. \nAlthough all physical devices share a common attribute ( deviceStatus ), they also have \nspecific needs (Figure 2-25(b)). Th e lock device needs to be armed after an auto-lock interval, so \nthe corresponding concept needs an extra attribute autoLockInterval . We also discussed allowing \nthe user to explicitly set the interval to hold ope n the lock open, which requires another attribute. \nThe LightOperator needs to check the room illumina tion before activating the light bulb, so it is \nassociated with the illumination detector concept.  The MusicPlayerOperator needs the playlist of \ntracks, so it is associated with the Playlist concept. Even the deviceStatus  attribute may have \u00abcontrol\u00bb\nController\nnumOfAttempts\nmaxNumOfAttempts\u00abcontrol\u00bbController\nnumOfAttempts\nmaxNumOfAttempts\u00abentity\u00bb\nKeyChecker\u00abentity\u00bb\nKeyChecker\n\u00abentity\u00bb\nKey\nuserIdentityCode\ntimestampdoorLocation\u00abentity\u00bb", "source": "Page 129", "chapter": "2"}
{"id": "aee4c6850c4d-1", "text": "KeyChecker\n\u00abentity\u00bb\nKey\nuserIdentityCode\ntimestampdoorLocation\u00abentity\u00bb\nKeyStorage\u00abentity\u00bb\nKeyStorageconveys requestsverifiesretrieves valid keys\n\u201cReading direction arrow.\u201dHas no meaning; it only helps readingthe association label, and is often left out.\u201cReading direction arrow.\u201dHas no meaning; it only helps readingthe association label, and is often left out.\u00abboundary\u00bb\nKeycodeEntry\n\u00abboundary\u00bb\nStatusDisplay\nResidentLockDevice\nLightSwitchAssociationname\nconveys requests\n\u00abboundary\u00bb\nHouseholdDeviceOperator\ndeviceStatusesobtainsAttributes(a)\nasks-illumination provides-play-\nschedule\u00abboundary\u00bb\nLockOperator\nautoLockInterval\nholdOpenInterval\nacceptingInterval\u00abboundary\u00bb\nMusicPlayerOperator\u00abboundary\u00bb\nLightOperator\u00abboundary\u00bb\nAlarmOperator\n\u00abboundary\u00bb\nIlluminationDetector\u00abentity\u00bb\nPlayList\u00abboundary\u00bb\nHouseholdDeviceOperator\ndeviceStatus\nnotifies-members\n\u00abentity\u00bb\nNotificationList(b)\nasks-illumination provides-play-schedule\u00abboundary\u00bb\nLockOperator\nautoLockInterval\nholdOpenInterval\nacceptingInterval\u00abboundary\u00bb\nMusicPlayerOperator\u00abboundary\u00bb\nLightOperator\u00abboundary\u00bb\nAlarmOperator\n\u00abboundary\u00bb\nIlluminationDetector\u00abentity\u00bb\nPlayList\u00abboundary\u00bb\nHouseholdDeviceOperator\ndeviceStatus\u00abboundary\u00bb\nHouseholdDeviceOperator", "source": "Page 129", "chapter": "2"}
{"id": "aee4c6850c4d-2", "text": "HouseholdDeviceOperator\ndeviceStatus\u00abboundary\u00bb\nHouseholdDeviceOperator\ndeviceStatus\nnotifies-members\n\u00abentity\u00bb\nNotificationList(b)\nFigure 2-25: (a) Domain model from Figure 2-23 completed with attributes and\nassociations. (b) Concepts derived from  HouseholdDeviceOperator in Figure 2-24", "source": "Page 129", "chapter": "2"}
{"id": "af6d26a6868d-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 116\ndifferent values for different devices, such as \u201c disarmed \u201d and \u201carmed \u201d for LockOperator; \n\u201cunlit \u201d and \u201clit\u201d for LightOperator; etc., which are more descriptive than the generic ones \n\u201cactivated \u201d and \u201cstopped \u201d. Although device operators differ from one another, they also \nshare common properties, so it is useful to indicate in the domain model diagram that they are \nrelated through the common base concept HouseholdDeviceOperator (Figure 2-25(b)). \nTable 2-8 shows how the subset of attributes re lated to use case UC-5: Inspect Access History is \nsystematically derived based on the detaile d description of UC-5 (Section 2.4.3). \nTable 2-8: Attributes for use case UC-5: Inspect Access History. \nConcept Attributes Attribute Description \nSearch \nRequest user\u2019s \nidentity Used to determine the actor\u2019s cred entials, which in turn specify \nwhat kind of data this actor is authorized to view. \nsearch parameters Time frame, actor role, door location, event type (unlock, lock, \npower failure, etc.). \nPostprocessor search \nparameters Copied from search request; needed  to Filter the retrieved records \nto match the actor\u2019s search criteria.", "source": "Page 130", "chapter": "2"}
{"id": "af6d26a6868d-1", "text": "to match the actor\u2019s search criteria. \nInvestigation Request records list List of \u201cinteresting\u201d records selected for further investigation. \ncomplaint \ndescription  Describes the actor\u2019s suspicions a bout the selected access records. \ntracking \nnumber Allows tracking of the investigation status. \nArchiver current \ntracking number Needed to assign a tracking number to complaints and requests. \nNotifier contact \ninformation Contact information of the Landlord who accepts complaints and \nrequests for further investigation. \nOne more attribute that could be considered is for the Page Maker to store the data received from \nDatabase Connection. Recall that earlier we merged  the Postprocessor concept with Page Maker, \nwhich now also has the responsibility to filter the retrieved records to match the actor\u2019s search \ncriteria. \u00abcontrol\u00bb\nController\u00abentity\u00bb\nInvestigationRequest\nrecordsList\ncomplaintDescr\ntrackingNum\n\u00abboundary\u00bb\nDatabaseConnection\u00abboundary\u00bb\nNotifier\ncontactInfo\n\u00abentity\u00bb\nPageMaker\nconveys requestsprepares\nprovides-data\nDatabaseLandlord\u00abboundary\u00bb\nSearchRequest\nuserID\nsearchParams\n\u00abboundary\u00bb\nInterfacePage\nResident\u00abentity\u00bb\nArchiver\ncurrentTrackNum\nposts\nconveys-requestsconveys-requests generates\nsaves-data-tousesreceives", "source": "Page 130", "chapter": "2"}
{"id": "af6d26a6868d-2", "text": "posts\nconveys-requestsconveys-requests generates\nsaves-data-tousesreceives\nFigure 2-26: The domain model for UC-5: Insp ect Access History of home access control.", "source": "Page 130", "chapter": "2"}
{"id": "95cf8fbe37ee-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 117\nIn Figure 2-25(a), another possible candidate attribute is numOfKeys  in the KeyStorage. \nHowever, this is a kind of trivial attribute not wo rth mentioning, because it is self-evident that the \nstorage should know how many keys it holds inside. \nAn attribute numOfAttempts  counts the number of failed attemp ts for the user before sounding \nthe alarm bell, to tolerate inadve rtent errors when entering the key code. In addition, there should \nbe defined the maxNumOfAttempts  constant. At issue here is  which concept should possess \nthese attributes? Because a correct key is needed  to identify the user, the system cannot track a \nuser over time if it does not know user\u2019s identity (a chicken and egg problem!). One option is to \nintroduce real-world constraints, such as temporal continuity, which can be stated as follows. It is \nunlikely that a different user would attempt to open the doors within a very short period of time. \nThus, all attempts within, say, two minu tes can be ascribed to the same user10. For this we need to \nintroduce an additional attribute maxAttemptPeriod  or, alternatively, we can specify the \nmaximum interval between two consecutive attempts, maxInterAttemptInterval .", "source": "Page 131", "chapter": "2"}
{"id": "95cf8fbe37ee-1", "text": "maximum interval between two consecutive attempts, maxInterAttemptInterval .  \nThe knowledge  or expertise  required for the attempts-counti ng worker comprises the knowledge \nof elapsed time and the validity of the last  key typed in within a time window. The \nresponsibilities  of this worker are: \n1. If numOfAttempts \uf0b3 maxNumOfAttempts , sound the alarm bell and reset \nnumOfAttempts = 0   \n2. Reset numOfAttempts = 0  after a specified amount of time (if the user discontinues \nthe attempts before reaching maxNumOfAttempts ) \n3. Reset numOfAttempts = 0  after a valid key is presented \nA likely candidate concept to contain these attribut es is the KeyChecker, because it is the first to \nknow the validity of a presented key. On the other hand, if we introduce the AlarmOperator \nconcept (Figure 2-24), then one may argue that AlarmOperator should contain all the knowledge \nabout the conditions for activating the alarm bell.  However, we should remember that, once the \nthreshold of allowed attempts is exceeded, the system should activate the alarm, but also deny \nfurther attempts (recall the detailed description of  UC-7: AuthenticateUser in Section 2.4.3). In \nTable 2-5, the responsibility for blocking the input  to deny more attempts was assigned to the", "source": "Page 131", "chapter": "2"}
{"id": "95cf8fbe37ee-2", "text": "Controller. Therefore, we decide that the best concept to place the attributes related to counting \nunsuccessful attempts is the Contro ller, as shown in Figure 2-25(a). \n                                                      \n10 Of course, this assumption is only an approximation.  We already considered a misuse case in Section \n2.4.4. We could imagine, for instance, the following scenario. An intruder makes numOfAttempts = \nmaxNumOfAttempts - 1  failed attempts at opening the lock. At this time, a tenant arrives and the \nintruder sneaks away  unnoticed. If the tenant makes a mistake on the first attempt, the alarm will be \nactivated, and the tenant might assume that the system is malfunctioning. Whether the developer should \ntry to address this scenario depends on the expected damages, as well as the time and budget constraints.", "source": "Page 131", "chapter": "2"}
{"id": "2fd03cddf944-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 118\nAs already said, during the analysis we should make every effort to stay with what  needs to be \ndone and avoid considering how things are done. Unfortunately, as seen, this is not always \npossible. The requirement of tolerating inadvert ent typing errors (\u201cunsuccessful attempts\u201d) has \nled us into considerable design detail and, wors e, we are now committed to a specific technical \nsolution of the problem. \n2.5.3 Domain Analysis \n\u201cScientists should always state the opinions upon which their facts are based.\u201d\u2014Author unknown \nFigure 2-27 \nWhen developing a software-based system, we are modeling the user and environment in the \nsoftware system. The model incorporates intern al structures representing the problem domain. \nThese structures include data representing entitie s and relations in the domain, and a program \nprescribing how these data may be manipulated. Modeling necessarily involves simplification and \nabstraction. The purpose of simplification is to  make the development manageable: The system \nshould solve one problem, not all problems. \nAs discussed in Section 1.2.3, the analyst needs to consider not only what  needs to be done, but \nalso how it can be done\u2014what are feasible ways of doing it. We cannot limit the domain analysis", "source": "Page 132", "chapter": "2"}
{"id": "2fd03cddf944-1", "text": "to the inside of the system-to-be, because all us eful systems operate by interacting with their \nenvironment. We need to know what is at our disposal in the external world \u2026  \nPotential user\nSpeaks Klingon\nCuriosity-driven\nExpected commands:\nnIH, Suq, naw\u2018, DeghProfessional user\nSpeaks EsperantoConformity-drivenExpected commands:\nEkzemplero, Alglui,\nRedakti, Vi \u015di\nCURRENT USERAccidental user\nDoes not speak\nChance-driven\nExpected commands:\n<meaningless - ignore>C\nPotential user\nSpeaks Klingon\nCuriosity-driven\nExpected commands:\nnIH, Suq, naw\u2018, DeghProfessional user\nSpeaks EsperantoConformity-drivenExpected commands:\nEkzemplero, Alglui,\nRedakti, Vi \u015di\nCURRENT USERAccidental user\nDoes not speak\nChance-driven\nExpected commands:\n<meaningless - ignore>C\nFigure 2-27: In domain analysis, we look at the external world from inside out and specify \nonly what the system-to-be needs to know to function as required.", "source": "Page 132", "chapter": "2"}
{"id": "63188fe9e772-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 119\n \nhe traceability matrix of the domain model is shown in Figure 2-28. This matrix traces the \ndomain concepts to the use cases from which they  were derived. This mapping continues the \ndevelopment lifecycle traceability from Figure 2-18. Note that we have two Controller concepts, \nController-SS1 for the first subsystem that contro ls the devices (Figure 2-25(a)) and Controller-\nSS2 for the second subsystem that supports deskt op interaction with the system (Figure 2-26). \nA more detailed traceability may be maintained for critical projects including risk analysis \ntraceability  (Section 2.4.4) that traces potential hazar ds to their specific cause; identified \nmitigations to the potential hazard s; and specific causes of software-related hazards to their \nlocation in the software. \n2.5.4 Contracts: Preconditions and Postconditions \nContracts express any important conditions about the attributes  in the domain model. In addition \nto attributes, contract may include facts about forming or breaking relations between concepts, \nand the time-points at which instances of concepts  are created or destroyed. You can think of a \nsoftware contract as equivalent to a rental contr act, which spells out the c ondition of an item prior", "source": "Page 133", "chapter": "2"}
{"id": "63188fe9e772-1", "text": "to renting, and will spell out its condition subsequent to renting. For example, for the operations \nUnlock and Lock, the possible contracts are: \nOperation  Unlock \nT UC1\nUC2\nUC3\nUC4UC5\nUC6\nUC7UC815\n3\n2\n23\n9\n23Use \nCasePW\nX\nXX\nXXX\nXX\nXX\nX\nXX XX\nController-SS2\nSearchRequest\nInterfacePage\nPageMaker\nArchiver\nDatabaseConnection\nNotifier\nInvestigationRequestController-SS1\nKey\nKeyStorage\nKeyCheckerKeycodeEntryStatusDisplay\nHouseholdDeviceOperator\nXX\nXX XX\nXX\nXXXXX\nX\nXXX\nX\nXDomain Concepts\nXX X\n \nFigure 2-28: Use-cases-to-domain-model tracea bility matrix for the safe home access case\nstudy.  (PW = priority weight) (Continued from Figure 2-18 and continues in Figure 2-36.)", "source": "Page 133", "chapter": "2"}
{"id": "338930bc68cc-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 120\nPreconditions \u2022 set of valid keys known to the system is not empty\n\u2022 numOfAttempts \uf03c maxNumOfAttempts   \n\u2022 numOfAttempts = 0 ,  for the first attempt of the current user \nPostconditions \u2022 numOfAttempts = 0 ,  if the entered Key \uf020\uf0ce Valid keys  \n\u2022 current instance of the Key obj ect is archived and destroyed \nThe system should be fair, so each user s hould be allowed the same number of retries \n(maxNumOfAttempts ). Thus, the precondition  about the system for a new user is that \nnumOfAttempts  starts at zero value. (I already discu ssed the issue of dete cting a new user and \nleft it open, but let us ignore it for now.) The postcondition  for the system is that, after the current \nuser ends the interaction with the system, numOfAttempts  is reset to zero. \n \nOperation  Lock \nPreconditions None (that is, none worth mentioning) \nPostconditions \u2022 lockStatus  = \u201carmed \u201d, and \n\u2022 lightStatus  remains unchanged (see text for discussion) \n \nIn the postconditions for Lock, we explicitly state that lightStatus  remains unchanged \nbecause this issue may need further design atten tion before fully solved . For example, we may", "source": "Page 134", "chapter": "2"}
{"id": "338930bc68cc-1", "text": "want to somehow detect the last person leavi ng the home and turn off the light behind them. \nThe operation postconditions specify the guarantees of what the system will do, given that the \nactor fulfilled the preconditions for this operation.  The postconditions must specify the outcomes \nfor worst-case vs. average-case vs. best- case scenarios, if such are possible. \n \n2.6 Design: Assigning Responsibilities \n \n\u201cA designer knows he has achieved perfection not when  there is nothing left to add, but when there is \nnothing left to take away.\u201d \u2014Antoine De Saint-Exup\u00e9ry \n\u201c\u2026 with proper design, the features come cheaply. Th is approach is arduous, but continues to succeed.\u201d \n\u2014Dennis Ritchie \nAnalysis (Section 2.5) dealt with what  is needed for our system; we determined how the customer \ninteracts with the system to obtain services and what workers (concepts) need to be acquired to \nmake this possible. Analysis is in a way the ac quisition phase of the ente rprise establishment. \nDesign (this section), on the other hand, deals with organization, how the elements of the system \nwork and interact. Therefore, design is mainly  focused on the dynamics of the system. Unlike", "source": "Page 134", "chapter": "2"}
{"id": "338930bc68cc-2", "text": "analysis, where we deal with abstract concepts, here we deal with conc rete software objects. OBJECT-ORIENTED DESIGN\nOBJECT-ORIENTED DESIGN", "source": "Page 134", "chapter": "2"}
{"id": "5f9c7cf37bd7-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 121\nWe already encountered system  sequence diagrams in Section 2.4.3. As Figure 2-29 illustrates, in \nthe design phase we are zooming-in inside the system and specifying how its software objects \ninteract to produce the behaviors observed by the actors. One way to think about the design problem is illustrated in Figure 2-30. Imagine th at you draw a map showing the actors and objects \nas \u201cstations\u201d to be visited in the course of execu ting a use case scenario. The goal of design is to \n\u201cconnect the dots/stations\u201d in a way that is in so me sense \u201coptimal.\u201d Initially, we know that the \npath starts with the initiating actor, because the purpose of the system is to assist the initiating \nactor in achieving a goal. The path also ends with  the initiating actor after the system returns the \ncomputation results. In between, the path should visit the participating actors. So, we know the \nentry and exit point(s), and we know the compu ting responsibilities of concepts (Section 2.5). \nObjects need to be called (by sending messages) to fulfill their computing (or, \u201cdoing\u201d) \nresponsibility, and we need to decide how to \u201cconne ct the dots.\u201d That is, we need is to assign the", "source": "Page 135", "chapter": "2"}
{"id": "5f9c7cf37bd7-1", "text": "messaging responsibilities\u2014who calls  each \u201cworker\u201d object, and for \u201cthing\u201d objects we need to \ndecide who creates them, who us es them, and who updates them. So ftware designer\u2019s key activity \nis assigning responsibilities  to the software objects acquired in domain analysis (Section 2.5). \nInitially, we start designing the object interactions  using the concepts from the domain model. As \nwe progress and elaborate our design and get a be tter understanding of what  can be implemented \nand how (having in mind the capabilities and pecu liarities of our chosen programming language), \nwe will need to substitute some concepts with one or more actual classes. It is important to trace \nthe evolution from the abstract domain model to specific classes (see Section 2.6.2). select function(\u201cunlock\"): SystemUser\n\u00abinitiating actor\u00bb\nprompt for the key\nenter key\nverify key\nsignal: valid key, lock open\nopen the lock,\nturn on the lightTimer\n\u00aboffstage actor\u00bb\nstart (\"duration\u201c)checkKey()\nsk := getNext()\nsetOpen(true): Checker : KeyStorage\nval == null : setLit(true)alt val != null\n[else]ystemystemController : LockCtrlSystem Sequence DiagramDesign\nSequence Diagram\nFigure 2-29: Designing object interactions: fr om system sequence diagrams to interaction", "source": "Page 135", "chapter": "2"}
{"id": "5f9c7cf37bd7-2", "text": "Figure 2-29: Designing object interactions: fr om system sequence diagrams to interaction\ndiagrams. The magnifier glass symbolizes look ing at interactions inside the system.", "source": "Page 135", "chapter": "2"}
{"id": "267878d5fe75-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 122\nConsider, for example, use case UC-5: Inspect  Access History for which the doing (D) and \nknowing (K) responsibilities are given in Table 2- 6 (Section 2.5.1). Suppose that we want to \ndesign the interactions only for Steps 4 \u2013 6 of us e case UC-5. Start at the point when the system \nreceives the search criteria from the actor and stop at the point when an HTML page is prepared \nand sent to actor\u2019s browser for viewing. Dynami c object interactions can be represented using \nUML sequence diagrams  (Sidebar 2.5). \nFigure 2-31(a) shows the dilemma of responsibilit y assignment for the example of use case UC-5. \nFirst, we observe that among the objects in Ta ble 2-6 Archiver, Notifier, and Investigation \nRequest do not participate in Steps 4\u20136 of UC-5 . Hence, we need to consider only Database \nConnection and Page Maker. (Cont roller participates in every interaction with the initiating \nactor.) Second, because this is a Web-based soluti on, the design will need to be adjusted for the \nWeb context. For example, Interface Page will not  be a class, but an HTML document (with no", "source": "Page 136", "chapter": "2"}
{"id": "267878d5fe75-1", "text": "class specified). The Search-Request will be sent  from the browser to the server as plain text \nembedded in an HTTP message. \nList of the responsibilities to be assi gned (illustrated in Figure 2-31(a)): \nR1. Call Database Connection (to fulfill Rs5, defi ned in Table 2-6 as: retrieve the records \nfrom the database that match the search criteria) \nR2. Call Page Maker (to fulfill Rs3, defined in Ta ble 2-6 as: render the retrieved records into \nan HTML document) \nThere is also the responsibility (R3) to check if th e list of records retrieved from the database is \nempty (because there are no records that match the given search criteria). Based on the outcome, \na different page will be shown to the actor. :Notifier :DatabaseConnDatabaseDatabase LandlordLandlord ResidentResident:Archiver :Controller :SearchRequest :InterfacePage :PageMaker :InvestigRequest\nFigure 2-30: The design problem seen as \u201cconnecting the dots\u201d on the \u201cmap\u201d o f\nparticipating objects.", "source": "Page 136", "chapter": "2"}
{"id": "ed4d3332602e-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 123\n \n SIDEBAR 2.5: Interaction Diagrams  \n  \n\uf0a8 Interaction diagrams display protocols \u2014permitted dynamic relations among objects in the \ncourse of a given activity. This sidebar highli ghts the main points and the reader should check \nthe details in a UML reference. You read  a UML sequence diagram from the top down: \n\uf0b7 At the top, each box represents an object, which may be named or not. If an object is \nnamed, the name is shown in the box to the left of the colon. The class to which the \nobject belongs is shown to the right of the colon. \n\uf0b7 Each timeline (dashed vertical line) descri bes the world from the vantage point of the \nobject depicted at the top of the timeline. As a convention, time proceeds downward, \nalthough in a concurrent program the activitie s at the same level in the diagram do not \nnecessarily occur at the same time (see Section 5.3). \n\uf0b7 Thin elongated boxes on a timeline represent the activities  of the particular object (the \nboxes/bars are optional and can be omitted) \n\uf0b7 Links (solid horizontal lines with arrows) between the timelines indicate the followed-", "source": "Page 137", "chapter": "2"}
{"id": "ed4d3332602e-1", "text": "\uf0b7 Links (solid horizontal lines with arrows) between the timelines indicate the followed-\nby relation (not necessarily the immediately-followed-by relation). The link is annotated with a message  being sent from one object to another or to itself.  \n\uf0b7\n Normally, all \u201cmessages\u201d are method calls and, as such, mu st return. The return action \nis denoted by a dashed horizontal link at the bottom of an activity box, oriented \nopposite of the message arrow. Although this  link is often omitted if the method has no \nreturn value, the call returns nonetheless.  Some novices just keep drawing message \narrows in one direction and forget that thes e must return at some point and the caller \ncannot proceed (send new messag es) before the callee returns.  \nAnother example is shown in Figure 2-31(a) for use case UC-1: Unlock. Here the dilemma is, \nwho should invoke the method activate(\"lock\")  on the DeviceCtrl to disarm the lock once \nthe key validity is established? One option is th e Checker because it is the first to acquire the \ninformation about the key validity. (Note that th e KeyChecker is abbreviated to Checker to save \nspace in the diagram.) Another option is the Cont roller, because the Controller would need to", "source": "Page 137", "chapter": "2"}
{"id": "ed4d3332602e-2", "text": "space in the diagram.) Another option is the Cont roller, because the Controller would need to \nknow this information anyway\u2014to signal to the user the outcome of the key validation. An \nadvantage of the latter choice is that it mainta ins the Checker focused on its specialty (key (a) (b): PageMaker : DatabaseConn\naccessList := retrieve(params : string)\ninterfacePage :=\nrender(accessList : string)? ?\nR1.\nR2.checkKey(): Checker : DeviceCtrl\n?: Controller\nactivate( \"lock\" )\nFigure 2-31: Example of assigning responsibilities. (a) Which objects should be assigned\nresponsibilities R1 and R2? (b) Once the Ke y Checker decides the key is valid, the\nDeviceCtrl should be notified to unlock the lock. Whose responsibility should this be?", "source": "Page 137", "chapter": "2"}
{"id": "aad90e009f3d-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 124\nchecking) and avoids assigning other responsib ilities to it. Recall that in Figure 2-25 the \nController has an association with the Hous eholdDeviceOperator named \u201cconveysRequests.\u201d \nDomain model concept associations provide only a useful hint for assigning communication \nresponsibilities in the design, but more is need ed for making design decisions. Before I present \nsolutions to problems in Figure 2-31, I first descri be some criteria that guide our design decisions. \nOur goal is to derive a \u201cgood\u201d design or, ideally, an optimal design . Unfortunately, at present \nsoftware engineering discipline is unable to precisely specify the quantitative criteria for \nevaluating designs. Some criteria are commonly accep ted, but there is no systematic framework. \nFor example, good software designs are characterized with: \n\uf0b7 Short communication chains between the objects \n\uf0b7 Balanced workload across the objects \n\uf0b7 Low degree of connectivity (associations) among the objects \nWhile optimizing these parameters we must ensure that messages are sent in the correct order and \nother important constraints  are satisfied. As already stated, there are no automated methods for \nsoftware design; software engineer s rely on design heuristics. The design heuristics  used to \nachieve \u201coptimal\u201d designs can be roughly divided as:", "source": "Page 138", "chapter": "2"}
{"id": "aad90e009f3d-1", "text": "achieve \u201coptimal\u201d designs can be roughly divided as: \n1. Bottom-up (inductive) approaches that are a pplying design principles and design patterns \nlocally  at the level of software objects ( micro-level design ). Design principles are \ndescribed in the next section and design  patterns are presented in Chapter 5. \n2. Top-down (deductive) approaches that are applying architectural styles globally , at the \nsystem level, in decomposing the system into subsystems ( macro-level design ). Software \narchitectures are reviewed in Section 2.3. \nSoftware engineer normally combines both a pproaches opportunistically. While doing design \noptimization, it is also important to enforce the contracts (Section 2.5.4) and other constraints, \nsuch as non-functional requirements. Object constrai nt specification is reviewed in Section 3.2.3. \n2.6.1 Design Principles for Assigning Responsibilities \nA popular approach to micro-level design is known as responsibility-driven design  (RDD). We \nknow the types of responsibilities that objects can have (Section 1.4.2): \n\uf0b7 Type 1 responsibility (knowing): Memorizing da ta or references, such as data values, \ndata collections, or references to  other objects, represented as a property", "source": "Page 138", "chapter": "2"}
{"id": "aad90e009f3d-2", "text": "data collections, or references to  other objects, represented as a property   \n\uf0b7 Type 2 responsibility (doing): Performing comput ations, such as data processing, control \nof physical devices, etc., represented as a method   \n\uf0b7 Type 3 responsibility (communicating): Comm unicating with other objects, represented \nas message  sending (method invocation) \nHence, we need to decide what properties and methods belong to what object and what messages \nare sent by objects. We have already perform ed responsibility assigning in the analysis phase \n(Section 2.5). There, we \u201chired workers\u201d to perform  certain tasks, which in effect covers the first \ntwo types of responsibility: assigning attribut es, associations, and methods for performing", "source": "Page 138", "chapter": "2"}
{"id": "7a0131664009-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 125\ncomputations. In the design stage of software lif ecycle, we are dealing mainly with the third \nresponsibility type: sending messages to  (invoking methods on) other objects. \nLow cohesion\nHigh cohesion\n \nTight coupling Loose coupling\nImportant design principles  at the local, objects level include: \n\uf0b7 Expert Doer Principle : that who knows should do the task \n\uf0b7 High Cohesion Principle : do not take on too many responsibilities of Type 2 \n(computation) \n\uf0b7 Low Coupling Principle : do not take on too many responsibilities of Type 3 \n(communication) \nExpert Doer Principle  helps shorten the communication chains between the objects. It essentially \nstates that, when assigning a responsibility for message sending, select the object which first", "source": "Page 139", "chapter": "2"}
{"id": "c9eaf535fa0c-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 126\nlearns the information need ed to send the message. High Cohesion Principle  helps in balancing \nthe workload across the objects and keeping them  focused. Object\u2019s functional cohesion is \ninversely proportional to the number of computing responsibilities assigned to it. Low Coupling \nPrinciple  helps to reduce the number of associatio ns among the objects. Object\u2019s coupling is \ndirectly proportional to the number of different  messages the object sends to other objects. \nConsider how to employ these design principles to the example of Figure 2-31(b). For example, \nbecause the Checker is the first to acquire the in formation about the key validity, by the Expert \nDoer Principle it is considered a good candidate to send a message to the DeviceCtrl to disarm the \nlock. However, the High Cohesion Principle favor s maintaining the Checker functionally focused \non its specialty (key checking) and opposes a ssigning other responsibilities to it. Ideally, High \nCohesion allows a single non-trivial responsib ility per object. Suppose we let High Cohesion \noverride Expert Doer. A reasonable compromise is  to assign the responsibility of notifying the \nDeviceCtrl to the Controller. Note that this solu tion violates the Low Coupling Principle, because", "source": "Page 140", "chapter": "2"}
{"id": "c9eaf535fa0c-1", "text": "Controller acquires relatively large number of a ssociations. We will revisit this issue later. \nAs seen, design principles are not always in agre ement with each other. Enforcing any particular \ndesign principle to the extreme would lead to absu rd designs. Often, the designer is faced with \nconflicting demands and must use judgment and ex perience to select a compromise solution that \nhe feels is \u201coptimal\u201d in the current context. Another problem is that cohesion and coupling are \ndefined only qualitatively: \u201cdo not take on too many  responsibilities.\u201d Chapter 4 describes \nattempts to quantify th e cohesion and coupling. \nBecause precise rules are lacking and so much de pends on the developer\u2019s judgment, it is critical \nto record all the decisions and reasoning behind them. It is essential to document the alternative \nsolutions that were considered in the design pr ocess, identify all the tradeoffs encountered, and \nexplain why the alternatives were abandoned . The process may be summarized as follows: \n1. Identify the responsibilities; domain modeling (Section 2.5) provides a starting point; \nsome will be missed at first and identified in subsequent iterations \n2. For each responsibility, identify the alternative assignments; if the choice appears to be \nunique then move to the next responsibility", "source": "Page 140", "chapter": "2"}
{"id": "c9eaf535fa0c-2", "text": "unique then move to the next responsibility \n3. Consider the merits and tradeoffs of each a lternative by applying the design principles; \nselect what you consider the \u201coptimal\u201d choice \n4. Document the process by which you arrived to each responsibility assignment. \nSome responsibility assignments will be strai ghtforward and only few may require extensive \ndeliberation. The developer will use his experience and judgment to decide. \nExample of Assigning Responsibilities \nLet us go back to the problem of assigning res ponsibilities for UC-1 and UC-5 of the safe home \naccess case study, presented in Figure 2-31. We first consider use case UC-5: Inspect Access \nHistory, and design the interactions only for its  Steps 4 \u2013 6. We first identify and describe \nalternative options for assigning responsi bilities identified above with Figure 2-31(a). \nAssigning responsibility R1 for retrieving record s from the Database Connection is relatively \nstraightforward. The object making the call must know the query parameters; this information is", "source": "Page 140", "chapter": "2"}
{"id": "ba470a539de8-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 127\nfirst given to the Controller, so by Expert Doer design principle, the Controller should be \nassigned responsibility R1. \nAs for R2 (rendering the retrieved list), there ar e alternative options. The object making the call \nmust know the access list as retrieved from th e Database. The feasible alternatives are: \n1. Database Connection is the first to  get hold of the access list records \n2. Controller will probably be posting the Interf ace Page rendered by Page Maker, so it \nwould be convenient if Controller receives directly the return value from Page Maker \nFinally, responsibility R3 to check if the lis t of records is empty could be assigned to: \n1. The object that will be assigned responsibilit y R2, which can call different methods on \nPage Maker \n2. Page Maker, which will simply generate a different page for different list contents. \nNext, let us employ the design principles , such as Expert Doer , High Cohesion , or Low Coupling  \nto decide on which object should be given which responsibility. \nConsider first assigning responsibility R2. By the Ex pert Doer principle, the Database Connection \nshould make the call. However, this choice w ould lower the cohesion and increase coupling of", "source": "Page 141", "chapter": "2"}
{"id": "ba470a539de8-1", "text": "the Database Connection, which would need to pass the retrieved list to the rendering object \n(Page Maker); in addition, it would need to know what to do with the rendered page returned by \nthe Page Maker. If we assign R2 to the Databa se Connection then Database Connection should \nprobably return the rendered page that it obtains from Page Maker, rather than the retrieved list \n(as shown in Figure 2-31(a)). In other word s, the method signature should be modified. \nAlternatively, the Controller generally has th e responsibility to delegate tasks, so the High \nCohesion design principle favors assigning R2 to the Controller. Both options (Database Connection vs. Controller) contribute the same amount of coupling. \nTherefore, we have a conflict among the design pr inciples: Expert Doer favors assigning R2 to \nthe Database Connection while High Cohesion favors  assigning R2 to the Controller). In this : DatabaseConnection : Controller : PageMaker\nget( queryRequest : string )DatabaseDatabase\nretrieve records\nresult\ninterfacePage := render(accessList : string)ResidentResident\u00abhtml\u00bb\ninterfacePage :\nspecify \nquery \nrequestaccessList := retrieve(params : string)\naccessList != NULL\n[else]alt\nresult \ndisplayedpage :=\nrenderList()page :=\nrenderList()\npage :=\nwarning()page :=\nwarning()", "source": "Page 141", "chapter": "2"}
{"id": "ba470a539de8-2", "text": "renderList()\npage :=\nwarning()page :=\nwarning()\n\u00abpost page\u00bb\n \nFigure 2-32: Sequence diagram for part of use case UC-5: Inspect Access History.", "source": "Page 141", "chapter": "2"}
{"id": "307e43d4fc76-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 128\ncase, one may argue that maintaining high cohesion is more valuable than satisfying Expert Doer. \nDatabase Connection already has a relativ ely complex responsibility and adding new \nresponsibilities will only make things worse. Theref ore, we opt for assigning R2 to the Controller. \nResponsibility R3 should be assigne d to Page Maker because this choice yields highest cohesion. \nFigure 2-32 shows the resulting UML sequence diagra m. Note that in Figure 2-32 the system is \nnot ensuring that only authorized users access the database. This omission will be corrected later \nin Section 5.2.4 where it is used as an example for the Protection Proxy design pattern. \next consider the use case UC-1: Unlock. Table 2-9 lists the communication (message \nsending / method invocation) responsibilities for the system function \u201center key\u201d (shown in \nthe system sequence diagram in Figure 2-20). \nTable 2-9: Communicating responsibilities identi fied for the system function \u201center key.\u201d \nCompare to Table 2-5. \nResponsibility Description  \nSend message to Key Checker to validate the key entered by the user. \nSend message to DeviceCtrl to disarm the lock device. \nSend message to DeviceCtrl to switch the light bulb on.", "source": "Page 142", "chapter": "2"}
{"id": "307e43d4fc76-1", "text": "Send message to DeviceCtrl to switch the light bulb on. \nSend message to PhotoObserver to report whether daylight is sensed. \nSend message to DeviceCtrl to sound the alarm bell. \nBased on the responsibilities in Table 2-9, Figure 2-33 shows an example design for the system \nfunction \u201center key.\u201d The Controller object orchestr ates all the processing logic related to this \nsystem function. The rationale for this choice wa s discussed earlier, related to Figure 2-31(b). We \nalso have the Logger to maintain the history log of accesses. \nNote that there is a data-processing rule  (also known as \u201cbusiness rule\u201d because it specifies the \nbusiness policy for dealing with a given situation) hidden in our design: \n    IF   key \uf0ce ValidKeys   THEN   disarm lock and turn lights on \n    ELSE \n        increment failed-attempts-counter          IF   failed-attempts-counter equals maximum number allowed \n             THEN   block further attempts and raise alarm \nBy implementing this rule, the object posse sses the knowledge of conditions under which a \nmethod can or cannot be invoked. Hence, the questi on is which object is responsible to know this \nrule? The needs-to-know responsibility has implicat ions for the future upgrades or modifications. \nChanges to the business rules require change s in the code of the corresponding objects.", "source": "Page 142", "chapter": "2"}
{"id": "307e43d4fc76-2", "text": "Changes to the business rules require change s in the code of the corresponding objects. \n(Techniques for anticipating and dealing with  change are described in Chapter 5.) \nApparently, we have built an undue complexity into  the Controller while striving to preserve high \ndegree of specialization (i.e., cohesion ) for all other objects. This implies low cohesion  in the \ndesign; poor cohesion is equivalent to low degree of specialization of (some) objects. N", "source": "Page 142", "chapter": "2"}
{"id": "08891905ace7-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 129\nThe reader should not think that the design in Figure 2-33 is the only one possible. Example \nvariations are shown in Figure 2-34.  In variation (a) the Checker sets the key validity as a flag in \nthe Key object, rather than reporting it as the met hod call return value. The Key is now passed on \nand DeviceCtrl obtains the key validity flag and d ecides what to do. The re sult: business logic is \nmoved from the Controller into the object that  operates the devices. Such solution where the \ncorrect functioning of the system depends on a flag in the Key object is fragile\u2014data can become corrupted as it is moves around the system. A more elegant solution is presented in Chapter 5, \nwhere we will see how Publish/Subscribe design pattern protects critical decisions by \nimplementing them as operations, rather than argum ents of operations. It is harder to make a \nmistake of calling a wrong operation, than to pass a wrong argument value. \u00abdestroy\u00bb\nopt\u00abcreate\u00bb\nsk := getNext()\nlogTransaction( k, val )\nactivate( \"lock\" ): Controller : Checker : KeyStorage : DeviceCtrl : Logger : PhotoObsrv\ndl := isDaylight()alt\n[else]enterKey()k : Key\nval := checkKey( k )loop", "source": "Page 143", "chapter": "2"}
{"id": "08891905ace7-1", "text": "[else]enterKey()k : Key\nval := checkKey( k )loop\nactivate( \"bulb\" )val == true\ndl == falsecompare(k, sk)[for all stored keys]\nnumOfAttempts++\nalt numOfAttempts == maxNumOfAttempts\nactivate( \"alarm\" )denyMoreAttempts()\n[else]\nprompt: \"try again\"\nFigure 2-33: Sequence diagram for the system function \u201center key\u201d (Figure 2-20). Several \nUML interaction frames are shown, such as \u201c loop ,\u201d \u201calt\u201d (alternative fragments, of which \nonly the one with a condition true will execute), and \u201c opt\u201d (optional, the fragment executes \nif the condition is true).", "source": "Page 143", "chapter": "2"}
{"id": "c8d3daa6afef-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 130\nAlthough the variation in Figure 2-34(b) is exaggera ted, I have seen similar designs. It not only \nassigns an awkward method name, checkIfDaylightAndIfNotThenSetLit() , but \nworse, it imparts the knowledge encoded in the name onto the caller. Anyone examining this \ndiagram can infer that the caller rigidly controls the callee\u2019s work. The caller is tightly coupled to \nthe callee because it knows the business logic of the callee. A better solution is in Figure 2-34(c). \nNote that the graphical user interface (GUI) desi gn is missing, but that is acceptable because the \nGUI can be designed independently of the system\u2019s business logic. \n2.6.2 Class Diagram \nClass diagram is created simply by reading th e class names and their operations off of the \ninteraction diagrams. The class diagram of our cas e-study system is shown in Figure 2-35. Note \nthe similarities and differences with the domai n model (Figure 2-25). Unlike domain models, the \nclass diagram notation is standardized by UML. \nBecause class diagram gathers class operations and attributes in one place, it is easier to size up \nthe relative complexity of classes in the system . The number of operations in a class correlates", "source": "Page 144", "chapter": "2"}
{"id": "c8d3daa6afef-1", "text": "the relative complexity of classes in the system . The number of operations in a class correlates \nwith the amount of responsibility handled by th e class. Good object-oriented designs distribute \nexpertise and workload among many  cooperating objects. If you observe that some classes have \nconsiderably greater number of operations than others, you should examine the possibility that \nthere may be undiscovered class(es) or misplaced responsibilities. Look carefully at operation \nnames and ask yourself questions such as: Is this something I would expect this class to do?  Or, Is \nthere a less obvious class that has not been defined?   \u00abdestroy\u00bb\nprompt:\n\"try again\"optk := create()\nsk := getNext()\nlogTransaction(k, val)\nactivate(\u201clock\u201d): Controller : Checker : KeyStorage : DeviceCtrl : Logger : PhotoObsrv\ndl := isDaylight()alt\n[else]enterKey()k : Key\nval := checkKey(k)loop\nactivate(\u201cbulb\u201d)val == true\ndl == falsecompare()[for all stored keys]\nnumOfTrials++\nopt numOfTrials == maxNumOfTrialsactivate(\u201calarm\u201d): DeviceCtrl : PhotoSObs\ndl := isDaylight()activate( \"light\" )\nopt dl == false\nsetLit(true): DeviceCtrl : PhotoSObs\ndl := isDaylight()activate( \"light\" )", "source": "Page 144", "chapter": "2"}
{"id": "c8d3daa6afef-2", "text": "dl := isDaylight()activate( \"light\" )\nopt dl == false\nsetLit(true)c\na\ncheckIfDaylightAndIfNotThenSetLit(): DeviceCtrl : PhotoSObs\ndl := isDaylight()\nopt dl == false\nsetLit(true)The caller\ncould be\nController orCheckercheckIfDaylightAndIfNotThenSetLit(): DeviceCtrl : PhotoSObs\ndl := isDaylight()\nopt dl == false\nsetLit(true)The caller\ncould be\nController orCheckerbk := create()\nsk := getNext(): Controller : Checker : KeyStorage : DeviceCtrl k : Key\ncheckKey(k)loop\nsetValid(ok)\ncontrolLock(k)\nok := isValid()\nopt ok == true\nsetOpen(true)k := create()\nsk := getNext(): Controller : Checker : KeyStorage : DeviceCtrl k : Key\ncheckKey(k)loop\nsetValid(ok)\ncontrolLock(k)\nok := isValid()\nopt ok == true\nsetOpen(true)\nFigure 2-34: Variations on the design for the use case \u201cUnlock,\u201d shown in Figure 2-33.", "source": "Page 144", "chapter": "2"}
{"id": "65bf18802d69-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 131\nBased on review of the class diag ram, we may need to go back and revise (or, refactor, see \nSection 2.7.6) the domain model and interaction diagrams. For example, one may see that the \nController has significantly more connections than  other classes (Figure 2-35), which will be \naddressed in Chapter 5. This approach is ch aracteristic of iterative development methodology. \n \ne also continue maintaining the traceability between the software artifacts. Figure 2-36 \ntraces how software classes evolved from the domain model (Section 2.5). The class \ndiagram in Figure 2-35 is partial, so we include  the classes from Figure 2-32. We see that some \nconcepts have not been (yet) implemented as clas ses. Generally, it should be possible to trace all \nconcepts from the domain model to the class diagra m. Some concepts will be mapped directly to \nindividual classes (although the concept\u2019s name may be changed in the process); others may be \nsplit into several classes. Concepts are derive d from the system requirements, and they cannot \ndisappear without a reason. There are two reasons  for a concept to be missing in the traceability", "source": "Page 145", "chapter": "2"}
{"id": "65bf18802d69-1", "text": "matrix: ( i) the concept was derived from a low-prior ity requirement and the implementation of \nthis functionality has been deferred for later; or ( ii) the corresponding requirement was dropped. \nOn the other hand, all classes must be traceab le back to domain concepts. In iterative and \nincremental development, the domain model is not derived completely up front. Rather, the \nanalysis in Section 2.5 only represents a first ite ration. During the design, we may realize that the \ndomain model is incomplete and we need add itional concepts to implement the requested \nfunctionality. In this case, we go back and modify our domain model. \nSome classes may not have a directly corresponding abstract concept, because they are introduced \nfor reasons specific to the programming language in which the system is implemented. Both \nmissing concepts and emerged (non-traceable) clas ses must be documented, with the reason for \ntheir disappearance or emergence explained. Tracing elements from the requirements specification to the corresponding elements in the design specification is part of design \nverification and validation. WKeyChecker\n+  checkKey(k : Key) : boolean\n\u2013 compare(k : Key, sk : Key) : booleanKey\n\u2013 code_ : string\n\u2013 timestamp_ : long\n\u2013 doorLocation_ : stringKeyStorage\n+  getNext() : Key \nLogger", "source": "Page 145", "chapter": "2"}
{"id": "65bf18802d69-2", "text": "\u2013 doorLocation_ : stringKeyStorage\n+  getNext() : Key \nLogger\n+  logTransaction(k : Key) Controller\n#  numOfAttemps_ : long\n#  maxNumOfAttempts_ : long\n+  enterKey(k : Key)\n\u2013 denyMoreAttempts()\n11 sensor\nlogger1 1..*\nvalidKeys 1\n1 devCtrl\nDeviceCtrl\n#  devStatuses_ : Vector\n+  activate(dev : string) : boolean\n+  deactivate(dev :string) : boolean+  getStatus(dev : string) : ObjectPhotoSObsrv\n+  isDaylight() : boolean \n1\nchecker\nFigure 2-35: Class diagram for the home acc ess software-to-be. Compare to Figure 2-25.", "source": "Page 145", "chapter": "2"}
{"id": "d27a783084d9-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 132\nClass Relationships \nClass diagram both describes classes and show s the relationships among them. We already \ndiscussed object relationships in Section 1.4. In  our particular case, Figure 2-35, there is an \naggregation relationship between Ke yStorage and Key; all other rela tionships happen to be of the \n\u201cuses\u201d type. The reader should also recall the access designations  that signify the visibility of \nclass attributes and opera tions to other classes: + for public , global visibility; # for protected  \nvisibility within the class and its descendant classes; and, \u2212 for private  within-the-class-only \nvisibility (not even for its descendants). \nClass diagram is static, unlike inte raction diagrams, which are dynamic. \nGeneric Object Roles \nAs a result of having specific responsibilities, the members of object community usually develop \nsome stereotype roles . \n\uf0b7 Structurer \n\uf0b7 Bridge Controller-SS1\nStatusDisplay\nKeyKeyStorage\nKeyChecker\nHouseholdDeviceOperatorIlluminationDetectorController-SS2\nSearchRequest\nInterfacePagePageMaker\nArchiver\nDatabaseConnectionNotifier\nInvestigationRequestDomain Concepts\nX\nX\nXController-SS2\nSearchRequest\n\u00abhtml\u00bb interfacePage\nPageMaker\nDatabaseConnectionController-SS1\nKey\nKeyStorage\nKeyChecker", "source": "Page 146", "chapter": "2"}
{"id": "d27a783084d9-1", "text": "PageMaker\nDatabaseConnectionController-SS1\nKey\nKeyStorage\nKeyChecker\nLoggerPhotoSObsrvDeviceCtrl\nXX\nXSoftware Classes\nX\nX\nX\nXX\nX\n \nFigure 2-36: Domain-model-to-class-diagram tra ceability matrix for the safe home access\ncase study.  (Continued from Figure 2-28.)", "source": "Page 146", "chapter": "2"}
{"id": "a9a0d5e88a97-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 133\nNote that objects almost never play an exclus ive role; several roles are usually imparted to \ndifferent degree in each object. \nObject Communication Patterns \nCommunication pattern is a message-sending relation imposed on a set of objects. As with any \nrelation, it can be one-to-one or one-to-many and it can be determinis tic or random (Section \n3.1.1). Some of these patterns are illustrated in Figure 2-37. \nObject-oriented design, particularly design patte rns, is further elaborated in Chapter 5. \n \n2.6.3 Why Software Engineering Is Difficult (3) \nAnother key cause is the lack of analytical met hods for software design. Software engineers are \naiming at optimal designs, but quantitative cr iteria for optimal software design are largely \nunknown. Optimality criteria appear to be mainly based upon judgment and experience. \n \n2.7 Test-driven Implementation \n \n\u201cThe good news about computers is that they do what you tell them to do. The bad news is that they do \nwhat you tell them to do.\u201d \u2014Ted Nelson AA BB PPS2S2S1S1\nSNSNAA BB\n(a) (b) (c)", "source": "Page 147", "chapter": "2"}
{"id": "a9a0d5e88a97-1", "text": "SNSNAA BB\n(a) (b) (c)\nFigure 2-37: Example object communication patt erns. (a) One-to-one direct messages. (b)\nOne-to-many untargeted messages. (c) Via a shared data element. \nWrite \ntestWrite \ncodeRun \ntestVerify & \nvalidate\n \nFigure 2-38: Test-driven implementation.", "source": "Page 147", "chapter": "2"}
{"id": "2edf9eccb544-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 134\nGiven a feature selected for implementation, test-driven implementation works by writing the \ncode for tests, writing the code that implements  the feature, running the tests, and finally \nverifying and validating the test results (Figure 2-38). If the results meet the expectations, we \nmove onto the next feature; otherwise, we need to debug the code, identify and fix the problem, and test again. \n2.7.1 Overview of Software Testing \n\u201cTesting shows the presence, not the absence of bugs.\u201d \u2014Edsger W. Dijkstra \nTesting is often viewed as executing a program to see if it produces the correct output for a given \ninput. This implies testing the end-product, the so ftware itself, which in turn means that testing \nactivities are postponed until late in the lifecycle.  This is wrong because experience has shown \nthat errors introduced during the early stages of  software lifecycle are the costliest and most \ndifficult to discover. A more general definition is that testing is the process of finding faults in \nsoftware artifacts, such as UML diagrams or code. A fault , also called \u201cdefect\u201d or \u201cbug,\u201d is an \nerroneous hardware or software element of  a system that can cause the system to fail, i.e., to", "source": "Page 148", "chapter": "2"}
{"id": "2edf9eccb544-1", "text": "behave in a way that is not desired or even harmful. We say that the system experienced failure  \nbecause of an inbuilt fault. \nAny software artifact can be tested, including requirements specification, domain model, and \ndesign specification. Testing activities should be star ted as early as possible. An extreme form of \nthis approach is test-driven development  (TDD), one of the practices of Extreme Programming \n(XP), in which development starts  with writing tests. The form and rigor of testing should be \nadapted to the nature of the artifact that is be ing tested. Testing of design sketches will be \napproached differently than testing a software code. \nTesting works by probing  a program with different combinations of inputs to detect faults. \nTherefore, testing shows only the presence of fau lts, not their absence. Showing the absence of \nfaults requires exhaustively trying all possible co mbinations of inputs (or following all possible \npaths through the program). The number of possi ble combinations generally grows exponentially \nwith software size. However, it is not only about inadvertent bugs\u2014a bad-intended programmer \nmight have introduced purposeful malicious feat ures for personal gain or revenge, which are \nactivated only by a very complex input sequence. Th erefore, it is impossible to test that a program", "source": "Page 148", "chapter": "2"}
{"id": "2edf9eccb544-2", "text": "will work correctly for all imaginable input sequen ces. An alternative to the brute force approach \nof testing is to prove the correctness of the software by reasoning  (or, theorem proving). \nUnfortunately, proving correctness generally cannot  be automated and requires human effort. In \naddition, it can be applied only in the projects wh ere the requirements are specified in a formal \n(mathematical) language. We will discuss this topic further in Chapter 3. \nA key tradeoff of testing is between testing as many possible cases as possible while keeping the \neconomic costs limited. Our goal is to find faults as cheaply and quickly as possible. Ideally, we \nwould design a single \u201cright\u201d test case to expose e ach fault and run it. In practice, we have to run \nmany \u201cunsuccessful\u201d test cases that do not expose an y faults. Some strategies that help keep costs \ndown include ( i) complementing testing with other me thods, such as design/code review, \nreasoning, or static analysis; ( ii) exploiting automation to incr ease coverage and frequency of \ntesting; and ( iii) testing early in the lifecycle and often. Automatic checking of test results is", "source": "Page 148", "chapter": "2"}
{"id": "2e451d6bd51b-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 135\npreferred to keep the costs low, but may not alwa ys be feasible. For example, how to check the \ndisplay content of a graphical user interface? \nTesting is usually guided by the hierarchical structure of the system (software architecture, \nSection 2.3) as designed in the analysis and desi gn phases (Figure 2-39). We may start by testing \nindividual components, which is known as unit testing . These components are incrementally \nintegrated into a system. Testing the composition of the system components is known as \nintegration testing . System testing  ensures that the whole system complies with the functional \nand non-functional requirements. The customer performs acceptance testing  of the whole \nsystem. (Acceptance tests and examples are descri bed in Sections 2.2 and 2.4, when describing \nrequirements engineering.) As always, the logical organization does not imply that testing steps \nshould be ordered in time as s hown in Figure 2-39. Instead, the development lifecycle evolves \nincrementally and iteratively, and correspondi ng cycles will occur in testing as well. \nUnit testing  finds differences between the object  design model and its corresponding \nimplementation. There are several benefits of focusing on individual components. One is the", "source": "Page 149", "chapter": "2"}
{"id": "2e451d6bd51b-1", "text": "implementation. There are several benefits of focusing on individual components. One is the \ncommon advantage of the divide-and-conquer ap proach\u2014it reduces the complexity of the \nproblem and allows us to deal with smaller part s of the system separately. Second, unit testing \nmakes it easier to locate and correct faults because only few components are involved in the \nprocess. Lastly, unit testing supports division of la bor, so several team members can test different \ncomponents in parallel. Practical issues with unit testing are described in Section 2.7.3. \nRegression testing  seeks to expose new errors, or \u201cregre ssions,\u201d in existing functionality after \nchanges have been made to the system. A new test  is added for every disc overed fault, and tests \nare run after every change to the code. Regressi on testing helps to populate test suite with good \ntest cases, because every regression test is added after  it uncovered a fault in one version of the \ncode. Regression testing protects against reversions  that reintroduce faults. Because the fault that \nresulted in adding a regression test already happe ned, it may be an easy error to make again. Unit \ntest\nUnit \ntest\nUnit \ntestIntegration \ntestComponent \ncode\nComponent \ncode\nComponent \ncodeTested component\nIntegrated \nmodules\nFunction \ntestQuality", "source": "Page 149", "chapter": "2"}
{"id": "2e451d6bd51b-2", "text": "Component \ncodeTested component\nIntegrated \nmodules\nFunction \ntestQuality \ntestAcceptance \ntestInstallation \ntestSystem \ntest\nSystem \nin use\nEnsure that each \ncomponent works \nas specifiedEnsures that all \ncomponents work \ntogether\nVerifies that functional \nrequirements are satisfiedVerifies non-functional \nrequirementsCustomer verifies \nallrequirementsTesting in user \nenvironment\nFigure 2-39:Logical organization of software tests.", "source": "Page 149", "chapter": "2"}
{"id": "4e4849f535f5-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 136\nAnother useful distinction between  testing approaches is what document or artifact is used for \ndesigning the test cases. Black box testing  refers to analyzing a running program by probing it \nwith various inputs. It involves choosing test da ta only from the specification, without looking at \nthe implementation. This testing approach is commonly used by customers, for example for \nacceptance testing. White box testing  chooses test data with know ledge of the implementation, \nsuch as knowledge of the system architecture, used algorithms, or program code. This testing \napproach assumes that the code implements all parts of the specification, although possibly with \nbugs (programming errors). If the code omitted a part  of the specification, then the white box test \ncases derived from the code will have incomplete coverage of the specification. White box tests \nshould not depend on specific details of the implementation, which would prevent their \nreusability as the system implementation evolves. \n2.7.2 Test Coverage and Code Coverage \nBecause exhaustive testing often is not practica lly achievable, a key issue is to know when we \nhave done enough testing. Test coverage  measures the degree to which the specification or code \nof a software program has been exercised by test s. In this section we interested in a narrower", "source": "Page 150", "chapter": "2"}
{"id": "4e4849f535f5-1", "text": "notion of code coverage , which measures the degree to which the source code  of a program has \nbeen tested. There are a number of code covera ge criteria, including equivalence testing, \nboundary testing, control-flow te sting, and state-based testing. \nTo select the test inputs, one may make an arbitrary  choice of what one \u201cfeels\u201d should be \nappropriate input values. A better a pproach is to select the inputs randomly  by using a random \nnumber generator. Yet another option is choosing the inputs systematically , by partitioning large \ninput space into a few representatives. Arbitrar y choice usually works the worst; random choice \nworks well in many scenarios; systematic choice is the preferred approach. \nEquivalence Testing \nEquivalence testing  is a black-box testing method that divides the space of all possible inputs into \nequivalence groups such that the program \u201cbeh aves the same\u201d on each group. The goal is to \nreduce the total number of test cases by selecting representative input values from each \nequivalence group. The assumption is that the syst em will behave similarly for all inputs from an \nequivalence group, so it suffices to test with only a single element of each group. Equivalence \ntesting has two steps: ( i) partitioning the values of input pa rameters into equivalence groups and \n(ii) choosing the test input values.", "source": "Page 150", "chapter": "2"}
{"id": "4e4849f535f5-2", "text": "(ii) choosing the test input values. \nThe trouble with this approach is that it is just as hard to find the equivalence classes of inputs as \nit is to prove correctness. Therefore, we use heur istics (rules of thumb that are generally useful \nbut do not guarantee correctness) to select a set of test cases. We are essentially guessing based on experience and domain knowledge, and hoping that  at least one of the selected test cases \nbelongs to each of the true (unknown) equivalence classes. \nPartitioning the values of input pa rameters into equivalence clas ses may be performed according \nto the following heuristics: \n\uf0b7\n For an input parameter specified over a range of values, partition the value space into one \nvalid and two invalid equivalence classes. Fo r example, if the allowed input values are \nintegers between 0 and 100, the valid equivalence class \n0 100valid equivalence class\ninvalid equivalence classes", "source": "Page 150", "chapter": "2"}
{"id": "5cc0aaf52cee-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 137\ncontains integers between 0 and 100, one invalid equivalence class contains all negative \nintegers, and the other invalid equivalence cla ss contains all integers greater than 100.  \n\uf0b7 For an input parameter specified with a singl e value, partition the value space into one \nvalid and two invalid equivalence classes. Fo r example, if the allowed value is a real \nnumber 1.4142, the valid equivalence class contains a single element {1.4142}, one \ninvalid equivalence class contains all real number smaller than 1.4142, and the other \ninvalid equivalence class contains a ll real number greater than 1.4142. \n\uf0b7 For an input parameter specified with a set of values, partition the value space into one \nvalid and one invalid equivalence class. For ex ample, if the allowed value is any element \nof the set {1, 2, 4, 8, 16}, the valid equivale nce class contains the elements {1, 2, 4, 8, \n16}, and the invalid equivalence cl ass contains all other elements. \n\uf0b7 For an input parameter specified as a Boolean  value, partition the value space into one \nvalid and one invalid equivalence class (one for TRUE  and the other for FALSE ).", "source": "Page 151", "chapter": "2"}
{"id": "5cc0aaf52cee-1", "text": "valid and one invalid equivalence class (one for TRUE  and the other for FALSE ). \nEquivalence classes defined for an input pa rameter must satisfy the following criteria: \n1. Coverage : Every possible input value belongs to an equivalence class. \n2. Disjointedness : No input value belongs to more than one equivalence class. \n3. Representation : If an operation is invoked with one element of an equivalence class as an \ninput parameter and returns a particular result, then it must return the same result if any \nother element of the class is used as input. \nIf an operation has more than one input parameter,  we must define new equivalence classes for \ncombinations of the input parameters (known as Cartesian product or cross product, see Section \n3.2.1). \nFor example, consider testing the Key Checker\u2019s operation checkKey(k : Key) : \nboolean . As shown in Figure 2-35, the class Key has three string attributes: code , \ntimestamp , and doorLocation . The operation checkKey()  as implemented in Listing \n2-4 does not use timestamp , so its value is irrelevant. However,  we need to test that the output \nof checkKey()  does not depend on the value of timestamp . The other two attributes, code  \nand doorLocation , are specified with a set of values for each. Suppose that the system is", "source": "Page 151", "chapter": "2"}
{"id": "5cc0aaf52cee-2", "text": "installed in an apartment building with the ap artments numbered as {196, 198, 200, 202, 204, \n206, 208, 210}. Assume that the attribute doorLocation  takes the value of the associated \napartment number. On the other hand, the tenant s may have chosen their four-digit access codes \nas {9415, 7717, 8290, \u2026, 4592}. Although a code  value \u201c9415\u201d and doorLocation  value \n\u201c198\u201d are each valid separately, their combination is invalid, because the code  value for the \ntenant in apartment 198 is \u201c7717.\u201d \nTherefore, we must create a cross product of code  and doorLocation  values and partition \nthis value space into valid and invalid equivalen ce classes. For the pairs of test input values \nchosen from the valid equiva lence class, the operation checkKey()  should return the Boolean \nvalue TRUE . Conversely, for the pairs of test input values from invalid equivalence classes it \nshould return FALSE . \nWhen ensuring test coverage, we should consider not only the current snapshot, but also historic \nsnapshots as well. For example, when testing the Key Checker\u2019s operation checkKey() , the", "source": "Page 151", "chapter": "2"}
{"id": "0bced4de8d11-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 138\npreviously-valid keys of former tenants of a given apartment belong to an invalid equivalence \nclass, although in the past they belonged to the valid equivalence class. We need to include the \ncorresponding test cases, particularly dur ing integration testing (Section 2.7.4). \nBoundary Testing \nBoundary testing  is a special case of equivalence testi ng that focuses on the boundary values of \ninput parameters. After partitioning the input dom ain into equivalence classes, we test the \nprogram using input values not only \u201cinside\u201d the clas ses, but also at their boundaries. Rather than \nselecting any element from an equivalence cla ss, boundary testing selects elements from the \n\u201cedges\u201d of the equivalence class, or \u201coutliers,\u201d such as zero, min/max values, empty set, empty \nstring, and null. Another frequent \u201cedge\u201d fault re sults from the confusion between > and >=. The \nassumption behind this kind of testing is that developers often overlook special cases at the \nboundary of equivalence classes. \nFor example, if an input parameter is  specified over a range of values from a to b, then test cases \nshould be designed with values a and b as well as just above and just below a and b. \nControl Flow Testing", "source": "Page 152", "chapter": "2"}
{"id": "0bced4de8d11-1", "text": "Control Flow Testing \nStatement coverage  selects a test set such that every el ementary statement in the program is \nexecuted at least once by some test case in the test set. \nEdge coverage  selects a test set such that every edge (b ranch) of the control flow is traversed at \nleast once by some test case. We construct the control graph  of a program so that statements \nbecome the graph edges, and the nodes connected by an edge represent entry and exit to/from the \nstatement. A sequence of edges (without branch es) should be collapsed into a single edge. \na; b; ifa then b; ifa then b else c; while a dob; a;\na\nnot a ban o t  a\nbcaa\nba\nb\n \nCondition coverage  (also known as predicate coverage ) selects a test set such that every \ncondition (Boolean statement) takes TRUE  and FALSE  outcomes at least once in some test case. \nPath coverage  determines the number of distinct paths through the program that must be \ntraversed (travelled over) at least once to verify the correctness. This strategy does not account for \nloop iterations or recursive calls. Cyclomatic comp lexity metric (Section 4.2.2) provides a simple \nway of determining the number of independent paths. \nState-based Testing", "source": "Page 152", "chapter": "2"}
{"id": "0bced4de8d11-2", "text": "way of determining the number of independent paths. \nState-based Testing \nState-based testing  defines a set of abstract states that a software unit can take and tests the \nunit\u2019s behavior by comparing its actual states to the expected states. This approach has become \npopular with object-oriented systems. The state  of an object is defined as a constraint on the \nvalues of object\u2019s attributes. Because the methods  use the attributes in computing the object\u2019s \nbehavior, the behavior depends on the object state.", "source": "Page 152", "chapter": "2"}
{"id": "56d35672b86c-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 139\nThe first step in using state-based testing is to de rive the state diagram for the tested unit. We start \nby defining the states. Next, we define the possi ble transitions between states and determine what \ntriggers a transition from one state to another. Fo r a software class, a state transition is usually \ntriggered when a method is invoked. Then we choose test values for each individual state. \nThe second step is to initialize the unit and run the test. The test driver exercises the unit by \ncalling methods on it, as described in Section 2.7. 3. When the driver has finished exercising the \nunit, assuming no errors have yet occurred, the test then proceeds to co mpare the actual state of \nthe unit with its expected state. If the unit reach ed the expected state, the unit is considered \ncorrect regardless of how it got to that state. \nAssume that we are to test the Controller cla ss of our safe home access case study (the class \ndiagram shown in Figure 2-35). The process of  deriving the state diagrams and UML state \ndiagram notation are described in Chapter 3. A ke y responsibility of the Controller is to prevent \nthe dictionary attacks by keeping track of unsu ccessful attempts because of an invalid key.", "source": "Page 153", "chapter": "2"}
{"id": "56d35672b86c-1", "text": "Normally, we assume that the door is locked (as required by REQ1 in Table 2-1). The user \nunlocks the door by providing a valid key. If the us er provided an invalid key, the Controller will \nallow up to maxNumOfAttempts  unsuccessful attempts, after wh ich it should block and sound \nalarm. Therefore, we identify the following el ements of the state diagram (Figure 2-40): \n\uf0b7 Four states { Locked, Unlocked, Accepting, Blocked } \n\uf0b7 Two events { valid-key, invalid-key } \n\uf0b7 Five valid transitions { Locked \uf0aeUnlocked, Locked \uf0aeAccepting, Accepting \uf0aeAccepting, \nAccepting\uf0aeUnlocked, Accepting \uf0aeBlocked } \nA test set consists of scenarios that exercise  the object along a given path through the state \ndiagram. In general the number of state diagram elements is \nall-events, all-states  \uf0a3  all-transitions  \uf0a3  all-paths invalid-key   [numOfAttemps \uf0a3maxNumOfAttempts] / \nsignal-failure\ninvalid-key / \nsignal-failureinvalid-key\n[numOfAttemps \uf03emaxNumOfAttempts] / \nsound-alarm\nBlockedLocked\nvalid-key / \nsignal-success\nvalid-key / \nsignal-success\nUnlockedAccepting", "source": "Page 153", "chapter": "2"}
{"id": "56d35672b86c-2", "text": "signal-success\nvalid-key / \nsignal-success\nUnlockedAccepting\nstateevent guard condition\naction\ntransition\nFigure 2-40: UML state diagram for the Controller class in Figure 2-35. The notation for\nUML state diagrams is introduced in Section 3.2.", "source": "Page 153", "chapter": "2"}
{"id": "d42e840053db-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 140\nBecause the number of possible paths in the state di agram is generally infinite, it is not practical \nto test each possible path. Instead, we ensure the following coverage conditions: \n\uf0b7 Cover all identified states at least once (each state is part of at least one test case) \n\uf0b7 Cover all valid transitions at least once \n\uf0b7 Trigger all invalid tran sitions at least once \nTesting all valid transitions imp lies (subsumes) all-events coverage , all-states coverage, and all-\nactions coverage. This is considered a minimum acceptable strategy for responsible testing of a \nstate diagram. Note that all-transitions testing is not exhaustive, because exhaustive testing \nrequires that every path over the state machine is exercised at least once, which is usually \nimpossible or at least unpractical. \n2.7.3 Practical Aspects of Unit Testing \nExecuting tests on single components (or \u201cunits\u201d) or a composition of components requires that the tested thing be isolated from the rest of the system. Otherwise we will not be able to localize \nthe problem uncovered by the test. But system pa rts are usually interrelated and cannot work \nwithout one another. To substitute for missing part s of the system, we use test drivers and test \nstubs. A", "source": "Page 154", "chapter": "2"}
{"id": "d42e840053db-1", "text": "stubs. A \ntest driver  simulates the part of the system that invokes operations on the tested \ncomponent. A test stub  is a minimal implementation that simulates the components which are \ncalled by the tested component. The thing to be tested is also known as the fixture . \nA stub is a trivial implementation of an interface that exists for the purpose of performing a unit \ntest. For example, a stub may be hard-coded to retu rn a fixed value, without any computation. By \nusing stubs, you can test the interfaces without writing any real code. The implementation is \nreally not necessary to verify that the inte rfaces are working properly (from the client\u2019s \nperspective\u2014recall that interfaces are meant for th e client object, Section 1.4). The driver and \nstub are also known as mock objects , because they pretend to be the objects they are simulating. \nEach testing method follows this cycle: \n1. Create the thing to be tested (fixture), the test driver, and the test stub(s) \n2. Have the test driver invoke an operation on the fixture \n3. Evaluate that the results are as expected \nMore specifically, a unit test case  comprises three steps performed by the test driver: \n1. Setup  objects: create an object to be tested and any objects it depends on, and set them up", "source": "Page 154", "chapter": "2"}
{"id": "d42e840053db-2", "text": "2. Act on the tested object \n3. Verify  that the outcome is as expected \nSuppose you want to test the Key Checker cla ss of the safe-home-access case study that we \ndesigned in Section 2.6. Figure 2-41(a) shows th e relevant excerpt sequence diagram extracted \nfrom Figure 2-33. Class Checker  is the tested component and we need to implement a test \ndriver  to substitute Controller  and test stubs  to substitute KeyStorage  and Key classes.", "source": "Page 154", "chapter": "2"}
{"id": "d258436874ab-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 141\nAs shown in Figure 2-41(b), the test driver passes the test inputs to the tested component and \ndisplays the results. In JUnit  testing framework for Java, the re sult verification is done using the \nassert*()  methods that define the expected state a nd raise errors if the actual state differs. \nThe test driver can be any object type, not necessarily an instance of the Controller  class. \nUnlike this, the test stubs must be of the same class as the components they are simulating. They \nmust provide the same operation APIs, with the sa me return value types. The implementation of \ntest stubs is a nontrivial task and, therefore, th ere is a tradeoff between implementing accurate test \nstubs and using the actual components. That is, if KeyStorage  and Key class implementations \nare available, we could use them when testing the Key Checker class. \n \nListing 2-1: Example test case for the Key Checker class. \npublic class CheckerTest { \n  // test case to check that invalid key is rejected \n  @Test public void \n    checkKey_anyState_invalidKeyRejected() { \n \n    // 1. set up \n    Checker checker = new Checker( /* constructor params */ );", "source": "Page 155", "chapter": "2"}
{"id": "d258436874ab-1", "text": "Checker checker = new Checker( /* constructor params */ ); \n \n    // 2. act \n    Key invalidTestKey = new Key( /* setup with invalid code */ ); \n    boolean result = checker.checkKey(invalidTestKey); \n \n    // 3. verify \n    assertEqual(result, false); \n  } \n} \n \nWe use the following notation for methods that  represent test cases (see Listing 2-1): k := create()\nsk := getNext(): Controller : Checker : KeyStorage\nenterKey()k : Key\nval := checkKey(k)loop\ncompare()[for all stored keys]\n(a) (b)k := create()testDriver : : KeyStorage k : Key : Checker\nloop [for all stored keys]start()\ndisplay\nresultsk := getNext()result :=checkKey(k)Test driver Test stubs Tested component\ncompare()\nFigure 2-41: Testing the Key Checker\u2019s operation checkKey()  (use case Unlock).\n(a)\uf020Relevant part of the sequence diagram excerp ted from Figure 2-33. (b) Test stubs and\ndrivers for testing the Key Checker.", "source": "Page 155", "chapter": "2"}
{"id": "b47da491b320-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 142\n\uf0e1methodName \uf0f1_\uf0e1startingState \uf0f1_\uf0e1expectedResult \uf0f11. Set up\n2. Act\n3. Verify\uf0e1methodName \uf0f1_\uf0e1startingState \uf0f1_\uf0e1expectedResult \uf0f11. Set up\n2. Act\n3. Verify\n \nwhere methodName  is the name of the method (i.e., even t) we are testing on the tested object; \nstartingState  are the conditions under which the tested method is invoked; and, expectedResult  is \nwhat we expect the tested method to produce unde r the specified condition. In our example, we \nare testing Checker \u2019s method checkKey() . The Checker  object does not have any \nattributes, so it is always in an initia l state. The expected result is that checkKey()  will reject \nan invalid key. Thus the test case method name \ncheckKey_anyState_invalidKeyRejected() . \nTesting objects with different states is a bit more complex, because we must bring the object to \nthe tested state and in the end verify that the obj ect remains in an expected state. Consider the \nController  object and its state diagram shown in Figur e 2-40. One test case needs to verify", "source": "Page 156", "chapter": "2"}
{"id": "b47da491b320-1", "text": "that when Controller  receives maxNumOfAttempts  invalid keys, it correctly transitions to \nthe Blocked state. \n \nListing 2-2: Example test case for the Controller class. \npublic class ControllerTest { \n  // test case to check that the state Blocked is visited \n  @Test public void \n    enterKey_accepting_toBlocked() { \n \n    // 1. set up: bring the object to the starting state \n    Controller cntrl = new Controller( /* constructor params */ ); \n    // bring Controller to the Accepting state, just before it blocks \n    Key invalidTestKey = new Key( /* setup with invalid code */ ); \n    for (i=0; i < cntrl.getMaxNumOfAttempts(); i++) { \n        cntrl.enterKey(invalidTestKey); \n    } \n    assertEqual(   // check that the starting state is set up \n        cntrl.getNumOfAttempts(), cntrl.getMaxNumOfAttempts() \u2013 1 \n    ); \n \n    // 2. act \n    cntrl.enterKey(invalidTestKey); \n \n    // 3. verify \n    assertEqual(   // the resulting state must be \"Blocked\" \n        cntrl.getNumOfAttempts(), cntrl.getMaxNumOfAttempts() \n    );", "source": "Page 156", "chapter": "2"}
{"id": "b47da491b320-2", "text": "cntrl.getNumOfAttempts(), cntrl.getMaxNumOfAttempts() \n    ); \n    assertEqual(cntrl.isBlocked(), true); \n  } \n}", "source": "Page 156", "chapter": "2"}
{"id": "8a8b6d78e27a-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 143\nIt is left to the reader to design the remaini ng test cases and ensure the coverage conditions \n(Section 2.7.2). \nA key challenge of unit testing is to sufficiently isolate the units so that each unit can be tested \nindividually. Otherwise, you end up w ith a \u201cunit\u201d test that is really more like an integration test. \nThe most important technique to help achieve this isolation is to program to interfaces instead of \nconcrete classes. \n2.7.4 Integration and Security Testing \nIn traditional methods, testing takes place relatively late in the development lifecycle and follows \nthe logical order Figure 2-39. Unit testing is follow ed by integration testing, which in turn is \nfollowed by system testing. Integration testing wo rks in a step-by-step fashion by linking together \nindividual components (\u201cunits\u201d) and testing th e correctness of the combined component. \nComponents are combined in a horizontal fashion  and integration processes in different direction, \ndepending on the horizontal in tegration testing strategy. \nIn agile methods, testing is incorporated th roughout the development cycle. Components are \ncombined in a vertical fashion  to implement an end-to-end func tionality. Each vertical slice", "source": "Page 157", "chapter": "2"}
{"id": "8a8b6d78e27a-1", "text": "corresponds to a user story (Section 2.2.3) and user  stories are implemented and tested in parallel. \nHorizontal Integration Testing Strategies \nThere are various ways to start by combin ing the tested units. The simplest, known as \u201cbig bang\u201d \nintegration  approach, tries linking all components at once and testing the combination. \nBottom-up integration  starts by combining the units at the lowest level of hierarchy. The \n\u201chierarchy\u201d is formed by starting with the units  that have no dependenc ies to other units. For \nexample, in the class diagram of Figure 2-35, classes PhotoSObsrv , Logger , and \nDeviceCtrl  do not have navigability arrow pointing to  any other class\u2014therefore, these three \nclasses form the bottommost level of the system hierarchy (Figure 2-42(a)). In bottom-up \nintegration testing, the bottommost units (\u201cleaf un its\u201d) are tested first by unit testing (Figure \n2-42(b)). Next, the units that have navigability to  the bottommost units are tested in combination \nwith the leaf units. The integration proceeds up the hierarchy until the topmost level is tested. \nThere is no need to develop test stubs: The bo ttommost units do not depend on any other units;", "source": "Page 157", "chapter": "2"}
{"id": "8a8b6d78e27a-2", "text": "for all other units, the units on which the currently  tested unit depends on are already tested. We \ndo need to develop test drivers for bottom-up te sting, although these can be relatively simple. \nNote that in real-world systems unit hierarchy may not necessarily form a \u201ctree\u201d structure, but \nrather may include cycles making it difficu lt to decide the exact level of a unit. \nTop-down integration  starts by testing the units at the highest level of hierarchy that no other \nunit depends on (Figure 2-42(c)). In this approach, we never need to develop test drivers, but we \ndo need test stubs.", "source": "Page 157", "chapter": "2"}
{"id": "689c84c5b5b5-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 144\nSandwich integration  approach combines top-down and bottom-up by starting from both ends \nand incrementally using components of the middle level in both directions. The middle level is \nknown as the target level . In sandwich testing, usually there is  need to write stubs for testing the \ntop components, because the actual components from the target level can be used. Similarly, the \nactual target-level components are used as drivers for bottom-up testing of low-level components. \nIn our example system hierarchy of Figure 2-42(a) , the target layer contains only one component: \nKey Checker. We start by top-down testing of th e Controller using the Checker. In parallel, we \nperform bottom-up testing of the Key Storage agai n by using the Checker. Finally, we test all \ncomponents together. \nThere are advantages and drawbacks of each in tegration strategy. Bottom-up integration is \nsuitable when the system has many low-level components, such as utility libraries. Moving up the hierarchy makes it easier to find the component-i nterface faults: if a higher-level component \nviolates the assumption made by a lower-level component, it is easier to find where the problem \nis. A drawback is that the topmost component (which  is usually the most important, such as user", "source": "Page 158", "chapter": "2"}
{"id": "689c84c5b5b5-1", "text": "interface), is tested last\u2014if a fault is detected , it may lead to a major redesign of the system. Logger DeviceCtrl PhotoSObsrvKeyStorage KeyKeyCheckerController\nLevel-1Level-2Level-3Level-4\nTest \nLogger\nTest \nPhotoSObsrv\nTest \nDeviceCtrl\nTest Key & \nKeyStorageTest KeyChecker\n& KeyStorage & \nKeyTest Controller & \nKeyChecker & KeyStorage & \nKey & Logger & PhotoSObsrv\n& DeviceCtrl(a)\n(b)\nTest \nControllerTest \nController & \nKeyCheckerTest Controller & \nKeyChecker & \nKeyStorage & KeyTest Controller & \nKeyChecker & KeyStorage & \nKey & Logger & PhotoSObsrv\n& DeviceCtrl(c)\nFigure 2-42: Integration testing strategies fo r the system from Figure 2-35. (a) Units\nhierarchy; (b) Bottom-up integration testing; (c) Top-down integration testing.", "source": "Page 158", "chapter": "2"}
{"id": "f68c35289976-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 145\nTop-down integration has the advantage of starting with the topmost component (usually the user \ninterface, which means possibility of early end-user  involvement). The test cases can be derived \ndirectly from the requirements. Its disadvantage is that developing test stubs is time consuming \nand error prone. \nThe advantages of sandwich testi ng include no need to write stubs or drivers and the ability of \nearly testing of the user interface and thus early involvement of end users. A drawback is that \nsandwich testing does not thoroughly test the units of  the target (middle) le vel before integration. \nThis problem can be remedied by the modified sandwich testing  that tests the lower, middle, and \nupper levels individually before combining th em in incremental tests with one another. \nVertical Integration Testing Strategies \nAgile methods use the  vertical integration  approach to develop the user stories in parallel (Figure \n2-43(a)). Each story is developed in a feedback loop (Figure 2-43(b)), where the developers use \nunit tests in the inner loop and the customer runs  the acceptance test in th e outer loop. Each cycle \nstarts with the customer/user writing the acceptance test that will test a particular user story. \nBased on the acceptance test, the developer writes the unit tests and develops only the code that is", "source": "Page 159", "chapter": "2"}
{"id": "f68c35289976-1", "text": "relevant, i.e., needed to pass the unit tests. Th e unit tests are run on daily basis, soon after the \ncode is written, and the code is committed to the code base only after it passes the unit tests. The \nacceptance test is run at the end of each cycle (order of weeks or months). \nThe advantage of vertical integration is that it yields a working deliverable quickly. A potential \ndrawback is that because each subsystem (vertical  slice\u2014user story) is developed independently, \nthe system may lack uniformity and \u201cgrand desi gn.\u201d Therefore, the system may need a major \nredesign late in the development cycle. Write a \nfailing \nunittest\nRefactorMake the \ntest passWrite a failing \nacceptance test\n(b) (a)User\nstory-1User\nstory-2User\nstory-N\nFigure 2-43: Vertical integration in agile meth ods develops functional vertical slices (user\nstories) in parallel (a). Each story is developed in a cycle that integrates unit tests in the\ninner feedback loop and the acceptance test in the outer feedback loop (b).", "source": "Page 159", "chapter": "2"}
{"id": "8341b7d19ddd-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 146\nSecurity Testing \nFunctional testing is testing for \u201cpositives\u201d\u2014that the required features and functions are correctly \nimplemented. However, a majority of security defects and vulnerabilities are not directly related \nto security functionality, such as encryption or privilege management. Instead, security issues \ninvolve often unexpected but intentional misuse s of the system discovered by an attacker. \nTherefore, we also need to test for \u201cnegatives,\u201d  such as abuse cases, to determine how the system \nbehaves under attack. Security tests are often driven by known attack patterns. \n2.7.5 Test-driven Implementation \n\u201cReal programmers don\u2019t comment their code. If it was hard to write, it should be hard to understand.\u201d \n\u2014Unknown \nThis section shows how the designed system might  be implemented. (The reader may wish to \nreview the Java programming refresher in Appendix A before proceeding.) One thing that \nprogrammers often neglect is that the code must be  elegant and readable. This is not for the sake \nof the computer which will run the code, but fo r the sake of humans who will read, maintain, and \nimprove on the original code. I believe that wr iting good comments is at least as difficult as \nwriting good code. It may be even more important , because comments describe the developer\u2019s", "source": "Page 160", "chapter": "2"}
{"id": "8341b7d19ddd-1", "text": "writing good code. It may be even more important , because comments describe the developer\u2019s \nintention , while the code expresses only what the deve loper did. The code that lacks aesthetics \nand features poor writing style in comments is likely to be a poor quality code.11 In addition to \ncomments, languages such as Java and C# provi de special syntax for writing the documentation \nfor classes and methods. Javadoc is a tool fo r generating API documentation in HTML format \nfrom documentation comments in source code. Sa ndcastle is the equivalent tool for C#. \nThe hardware architecture of our system-to-be is described in Section [@@@] (Figure 2-7). \nThe following code uses threads for concurrent program execution. The reader not familiar with \nthreads should consult Section 5.3. \nThe key purpose of the main class is to get hold of the external information: the table of valid \nkeys and a connection to the embedded processor that controls the devices. Following is an implementation for the main system class. \n \nListing 2-3: Implementation Java code of the main class, called \nHomeAccessControlSystem , of the case-study home-access system.  \nimport java.io.IOException; \nimport java.io.InputStream; \nimport java.util.TooManyListenersException; \nimport javax.comm.CommPortIdentifier; \nimport javax.comm.NoSuchPortException;", "source": "Page 160", "chapter": "2"}
{"id": "8341b7d19ddd-2", "text": "import javax.comm.CommPortIdentifier; \nimport javax.comm.NoSuchPortException; \n                                                      \n11 On a related note, writing user messages is as impor tant. The reader may find that the following funny \nstory is applicable to software products way beyond Microsoft\u2019s: \u201c There was once a young man who \nwanted to become a great writer and to write stuff that millions of people would read and react to on an \nemotional level, cry, howl in pain and anger, so now he works for Microso ft, writing error messages. \u201d \n[ Source: A Prairie Home Companion,  February 3, 2007. Online at:  \nhttp://prairiehome.publicradio.org/progra ms/2007/02/03/scripts/showjokes.shtml  ]", "source": "Page 160", "chapter": "2"}
{"id": "5bc0d1056aac-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 147\nimport javax.comm.SerialPort; \nimport javax.comm.SerialPortEvent; \nimport javax.comm.SerialPortEventListener; \nimport javax.comm.UnsupportedCommOperationException; \n \npublic class HomeAccessControlSystem extends Thread \n        implements SerialPortEventListener { \n    protected Controller ctrler_;  // entry point to the domain logic \n    protected InputStream inputStream_;  // from the serial port \n    protected StringBuffer key_ = new StringBuffer(); // user key code \n    public static final long keyCodeLen_ = 4;  // key code of 4 chars \n \n    public HomeAccessControlSystem( \n        KeyStorage ks, SerialPort ctrlPort \n    ) { \n        try { \n            inputStream_ = ctrlPort.getInputStream(); \n        } catch (IOException e) { e.printStackTrace(); }   \n \n        LockCtrl lkc = new LockCtrl(ctrlPort); \n        LightCtrl lic = new LightCtrl(ctrlPort); \n        PhotoObsrv sns = new PhotoObsrv(ctrlPort); \n        AlarmCtrl ac = new AlarmCtrl(ctrlPort); \n \n        ctrler_ = \n            new Controller(new KeyChecker(ks), lkc, lic, sns, ac); \n \n        try { \n            ctrlPort.addEventListener(this);", "source": "Page 161", "chapter": "2"}
{"id": "5bc0d1056aac-1", "text": "try { \n            ctrlPort.addEventListener(this); \n        } catch (TooManyListenersException e) { \n            e.printStackTrace(); // limited to one listener per port \n        } \n        start(); // start the thread \n    } \n \n    /** The first argument is the handle (filename, IP address, ...) \n     * of the database of valid keys. \n     * The second arg is optional and, if present, names \n     * the serial port. */ \n    public static void main(String[] args) { \n        KeyStorage ks = new KeyStorage(args[1]); \n \n        SerialPort ctrlPort; \n        String portName = \"COM1\"; \n        if (args.length > 1) portName = args[1]; \n        try {      // initialize \n            CommPortIdentifier cpi = \n                CommPortIdentifier.getPortIdentifier(portName); \n            if (cpi.getPortType() == CommPortIdentifier.PORT_SERIAL) { \n                ctrlPort = (SerialPort) cpi.open(); \n \n                // start the thread for reading from serial port \n                new HomeAccessControlSystem(ks, ctrlPort); \n        } catch (NoSuchPortException e) { \n            System.err.println(\"Usage: ... ... port_name\"); \n        }", "source": "Page 161", "chapter": "2"}
{"id": "d9bdc3f25365-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 148\n        try { \n            ctrlPort.setSerialPortParams( \n                9600, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, \n                SerialPort.PARITY_NONE \n            ); \n        } catch (UnsupportedCommOperationException e) { \n            e.printStackTrace(); \n        } \n    } \n \n    /** Thread method; does nothing, just waits to be interrupted \n     * by input from the serial port. */ \n    public void run() { \n        while (true) { // alternate between sleep/awake periods \n            try { Thread.sleep(100); } \n            catch (InterruptedException e) { /* do nothing */ } \n        } \n    } \n \n    /** Serial port event handler \n     * Assume that the characters are sent one by one, as typed in. */ \n    public void serialEvent(SerialPortEvent evt) { \n        if (evt.getEventType() == SerialPortEvent.DATA_AVAILABLE) { \n            byte[] readBuffer = new byte[5]; // 5 chars, just in case \n \n            try { \n                while (inputStream_.available() > 0) { \n                    int numBytes = inputStream_.read(readBuffer);", "source": "Page 162", "chapter": "2"}
{"id": "d9bdc3f25365-1", "text": "int numBytes = inputStream_.read(readBuffer); \n                    // could check if \"numBytes\" == 1 ... \n                } \n            } catch (IOException e) { e.printStackTrace(); } \n            // append the new char to the user key \n            key_.append(new String(readBuffer)); \n \n            if (key_.length() >= keyCodeLen_) {  // got the whole key? \n                // pass on to the Controller \n                ctrler_.enterKey(key_.toString()); \n                // get a fresh buffer for a new user key \n                key_ = new StringBuffer(); \n            } \n        } \n    } \n} \n \nThe class HomeAccessControlSystem  is a thread that runs forever and accepts the input \nfrom the serial port. This is necessary to keep the program alive, because the main thread just sets \nup everything and then te rminates, while the new thread conti nues to live. Threads are described \nin Section 5.3. \nNext shown is an example impl ementation of the core system, as designed in Figure 2-33. The \ncoding of the system is directly driven by the interaction diagrams. \n \nListing 2-4: Implementation Java code of the classes Controller , KeyChecker , and", "source": "Page 162", "chapter": "2"}
{"id": "440be7999c4a-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 149\nLockCtrl . \npublic class Controller { \n    protected KeyChecker checker_; \n    protected LockCtrl lockCtrl_; \n    protected LightCtrl lightCtrl_; \n    protected PhotoObsrv sensor_; \n    protected AlarmCtrl alarmCtrl_; \n    public static final long maxNumOfAttempts_ = 3; \n    public static final long attemptPeriod_ = 600000; // msec [=10min] \n    protected long numOfAttempts_ = 0; \n \n    public Controller( \n        KeyChecker kc, LockCtrl lkc, LightCtrl lic, \n        PhotoObsrv sns, AlarmCtrl ac \n    ) { \n        checker_ = kc; \n        lockCtrl_ = lkc; alarmCtrl_ = ac; \n        lightCtrl_ = lic; sensor_ = sns; \n    } \n \n    public enterKey(String key_code) { \n        Key user_key = new Key(key_code) \n        if (checker_.checkKey(user_key)) { \n            lockCtrl_.setArmed(false); \n            if (!sensor_.isDaylight()) { lightCtrl_.setLit(true); } \n            numOfAttempts_ = 0; \n        } else { \n            // we need to check the attempt period as well, but ...", "source": "Page 163", "chapter": "2"}
{"id": "440be7999c4a-1", "text": "// we need to check the attempt period as well, but ... \n            if (++numOfAttempts_ >= maxNumOfAttempts_) { \n                alarmCtrl_.soundAlarm(); \n                numOfAttempts_ = 0; // reset for the next user \n            } \n        } \n    } \n} \n \nimport java.util.Iterator; \n \npublic class KeyChecker { \n    protected KeyStorage validKeys_; \n \n    public KeyChecker(KeyStorage ks) { validKeys_ = ks; } \n \n    public boolean checkKey(Key user_key) { \n        for (Iterator e = validKeys_.iterator(); e.hasNext(); ) { \n            if (compare((Key)e.next(), user_key) { return true; } \n        } \n        return false; \n    } \n \n    protected boolean compare(Key key1, Key key2) { \n         \n    } \n} \n \nimport javax.comm.SerialPort;", "source": "Page 163", "chapter": "2"}
{"id": "40f82ebfcbd1-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 150\n \npublic class LockCtrl { \n    protected boolean armed_ = true; \n \n    public LockCtrl(SerialPort ctrlPort) { \n    } \n} \n \nIn Listing 2-4 I assume that KeyStorage is implemented as a list, java.util.ArrayList . If \nthe keys are simple objects, e.g., numbers, th en another option is to use a hash table, \njava.util.HashMap . Given a key, KeyStorage returns a value of a valid key. If the return \nvalue is null , the key is invalid. The keys must be stored in a persistent storage, such as \nrelational database or a plain file and loaded in to the KeyStorage at the system startup time, \nwhich is not shown in Listing 2-4. \nThe reader who followed carefully the stepwise  progression from the requirements from the code \nmay observe that, regardless of the programming language, the code contai ns many details that \nusually obscure the high-level design choices and ab stractions. Due to the need for being precise \nabout every detail and unavoidable language-specifi c idiosyncrasies, it is difficult to understand \nand reason about software structure from code onl y. I hope that at this point the reader", "source": "Page 164", "chapter": "2"}
{"id": "40f82ebfcbd1-1", "text": "appreciates the usefulness of traceable stepwise  progression and diagrammatic representations.", "source": "Page 164", "chapter": "2"}
{"id": "ce7611c015c1-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 151\n2.7.6 Refactoring: Improving the Design of Existing \nCode \nA refactoring  of existing code is a transformation th at improves its design while preserving its \nbehavior. Refactoring changes the internal structur e of software to make it easier to understand \nand cheaper to modify that does not change its observable behavior. The process of refactoring \ninvolves removing duplication, simplifying complex logic, and clarifying unclear code. Examples \nof refactoring include small changes, such as changing a variable name, as well as large changes, \nsuch as unifying two class hierarchies. \nRefactoring applies sequences of low-level design transformations to the code. Each \ntransformation improves the code by a small incremen t, in a simple way, by consolidating ideas, \nremoving redundancies, and clarifying ambiguities.  A major improvement is achieved gradually, \nstep by step. The emphasis is on tiny refinement s, because they are easy to understand and track, \nand each refinement produces a narrowly focuse d change in the code. Because only small and \nlocalized block of the code is affected, it is le ss likely that a refinement will introduce defects. \nAgile methods recommend test-driven development (TDD) and continuous refactoring. They go", "source": "Page 165", "chapter": "2"}
{"id": "ce7611c015c1-1", "text": "Agile methods recommend test-driven development (TDD) and continuous refactoring. They go \ntogether because refactoring (changing the code) re quires testing to ensure that no damage was \ndone. \nUsing Polymorphism Instead of Conditional Logic \nAn important feature of programming languages is the conditional . This is a statement that causes \nanother statement to execute only if a particular condition is true. One can use simple \u201csentences\u201d \nto advise the computer, \u201cDo these fifteen things one after the other; if by then you still haven\u2019t \nachieved such-and-such, start all over again at St ep 5.\u201d Equally, one can readily symbolize a \ncomplex conditional command such as: \u201cIf at that particular point of runtime, this happens, then \ndo so-and-so; but if that happens, then do such-and-such; if anything else happens, whatever it is, \nthen do thus-and-so.\u201d Using the language cons tructs such as IF-THEN-ELSE, DO-WHILE, or \nSWITCH, the occasion for action is precisely speci fied. The problem with conditionals is that \nthey make code difficult to understand and prone to errors. \nPolymorphism allows avoiding explicit conditi onals when you have objects whose behavior", "source": "Page 165", "chapter": "2"}
{"id": "ce7611c015c1-2", "text": "Polymorphism allows avoiding explicit conditi onals when you have objects whose behavior \nvaries depending on their types. As a result you find that switch  statements that switch on type \ncodes or if-then-else statements that switch on type strings are much less common in an object-\noriented program. Polymorphism gives you many a dvantages. The biggest gain occurs when this \nsame set of conditions appears in many places in  the program. If you want to add a new type, you \nhave to find and update all the conditionals. But with subclasses  you just create a new subclass \nand provide the appropriate methods. Clients of  the class do not need to know about the \nsubclasses, which reduces the dependencies in your system and makes it easier to update. \nsome conditionals are needed, like checks for bo undary conditions, but when you keep working \nwith similar variables, but appl y different operations to them based on condition, that is the \nperfect place for polymorphism and reducing the code complexity. Now there are usually two \ntypes of conditionals you can\u2019t replace with Po lymorphism. Those are comparatives (>, <) (or \nworking with primitives, usually ), and boundary cases, sometime s. And those two are language", "source": "Page 165", "chapter": "2"}
{"id": "ed47f4428c1b-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 152\nspecific as well, as in Java only. Some other languages allow you to pass closures around, which \nobfuscate the need for conditionals. \n \n2.8 Summary and Bibliographical Notes \n \n\u201cGood judgment comes from experience, an d experience comes from bad judgment.\u201d \n\u2014Frederick P. Brooks \nThis chapter presents incremental and iterativ e approach to software design and gradually \nintroduces software engineering techniques using a running case study. Key phases of the process \nare summarized in Figure 2-44. (Note that package diagram , which is a structural description, is \nnot shown for the lack of space.) To ensure m eaningful correspondence between the successive \nsoftware artifacts, we maintain traceability matrices across the development lifecycle. The \ntraceability matrix links requirements, design speci fications, hazards, and validation. Traceability \namong these activities and doc uments is essential. \nFigure 2-44 shows only the logical order in whic h activities take place and does not imply that \nsoftware lifecycle should progress in one direction as in the waterfall method. In practice there is \nsignificant intertwining and backtracking between the steps and Figure 2-44 shows only one \niteration  of the process. The sequential presentation of the material does not imply how the actual System Description", "source": "Page 166", "chapter": "2"}
{"id": "ed47f4428c1b-1", "text": "Behavior StructureUse Cases System Sequence\nDiagrams\nCommunicator Key\nLockOperator\nlockStatusKeyChecker\nnumOfTrials\nmaxNumOfTrialsconveysRequestsobtains\nnotifiesKeyValidityverifiesCommunicator Key\nLockOperator\nlockStatusKeyChecker\nnumOfTrials\nmaxNumOfTrialsconveysRequestsobtains\nnotifiesKeyValidityverifies\nDomain ModelcheckKey()\nsk := getNext()\naddElement()setOpen(true): Communicator : Checker : KeyStorage : LockCtrl\nval == null : setLit(true)alt val != null\n[else]\nInteraction\nDiagrams\nClass DiagramLock\nUnlockTenant\nLandlordLock\nUnlockTenant\nLandlord\nImplementation\nProgramimport javax.com\nimport java.io.Iimport java.io.I\nimport java.util\npublic class Hom\nimplemen\nprotected Co\nprotected In\nprotected Stpublic stati\npublic HomeA\nKeyStora\n) {\ntry {\ninpu\n} catch\nLockCtrl\nLightCtrPhotoObsselectFunction(\u201cunlock\"): SystemUser\n\u00abprimary actor\u00bb\nprompt for the key\nenterKey()\nsignal: valid key, lock openopen the lock,\nturn on the lightselectFunction(\u201cunlock\"): SystemUser\n\u00abprimary actor\u00bb\nprompt for the key\nenterKey()\nsignal: valid key, lock openopen the lock,\nturn on the light\nKeyChecker", "source": "Page 166", "chapter": "2"}
{"id": "ed47f4428c1b-2", "text": "signal: valid key, lock openopen the lock,\nturn on the light\nKeyChecker\n+  checkKey() : boolean Key\n#  code_ : long+  getCode() : long\nPhotoSObsrv\n+  isDaylight() : boolean Controller\n#  numOfTrials_ : long\n#  maxNumOfTrials_ : long\n+  enterKey(k : Key)1\n11sensor1 checker\nalarmCtrllockCtrl1..*\nAlarmCtrl\n+  soundAlarm()LockCtrl\n#  open_ : boolean+  isOpen() : boolean\n+  setOpen(v : boolean)KeyChecker\n+  checkKey() : boolean Key\n#  code_ : long+  getCode() : long\nPhotoSObsrv\n+  isDaylight() : boolean Controller\n#  numOfTrials_ : long\n#  maxNumOfTrials_ : long\n+  enterKey(k : Key)1\n11sensor1 checker\nalarmCtrllockCtrl1..*\nAlarmCtrl\n+  soundAlarm()LockCtrl\n#  open_ : boolean+  isOpen() : boolean\n+  setOpen(v : boolean)\nFigure 2-44: Summary of a single iteration of the software development lifecycle. The \nactivity alternates between elaborating the system\u2019s behavior vs. structure. Only selected steps and artifacts are shown.", "source": "Page 166", "chapter": "2"}
{"id": "feebab417f29-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 153\ndevelopment is carried out. Teaching works from a known material and follows logical ordering, \nbut practice needs to face unknown problem and th e best ordering is known only after the fact. \nA general understanding of the problem domain doe s not guarantee project success; you need a \nvery detailed understanding of what is expected from the system. A detailed understanding is best \ndeveloped incrementa lly and iteratively. \nKey points: \n\uf0b7 Object orientation allows creation of software in solution objects  which are directly \ncorrelated to the objects (physical objects or abstract concepts) in the problem to be \nsolved. The key advantage of the obj ect-oriented approach is in the localization of \nresponsibilities \u2014if the system does not work as intended, it is easier to pinpoint the \nculprit in an object-oriented system. \n\uf0b7 The development must progress systematically, so that the artifacts created in the \nprevious phase are always being carried over in to the next phase, where they serve as the \nfoundation to build upon. \n\uf0b7 The traceability matrix  acts as a map, providing the links necessary for determining \nwhere information is located. It demonstrat es the relationship between design inputs and \ndesign outputs, ensures that design is based on predecessor, establis hed requirements, and", "source": "Page 167", "chapter": "2"}
{"id": "feebab417f29-1", "text": "design outputs, ensures that design is based on predecessor, establis hed requirements, and \nhelps ensure that design specifications are a ppropriately verified and the requirements are \nappropriately validated. The traceability ma trix supports bidirectional traceability, \n\u201cforwards\u201d from the requirements to the code  and \u201cbackwards\u201d in the opposite direction. \n\uf0b7 Use case modeling is an accepted and widespr ead technique to gather and represent the \nbusiness processes and requirements. Use cases describe the scenarios of how the system \nunder discussion can be used to help the user s accomplish their goals. Use cases represent \nprecisely the way the software system in teracts with its environment and what \ninformation must pass the system boundary in the course of interaction. Use case steps are written in an easy-to-understand structur ed narrative using the vocabulary of the \ndomain. This is engaging for the end users, who can easily follow and validate the use \ncases, and the accessibility encourages users to be actively involved in defining the \nrequirements. \n\uf0b7\n The analysis models are input to the desi gn process, which produces another set of \nmodels describing how the system is structured  and how the system\u2019s behavior is realized \nin terms of that structure. The structure is represented as a set of classes (class diagram),", "source": "Page 167", "chapter": "2"}
{"id": "feebab417f29-2", "text": "and the desired behavior is characterized by patterns of messages flowing between \ninstances of these classes (interaction diagrams). \n\uf0b7 Finally, the classes and methods identified during design are implemented in an object-\noriented programming language. This complete s a single iteration. After experimenting \nwith the preliminary implementation, the de veloper iterates back and reexamines the \nrequirements. The process is repeated un til a satisfactory solution is developed. \nThe reader should be aware of the capabilities and limitations of software engineering methods. \nThe techniques presented in this chapter help  you to find a solution once you have the problem \nproperly framed and defined, as is the case with  example projects in Section 1.5. Requirements \nanalysis can help in many cases with frami ng the problem, but you should also consider", "source": "Page 167", "chapter": "2"}
{"id": "de534bbef760-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 154\nethnography methods, participatory design, and ot her investigative techniques beyond software \nengineering. \nA short and informative introduction to UML is pr ovided by [Fowler, 2004]. The fact that I adopt \nUML is not an endorsement, but merely recogniti on that many designers presently use it and \nprobably it is the best methodology currently available. The reader should not feel obliged to \nfollow it rigidly, particularly if he/she feels th at the concept can be better illustrated or message \nconveyed by other methods. \nSection 2.1: Software Development Methods \n[MacCormack, 2001; Larman & Ba sili, 2003; Ogawa & Piller, 2006] \nSection 2.2: Requirements Engineering \nIEEE Standard 830 was last revised in 199 8 [IEEE 1998]. The IEEE recommendations cover \nsuch topics as how to organize requirements speci fications document, the role of prototyping, and \nthe characteristics of good requirements. \nThe cost-value approach for requirement prioriti zation was created by Karlsson and Ryan [1997]. \nA great introduction to user stories is [Cohn, 2004] . It describes how user stories can be used to", "source": "Page 168", "chapter": "2"}
{"id": "de534bbef760-1", "text": "plan, manage, and test software development projects. It is also a very readable introduction to \nagile methodology. \nMore powerful requirements engineering techni ques, such as Jackson\u2019s \u201cproblem frames\u201d \n[Jackson, 2001], are described in the next chapter. \nSection 2.4: Use Case Modeling \nAn excellent source on methodology for writing use cases is [Cockburn, 2001]. \nSystem sequence diagrams were introduced by [Coleman et al. , 1994; Malan et al., 1996] as part \nof their Fusion Method.  \nSection 2.5: Analysis: Build ing the Domain Model \nThe approach to domain model construction presente d in Section 2.5 is different from, e.g., the \napproach in [Larman, 2005]. Larman\u2019s approach  can be summarized as making an inventory of \nthe problem domain concepts. Things, terminology, and abstract concepts already in use in the \nproblem domain are catalogued and incorporated in the domain model diagram. A more inclusive and complex model of the business is called Busine ss Object Model (BOM) and it is also part of \nthe Unified Process. \nAn entrepreneurial reader may wish to apply some  of the analysis patterns described by Fowler", "source": "Page 168", "chapter": "2"}
{"id": "de534bbef760-2", "text": "An entrepreneurial reader may wish to apply some  of the analysis patterns described by Fowler \n[1997] during the analysis stage. However, the main  focus at this stage should be to come up with \nany idea of how to solve the problem, rather than  finding an optimal solution. Optimizing should \nbe the focus of subsequent iterations, after a working version of the system is implemented.", "source": "Page 168", "chapter": "2"}
{"id": "41ff8f999fb0-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 155\nSection 2.6: Design: Assigning Responsibilities \nDesign with responsibilities (Responsibility-Driven Design): \n[Wirfs-Brock & McKean, 2003; Larman, 2005] \nCoupling and cohesion as characteristics of soft ware design quality introduced in [Constantine et \nal., 1974; Yourdon & Constantine, 1979]. More on coupling and cohesion in Chapter 4. \nSee also: http://c2.com/cgi/wiki?CouplingAndCohesion \nJ. F. Maranzano, S. A. Rozsypal, G. H. Zimmerm an, G. W. Warnken, P. E. Wirth, and D. M. \nWeiss, \u201cArchitecture reviews: Practice and experience,\u201d IEEE Software , vol. 22, no. 2, pp. 34-43, \nMarch-April 2005. \nDesign should give correct  solution but should also be elegant  (or optimal ). Product design is \nusually open-ended because it gene rally has no unique solution, but some designs are \u201cbetter\u201d \nthan others, although all may be \u201ccorrect.\u201d Bett er quality matters because software is a living \nthing\u2014customer will come back for more features or modified features because of different user", "source": "Page 169", "chapter": "2"}
{"id": "41ff8f999fb0-1", "text": "thing\u2014customer will come back for more features or modified features because of different user \ntypes or growing business. This is usually called maintenance  phase of the software lifecycle and \nexperience shows that it represents the dominan t costs of a software product over its entire \nlifecycle. Initial design is just a start for a good product and only a failed product will end with a \nsingle release. \nClass diagrams do not allow describing the ordering  of the constituent parts of an aggregation. \nThe ordering is important in some applications, such as XML Schema (Chapter 6). We could use \nthe stereotype \u00abordered\u00bb on the \u201cHas-a\u201d relationshi p, although this approach lacks the advantage \nof graphical symbols. More importantly, \u00abordered\u00bb relationship just says the collection is \nordered, but does not allow showing each element i ndividually to specify where it is in the order, \nrelative to other elements. \nSection 2.3: Software Architecture \n \nSection 2.7: Test-driven Implementation \n[Raskin, 2005] [Malan & Halland, 2004] [Ostrand et al., 2004] \nUseful information on Java pr ogramming is available at:  \nhttp://www.developer.com/ (Gamelan) and http://www.javaworld.com/ (magazine)", "source": "Page 169", "chapter": "2"}
{"id": "41ff8f999fb0-2", "text": "For serial port communication in Java, I found us eful information here (last visited 18 January \n2006): \nhttp://www.lvr.c om/serport.htm   \nhttp://www.cs.tufts.edu/~jacob/150tui/lecture/01_Handyboard.html \nhttp://show.docjava.com:8086/b ook/cgij/exportToHTML/serialPorts/SimpleRead.java.html \nAlso informative is Wikibooks: Serial Data Communications , at: \nhttp://en.wikibooks.org/wiki/Programming:Serial_Data_Communications", "source": "Page 169", "chapter": "2"}
{"id": "6a14d4ce26b6-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 156\nhttp://en.wikibooks.org/wiki/Ser ial_communications_bookshelf \n \nA key book on refactoring is [Fowler, 2000]. The re factoring literature tends to focus on specific, \nsmall-scale design problems. Design patterns focu s on larger-scale design problems and provide \ntargets for refactorings. Design pattern s will be described in Chapter 5. \nA number of studies have suggested that code review reduces bug rates in released software. \nSome studies also show a correlation betw een low bug rates and open source development \nprocesses. It is not clear why it should be so. \nThe most popular unit testing framework is the xUnit  family (for many languages), available at \nhttp://www.junit.org . For Java, the popular version is JUnit , which is integrated into most of the \npopular IDEs, such as Eclipse ( http://www.eclipse.org ). The xUnit family, including JUnit, was \nstarted by Kent Beck (creator of eXtreme Pr ogramming) and Eric Gamma (one of the Gang-of-\nFour design pattern authors (see Chapter 5), a nd the chief architect of Eclipse. A popular free \nopen source tool to automatically rebuild the application and run all unit tests is CruiseControl  \n(http://cruisecontr ol.sourceforge.net ).", "source": "Page 170", "chapter": "2"}
{"id": "6a14d4ce26b6-1", "text": "(http://cruisecontr ol.sourceforge.net ). \nTesting aims to determine program \u2019s correctness\u2014whether it performs computations correctly, as \nexpected. However, a program may perform correctly but be poorly designed, very difficult to \nunderstand and modify. To evaluate program qua lity, we use software metrics (Chapter 4). \n  \nProblems \n \n\u201cTo learn is no easy matter and to appl y what one has learned is even harder.\u201d \n\u2014Chairman Mao Tse-Tung \n \nProblem 2.1 \nConsider the following nonfunctional requirements a nd determine which of them can be verified \nand which cannot. Write acceptance tests for each re quirement or explain why it is not testable. \n(a) \u201cThe user interface must be user-friendly and easy to use.\u201d \n(b) \u201cThe number of mouse clicks the user need s to perform when navigating to any window \nof the system\u2019s user interface must be less than 10.\u201d \n(c) \u201cThe user interface of the new system must be simple enough so that any user can use it \nwith a minimum training.\u201d \n(d) \u201cThe maximum latency from the moment the us er clicks a hyperlink in a web page until \nthe rendering of the new web page starts is 1 second over a broadband connection.\u201d", "source": "Page 170", "chapter": "2"}
{"id": "6a14d4ce26b6-2", "text": "the rendering of the new web page starts is 1 second over a broadband connection.\u201d \n(e) \u201cIn case of failure, the system must be easy to recover and must suffer minimum loss of important data.\u201d", "source": "Page 170", "chapter": "2"}
{"id": "393d41a9c847-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 157\nProblem 2.2 \n \n \nProblem 2.3 \nYou are hired to develop an automatic patient monitoring system for a \nhome-bound patient. The system is required to read out the patient\u2019s heart \nrate and blood pressure and compare them against specified safe ranges. The system also has activity sensors to det ect when the patient is exercising and \nadjust the safe ranges. In case an a bnormality is detected, the system must \nalert a remote hospital. (Note that  the measurements cannot be taken \ncontinuously, since heart rate is me asured over a period of time, say 1 \nminute, and it takes time to inflate the blood-pressure cuff.) The system must \nalso ( i) check that the analog devices for measuring the patient\u2019s vital signs \nare working correctly and report failures to the hospital; and, ( ii) alert the owner when the battery \npower is running low. \nEnumerate and describe the requirements for the system-to-be. \nProblem 2.4 \n \nProblem 2.5 \n \nProblem 2.6 \n \nProblem 2.7 \n  \nProblem 2.8 \nConsider an online auction site, such  as eBay.com, with selling, bidding,", "source": "Page 171", "chapter": "2"}
{"id": "393d41a9c847-1", "text": "Consider an online auction site, such  as eBay.com, with selling, bidding, \nand buying services.  Assume that you are a buyer, you have placed a bid for an item, and you just received a notification that the bidding process is \nclosed and you won it. Write a single use case  that represents the \nsubsequent process of purchasing the item with a credit card. Assume the business model where the funds are immediately transferred to the seller\u2019s account, without \nwaiting for the buyer to confirm the receipt of the goods. Also, only the seller is charged selling \nfees. Start from the point where you are alread y logged in the system and consider only what \nhappens during a single sitting  at the computer terminal. (Unless otherwise specified, use cases", "source": "Page 171", "chapter": "2"}
{"id": "6a25d8163c90-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 158\nare normally considered only for the activities that span a single sitting.) List also some alternate \nscenarios. \nProblem 2.9 \nConsider the online auction site described in  Problem 2.8. Suppose that by observation you \ndetermine that the generic Buyer and Seller ro les can be further differentiated into more \nspecialized roles: \n\uf0b7 Occasional Buyer, Frequent Buyer, and Collector \n\uf0b7 Small Seller, Frequent Se ller, and Corporate Seller \nIdentify the use cases for both situations: generic Buyers and Sellers vs. di fferentiated Buyers and \nSellers. Discuss the similarities and differences. Draw the use case diagrams for both situations. \nProblem 2.10  \nYou are hired to develop a software system fo r motion detection and garage door control.  \nThe system should turn the garage door lights on automatically when it detects motion within a given perimeter.  \nThe garage door opener should be possible to contro l either by a remote radio transmitter or by a \nmanual button switch. The opener s hould include the following safety feature. An \u201celectric eye\u201d \nsensor, which projects invisible infrared light beam s, should be used to detect if someone or \nsomething passes under the garage door while it closes . If the beam is obstructed while the door is", "source": "Page 172", "chapter": "2"}
{"id": "6a25d8163c90-1", "text": "going down, the door should not close\u2014the system  should automatically stop and reverse the \ndoor movement. \nThe relevant hardware parts of the sy stem are as follows (see Figure 2-45): \n\uf0b7\n motion detector \n\uf0b7 external light bulb \n\uf0b7 motor for moving the garage door \n\uf0b7 \u201celectric eye\u201d sensor \n\uf0b7 remote control radio transmitter and receiver \n\uf0b7 manual opener button switch Electric\nEye\nMotor\nRemote\nTransmitter\nManual\nOpener\nSwitchRemote\nReceiver\nMotion\nDetectorExternal\nLight\nMotion detection perimeterMotion\nDetectorExternal\nLight\nMotion detection perimeter\nFigure 2-45: Depiction of the problem domain for Problem 2.10.", "source": "Page 172", "chapter": "2"}
{"id": "a727ca204fa5-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 159\nAssume that all the hardware components are avai lable and you only need to develop a software \nsystem that controls the hardware components. \n(a) Identify the actors for the system and their goals  \n(b) Derive only the use cases relevant to the syst em objective and write brief or casual text \ndescription of each \n(c) Draw the use case diagram for the system \n(d) For the use case that deals with the remote-controlled garage door opening , write a fully \ndressed description \n(e) Draw the system sequence diagram(s) for the use case selected in (d) \n(f) Draw the domain model with concepts , associations, and attributes  \n[Note: derive the domain model using only th e information that is available so far\u2014do \nnot elaborate the other use cases] \n(g) Show the operation contracts for the operations of the use case selected in (d) \nProblem 2.11 \nFor the system described in Problem 2.10, consid er the following security issue. If the remote \ncontrol supplied with the garage door opener uses  a fixed code, a thief may park near your house \nand steal your code with a code grabber device.  The thief can then duplicate the signal code and", "source": "Page 173", "chapter": "2"}
{"id": "a727ca204fa5-1", "text": "open your garage at will. A solution is to use so  called rolling security codes instead of a fixed \ncode. Rolling code systems automatically change  the code each time you operate your garage \ndoor. \n(f) Given the automatic external light control, triggered by motion detection, and the above \nsecurity issue with fixed signaling codes, a possible use case diagram is as depicted in \nFigure 2-46. Are any of the shown use cases legitimate? Explain clearly your answer. \n(g) For the use case that deals with  the remote-controlled garage door closing , write a fully \ndressed description. \n(h) Draw the system sequence diagram(s) for the use case selected in (b). \n(i) Draw the domain model with concepts , associations, and attributes . \n[Note: derive the domain model using only th e information that is available so far\u2014do \nnot elaborate the other use cases.] AnimateObject\nThief\u00abinitiate\u00bb\n\u00abinitiate\u00bb\n\u00abinitiate\u00bb\n\u00abinitiate\u00bb\n\u00abinitiate\u00bbTurnLightOn\nTurnLightOff\nStealOpenerCode\nRemoteOpen\n \nFigure 2-46: A fragment of a possible use case diagram for Problem 2.11.", "source": "Page 173", "chapter": "2"}
{"id": "c4246ceea4d9-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 160\n(j) Show the operation contracts for the operations of the use case selected in (b). \nProblem 2.12 \nDerive the basic use cases for the restaurant automation system (described at the book website, \ngiven in Preface). Draw the use case diagram. \nProblem 2.13 \nIdentify the actors and derive the use cases for the vehicular traffic information system (described \nat the book website, given in Preface). Draw th e use case diagram. Also, draw the system \nsequence diagram for the use case that deals with data collection. \n \nProblem 2.14 \nConsider the automatic patient monitoring system described in Problem 2.3. Identify the \nactors and their goals. Briefly, in one senten ce, describe each use case but do not elaborate \nthem. Draw the use case diagram. \n \nProblem 2.15 \nConsider a grocery supermarket planning to co mputerize their inventory management. This \nproblem is similar to one described in Example 1.2 (Section 1.5.3), but has a different goal. The \nitems on shelves will be marked with Radio Fre quency Identification (RFID) tags and a set of", "source": "Page 174", "chapter": "2"}
{"id": "c4246ceea4d9-1", "text": "RFID reader-devices will be installed for mon itoring the movements of the tagged items. Each \ntag carries a 96-bit EPC (Electronic Product Code ) with a Global Trade Identification number, \nwhich is an international standard. The RFID r eaders are installed on each shelf on the sales floor. \nReader\nTag1.Request 2.Response\nRFID System:TagTag\nTag \nThe RFID system consists of two types of components (see figure above): (1) RFID tag or \ntransponder, and (2) RFID reader or transceiver.  RFID tags are passive  (no power source), and \nuse the power induced by the magnetic field of the RFID reader. An RFID reader consists of an \nantenna, transceiver and decoder, which sends periodic signals to inquire about any tag in \nvicinity. On receiving any signal from a tag it passe s on that information to the data processor. \nYou are tasked to develop a software system for inventory management . The envisioned system \nwill detect which items will soon be depleted from th e shelves, as well as when shelves run out of", "source": "Page 174", "chapter": "2"}
{"id": "878ec90abe75-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 161\nstock and notify the store management. The manager will be \nable to assign a store associate to replenish the shelf, and the \nmanager will be notified when the task is completed. \nBased on the initial ideas for the desired functions of the \nsoftware system, the following requirements are derived: \nREQ1. The system shall continuously monitor the tagged \nitems on the shelves. Every time an item is removed, \nthis event is recorded in the system database by \nrecording the current item count from the RFID reader. \nThe system should also be able to handle the cases when the customer takes an item, puts it in her \nshopping cart, continues shopping, and then changes \nher mind, comes back and returns the item to the shelf. \nREQ2. The system shall keep tr ack when stock is running low \non shelves. It shall detect a \u201clow-stock\u201d state for a \nproduct when the product\u2019s item count falls below a given threshold while still greater than zero. \nREQ3. The system shall detect an \u201cout-of-stock\u201d state for a \nproduct when the shelf becomes empty and the product\u2019s item count reaches zero. \nREQ4. The system shall notify the store manager when a \n\u201clow-stock\u201d or \u201cout-of-stock\u201d state is detected, so the", "source": "Page 175", "chapter": "2"}
{"id": "878ec90abe75-1", "text": "\u201clow-stock\u201d or \u201cout-of-stock\u201d state is detected, so the \nshelves will be replenished. The notification will be \nsent by electronic mail, and the manager will be able to \nread it on his mobile phone. \nREQ5. The store manager shall be able to assign a store \nassociate with a task to replenish a particular shelf with \na specific product. The store associate shall be notified by electronic mail about the details of the assigned \ntask. \nREQ6. While the store associate puts items on th e shelf, the RFID system shall automatically \ndetect the newly restocked items by reading out their EPC. The system should support the \noption that customers remove items at th e same time while the store associate is \nreplenishing this shelf. \nREQ7. The store associate shall be able to exp licitly inform the system when the replenishment \ntask is completed. The number of restocked ite ms will be stored in the database record. \nThe item count obtained automatically (REQ5) may be displayed to the store associate \nfor verification. After the store associate confir ms that the shelf is replenished, the task \nstatus will be changed to \u201ccompleted,\u201d and a notification event will be generated for the \nstore manager.", "source": "Page 175", "chapter": "2"}
{"id": "878ec90abe75-2", "text": "store manager. \nTo keep the hardware and development cost s low, we make the following assumptions: RFID readerRFID tag\nStore managerMain computer", "source": "Page 175", "chapter": "2"}
{"id": "6c000b94fcb6-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 162\nA1. You will develop only the software that runs  on the main computer and not that for the \nperipheral RFID devices. Assume that the softwa re running the RFID readers will be purchased \ntogether with the hardware devices. \nA2. The tag EPC is unique for a product category, which means that the system cannot \ndistinguish different items of the same product. Therefore, the database will store only the total \ncount of a given product type. No item- specific information will be stored. \nA3. Assume that the RFID system works perfectly wh ich, of course, is not true in reality. As of \nthis writing (2011) on an average 20% of the tags do not function properly. Accurate read rates on \nsome items can be very low, because of physical  limitations like reading through liquid or metals \nstill exist or interference by other wireless s ources that can disrupt the tag transmissions. \nA4. Assume that the item removal event is a cl ean break, which again, may not be true. For \nexample, if the user is vacillating between buy ing and not buying, the system may repeatedly \ncount the item as removed or added and lose track of correct count. Also, the user may return an", "source": "Page 176", "chapter": "2"}
{"id": "6c000b94fcb6-1", "text": "item and take another one of the same kind because  she likes the latter more than the former. (A \nsolution may be periodically to scan all tags with the same EPC, and adjust incorrect counts in the \ndatabase.) \nA5. Regarding REQ1, each RFID reader will be able  to detect correctly when more than one item \nof the same type is removed si multaneously. If a customer changed her mind and returned an item \n(REQ1), we assume that she will return it to the correct shelf, rather than any shelf. \nA6. The communication network and the computing sy stem will be able to handle correctly large \nvolume of events. Potentially, there will be ma ny simultaneous or nearly simultaneous RFID \nevents, because there is a large number of products on the shelves and there may be a great number of customers currently in the store, inter acting with the items. We assume that the great \nnumber of events will not \u201cclog\u201d the computer network or the processors. \nDo the following: \n(a)\n Write all the summary use cases  that can be derived from the requirements REQ1\u2013REQ7. \nFor each use case, indicate the related requirements. Note that one use case may be \nrelated to several requirements and vice versa, one requirement  may be related to several \nuse cases.", "source": "Page 176", "chapter": "2"}
{"id": "6c000b94fcb6-2", "text": "use cases. \n(b) Draw the use case diagram for the use cases described in item (a). \n(c) Discuss additional requirements and use cases  that could be added to this system. \nProblem 2.16 \nConsider again the Grocery Inventory Manageme nt system described in Problem 2.15. Focus \nonly on the summary use cases that deal with depl eted stock detection, re lated to the requirements \nREQ1\u2013REQ4. Write the detailed specification for these use cases only. \nProblem 2.17", "source": "Page 176", "chapter": "2"}
{"id": "16a4566f840a-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 163\nProblem 2.18 \n \n \nProblem 2.19 \nConsider a variation of the home access control sy stem which will do user identification based on \nface recognition, as described in Section 2.4.2. Write the detaile d use case descriptions of use \ncases UC3: AddUser and UC4: RemoveUser for both  cases given in Figure 2-16, that is locally \nimplemented face recognition (Case (a)) and remo tely provided face recognition (Case (b)). \nProblem 2.20 \nConsider an automatic bank machine, known as Automatic Teller Machine (ATM), and a \ncustomer who wishes to withdraw some cash from his or her banking account. Draw a UML \nactivity diagram to represent this use case. \nProblem 2.21 \nDerive the domain model with concepts, associatio ns, and attributes for the virtual mitosis lab \n(described at the book website, given in Preface). \nNote: You may wonder how is it that you are aske d to construct the domain model without first \nhaving the use cases derived. The reason is, becau se the use cases for the mitosis lab are very \nsimple, this is left as an exercise for the reader. \nProblem 2.22", "source": "Page 177", "chapter": "2"}
{"id": "16a4566f840a-1", "text": "Problem 2.22 \nExplain the relationship between use cases and domain model objects and illustrate by example. \nProblem 2.23 \n \nProblem 2.24 \n \nProblem 2.25 \n \nProblem 2.26 \n \nProblem 2.27", "source": "Page 177", "chapter": "2"}
{"id": "3b5694c4f7c9-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 164\nProblem 2.28 \n \n \nProblem 2.29 \nAn example use case for the system presented in Section 1.5.1 is given as follows. (Although the \nadvertisement procedure is not s hown to preserve clarity, you should assume that it applies where \nappropriate, as described in Section 1.5.1.) \nUse Case UC- x: BuyStocks \nInitiating Actor: Player  [full name: investor player] \nActor\u2019s Goal: To buy stocks, get them added to his portfolio automatically \nParticipating Actors: StockReportingWebsite    [e.g., Yahoo! Finance]  \nPreconditions: Player  is currently logged in the system and is shown a hyperlink \u201cBuy \nstocks.\u201d \nPostconditions: System has informed the player of the purchase outcome. The logs and the player\u2019s portfolio are updated. \nFlow of Events for Main Success Scenario: \n\uf0ae 1. Player  clicks the hyperlink \u201cBuy stocks\u201d \n\uf0ac 2. System  prompts for the filtering criteria (e.g., based on company names, industry \nsector, price range, etc.) or \u201cShow all\u201d \n\uf0ae 3. Player  specifies the filtering criteria and submits", "source": "Page 178", "chapter": "2"}
{"id": "3b5694c4f7c9-1", "text": "\uf0ae 3. Player  specifies the filtering criteria and submits  \n\uf0ac 4. System  contacts StockReportingWebsite  and requests the current stock prices for \ncompanies that meet the filtering criteria \n\uf0ae 5. StockReportingWebsite  responds with HTML document containing the stock prices  \n\uf0ac 6. From the received HTML document, System  extracts, formats, and displays the stock \nprices for Player \u2019s consideration; the display also shows the player\u2019s account balance \nthat is available for trading  \n\uf0ae 7. Player  browses and selects the stock symbols, number of shares, and places the order  \n_ \n\uf0bf \n\uf0ac 8. System  (a) updates the player\u2019s portfolio; (b) adjusts the player\u2019s account balance, \nincluding a commission fee charge; (c) archives  the transaction in a database; and (d) \ninforms Player  of the successful transaction and shows his new portfolio standing \nNote that in Step 8 above only virtual trading ta kes place because this is fantasy stock trading. \nDerive (a part of) the domain model  for the system-to-be based on the use case BuyStocks. \n(a) Write a definition  for each concept in your domain model. \n(b) Write a definition  for each attribute and association in your domain model.", "source": "Page 178", "chapter": "2"}
{"id": "3b5694c4f7c9-2", "text": "(b) Write a definition  for each attribute and association in your domain model. \n(c) Draw the domain model. \n(d) Indicate the types of concepts, such as \u00abboundary\u00bb, \u00abcontrol\u00bb, or \u00abentity\u00bb.", "source": "Page 178", "chapter": "2"}
{"id": "e3e22b1e1189-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 165\n12345678901234567890Problem 2.30 \nSuppose you are designing an ATM machine (also see Problem 2.20). Consider the use case \n\u201cWithdraw Cash\u201d and finish the sequence diagram shown in Figure 2-47. The \nCustomerID object contains all the inform ation received from the current customer. \nIDChecker compares the entered ID with all the stored IDs contained in CustomerIDStorage. AcctInfo mainly contai ns information about the current account \nbalance. AcctManager perform s operations on the AcctInfo, such as subtracting the \nwithdrawn amount and ensuring that the remai nder is greater than or equal to zero. \nLastly, CashDispenserCtrl control the physical device that dispenses cash. \nOne could argued that AcctInfo and AcctMa nager should be combined into a single \nobject Account, which encapsulates both acc ount data and the methods that operate \non the data. The account data is most likely  read from a database, and the container \nobject is created at that time. Discuss the pros and cons for both possibilities. \nIndicate any design principles that you employ in the sequence diagram. \nProblem 2.31 \nYou are to develop an online auction site, with selling, bidding, and buying services. The buying", "source": "Page 179", "chapter": "2"}
{"id": "e3e22b1e1189-1", "text": "service should allow the users to find an item, bid for it and/or buy it, and pay for it. The use case \ndiagram for the system may look as follows:  \n: Controller  : IDChecker : CustomerIDStore : AcctManager  : AcctInfo  \nCustomer \nenterCard() : CustomerID : CashDispenserCtrl : GUI  \nenterPIN() askPIN() \naskAmt() \nenterAmt() \nFigure 2-47: Sequence diagram for the ATM machine of Problem 2.30 (see text for \nexplanation). GUI = Graphical user interface. \n\u00abparticipate\u00bb\n\u00abinitiate\u00bb\u00abinitiate\u00bb\n\u00abinitiate\u00bb\n\u00abinitiate\u00bb\u00abinitiate\u00bb\n\u00abinitiate\u00bb\u00abparticipate\u00bb\n\u00abparticipate\u00bb\u00abinitiate\u00bbFindItem\nViewBidsListItem\nBidForItem\nCloseAuctionSeller Buyer\nBuyItem\nRateTransaction\n\u00abinclude\u00bb\u00abinclude\u00bb\nCreditorShipping\nAgency?\u00abinitiate\u00bbOnline Auction Site", "source": "Page 179", "chapter": "2"}
{"id": "14f7c420d2d7-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 166\n We assume a simple system to which extra feat ures may be added, such as auction expiration \ndate on items. Other features may involve the sh ipment agency to allow tracking the shipment \nstatus. \nA possible class diagram for the system is shown in  Figure 2-48. Assume that ItemInfo is marked \nas \u201creserved\u201d when the Seller accepts the highest  bid and closes the auction on that item only. \nBefore closing, Seller might want to review how active the bidding is, to d ecide whether to wait \nfor some more time before closing the bid. That particular ItemInfo is removed from \nItemsCatalog once the payment is processed. \nIn the use case CloseAuction, the Seller reviews the existing bids for a given item, selects the \nhighest and notifies the Buyer associated with the highest bid about the decision (this is why \u00abparticipate\u00bb link between the use case CloseAuction and Buyer). Assume that there are more \nthan one bids posted for the selected item. \nComplete the interaction diagram shown below fo r this use case. Do not include processing the \npayment (for this use case see Problem 2.8). ( Note : You may introduce new classes or modify the \nexisting classes in Figure 2-48 if you feel it necessary for solving the problem.) ItemInfo", "source": "Page 180", "chapter": "2"}
{"id": "14f7c420d2d7-1", "text": "\u2013 name : String\n\u2013 startPrice : float\n\u2013 reserved : boolean\n+  getName() : String\n+  getStartPrice() : float\n+  getSeller() : SellerInfo\n+  getBidsList() : BidsList+  setReserved(ok : boolean)\n+  isReserved() : booleanItemsCatalog\n+  add(item: ItemInfo) : int\n+  remove(idx : int)\n+  getNext(): ItemInfo\n+  hasMore() : boolean*\nBuyerInfo\n\u2013 name : String\n\u2013 address : String\n+  getName() : String\n+  getAddress() : StringSellerInfo\n\u2013 name : String\n\u2013 address : String\n+  getName() : String\n+  getAddress() : String\nPayment\n\u2013 amount : float+  getBuyer() : BuyerInfo\n\u2026E t c .Bid\n\u2013 amount : float+  getBidder() : BuyerInfo\n+  getAmount() : float1BidsList\n+  add(bid: Bid) : int\n+  remove(idx : int)+  getNext(): Bid\n+  hasMore() : boolean\n*1\n11\n1 1Controller\n+  listItem(item: ItemInfo)\n+  findItem(name : String)\n+  bidForItem(name : String)\n+  viewBids(itemName : String)", "source": "Page 180", "chapter": "2"}
{"id": "14f7c420d2d7-2", "text": "+  viewBids(itemName : String)\n+  closeAuction(itmNam : String)+  buyItem(name : String)\n+  payForItem(price: float)bids\nseller\nseller\nitembuyerbidderItemInfo\n\u2013 name : String\n\u2013 startPrice : float\n\u2013 reserved : boolean\n+  getName() : String\n+  getStartPrice() : float\n+  getSeller() : SellerInfo\n+  getBidsList() : BidsList+  setReserved(ok : boolean)\n+  isReserved() : booleanItemInfo\n\u2013 name : String\n\u2013 startPrice : float\n\u2013 reserved : boolean\n+  getName() : String\n+  getStartPrice() : float\n+  getSeller() : SellerInfo\n+  getBidsList() : BidsList+  setReserved(ok : boolean)\n+  isReserved() : booleanItemsCatalog\n+  add(item: ItemInfo) : int\n+  remove(idx : int)\n+  getNext(): ItemInfo\n+  hasMore() : booleanItemsCatalog\n+  add(item: ItemInfo) : int\n+  remove(idx : int)\n+  getNext(): ItemInfo\n+  hasMore() : boolean*\nBuyerInfo\n\u2013 name : String\n\u2013 address : String\n+  getName() : String\n+  getAddress() : StringBuyerInfo", "source": "Page 180", "chapter": "2"}
{"id": "14f7c420d2d7-3", "text": "+  getName() : String\n+  getAddress() : StringBuyerInfo\n\u2013 name : String\n\u2013 address : String\n+  getName() : String\n+  getAddress() : StringSellerInfo\n\u2013 name : String\n\u2013 address : String\n+  getName() : String\n+  getAddress() : StringSellerInfo\n\u2013 name : String\n\u2013 address : String\n+  getName() : String\n+  getAddress() : String\nPayment\n\u2013 amount : float+  getBuyer() : BuyerInfo\n\u2026E t c .Payment\n\u2013 amount : float+  getBuyer() : BuyerInfo\n\u2026E t c .Bid\n\u2013 amount : float+  getBidder() : BuyerInfo\n+  getAmount() : floatBid\n\u2013 amount : float+  getBidder() : BuyerInfo\n+  getAmount() : float1BidsList\n+  add(bid: Bid) : int\n+  remove(idx : int)+  getNext(): Bid\n+  hasMore() : booleanBidsList\n+  add(bid: Bid) : int\n+  remove(idx : int)+  getNext(): Bid\n+  hasMore() : boolean\n*1\n11\n1 1Controller\n+  listItem(item: ItemInfo)\n+  findItem(name : String)\n+  bidForItem(name : String)\n+  viewBids(itemName : String)", "source": "Page 180", "chapter": "2"}
{"id": "14f7c420d2d7-4", "text": "+  viewBids(itemName : String)\n+  closeAuction(itmNam : String)+  buyItem(name : String)\n+  payForItem(price: float)Controller\n+  listItem(item: ItemInfo)\n+  findItem(name : String)\n+  bidForItem(name : String)\n+  viewBids(itemName : String)\n+  closeAuction(itmNam : String)+  buyItem(name : String)\n+  payForItem(price: float)bids\nseller\nseller\nitembuyerbidder\nFigure 2-48: A possible class diagram for the online auction site of Problem 2.31.", "source": "Page 180", "chapter": "2"}
{"id": "a2316dd3a1d4-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 167\nProblem 2.32 \nConsider the use case BuyStocks presented in  Problem 2.29. The goal is to draw the UML \nsequence diagram  only for Step 6 in this use case. Start at the point when the system receives the \nHTML document from the StockReportingWebsite and stop at the point when an HTML page is \nprepared and sent to player\u2019s browser for viewing. \n(a) List the responsibilities  that need to be assigned to software objects. \n(b) Assign the responsibilities from the list in (a ) to objects. Explicitly mention any design \nprinciples  that you are using in your design, such as Expert Doer , High Cohesion , or Low \nCoupling . Provide arguments as to why the particular principle applies. \n(c) Draw the UML sequence diagram. \nProblem 2.33 \n \n  \n \n  \nProblem 2.34 \nIn the patient-monitoring scenario of Problem 2. 3 and Problem 2.14, assume that the hospital \npersonnel who gets notifie d about patient status is not office-bound but can be moving around the \nhospital. Also, all notifications must be archiv ed in a hospital database for a possible future", "source": "Page 181", "chapter": "2"}
{"id": "a2316dd3a1d4-1", "text": "auditing. Draw a UML deployment diagram repr esenting the hardware/software mapping of this \nsystem. \n \nProblem 2.35 \nConsider the automatic patient monitoring system  described in Problem 2.3 and analyzed in \nProblem 2.14. Focus on the patient device only and ignore any software that might be \nrunning in the remote hospital. Suppose you ar e provided with an initial software design as \nfollows. ?: Controller\nSeller\nviewBids(itemName)\ncloseAuction(itemName)Buyer", "source": "Page 181", "chapter": "2"}
{"id": "daccd1d77dc6-0", "text": "Ivan Marsic \uf0b7 Rutgers University \n 168\nThe domain model consists of the follo wing concepts and their responsibilities: \nResponsibility Concept \nRead out the patient\u2019s blood pressure from a sensor Blood Pressure Reader \nRead out the patient\u2019s heart rate from a sensor Heart Rate Reader \nCompare the vital signs to the safe ranges and detect  if the vitals are outside Abnormality Detector \nHold description of the safe ranges for patient vital signs; measurements \noutside these ranges indicate elevated risk to the patient; should be \nautomatically adjusted for patient\u2019s activity Vitals Safe Ranges \nAccept user input for constraints on safe ranges Safe Range Entry \nRead the patient\u2019s activity indicators Activity Observer \nRecognize the type of person\u2019s activity Activity Classifier \nHold description of a given type of person\u2019s activity Activity Model \nSend an alert to a remote hospital Hospital Alerter \nHold information sent to the hospital about abnormal vitals or faulty sensors Hospital Alert \nRun diagnostic tests on analog sensors Sensor Diagnostic \nInterpret the results of diagnostic tests on analog sensors Failure Detector \nHold description of a type of sensor failure Sensor Failure Mode \nRead the remaining batter power Battery Checker \nSend an alert to the patient Patient Alerter \nHold information sent to the patient about low battery Patient Alert \nCoordinate activity and delegate work to other concepts Controller", "source": "Page 182", "chapter": "2"}
{"id": "daccd1d77dc6-1", "text": "Coordinate activity and delegate work to other concepts Controller \nA sketchy UML sequence diagram is designed using the given concepts as in Figure 2-49. Note \nthat this diagram is incomplete: the part for check ing the batter power is not shown for the lack of \nspace. However, it should be clear from the given pa rt how the missing part should look like. \nRecall that the period lengths for observati ons made by our system are related as: \n     BP Reader & HR Reader  <  Sensor Diagnostic  <  Activity Observer  <  Battery Checker \nIn other words, vital signs are recorded frequent ly and battery is checked least frequently. These \nrelationships also indicate the priority or rela tive importance of the observations. However, the \ninitial design takes a simplified approach and assu mes a single timer that periodically wakes up \nthe system to visit all different sensors, and ac quire and process their data. You may but do not \nneed to stick with this simplif ied design in your solution. \nUsing the design principles from Section 2.6 or any other principles that you are aware of, solve: \n(a) Check if the design in Figure 2-49 already uses some design principles and, if so, explain \nyour claim.", "source": "Page 182", "chapter": "2"}
{"id": "daccd1d77dc6-2", "text": "your claim. \n- If you believe that the given design or some parts of it are sufficiently good then explain how the application of any interventions would make the design worse. \n-\n Be specific and avoid generic or hypotheti cal explanations of why some designs \nare better than others. Use concrete exam ples and UML diagrams or pseudo-code \nto illustrate your point and refer to specific qualities of software design. \n(b) Carefully examine the sketchy design in Figur e 2-49 and identify as many opportunities \nas you can to improve it by applying design principles. \n- If you apply a principle, first argue why the existing design may be problematic. \n- Provide as much details as possible abou t how the principle will be implemented \nand how the new design will work (dra w UML sequence diagrams or write \npseudo-code).", "source": "Page 182", "chapter": "2"}
{"id": "4edc5f11ec23-0", "text": "Chapter 2 \uf0b7 Object-Oriented Software Engineering 169\n- Explain how the principle that you introduced improved the original design (i.e., \nwhat are the expected benefits co mpared to the original design). \nFeel free to introduce new concepts, substitute the given concepts with different ones, or modify \ntheir responsibilities. You may also discard exis ting concepts if you find them redundant. In \naddition, you may change how acquisition of differe nt sensory data is initiated. However, when \nyou do so, explain the motivation for your actions. \nProblem 2.36 \n \n vital := readVitalSign( ): VSafeRanges : VitalSignReader\nwakeup\n[ abnormal == TRUE ]: AbnormalDetect: Controller\nranges := getValues()\nabnormal := isOutOfRange(vital)\noptsend( Hospital Alert Abnormal Vitals )check if in/out: HospitalAlerter\nfaulty := isFaulty(): SensDiagnostc : FailureDetectr\nisFailed(result)result :=\nrun tests\n[ faulty == TRUE ] opt\nexrcs := isExercising(): ActivityObserv : ActivityClassif\nclassify(data)data :=\nread sensor\n[ exrcs == TRUE ] optadjust( exercise-mode )send( Hospital Alert Sensor Failure )Blood pressr\nHeart rate", "source": "Page 183", "chapter": "2"}
{"id": "4edc5f11ec23-1", "text": "Heart rate\nFigure 2-49: A sketchy UML sequence diagram for patient monitoring in Problem 2.35.", "source": "Page 183", "chapter": "2"}
{"id": "c0a19812a2be-0", "text": "170 Contents \n3.1 What is a System? \n3.1.1 World Phenomena and Their Abstractions \n3.1.2 States and State Variables \n3.1.3 Events, Signals, and Messages \n3.1.4 Context Diagrams and Domains \n3.1.5 Systems and System Descriptions \n3.2 Notations for System Specification \n3.2.1 Basic Formalisms for Specifications 3.2.2 UML State Machine Diagrams 3.2.3 UML Object Constraint Language (OCL) \n3.2.4 TLA+ Notation \n3.3 Problem Frames \n3.3.1 Problem Frame Notation 3.3.2 Problem Decomposition into Frames \n3.3.3 Composition of Problem Frames 3.3.4   \n3.4 Specifying Goals \n3.4.1   \n3.4.2   \n3.4.3   3.4.4 \n  \n3.5  \n3.5.1   \n3.5.2   \n3.5.3  \n3.6 Summary and Bibliographical Notes \nProblems  \nChapter 3  \nModeling and System Specification \n \n \n\u201cThe beginning is the most important part of the work.\u201d \u2014Plato", "source": "Page 184", "chapter": "3"}
{"id": "c0a19812a2be-1", "text": "\u201cThe beginning is the most important part of the work.\u201d \u2014Plato \nThe term \u201csystem specification\u201d is used both for the process  \nof deriving the properties of the software system as well as for the document  that describes those properties. As the system is \ndeveloped, its properties will ch ange during different stages of \nits lifecycle, and so it may be unclear which specification is being referred to. To avoid ambiguity we adopt a common \nmeaning: The system specificati on states what should be valid \n(true) about the system at th e time when the system is \ndelivered to the customer. Specifying system means stating \nwhat  we desire to achieve, not how  we plan to accomplish it or \nwhat has been achieved at an in termediate stage. The focus of \nthis chapter is on describing the system function , not its form . \nChapter 5 will focus on the form, how to build the system.  \nThere are several aspects of specifying the system under \ndevelopment, including: \n\uf0b7 Understanding the problem and determining what \nneeds to be specified \n\uf0b7 Selecting notation(s) to use for the specification \n\uf0b7 Verifying that the specification meets the \nrequirements \nOf course, this is not a linear sequence of activ ities. Rather, as we achieve better understanding of", "source": "Page 184", "chapter": "3"}
{"id": "c0a19812a2be-2", "text": "the problem, we may wish to switch to a differe nt notation; also, the verification activity may \nuncover some weaknesses in understanding the pr oblem and trigger an additional study of the \nproblem at hand. \nWe have already encountered one popular notatio n for specification, that is, the UML standard. \nWe will continue using UML and learn some more  about it as well as about some other notations. \nMost developers agree that a single type of syst em model is not enough to specify any non-trivial \nsystem. You usually need several different models, told in different \u201clanguages\u201d for different \nstakeholders. The end user has certain requirement s about the system, such as that the system \nallows him to do his job easier. The business manage r may be more concerned about the policies,", "source": "Page 184", "chapter": "3"}
{"id": "366a59f99a44-0", "text": "Chapter 3  \uf0b7  Modeling and System Specification 171\nrules, and processes supported by the system. So me stakeholders will care about engineering \ndesign\u2019s details, and others will not. Therefore, it is  advisable to develop the system specification \nas viewed from several different angles, using different notations. \nMy primary concern here is the developer\u2019s pe rspective. We need to  specify what are the \nresting/equilibrium states and the anticipated pe rturbations. How does the system appear in an \nequilibrium state? How does it react to a pertur bation and what sequence of steps it goes through \nto reach a new equilibrium? We already saw that use cases deal with such  issues, to a certain \nextent, although informally. Here, I will review some more precise approaches. This does not \nnecessarily imply formal methods. Some notations  are better suited for particular types of \nproblems. Our goal is to work with a certain degree of precision that is amenable to some form of \nanalysis. \nThe system specification should be derived fro m the requirements. The specification should \naccurately describe the system behavior necessary to satisfy the requirements. Most developers \nwould argue that the hardest part of software task is arriving at a complete and consistent \nspecification, and much of the essence of bu ilding a program is in fact the debugging its", "source": "Page 185", "chapter": "3"}
{"id": "366a59f99a44-1", "text": "specification\u2014figuring out what exactly needs to be done. The developer might have misunderstood the customer\u2019s needs. The custom er may be unsure, and the initial requirements \nwill often be fuzzy or incomplete. I shoul d emphasize again and ag ain that writing the \nrequirements and deriving the specification is not a strictly sequential process. Rather, we must \nexplore the requirements and system specificatio n iteratively, until a satisfactory solution is \nfound. Even then, we may need to revisit and reexamine both if questions arise during the design \nand implementation. \nAlthough the system requirements are ultimately d ecided by the customer, the developer needs to \nknow how to ask the right questions and how to  systemize the information gathered from the \ncustomer. But, what questions to ask? A useful a pproach would be to be start with a catalogue of \nsimple representative problems  that tend to occur in every real-world problem. These elementary-\nbuilding-block problems are called \u201cproblem frame s.\u201d Each can be described in a well-defined \nformat, each has a well-known solution, and each has a well-known set of associated issues. We \nalready made initial steps in Section 2.3.1. In  Section 3.3 we will see how complex problems can \nbe made manageable by applying problem frames. In  this way, problem frames can help us bridge", "source": "Page 185", "chapter": "3"}
{"id": "366a59f99a44-2", "text": "the gap between system requirements and system specification. \n \n3.1 What is a System? \n \n\u201cAll models are wrong, but some are useful.\u201d \u2014George E. P. Box \n\u201cThere is no property absolutely essential to one thin g. The same property, which figures as the essence of \na thing on one occasion, becomes a very inessential feature upon another.\u201d \u2014William James \nIn Chapter 2 we introduced system-to-be , or more accurately the software-to-be , as the software \nproduct that a software engineer (or a team of engineers) sets out to develop. Apart from the \nsystem, the rest of the world (\u201cenvironment\u201d) h as been of concern only as far as it interacts with", "source": "Page 185", "chapter": "3"}
{"id": "b09068a82fb3-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  172 \nthe system and it was abstracted as a set of actor s. By describing different interaction scenarios as \na set of use cases, we were able to develop a software system in an incremental fashion. \nHowever, there are some limitations with this approach. First, by considering only the \u201cactors\u201d \nthat the system directly interacts with, we may l eave out some parts of the environment that have \nno direct interactions with the software-to-be but  are important to the problem and its solution. \nConsider, for example, the stock market fantasy league system and the context within which it \noperates (Figure 1-32). Here, the real-world stoc k market exchange does not interact with our \nsoftware-to-be, so it would not be considered an  \u201cactor.\u201d Conceivably, it would not even be \nmentioned in any of the use cases, because it is  neither an initiating nor a participating actor! I \nhope that the reader would agree that this is strange\u2014the whole project revolves about a stock \nexchange and yet the stock exchange may not appear in the system description at all. \nSecond, starting by focusing on interaction scenarios may not be the easiest route in describing \nthe problem. Use cases describe the sequence of u ser\u2019s (actor) interaction with the system. I", "source": "Page 186", "chapter": "3"}
{"id": "b09068a82fb3-1", "text": "already mentioned that use cases are procedural  rather than object-oriented. The focus on \nsequential procedure may not be difficult to begin with, but it requires being on a constant watch \nfor any branching off of the \u201cmain success scenar io.\u201d Decision making (branching points) may be \ndifficult to detect\u2014it may be hard to conceive what could go wrong\u2014particularly if not guided \nby a helpful representation of the problem structure. \nThe best way to start conceptual modeling may be with how users and customers prefer to \nconceptualize their world, because the developer ne eds to have a great deal of interaction with \ncustomers at the time when the problem is being defined. This may also vary across different \napplication domains. \nIn this chapter I will present some alterna tive approaches to problem description (i.e., \nrequirements and specification), which may be mo re involved but are believed to offer easier \nroutes to solving large-scale and complex problems. \n3.1.1 World Phenomena and Their Abstractions \nThe key to solving a problem is in understanding the problem. Because problems are in the real \nworld, we need good abstractions of world phe nomena. Good abstractions will help us to \nrepresent accurately the knowledge that we gath er about the world (that is, the \u201capplication", "source": "Page 186", "chapter": "3"}
{"id": "b09068a82fb3-2", "text": "domain,\u201d as it relates to our problem at hand). In  object-oriented approach, key abstractions are \nobjects and messages and they served us well in Chapter 2 in understanding the problem and \nderiving the solution. We are not about to ab andon them now; rather , we will broaden our \nhorizons and perhaps take a slightly different perspective. \nUsually we partition the world in different parts (or regions, or domains) and consider different \nphenomena, see Figure 3-1. A phenomenon  is a fact, or object, or occurrence that appears or is \nperceived to exist, or to be present, or to be th e case, when you observe the world or some part of \nit. We can distinguish world phenomena by differe nt criteria. Structurally, we have two broad \ncategories of phenomena: individuals  and relations  among individuals. Logically, we can \ndistinguish causal  vs. symbolic  phenomena. In terms of behavior, we can distinguish \ndeterministic  vs. stochastic  phenomena. Next I describe each kind briefly.", "source": "Page 186", "chapter": "3"}
{"id": "8d7cd077b6e9-0", "text": "Chapter 3  \uf0b7  Modeling and System Specification 173\nI should like to emphasize that this is only one possible categorization, which seems suitable for \nsoftware engineering; other categorizations are possible and have been proposed. Moreover, any \nspecific identification of world phenomena is ev anescent and bound to become faulty over time, \nregardless of the amount of effort we invest in  deriving it. I already mentioned in Section 1.1.1 \nthe effect of the second law of thermodynami cs. When identifying the world phenomena, we \ninevitably make approximations. Certain kinds of information are regarded as important and the \nrest of the information is treated as unimportant and ignored. Due to the random fluctuations in \nthe nature and society, some of the phenomena that served as the basis for our separation of \nimportant and unimportant information will become  intermingled thus invalidating our original \nmodel. Hence the ultimate limits to what our modeling efforts can achieve. \nIndividuals \nAn individual is something that can be named a nd reliably distinguished from other individuals. \nDecisions to treat certain phenomena as individuals are not objective\u2014they depend on the problem at hand. It should be clear by now that th e selected level of abstraction is relative to the \nobserver. We choose to recognize just those individua ls that are useful to solving the problem and", "source": "Page 187", "chapter": "3"}
{"id": "8d7cd077b6e9-1", "text": "are practically distinguishable. We will choose to  distinguish three kinds of individual: events, \nentities, and values. \n\uf0a8 An event  is an individual happening, occurring at a particular point in time. Each event is \nindivisible  and instantaneous , that is, the event itself has no internal structure and takes no time to \nhappen. Hence, we can talk about \u201cbefore the ev ent\u201d and \u201cafter the event,\u201d but not about \u201cduring \nthe event.\u201d An example event is placing a trad ing order; another example event is executing a \nstock trading transaction; yet another example is posting a stock price quotation. Further \ndiscussion of events is in Section 3.1.3. WORLD\nPart/Domain IPart/Domain J\nPart/Domain KPhenomena in Part i\nPhenomena in Part j\nPhenomena in Part kShared\nphenomena\n \nFigure 3-1: World partitioning into domains and their phenomena.", "source": "Page 187", "chapter": "3"}
{"id": "8c504e502d42-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  174 \n\uf0a8 An entity  is an individual with distinct existence, as opposed to a quality or relation. An entity \npersists over time and can change its properties and states from one point in time to another. \nSome entities may initiate events; some may cause s pontaneous changes to their own states; some \nmay be passive. \nSoftware objects and abstract concepts modeled in  Chapter 2 are entities. But entities also include \nreal-world objects. The entities are determined by what part of the world is being modeled. A \nfinancial-trader  in our investment assistant case study (S ection 1.3.2) is an entity; so is his \ninvestment-portfolio ; a listed-stock  is also an entity. They  belong to entity classes trader , \nportfolio , and stock , respectively. \n\uf0a8 A value  is an intangible individual that exists out side time and space, and is not subject to \nchange. The values we are interested in are such  things as numbers and characters, represented by \nsymbols. For example, a value could be the numerical measure of a quantity or a number denoting amount on some conventio nal scale, such as 7 kilograms. \nIn our case study (Section 1.3.2), a particular stock price  is a number of monetary units in which", "source": "Page 188", "chapter": "3"}
{"id": "8c504e502d42-1", "text": "a stock share is priced\u2014and is therefore a value. Examples of value classes include integer , \ncharacter , string , and so on. \nRelations \n\u201cI have an infamously low capacity for visualizing relationships, which made the study of geometry and all \nsubjects derived from it impossible for me.\u201d \u2014Sigmund Freud \nWe say that individuals are in relation  if they share a certain characteristic. To define a relation, \nwe also need to specify how many individuals we consider at a time. For example, for any pair of \npeople, we could decide that they are neighbors if their homes are less than 100 meters apart from \neach other. Given any two persons, Person_i and Person_j, if they pass this test then the relation \nholds (is true); otherwise it does not hold (is false). All pairs of persons that pass the test are said \nto be in the relation Neighbors (Person_i, Person_j). The pairs of persons that are neighbors form \na subset of all pairs of persons as shown in Figure 3-2(a). \nRelations need not be established on pairs of in dividuals only. We can consider any number of \nindividuals and decide whether they are in a relation. The number n of considered individuals can", "source": "Page 188", "chapter": "3"}
{"id": "8c504e502d42-2", "text": "individuals and decide whether they are in a relation. The number n of considered individuals can \nbe any positive integer n \uf0b3 2 and it must be fixed for every test of the relation; we will call it an n-\ntuple . We will write relation as RelationName (Individual 1, \u2026, Individual n). When one of the Set of neighborsSet of all pairs of persons\nSet of neighborsSet of all pairs of persons\nSet of love trianglesSet of all 3-tuples of persons\nSet of love trianglesSet of all 3-tuples of persons\n(a) (b)\nFigure 3-2: Example relations: Neighbors (Person_i, Person_j) and InLoveTriangle (Person_i,\nPerson_j, Person_k).", "source": "Page 188", "chapter": "3"}
{"id": "b0c2d94beea0-0", "text": "Chapter 3  \uf0b7  Modeling and System Specification 175\nindividuals remains constant for all tests of the re lation, we may include its name in the relation\u2019s \nname. For example, consider the characteristic of  wearing eyeglasses. Then we can test whether a \nPerson_i is in relation Wearing (Person_i, Glasses), which is a subset of all persons. Because \nGlasses remain constant across all tests, we can write WearingGlasses (Person_i), or simply \nBespectacled (Person_i). Consider next the so-called \u201clove triangle\u201d relation as an example for n = \n3. Obviously, to test for this characteristic we must consider exactly three persons at a time; not \ntwo, not four. Then the relation InLoveTriangle (Person_i, Person_j, Pers on_k) will form a set of \nall triplets (3-tuples) of persons for whom this characteristic is true, which is a subset of all \n3-tuples of persons as shown in Figure 3-2(b). A formal definition of re lation will be given in \nSection 3.2.1 after presenting some notation. \nWe will consider three kinds of re lations: states, truths, and roles. \n\uf0a8 A state  is a relation among individual entities and values, which can change over time. I will", "source": "Page 189", "chapter": "3"}
{"id": "b0c2d94beea0-1", "text": "describe states in Section 3.1.2, and skip them for now. \n\uf0a8 A truth  is a fixed relation among individuals that cannot possibly change over time. Unlike \nstates, which change over time, truths remain cons tant. A bit more relaxed definition would be to \nconsider the relations that are invariable on th e time-scale that we are interested in. Example \ntime-scales could be project duration or anticipat ed product life-cycle. When stating a truth, the \nindividuals are always values, and the tr uth expresses invariable facts, such as GreaterThan (5, 3) \nor StockTickerSymbol (\u201cGoogle, Inc.,\u201d \u201cGOOG\u201d). It is reasonably safe to assume that company \nstock symbols will not change (although me rgers or acquisitions may affect this!). \n\uf0a8 A role is a relation between an event and individual that participate in it in a particular way. \nEach role expresses what you might otherwise think of as one of the \u201carguments\u201d (or \u201cparameters\u201d) of the event. \nCausal vs. Symbolic Phenomena \n\uf0a8 Causal  phenomena are events, or roles, or stat es relating entities. These are causal phenomena \nbecause they are directly produced or controlled by  some entity, and because they can give rise to \nother phenomena in turn.", "source": "Page 189", "chapter": "3"}
{"id": "b0c2d94beea0-2", "text": "other phenomena in turn. \n\uf0a8 Symbolic  phenomena are values, and truths and states relating only values. They are called \nsymbolic because they are used  to symbolize other phenomena and relationships among them. A \nsymbolic state that relates values\u2014for example,  the data content of a disk record\u2014can be \nchanged by external causation, but we do not th ink of it as causal because it can neither change \nitself nor cause change elsewhere. \nDeterministic vs. Stochastic Phenomena \n\uf0a8 Deterministic  phenomena are the causal phenomena for which the occurrence or non-\noccurrence can be established with certainty. \n\uf0a8 Stochastic  phenomena are the causal phenomena that are governed by a random distribution of \nprobabilities.", "source": "Page 189", "chapter": "3"}
{"id": "d459d35a557d-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  176 \n3.1.2 States and State Variables \nA state describes what is true in the world at ea ch particular point in time. The state of an \nindividual represents the cumulative results of its behavior. Consider a device, such as a digital \nvideo disc (DVD) player. How the device reacts to  an input command depends not only upon that \ninput, but also upon the internal state that the de vice is currently in. So, if the \u201cPLAY\u201d button is \npushed on a DVD player, what happens next will depend on various things, such as whether or \nnot the player is turned on, contains a disc, or is already playing. These conditions represent \ndifferent states of a DVD player. \nBy considering such options, we may come up with  a list of all states for a DVD player, like this: \nState 1: NotPowered  (the player is not powered up) \nState 2: Powered   (the player is powered up) \nState 3: Loaded   (a disc is in the tray) \nState 4: Playing    \nWe can define state  more precisely as a relation  on a set of objects, which simply selects a subset", "source": "Page 190", "chapter": "3"}
{"id": "d459d35a557d-1", "text": "of the set. For the DVD player example, what we wish to express is \u201cThe DVD player\u2019s power is off.\u201d We could write Is(DVDplayer, NotPowered) or IsNotPowered (DVDplayer). We will settle \non this format: NotPowered (DVDplayer). NotPowered (x) is a subset of DVD players x that are \nnot powered up. In other words, NotPowered (x) is true if x is currently off. Assuming that one \nsuch player is the one in the living room, labeled as DVDinLivRm, then \nNotPowered (DVDinLivRm) holds true if the player in the living room is not powered up. \nUpon a closer examination, we may realize that  the above list of states implies that a non-\npowered-up player never contains a disc in the tray . If you are charged to develop software for the \nDVD player, you must clarify this. Does this mean th at the disc is automatically ejected when the \npower-off button is pushed? If this is not the case or  the issue is yet unresolved, we may want to \nredesign our list of DVD player states as: \nState 1: NotPoweredEmpty  (the player is not powered up and it contains no disc) \nState 2: NotPoweredLoaded  (the player is not powered up but a disc is in the tray)", "source": "Page 190", "chapter": "3"}
{"id": "d459d35a557d-2", "text": "State 3: PoweredEmpty  (the player is powered up but it contains no disc) \nState 4: PoweredLoaded  (the player is powered up and a disc is in the tray) \nState 5: Playing    \nAt this point one may realize that instead of aggregate or \u201cglobal\u201d system states it may be more \nelegant to discern different parts (sub-objects) of the DVD player and, in turn, consider the state \nof each part (Figure 3-3). Each part has its \u201clocal\u201d states, as in this table \nSystem part (Object) State relations \nPower button { Off, On} \nDisc tray { Empty , Loaded } \nPlay button { Off, On} \n\u2026 \u2026 \nNote that the relation Off(b) is defined on the set of buttons. Then these relations may be true: \nOff(PowerButton) and Off(PlayButton). Similar holds for On(b). \nGiven the states of individual parts, how can we define the state of the whole system? Obviously, \nwe could say that the aggregate system state is de fined by the states of its parts. For example, one", "source": "Page 190", "chapter": "3"}
{"id": "e9e124b9c84b-0", "text": "Chapter 3  \uf0b7  Modeling and System Specification 177\nstate of the DVD player is { On(PowerButton), Empty (), Off(PlayButton), \u2026 }. Note that the \nrelation Empty () is left without an argument, because it is clear to which object it refers to. In this \ncase we could also write Empty  without parentheses. The arrangement of the relations in this \n\u201cstate tuple\u201d is not important as long as it is clear what part each relation refers to. \nThe question now arises, is every combination of parts\u2019 states allowed? Are these parts \nindependent of each other or there are constraints on  the state of one part that are imposed by the \ncurrent states of other parts? Some states of parts of a composite domain may be mutually \nexclusive . Going back to the issue posed earlier, can th e disc tray be in the \u201cloaded\u201d state when \nthe power button is in the \u201coff\u201d state? Because the se are parts of the same system, we must make \nexplicit any mutual dependencies of the parts\u2019 states . We may end up with a list of valid system \nstate tuples that does not include all possible tuples that can be constructed. \nBoth representations of a system state (single aggreg ate state vs. tuple of parts\u2019 states) are correct, \nbut their suitability depends on what kind of de tails you care to know about the system. In", "source": "Page 191", "chapter": "3"}
{"id": "e9e124b9c84b-1", "text": "general, considering the system as a set of part s that define state tuples presents a cleaner and \nmore modular approach than a single aggregate state. \nIn software engineering, we care about the visi ble aspects of the software system. In general, \nvisible aspects do not necessarily need to correspond  to \u201cparts\u201d of the system. Rather, they are \nany observable qualities of the system. For example, domain-model attributes identified in \nSection 2.5 represent observable qualities of th e system. We call each observable quality a state \nvariable . In our first case-study example, variables include the lock and the bulb. Another \nvariable is the counter of the number of attempts at opening the lock. Yet another variable is the \namount of timer that counts down the time elapsed since the lock was open, to support auto-lock \nfunctionality. The state variables of our system can be summarized as in this table \nVariable State relations \nDoor lock { Disarmed , Armed } \nBulb { Lit, Unlit } \nCounter of failed attempts {0, 1, \u2026, maxNumOfAttempts } \nAuto-lock timer {0, 1, \u2026, autoLockInterval } \nIn case of multiple locks and/or bulbs, we have a different state variable for every lock/bulb,", "source": "Page 191", "chapter": "3"}
{"id": "e9e124b9c84b-2", "text": "similar to the above example of DVD player buttons. So, the state relations for backyard and front \ndoor locks could be defined as Disarmed (Backyard) and Disarmed (Front). DVD playerPower\nbutton\nPlay\nbuttonDisc\ntray\n\u2026DVD player\n(a) (b) \nFigure 3-3: Abstractions of a DVD player at di fferent levels of detail: (a) The player as a\nsingle entity. (b) The player seen as composed of several entities.", "source": "Page 191", "chapter": "3"}
{"id": "fd6a43077b15-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  178 \nThe situation with numeric relations is a bit tric kier. We could write 2(Counter) to mean that the \ncounter is currently in state \u201c2,\u201d but this is a bit awkward. Rather, just for the sake of convenience \nI will write Equals (Counter, 2) and similarly Equals (Timer, 3). \nSystem state  is defined as a tuple of state variable s containing any valid combination of state \nrelations. State is an aggregate representation of the system characteristics that we care to know \nabout looking from outside of the system . For the above example, an example state tuple is: \n{\uf020Disarmed (Front), Lit, Armed (Backyard), Equals (Counter, 0), Equals (Timer, 0) }. \nOne way to classify states is by what the object is doing in a given state: \n\uf0b7 A state is a passive quality  if the object is just waiting for an event to happen. For the DVD \nplayer described earlier, such states are \u201cPowered\u201d and \u201cLoaded.\u201d \n\uf0b7 A state is an active quality  if the object is executing an activity. When the DVD player is in the \n\u201cPlaying\u201d state it is actively playing a disc. \nA combination of these options is also possible, i.e., the object may be executing an activity and", "source": "Page 192", "chapter": "3"}
{"id": "fd6a43077b15-1", "text": "also waiting for an event. \nThe movements between states are called transitions  and are most often caused by events \n(described in Section 3.1.3). Each state transiti on connects two states. Usually, not all pairs of \nstates are connected by transitions\u2014only specific transitions are permissible. \nExample 3.1 Identifying Stock Exchange States (First Attempt) \nConsider our second case study on an investment a ssistant system (Section 1.3. 2), and suppose that we \nwant to identify the states of the stock exchange. There are many things that we can say about the \nexchange, such as where it is located , dimensions of the building, the date it was built, etc. But, what \nproperties we care to know as it relates to  our problem? Here are some candidates: \n\uf0b7 What are the operating hour s and is the exchange currently \u201copen\u201d or \u201cclosed?\u201d  \n\uf0b7 What stocks are currently listed?  \n\uf0b7 For each listed stock, what are the quoted price (traded/bid/ask) and the number of offered shares?  \n\uf0b7 What is the current overall trading volume?  \n\uf0b7 What is the current market  index or average value?  \nThe state variables can be summarized like so: \nVariable State relations \nOperating condition (or gate condition) { Open , Closed }", "source": "Page 192", "chapter": "3"}
{"id": "fd6a43077b15-2", "text": "Variable State relations \nOperating condition (or gate condition) { Open , Closed } \nith stock price any positive real number \uf02a \nith stock number of offered shares {0, 1, 2, 3, \u2026} \nTrading volume {0, 1, 2, 3, \u2026} \nMarket index/average any positive real number \uf02a \nThe asterisk \uf02a in the table indicates that the prices are quoted up to a certain number of decimal places \nand there is a reasonable upper bound on the prices. In other words, this is a finite set of finite values. \nObviously, this system has a great many of possible states, which is, nonetheless, finite. An improvised graphical representation is shown in Figure 3-4. (UML standard symbols for state diagrams are \ndescribed later in Section 3.2.2.) \nAn example state tuple is: { Open , Equals (Volume, 783014), Equals (Average, 1582), Equals (Price_1, \n74.52), Equals (Shares_1, 10721), Equals (Price_2, 105.17), Equals (Shares_2, 51482), \u2026 }. Note that \nthe price and number of shares must be specified for all the listed stocks.", "source": "Page 192", "chapter": "3"}
{"id": "c558ac98cab2-0", "text": "Chapter 3  \uf0b7  Modeling and System Specification 179\nAs the reader should know by now, the selection of state phenomena depends on the observer and \nobserver\u2019s problem at hand. An alternative character ization of a market state is presented later in \nExample 3.2. \n \nObservables vs. Hidden Variables \nStates Defined from Observable Phenomena State is an abstraction, and as such it is  subjective\u2014it depends on who is making the \nabstraction. There are no \u201cobjective states\u201d\u2014every categorization of states is relative \nto the observer. Of course, the same observe r can come up with different abstractions. \nThe observer can also define  new states based on observable phenomena; such states \nare directly observed. Consider, for example,  a fruit states: \u201cgreen,\u201d \u201csemiripe,\u201d \u201cripe,\u201d \n\u201coverripe,\u201d and \u201crotten.\u201d The state of \u201crip eness\u201d of a fruit is defined based on observable \nparameters such as its skin color and texture, size, scent, softness on touch, etc. Similarly, a \n\u201cmoving\u201d state of an elevator is defined by ob serving its position over subsequent time moments \nand calculating the trend. \nFor the auto-lock timer discussed earlier, we can  define the states \u201cCountingDown\u201d and \u201cIdle\u201d \nlike so:", "source": "Page 193", "chapter": "3"}
{"id": "c558ac98cab2-1", "text": "like so: \nCountingDown (Timer) \n\uf044\n\uf03d The relation Equals (Timer, \uf074) holds true for \uf074 decreasing with time \nIdle(Timer) \uf044\n\uf03d The relation Equals (Timer, \uf074) holds true for \uf074 remaining constant with time \nThe symbol \uf044\n\uf03d means that this is a defined state. \nExample 3.2 Identifying Stock Exchange States (Second Attempt) 21\n321\n31.011.00\n1.021.011.00\n1.021.01 1.00 1.02 1.01 1.00 1.02\nStock_1_PriceMarket\nindex\nClosed Open Closed OpenMarketgate\nStock_1_Shares\n21\n321\n31.011.00\n1.021.011.00\n1.02Stock_2_Price Stock_2_Shares\n( prices and num. of shares\nfor all listed stocks )\nFigure 3-4: Graphical representation of stat es for Example 3.1. The arrows indicate the\npermissible paths for transitioning between different states.", "source": "Page 193", "chapter": "3"}
{"id": "4292998fa3c7-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  180 \nLet us revisit Example 3.1. Upon closer examination, one may conclude that the trader may not find \nvery useful the variables identified th erein. In Section 1.3.2, we speculat ed that what trader really cares \nabout is to know if a trad ing opportunity arises and, once he places  a trading order, tracking the status \nof the order. Let us assume that the trading decision will be made based on the trending direction of the stock price. Also assume that, when an upward tr end of Stock_i\u2019s price triggers a decision to buy, a \nmarket order is placed for x shares of Stock_i. To summarize, the trader wants to represent the states of \ntwo things: \n\uf0b7 \u201cStock tradability\u201d states (\u201cbuy,\u201d \u201csell,\u201d \u201chold\u201d ) are defined based on considering a time window \nof recent prices for a given stock and interpolating a line. If the line exhibits an upward trend, the stock state is Buy. The states Sell and Hold  are decided similarly. A more financially astute trader \nmay use some of the technical analysis indicator s (e.g., Figure 1-23), instead of the simple \nregression line.\n \n\uf0b7 \u201cOrder status\u201d states (\u201cpending\u201d vs. \u201cexecuted\u201d) are defined based on whether there are sufficient", "source": "Page 194", "chapter": "3"}
{"id": "4292998fa3c7-1", "text": "shares offered so the buying transaction can be ca rried out. We have to be  careful here, because a \nselling transaction can be executed only if ther e are willing buyers. So, the buy and sell orders \nhave the same states, defined differently.  \nThen the trader could define the states of the market as follows: \nBuy \uf044\n\uf03d The regression line of the relation Equals (Price_i( t), p), for t = tcurrent  \uf02d Window , \u2026, tcurrent  \uf02d 2, \ntcurrent  \uf02d 1, tcurrent , has a positive slope \nSell \uf044\n\uf03d The regression line of the relation Equals (Price_i( t), p), for t = tcurrent  \uf02d Window , \u2026, tcurrent , has a \nnegative slope \nHold  \uf044\n\uf03d The regression line of the relation Equals (Price_i( t), p), for t = tcurrent  \uf02d Window , \u2026, tcurrent , has \na zero slope \nSellOrderPending  \uf044\n\uf03d The relation Equals (Shares_i, y) holds true for all values of y less than x  \nSellOrderExecuted  \uf044\n\uf03d The relation Equals (Shares_i, y) holds true for all values of y greater than or", "source": "Page 194", "chapter": "3"}
{"id": "4292998fa3c7-2", "text": "equal to x  \nWhat we did here, essentially, is to group a large number of detailed states from Example 3.1 into few \naggregate states (see Figure 3-5). These grou ped states help simplif y the trader\u2019s work. \nIt is possible to discern further nuances in each of these states. For example, two sub-states of the state \nSell could be distinguished as when the trader should sell to avert greater loss vs. when he may wish to \ntake profit at a market top. The most important point to keep in mind is the trader\u2019s goals and strategies for achieving them. This is by no means the only  way the trader could view the market. A more \nproficient trader may define the states in terms of long vs. short trading positions (see Section 1.3.2, Figure 1-22). Example states could be: \nGoLong  \u2013 The given stock is currently suitable for taking a long position x\uf020\uf02d1 x \uf02d2 x x\uf020\uf02b1 x \uf02b2OrderPending OrderExecuted\n \nFigure 3-5: Graphical representation of states for Example 3.2. Microstates from Figure 3-4\nrepresenting the number of offered sha res are aggregated into two macrostates.", "source": "Page 194", "chapter": "3"}
{"id": "fdabfe7e7da0-0", "text": "Chapter 3  \uf0b7  Modeling and System Specification 181\nGoShort  \u2013 The given stock is currently suitable for taking a long position \nGoNeutral  \u2013 The trader should hold or avoid the given stock at this time \n \nThe states that are directly observable at a given level of detail (coarse graining) will be called \nmicrostates . A group of microstates is called a macrostate  (or superstate). The states defined in \nExample 3.2 are macrostates. \nSometimes our abstraction may identify simultaneous (or concurrent ) activities that object \nexecutes in a given state. For ex ample, when the DVD player is in the \u201cPlaying\u201d state it may be \nsimultaneously playing a disc (producing video output) and updating the time-progress display. \nSection 3.2.2 describes UML state machine diagra ms as a standardized graphical notation for \nrepresenting states and transitions between them. \n3.1.3 Events, Signals, and Messages \nEvent definition requires that events are indivisible\u2014any happening (or performance, or action) \nthat has an internal time structure must be rega rded as two or more events. The motivation for this \nrestriction is to avoid having intermediate stat es: an event represents a sharp boundary between", "source": "Page 195", "chapter": "3"}
{"id": "fdabfe7e7da0-1", "text": "restriction is to avoid having intermediate stat es: an event represents a sharp boundary between \ntwo different states. We also need to assume th at no two events occur simultaneously. All events \nhappen sequentially, and between successive events  there are intervals of time in which nothing \nhappens\u2014that is, there are no events. Events and in tervals alternate: each event ends one interval \nand begins another. Consider the example in Figure 3-6. By examining the time diagram we \npartition time into intervals (\u201cstates\u201d) and identif y what point (\u201cevent\u201d) separates two intervals. \nThen we name the resulting five phenomena as shown in Figure 3-6. We cannot have an State:\nBall standingState:\nBall flying\nState:\nBall floatingEvent: Kick\nEvent: Splash12\n3\n54\nTimeElevation of the ballEvent: Kick\nEvent: Splash\nFigure 3-6: Events take place at transitions between the states.", "source": "Page 195", "chapter": "3"}
{"id": "cebc4388e48a-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  182 \nuninterrupted sequence of events\u2014this would simply be a wrong model and would require \nrefining the time scale to identify th e intervals between successive events. \nThe developer may need to make a choice of what  to treat as a single event. Consider the home-\naccess control case study (Section 1.3.1). When the tenant is punching in his identification key, \nshould this be treated as a single event, or should each keystroke be considered a different event? \nThe answer depends on whether your problem st atement requires you to treat it one way or \nanother. Are there any exceptions that are rele vant to the problem, which may arise between \ndifferent keystrokes? If so, then we need  to treat each keystroke as an event. \nThe reader may wonder about the relationship be tween events and messages, or operations in \nobject-oriented approach. The notion of event as de fined above is more general, because it is not \nlimited to object orientation. The notion of message  implies that a signal is sent from one entity to \nanother. Unlike a message, an event  is something that happens\u2014it may include one or more \nindividuals but it is not necessarily directed  from one individual to another. Events just mark", "source": "Page 196", "chapter": "3"}
{"id": "cebc4388e48a-1", "text": "individuals but it is not necessarily directed  from one individual to another. Events just mark \ntransitions between successive states. The advantag e of this view is that we can avoid specifying \nprocessing detail at an early stage of problem de finition. Use case analysis (Section 2.4.3) is \ndifferent in that it requires making explicit the sequential processing procedure (\u201cscenarios\u201d), which leads to system operations. \nAnother difference is that events always signify  state change\u2014even for situations where system \nremains in the same state, there is an explicit description of an event and state change. Hence, \nevents depend on how the corresponding state set is  already defined. On the other hand, messages \nmay not be related to state changes. For example,  an operation that simply retrieves the value of \nan object attribute (known as accessor operation) does not affect the object\u2019s state. \nExample events: \nlistStock  \u2013 this event marks that it is first time av ailable for trading \u2013 marks transition between \nprice states; marks a transition between number-of-shares-available states \nsplitStock  \u2013 this event marks a transition between pr ice states; marks transition between number-\nof-shares-available states \nsubmitOrder  \u2013 this event marks a transition between th e states of a trading order; also marks a", "source": "Page 196", "chapter": "3"}
{"id": "cebc4388e48a-2", "text": "transition between price states (the indicative pr ice of the stock gets updated); also marks a \ntransition between number-of-shares-available states, in case of a sell-order \nmatchFound  \u2013 this event marks a transition between the states of a trading order when a matching \norder(s) is(are) found; also marks a transition between  price states (the traded price of the stock \ngets updated); also marks a transition be tween number-of-shares-available states \nThe above events can also mark change in \u201ct rading volume\u201d and \u201cmarket index/average.\u201d The \nreader may have observed that event names are fo rmed as verb phrases. The reason for this is to \ndistinguish events from states. Although this is reminiscent of messages in object-oriented \napproach, events do not necessarily correspond to messages, as already discussed earlier. \nExample 3.3 Identifying Stock Exchange Events \nConsider Example 3.2, where the states Buy, Sell, or Hold , are defined based on recent price \nmovements. The events that directly  lead to transitioning  between these states are order placements by \nother traders. There may be many different orders placed until the tran sition happens, but we view the", "source": "Page 196", "chapter": "3"}
{"id": "eecdbe288d18-0", "text": "Chapter 3  \uf0b7  Modeling and System Specification 183\ntransitioning as an indivisible event\u2014the moment  when the regression line slope exceeds a given \nthreshold value. The events can be summarized like so: \nEvent Description \ntrade Causes transition between stock states Buy, Sell, or Hold   \nsubmit  Causes transition between trading-order states \nInPreparation  \uf0ae OrderPending  \nmatched  Causes transition between trading-order states \nOrderPending \uf0ae OrderExecuted  \n\u2026 \u2026 \n\u2026 \u2026 \nThe events marking a trading order transitions are sh own in Figure 3-7. Other possible events include \nbid and offer , which may or may not lead to transitions am ong the states of a trading order. We will \nconsider these in Section 3.2.2. \n \n \n3.1.4 Context Diagrams and Domains \nNow that we have defined basic phenomena, we can  start the problem domain analysis by placing \nthe planned system in a context\u2014the environm ent in which it will work. For this we use context \ndiagrams , which are essentially a bit more than the commonplace \u201cblock diagrams.\u201d Context \ndiagrams are not part of UML; they were introduced by Michael Jackson [1995] based on the \nnotation dating back to structured analysis in 1970s. The context diagram represents the context", "source": "Page 197", "chapter": "3"}
{"id": "eecdbe288d18-1", "text": "notation dating back to structured analysis in 1970s. The context diagram represents the context \nof the problem  that the developer sets out to solve. Th e block diagrams we encountered in Figure \n1-20(b) and Figure 1-32 are essentially context diag rams. Based on the partitioning in Figure 3-1, \nwe show different domains as rectangular boxes a nd connect them with lines to indicate that they \nshare certain phenomena. Figure 3-8 is Figure 1-20( b) redrawn as a context diagram, with some \ndetails added. Our system-to-be , labeled \u201cmachine,\u201d subsumes th e broker\u2019s role and the figure \nalso shows abstract concepts such as portfolio, trading order, and ith stock. Jackson uses the term \n\u201cmachine\u201d to avoid the ambiguities of the word \u201csystem,\u201d some of which were discussed in \nSection 2.4.2. We use all three terms, \u201csyst em-to-be,\u201d \u201csoftware-to- be,\u201d and \u201cmachine.\u201d \nA context diagram shows parts of the world (Figure 3-1) that are relevant to our problem and only \nthe relevant parts. Each box in a context diagram represents a different domain. A domain  is a \npart of the world that can be distinguished b ecause it is conveniently considered as a whole, and", "source": "Page 197", "chapter": "3"}
{"id": "eecdbe288d18-2", "text": "can be considered\u2014to some extent\u2014separately from other parts of the world. Each domain is a \ndifferent subject matter that appears in the descrip tion of the problem. A domain is described by \nthe phenomena that exist or occur in it. In every software development problem there are at least \ntwo domains: the application domain  (or environment, or real world\u2014what is given) and the InPreparation Pending Executed Archivedsubmit matched archive\n \nFigure 3-7: Graphical representation of events marking state transitions of a trading order.", "source": "Page 197", "chapter": "3"}
{"id": "37107faf531c-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  184 \nmachine  (or system-to-be\u2014what is to be construc ted). Some of the domains in Figure 3-8 \ncorrespond to what we called \u201cactors\u201d in Chapter 2.  However, there are othe r subject matters, as \nwell, such as \u201cInvestment portfolio.\u201d \nTo simplify, we decide that all th e domains in the context diagram are physical . In Figure 3-8, \nwhile this may be clear for other domains, even  \u201cInvestment portfolio\u201d should be a physical \ndomain. We assume that the corresponding box st ands for the physical representation of the \ninformation about the stocks that the trader owns. In other words, this is the representation stored \nin computer memory or displayed on a screen or printed on paper. The reason for emphasizing \nphysical domains and physical interactions is b ecause the point of software development is to \nbuild systems that interact with the physi cal world and help the user solve problems. \nDomain Types \nDomains can be distinguished as to whether they are given or are to be designed. A given domain  \nis a problem domain whose properties are given\u2014we are not allowed to design such a domain. In some cases the machine can influence the behavior of a given domain. For example, in Figure 3-8", "source": "Page 198", "chapter": "3"}
{"id": "37107faf531c-1", "text": "executing trading orders influences the behavior  of the stock exchange (given domain). A \ndesigned domain  is a problem domain for which data stru ctures and, to some extent, its data \ncontent need to be determined and constructed. An example is the \u201cInvestment portfolio\u201d domain \nin Figure 3-8. \nOften, one kind of problem is di stinguished from another by different domain types. To a large \ndegree these distinctions arise naturally out of th e domain phenomena. But it is also useful to \nmake a broad classification into three main types. \n\uf0a8 A causal domain  is one whose properties include predictable causal relationships among its \ncausal phenomena. \nA causal domain may control some or all or none of the shared phenomena at an interface with \nanother domain. \n\uf0a8 A biddable domain  usually consists of people. The most  important character istic of a biddable \ndomain is that it lacks positive predictable intern al causality. That is, in most situations it is \nimpossible to compel a person to initiate an event: the most that can be done is to issue instructions to be followed. Machine\n(SuD)Machine\n(SuD)Stock \nexchangeTrader\nBankInvestment \nportfolioInvestment \nportfolioContext diagram symbols:\nA box with a double stripe \nis a machine domain", "source": "Page 198", "chapter": "3"}
{"id": "37107faf531c-2", "text": "portfolioContext diagram symbols:\nA box with a double stripe \nis a machine domain\nA box with a single stripe \nis a designed domain\nA box with no stripe \nis a given domain ithstockTrading \norder\nFigure 3-8: Context diagram for our case study 2: investment advisory system.", "source": "Page 198", "chapter": "3"}
{"id": "929ecb9320e7-0", "text": "Chapter 3  \uf0b7  Modeling and System Specification 185\n\uf0a8 A lexical domain  is a physical representation of da ta\u2014that is, of symbolic phenomena. \nShared Phenomena \nSo far we considered world phenomena as belongi ng to particular domains. Some phenomena are \nshared. Shared phenomena, viewed from different  domains, are the essence of domain interaction \nand communication. You can think of the domains  as seeing the same event from different points \nof view. \nFigure 3-9 shows \n3.1.5 Systems and System Descriptions \nNow that we have defined domains as distinguis hable parts of the world, we can consider any \ndomain as a system. A system  is an organized or complex whole, an assemblage of things or \nparts interacting in a coordinated way. All system s are affected by events in their environment \neither internal and under the organization\u2019s cont rol or external and not controllable by the \norganization. \nBehavior under Perturbations: We need to define the initial state, other equilibrium states, and \nstate transitions. \nMost of real-world problems require a dynami cal model to capture a process which changes over \ntime. Depending on the application, the particul ar choice of model may be continuous or discrete", "source": "Page 199", "chapter": "3"}
{"id": "929ecb9320e7-1", "text": "time. Depending on the application, the particul ar choice of model may be continuous or discrete \n(using differential or difference equations), dete rministic or stochastic, or a hybrid. Dynamical \nsystems theory describes properties of solutions to  models that are prevalent across the sciences. \nIt has been quite successful, yielding geometric desc riptions of phase portraits that partition state \nspace into region of solution trajectories with simi lar asymptotic behavior, characterization of the \nstatistical properties of attractors, and classificati on of bifurcations marking qualitative changes of \ndynamical behavior in generic systems depending upon parame ters. [Strogatz, 1994] \nS. Strogatz, Nonlinear Dynamics and Chaos: With Applications to Physics, Biology, Chemistry \nand Engineering . Perseus Books Group, 1994. eject (?)start\nstop\neject\nloadenabledisable\nenable\ndisableactivate\nshut down\nPower \nbuttonPlay \nbutton\nEject \nbuttonDisc tray Displayactivate\nshut downnotify\nnotify\n \nFigure 3-9: Domains and shared phenomena in the problem of controlling a DVD player.", "source": "Page 199", "chapter": "3"}
{"id": "8432c5dffc14-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  186 \nGiven an external perturbation or stimulus, the system responds by traversing a set of transient \nstates until it settles at an equilibrium state. An equilibrium state may involve stable oscillations, \ne.g., a behavior driven by an internal clock. \nIn mechanics, when an external force acts on an object, we descri be its behavior through a set of \nmathematical equations. Here we  describe it as a sequence of (discrete) action-reaction or \nstimulus-response events, in plain English. \nFigure 3- x shows the state transition diagram. Action \u201cturnLightOff\u201d is marked with question \nmark because we are yet to arrive at an accepta ble solution for this case.  The state [disarmed, \nunlit] is not shown because the lock is not supposed  to stay for a long in a disarmed state\u2014it will \nbe closed shortly either by the user or automatically. \n \n3.2 Notations for System Specification \n \n\u201c\u2026 psychologically we must keep al l the theories in our heads, and ev ery theoretical physicist who is any \ngood knows six or seven different theoretical represen tations for exactly the same physics. He knows that \nthey are all equivalent, and that nobody is ever going to  be able to decide which one is right at that level,", "source": "Page 200", "chapter": "3"}
{"id": "8432c5dffc14-1", "text": "but he keeps them in his head, hoping that they will give him different ideas for guessing.\u201d \n\u2014Richard Feynman, The Character of Physical Law  \n \n3.2.1 Basic Formalisms for Specifications \n\u201cYou can only find truth with logic if you have already found truth without it.\u201d \n\u2014Gilbert Keith Chesterton, The Man who was Orthodox \n\u201cLogic: The art of thinking and reasoning in strict accordance with the limitations and incapacities of the \nhuman misunderstanding.\u201d \u2014Ambrose Bierce, The Devil\u2019s Dictionary  \nThis section reviews some basic discrete mathematic s that often appears in specifications. First I \npresent a brief overview of sets notation. A set is a well-defined collection of objects that are \ncalled members  or elements . A set is completely defined by its elements. To declare that object x \nis a member of a set A, write x \uf0ce A. Conversely, to declare that object y is not a member of a set \nA, write x \uf0cf A. A set which has no members is the empty set  and is denoted as { } or \uf0c6. \nSets A and B are equal  (denoted as A = B) if they have exactly the same members. If A and B are", "source": "Page 200", "chapter": "3"}
{"id": "8432c5dffc14-2", "text": "not equal, write A \uf0b9 B. A set B is a subset  of a set A if all of the members of B are members of A, \nand this is denoted as B \uf0cd A. The set B is a proper subset of A if B is a subset of A and B \uf0b9 A, \nwhich is denoted as B \uf0cc A. \nThe union  of two sets A and B is the set whose members belong to A, B or both, and is denoted as \nA \uf0c8 B. The intersection  of two sets A and B is the set whose members belong to both  A and B, \nand is denoted as A \uf0c7 B. Two sets A and B are disjoint  if their intersections is the empty set: A \uf0c7 \nB = \uf0c6. When B \uf0cd A, the set difference  A \\ B is the set of members of A which are not members of \nB.", "source": "Page 200", "chapter": "3"}
{"id": "1ea65f56df3b-0", "text": "Chapter 3  \uf0b7  Modeling and System Specification 187\np q  p \uf0de q\nT T T \nT F F \nF T T \nF F T \nTruth table \nfor p \uf0de q. The members of a set can themselves be sets. Of par ticular interest is the set that contains all the \nsubsets of a given set A, including both \uf0c6 and A itself. This set is called the power set  of set A \nand is denoted (A), or A, or 2A. \nThe ordered pair  \uf0e1x, y\uf0f1 is a pair of objects in which x is the first object  and y is the second object . \nTwo ordered pairs \uf0e1x, y\uf0f1 and \uf0e1a, b\uf0f1 are equal  if and only if x = a and y = b. We define Cartesian \nproduct  or cross product  of two sets A and B (denoted as A \uf0b4 B) as the set of all ordered pairs \n\uf0e1x,\uf020y\uf0f1 where x \uf0ce A and y \uf0ce B. We can define the n-fold Cartesian product as A \uf0b4 A \uf0b4 \u2026 \uf0b4 A.", "source": "Page 201", "chapter": "3"}
{"id": "1ea65f56df3b-1", "text": "Recall the discussion of relations among individuals in Section 3.1.1. An n-ary relation  R on A, \nfor n \uf03e 1, is defined as a subset of the n-fold Cartesian product, R \uf0cd A \uf0b4 A \uf0b4 \u2026 \uf0b4 A. \nBoolean Logic \nThe rules of logic give precise meaning to st atements and so they play a key role in \nspecifications. Of course, all of this can be e xpressed in a natural language (such as English) or \nyou can invent your own syntax for describing the system requirements and specification. However, if these descrip tions are expressed in a standard and \npredictable manner, not only they can  be easily understood, but also \nautomated tools can be developed to  understand such descriptions. This \nallows automatic checking of descriptions. \nPropositions are the basic building block of logic. A proposition  is a \ndeclarative sentence (a sentence that decl ares a fact) that is either true or \nfalse, but not both. We already saw in Section 1.3 that a proposition is a \nstatement of a relation among concepts, given that the truth value of the \nstatement is known. Examples of declarative sen tence are \u201cDogs are mammals\u201d and \u201cone plus", "source": "Page 201", "chapter": "3"}
{"id": "1ea65f56df3b-2", "text": "one equals three.\u201d The first proposition is true and the second one is false. The sentence \u201cWrite \nthis down\u201d is not a proposition because it is not a declarative sentence.  Also, the sentence \u201c x is \nsmaller than five\u201d is not a proposition because it is neither true nor false (depends on what x is). \nThe conventional letters used to denote propositions are p, q, r, s, \u2026 These are called \npropositional variables  or statement variables . If a proposition is true, its  truth value is denoted \nby T and, conversely, the truth value of a false proposition is denoted by F. \nMany statements are constructe d by combining one or more pr opositions, using logical operators, \nto form compound propositions. Some of the opera tors of propositional logic are shown on top of \nTable 3-1. \nA conditional statement  or, simply a conditional , is obtained by combining two propositions p \nand q to a compound proposition \u201cif p, then q.\u201d It is also written as p \uf0de q and can be read as \u201c p \nimplies q.\u201d In the conditional statement p \uf0de q, p is called the premise  (or antecedent  or \nhypothesis ) and q is called the conclusion  (or consequence ). The conditional statement p \uf0de \nq is", "source": "Page 201", "chapter": "3"}
{"id": "1ea65f56df3b-3", "text": "q is \nfalse when the premise p is true and the conclusion q is false, and true othe rwise. It is important \nto note that conditional statements should not be interpreted in terms of cause and effect. Thus, \nwhen we say \u201cif p, then q,\u201d we do not mean that the premise p causes the conclusion q, but only \nthat when p is true, q must be true as well1. \n                                                      \n1 This is different from the if-then construction used in many programming languages. Most programming \nlanguages contain statements such as if p then  S, where p is a proposition and S is a program segment of", "source": "Page 201", "chapter": "3"}
{"id": "c86ed13fd599-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  188 \nThe statement p \uf0db q is a biconditional , or bi-implication , which means that p \uf0de q and q \uf0de p. \nThe biconditional statement p \uf0db q is true when p and q have the same truth value, and is false \notherwise. \nSo far we have considered propositional logic; now  let us briefly introduce predicate logic. We \nsaw ealier that the sentence \u201c x is smaller than 5\u201d is not a pr oposition because it is neither true nor \nfalse. This sentence has two parts: the variable x, which is the subject, and the predicate , \u201cis \nsmaller than 5,\u201d which refers to a property th at the subject of the sentence can have. We can \ndenote this statement by P(x), where P denotes the predicate \u201cis smaller than 5\u201d and x is the \nvariable. The sentence P(x) is also said to be the value of the propositional function P  at x. Once a \nspecific value has been assigned to the variable x, the statement P(x) becomes a proposition and \nhas a truth value. In our example, by setting x = 3, P(x) is true; conversely, by setting x = 7, P(x)", "source": "Page 202", "chapter": "3"}
{"id": "c86ed13fd599-1", "text": "is false2. \nThere is another way of creating a pr oposition from a propositional function, called \nquantification . Quantification expresses the extent to wh ich a predicate is true over a range of \nelements, using the words such as all, some , many , none , and few. Most common types of \nquantification are universal quantification and exis tential quantification, shown at the bottom of \nTable 3-1. \nThe universal quantification  of P(x) is the proposition \u201c P(x) is true for all values of x in the \ndomain,\u201d denoted as \uf022x P(x). The value of x for which P(x) is false is called a counterexample  of \n\uf022x P(x). The existential quantification  is the proposition \u201cThere exists a value of x in the domain \nsuch that  P(x) is true,\u201d denoted as \uf024x P(x). \nIn constructing valid arguments, a key elementary step is replacing a statement with another \nstatement of the same truth va lue. We are particularly interested in compound propositions \nformed from propositional variables using logical op erators as given in Table 3-1. Two types of \ncompound propositions are of special interest. A compound proposition that is always true,", "source": "Page 202", "chapter": "3"}
{"id": "c86ed13fd599-2", "text": "compound propositions are of special interest. A compound proposition that is always true, \nregardless of the truth values of its  constituent propositions is called a tautology . A simple \nexample is p \uf0da \uf0d8p, which is always true because either p is true or it is false. On the other hand, a \ncompound proposition that is always false is called a contradiction . A simple example is p \uf0d9 \uf0d8p, \nbecause p cannot be true and false at the same time . Obviously, the negation of a tautology is a \n                                                                                                                                                              \none or more statements to be executed. When such an if-then statement is encountered during the \nexecution of a program, S is executed is p is true, but S is not executed if p is false. \n2 The reader might have noticed that we already enco untered predicates in Sec tion 3.1.2 where the state \nrelations for objects actually are predicates. Table 3-1: Operators of the propositional and predicate logics. \nPropositional Logic \n\uf0d9 conjunction ( p and q) \uf0de  implication (if p then q) \n\uf0da disjunction ( p or q) \uf0db  biconditional ( p if and only if q)", "source": "Page 202", "chapter": "3"}
{"id": "c86ed13fd599-3", "text": "\uf0d8  negation (not p) \uf0ba  equivalence ( p is equivalent to q) \nPredicate Logic  (extends propositional logi c with two quantifiers) \n\uf022  universal quantification (for all x, P(x)) \n\uf024  existential quantification (there exists x, P(x))", "source": "Page 202", "chapter": "3"}
{"id": "5b3909aca9c5-0", "text": "Chapter 3  \uf0b7  Modeling and System Specification 189\ncontradiction, and vice versa. Finally, compound proposition that is neither a tautology nor a \ncontradiction is called a contingency . \nThe compound propositions p and q are said to be logically equivalent , denoted as p \uf0ba q, if p \uf0db q \nis a tautology. In other words, p \uf0ba q if p and q have the same truth values for all possible truth \nvalues of their component variables. For example, the statements r \uf0de s and \uf0d8r \uf0da s are logically \nequivalent, which can be shown as follows. Earlier we stated that a conditional statement is false \nonly when its premise is true and its conclusion is false, and true otherwise. We can write this as \nr \uf0de s \uf0ba \uf0d8(r \uf0d9 \uf0d8s) \n \uf0ba \uf0d8r \uf0da \uf0d8(\uf0d8s) by the first De Morgan\u2019s law: \uf0d8(p \uf0d9 q) \uf0ba \uf0d8p \uf0da \uf0d8q  \n \uf0ba \uf0d8r \uf0da s \n[For the sake of completeness, I state he re, as well, the second De Morgan\u2019s law: \uf0d8(p \uf0da q) \uf0ba", "source": "Page 203", "chapter": "3"}
{"id": "5b3909aca9c5-1", "text": "\uf0d8p\uf020\uf0d9\uf020\uf0d8q.] \nTranslating sentences in natural language into logical expressions is an essential part of \nspecifying systems. Consider, for example, the following requirements in our second case study \non financial investment assistant (Section 1.3.2). \nExample 3.4 Translating Requirements into Logical Expressions \nTranslate the following two requirements for our second case study on personal investment assistant \n(Table 2-2) into logical expressions: \nREQ1. The system shall support registering new investors by providing a real-world email, which \nshall be external to our website. Required information shall include a unique login ID and a password that conforms to the guidelines, as well as investor\u2019s first and last name and other demographic information. Upon successful registra tion, the system shall set up an account with \na zero balance for the investor. \nREQ2. The system shall support placing Market Orders  specified by the action (buy/sell), the stock to \ntrade, and the number of shar es. The current indicative (ask/bid) price shall be shown and", "source": "Page 203", "chapter": "3"}
{"id": "5b3909aca9c5-2", "text": "updated in real time. The system shall also allow specifying the upper/lower bounds of the stock price beyond which the investor does not wish the transaction executed. If the action is to buy, the system shall check that the investor has sufficient funds in his/her account. When the market order matches the current market pric e, the system shall ex ecute the transaction \ninstantly. It shall then issue a confirmation about the outcome of the transaction (known as \u201corder ticket\u201d), which contains: the unique ticket number, investor\u2019s name, stock symbol, number of shares, the traded share price, the new portfolio state, and the investor\u2019s new \naccount balance. \nWe start by listing all the declarative sentences th at can be extracted from  the requirements. REQ1 \nyields the following declarative sentences. Keep in mind that thes e are not necessarily propositions \nbecause we still do not know wh ether they have truth value. \nLabel Declarative sentence (not  necessarily a proposition!) \na The investor can register with the system \nb The email address entered by the investor exists in real world  \nc The email address entered by the investor is external to our website \nd The login ID entered by the investor is unique \ne The password entered by the investor conforms to the guidelines \nf The investor enters his/her first and last name, and other demographic info \ng Registration is successful", "source": "Page 203", "chapter": "3"}
{"id": "5b3909aca9c5-3", "text": "g Registration is successful \nh Account with zero balance is set up for the investor", "source": "Page 203", "chapter": "3"}
{"id": "0a6fa77aaa04-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  190 \nNext we need to ascertain their truth value. Recall that the specifications state what is true about the \nsystem at the time it is delivered to the customer. The truth value of a must be established by the \ndeveloper before the system is delivered. The truth values of b, c, d, and e depends on what the \ninvestor will enter. Hence, these are propositional f unctions at investor\u2019s input. Consider the sentence \nb. Assuming that email  denotes the investor\u2019s input and B denotes the predicate in b, the propositional \nfunction is B(email ). Similarly, c can be written as C(email ), d as D(id), and e as E(pwd). The system \ncan and should evaluate these functions at runtime, during the investor registration, but the specification refers to the system deployment time, not its runtime. I will assume that the truth of sentence f is hard to ascertain so the system will admit any input values and consider f true. \nWe have the following propositions derived from REQ1: \nREQ1 represented as a set of propositions \na \n(\uf022 email )(\uf022 id)(\uf022 pwd) [B(email ) \uf0d9 C(email ) \uf0d9 D(id) \uf0d9 E(pwd) \uf0de g] \nf \ng \uf0de h", "source": "Page 204", "chapter": "3"}
{"id": "0a6fa77aaa04-1", "text": "f \ng \uf0de h \nThe reader should be reminded that conditional statements in logic are different from if-then \nconstructions in programming languages. Hence, g \uf0de h does not describe a cause-effect sequence of \ninstructions such as: when registration is succes sful, do set up a zero-balance account. Rather, this \nsimply states that when g is true, h must be true as well. \nThe system correctly implements REQ1 for an a ssignment of truth values that makes all four \npropositions true. Note that it would be wrong to simply write ( b \uf0d9 c \uf0d9 d \uf0d9 e) \uf0de g instead of the \nsecond proposition above, for this does not correctly reflect the reality of user choice at entering the \ninput parameters. \nExtracting declarative sentences from REQ2 is a bit more involved than for REQ1. The two most \ncomplex aspects of REQ2 seem to be about ensuring the sufficiency of funds for the stock purchase and executing the order only if the current price is  within the bounds (in case the trader specified the \nupper/lower bounds). Let us assume that the ticker symbol selected by the trader is denoted by SYM and its current ask price at the exchange is IP (f or indicative price). Note that unlike the email and", "source": "Page 204", "chapter": "3"}
{"id": "0a6fa77aaa04-2", "text": "password in REQ1, here we can force the user to select a valid ticker symbol by displaying only acceptable options. The number of shares (volume) for the trade specified by the investor is denoted as \nVOL. In case the investor specifies the upper/lower bou nds, let their values be denoted as UB and LB, \nrespectively. Lastly, the investor\u2019s current account balance is denoted as BAL. \nHere is a partial list of propositions needed to state these two constraints: \nLabel Propositions (partial list) \nm The action specified by the investor is \u201cbuy\u201d \nn The investor specified the upp er bound of the \u201cbuy\u201d price \no The investor specified the lowe r bound of the \u201csell\u201d price \nThe above table contains propositions because their truth value can be established independent of the \nuser\u2019s choice. For example, the developer should allow only two choices for trading actions, \u201cbuy\u201d or \n\u201csell,\u201d so \uf0d8m means that the investor selected \u201csell.\u201d In  case the investor specifies the upper/lower \nbounds, the system will execute the transaction only if [ n \uf0d9 m \uf0d9 (IP \uf0a3 UB)] \uf0da [o \uf0d9 \uf0d8m \uf0d9 (LB \uf0a3 IP)].", "source": "Page 204", "chapter": "3"}
{"id": "0a6fa77aaa04-3", "text": "To verify that the investor\u2019s account balance is su fficient for the current trad e, the system needs to \ncheck that [ \uf0d8n \uf0d9 (VOL \uf0b4 IP \uf0a3 BAL)] \uf0da [n \uf0d9 (VOL \uf0b4 UB \uf0a3 BAL)]. \nThe additional declarative senten ces extracted from REQ2 are: \nLabel Propositions (they complete the above list) \np The investor requests to place a market order \nq The investor is shown a blank ticket where the trade can be specified (action, symbol, etc.) \nr The most recently retrieved indicative price is shown in the currently open order ticket \ns The symbol SYM specified by the investor is a valid ticker symbol \nt The current indicative price that is obtained from the exchange", "source": "Page 204", "chapter": "3"}
{"id": "65da47bef50a-0", "text": "Chapter 3  \uf0b7  Modeling and System Specification 191\nu The system executes the trade \nv The system calculates the player\u2019s account new balance \nw The system issues a confirmation ab out the outcome of the transaction \nx The system archives  the transaction \nWe have the following propositions derived from REQ2: \nREQ2 represented as a set of propositions \np \uf0de q \uf0d9 r \ns \ny = v \uf0d9 {\uf0d8(n \uf0da o) \uf0da [(o \uf0d9 p \uf0da \uf0d8o \uf0d9 q) \uf0d9 (\uf024 IP)(LB \uf0a3 IP \uf0a3 UB)]}  \nz = \uf0d8m \uf0da {[\uf0d8n \uf0d9 (VOL \uf0b4 IP \uf0a3 BAL)] \uf0da [n \uf0d9 (VOL \uf0b4 UB \uf0a3 BAL)]} \ny \uf0d9 z \uf0de u \nu \uf0de v \uf0d9 w \uf0d9 x \nAgain, all of the above propositions must evaluate to true for the system to correctly implement REQ2.", "source": "Page 205", "chapter": "3"}
{"id": "65da47bef50a-1", "text": "Unlike REQ1, we have managed to restrict the user choice and simplify the representation of REQ2. It is true that by doing this we went beyond mere problem statement and imposed some choices on the problem solution, which is generally not a good idea. But in this case I believe these are very simple and straightforward choices. It requires the develo per\u2019s judgment and experience to decide when \nsimplification goes too far into restricting the solution options, but sometimes the pursuit of purity only brings needless extra work. \n \nSystem specifications should be consistent , which means that they should not contain conflicting \nrequirements. In other words, if the requireme nts are represented as a set of propositions, there \nshould be an assignment of truth values to the pr opositional variables that makes all requirements \npropositions true. \nExample\u2026 \n  \n \nIn Section 3.2.3 we will see how logic plays role in the part of the UML standard called Object \nConstraint Language (OCL). A nother notation based on Boolean logic is TLA+, described in \nSection 3.2.4. \nFinite State Machines \nThe behavior of complex objects and systems depends  not only on their immediate input, but also \non the past history of inputs. This memory property, represented as a state , allows such systems", "source": "Page 205", "chapter": "3"}
{"id": "65da47bef50a-2", "text": "to change their actions with time. A simple but important formal notation for describing such systems is called finite state machines  (FSMs). FSMs are used extensively in computer science \nand data networking, and the UML standard exte nds the FSMs into UML state machine diagrams \n(Section 3.2.2). \nThere are various ways to represent a finite stat e machine. One way is to make a table showing \nhow each input affects the state the machine is in. Here is the state table  for the door lock used in \nour case-study example \n Present state", "source": "Page 205", "chapter": "3"}
{"id": "11dda2088be0-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  192 \nArmed Disarmed\nInput lock Armed Armed \nunlock Disarmed Disarmed\nHere, the entries in the body of the table show the next state the machine enters, \ndepending on the present state (column) and input (row). \nWe can also represent our machine graphically, using a transition diagram , which is a \ndirected graph with labeled edges. In this diagram, each state is represented by a circle. Arrows are labeled with the input for each transition. An example is shown in Figure \n3-10. Here the states \u201cDisarmed\u201d and \u201cArmed \u201d are shown as circles, and labeled arrows \nindicate the effect of each input wh en the machine is in each state. \nA finite state machine  is formally defined to consist of a finite set of states S, a finite set \nof inputs I, and a transition function with S \uf0b4 I as its domain and S as its codomain (or \nrange) such that if s \uf0ce S and i\uf020\uf0ce I, the f(s, i) is the state the machine moves to when it is \nin state s and is given input i. Function f can be a partial function, meaning that it can be \nundefined for some values of its domain. In cer tain applications, we may also specify an", "source": "Page 206", "chapter": "3"}
{"id": "11dda2088be0-1", "text": "initial state  s\n0 and a set of final (or accepting ) states  S\uf0a2 \uf0cc S, which are the states we \nwould like the machine to end in. Final states are depicted in state diagrams by using \ndouble concentric circles. An example is shown in Figure 3-11, where M = \nmaxNumOfAttempts  is the final state: the machine will halt in this state and needs to be \nrestarted externally. \nA string  is a finite sequence of inputs. Given a string i1i2 \u2026 in and the initial state s0, the \nmachine successively computes s1 = f(s0, i1), then s2 = f(s1, i2), and so on, finally ending up with \nstate sn. For the example in Figure 3-11, the input string iiv transitions the FSM through the states \ns0s1s2s0. If sn \uf0ce S\uf0a2, i.e., it is an accepting state, then we say that the string is accepted ; otherwise it \nis rejected . It is easy to see that in Figure 3-11, the input string of M i\u2019s (denoted as iM) will be \naccepted. We say that this machine recognizes  this string and, in this sense, it recognizes the unlock\nlockunlock lock\nClosed Open", "source": "Page 206", "chapter": "3"}
{"id": "11dda2088be0-2", "text": "lockunlock lock\nClosed Open\n \nFigure 3-10: State transition diagram for a door lock. \nv  = (input-key \uf0ceValid-keys)\ni  = (input-key \uf0cfValid-keys)\nM = maxNumOfAttemptsi v\nvi\nv1 0Start\n2 Mi v\nvi\nv1 0Start\n2 M\n \nFigure 3-11: State transition diagram for the counter of unsuccessful lock-opening attempts.", "source": "Page 206", "chapter": "3"}
{"id": "cd6130d1f514-0", "text": "Chapter 3  \uf0b7  Modeling and System Specification 193\nattempted intrusion. \nA slightly more complex machine is an FSM that  yields output when it transitions to the next \nstate. Suppose that, for example, the door lock in  Figure 3-10 also produces an audible signal to \nlet the user know that it is armed or disarmed. The modified diagram is shown in Figure 3-12(a). \nWe use a slash symbol to separate the input and the output labels on each transition arrow. (Note \nthat here we choose to produce no outputs when the machine receives duplicate inputs.) \nWe define a finite state machine with output  to consist of a finite set of states S, a finite set of \ninputs I, a finite set of outputs O, along with a function f : S \uf0b4 I \uf0ae S that assigns to each (state, \ninput) pair a new state and another function g : S \uf0b4 I \uf0ae O that assigns to each (state, input) pair \nan output. \nWe can enrich the original FSM model by adding new features. Figure 3-12(b) shows how we \ncan add guards  to transitions. The full notation fo r transition descriptions is then \n\uf0e1input [guard ]/output\uf0f1, where each element is optional. A guard is a Boolean proposition that", "source": "Page 207", "chapter": "3"}
{"id": "cd6130d1f514-1", "text": "permits or blocks the transition. When a guard is present, the transition takes place if the guard \nevaluates to true, but the transition is blocked if  the guard is false. Section 3.2.2 describes how \nUML adds other features to extend the FSM model into UML state machine diagrams. \n3.2.2 UML State Machine Diagrams \nOne of the key weaknesses of the original finite -state-machines model (described in the preceding \nsection) in the context of system and software specification is the lack of modularization  \nmechanisms. When considering the definitions of  states and state variables in Section 3.1.2, \nFSMs are suitable for representing individual simple  states (or microstates). UML state machine \ndiagrams provide a standardized diagrammatic not ation for state machines and also incorporate \nextensions, such as macrostates and concurrent behaviors. unlock / beep\nlock / beepunlock lock\nClosed Open\nunlock [key \uf0ceValid-keys] / beep\nlock / beepunlock lock\nClosed Open(a)\n(b)\n \nFigure 3-12: State transition diagram from Figure 3-10, modified to include output labels\n(a) and guard labels (b).", "source": "Page 207", "chapter": "3"}
{"id": "e7c63477f0fe-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  194 \nBasic Notation \nIn every state machine diagram, there must be exactly one default initial state , which we \ndesignate by writing an unlabeled transition to th is state from a special icon, shown as a filled \ncircle. An example is shown in Figure 3-13. Someti mes we also need to designate a stop state. In \nmost cases, a state machine associ ated with an object or the system as a whole never reaches a \nstop state\u2014the state machine just vanishes when  the object it represents is destroyed. We \ndesignate a stop state  by drawing an unlabeled state transition from this state to a special icon, \nshown as a filled circle inside a slightly larger hollow circle.3 Initial and final states are called \npseudostates . \nTransitions between pairs of states are shown by directed arrows. Moving between states is \nreferred to as firing the transition . A state may transition to itself, and it is common to have many \ndifferent state transitions from the same state. A ll transitions must be unique, meaning that there \nwill never be any circumstances that would trigger more than one transition from the same state. \nThere are various ways to control the firing of a transition. A transition with no annotation is", "source": "Page 208", "chapter": "3"}
{"id": "e7c63477f0fe-1", "text": "There are various ways to control the firing of a transition. A transition with no annotation is \nreferred to as a completion transition . This simply means that wh en the object completes the \nexecution of an activity in the source state, the tran sition automatically fires, and the target state is \nentered. \nIn other cases, certain events have to occur for th e transition to fire. Such events are annotated on \nthe transition. (Events were discussed is Secti on 3.1.3.) In Figure 3- 13, one may argue that \nbankruptcy  or acquisition  phenomena should be considered st ates rather than events, because \ncompany stays in bankruptcy for much longer than  an instant of time. The correct answer is \nrelative to the observer. Our trader would not care how long the company will be in bankruptcy\u2014\nthe only thing that matters is that its stock is not tradable anymore starting with the moment the \nbankruptcy becomes effective. \nWe have already seen for FSMs that a guard condition  may be specified to control the transition. \nThese conditions act as guards so that when an event occurs, th e condition will either allow the \ntransition (if the condition is true) or disallo w the transition (if the condition is false). \nState Activities: Entry, Do, and Exit Activities", "source": "Page 208", "chapter": "3"}
{"id": "e7c63477f0fe-2", "text": "State Activities: Entry, Do, and Exit Activities \nI already mentioned that states can be passive or act ive. In particular, an activity may be specified \nto be carried out at certain points in time with respect to a state: \n                                                      \n3 The Delisted  state in Figure 3-13 is the stop state with respect to the given exchange. Although investors \ncan no longer trade shares of the stock on that exchange, it may be traded on some other markets DelistedIPO \nplannedTradedinitial-listingtrade bankruptcy, \nacquisition, merger, \u2026\nIPO = initial public offering  \nFigure 3-13: UML state machine diagram showing the states and transitions of a stock.", "source": "Page 208", "chapter": "3"}
{"id": "4ff37fb151b3-0", "text": "Chapter 3  \uf0b7  Modeling and System Specification 195\n\uf0b7 Perform an activity upon entry of the state \n\uf0b7 Do an activity while in the state \n\uf0b7 Perform an activity upon exit of the state \nAn example is shown in Figure 3-14. \nComposite States and Nested States \nUML state diagrams define superstates  (or macrostates). A superstate is a complex state that is \nfurther refined by decomposition into a finite stat e machine. A superstate can also be obtained by \naggregation of elementary states, as already seen in Section 3.1.2. \nSuppose now that we wish to extend the di agram in Figure 3-13 to show the states Buy, Sell, and \nHold , which we defined in Example 3.2. These states are a refinement of the Traded  state within \nwhich they are nested, as shown in Figure 3-15.  This nesting is depicted with a surrounding \nboundary known as a region  and the enclosing boundary is called a composite state . Given the \ncomposite state Traded  with its three substates, the semantics of nesting implies an exclusive OR \n(XOR) relationship. If the stock is in the Traded  state (the composite state), it must also be in \nexactly one of the three substates: Buy, Hold , or Sell.", "source": "Page 209", "chapter": "3"}
{"id": "4ff37fb151b3-1", "text": "exactly one of the three substates: Buy, Hold , or Sell. \nNesting may be to any depth, and thus substat es may be composite states to other lower-level \nsubstates. For simplicity in drawing state trans ition diagrams with depth, we may zoom in or \nzoom out relative to a particular state. Zooming out conceals substates, as in Figure 3-13, and bankruptcy, \nacquisition, \nmerger, \u2026Traded\nIPO \nplannedDelistedtradetrade\ntrade\ntrade\ntradetrade\ntradetrade\nBuy Sell Holdtradetrade\ntrade\ntrade\ntradetrade\ntradetrade\nBuy Sell Holdinitial-\nlisting\ncomposite statenested\nstate\nFigure 3-15: Example of composite and nested states for a stock. Compare with Figure 3-13.matchedarchive\ncancel,\nrejectview\ntradeExecuted Archived\nCancelledsubmit\ndata\nEntryInPreparationPending\ndo: check_price+supply [buy]\ncheck_price+demand [sell]\nFigure 3-14: Example of state activities for a trading order. Compare with Figure 3-7.", "source": "Page 209", "chapter": "3"}
{"id": "a0bb967e42d8-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  196 \nzooming in reveals substates, as in Figure 3-15. Zoomed out representation may improve \ncomprehensibility of a complex state machine diagram. \nConcurrency \nFigure 3-16 \n \nApplications \nState machine diagrams are typically used to describe the behavior of individual objects. \nHowever, they can also be used to  describe the behavior of any ab stractions that the developer is \ncurrently considering. We may also provide st ate machine diagrams fo r the entire system under \nconsideration. During the analysis phase of the development lifecycle (described in Section 2.5), \nwe are considering the event-ordered behavior of the system as a whole; hence, we may use state \nmachine diagrams to represent the behavior of  the system. During the design phase (described in \nSection 2.6), we may use state machine diagrams  to capture dynamic behavior of individual \nclasses or of collaborations of classes. \nIn Section 3.3 we will use state machine diagrams  to describe problem domains when trying to \nunderstand and decompose complex problems into basic problems. \n3.2.3 UML Object Constraint Language (OCL) \n\u201cI can speak French but I cannot understand it.\u201d \u2014Mark Twain", "source": "Page 210", "chapter": "3"}
{"id": "a0bb967e42d8-1", "text": "\u201cI can speak French but I cannot understand it.\u201d \u2014Mark Twain \nThe UML standard defines Object Constraint Language (OCL) based on Boolean logic. Instead of using mathematical symbols for operators (T able 3-1), OCL uses only ASCII characters which \nmakes it easier for typing and computer processi ng. It also makes OCL a bit wordy in places. \nOCL is not a standalone language, but an integral  part of the UML. An OCL expression needs to \nbe placed within the context of a UML model. In UML diagrams, OCL is primarily used to write \nconstraints in class diagrams and guard condi tions in state and activity diagrams. OCL \nexpressions, known as constraints , are added to express facts about elements of UML diagrams.  \nFigure 3-16: Example of concurrency in states.", "source": "Page 210", "chapter": "3"}
{"id": "7b573115da70-0", "text": "Chapter 3  \uf0b7  Modeling and System Specification 197\nAny implementation derived from such a design model must ensure that each of the constraints \nalways remains true. \nWe should keep in mind that for software classes th ere is no notion of a computation to specify in \nthe sense of having well-defined start and end poi nts. A class is not a program or subroutine. \nRather, any of object\u2019s operations can be invoked at arbitrary times with no specific order. And \nthe state  of the object can be an important factor in its behavior, rather than just input-output \nrelations for the operation. Depending on its state, the object may act differently for the same operation. To specify the effect of an operation on ob ject\u2019s state, we need to be able to describe \nthe present state of the object which resulted from any previous sequence of  operations invoked \non it. Because object\u2019s state is captured in its a ttributes and associations to other objects, OCL \nconstraints usually relate to these properties of objects. \nOCL Syntax \nOCL\u2019s syntax is similar to object-oriented la nguages such as C++ or Java. OCL expressions \nconsist of model elements, constr aints, and operators. Model elements include class attributes, \noperations, and associations. However, un like programming languages OCL is a pure", "source": "Page 211", "chapter": "3"}
{"id": "7b573115da70-1", "text": "operations, and associations. However, un like programming languages OCL is a pure \nspecification language, meaning that an OCL expressi on is guaranteed to be without side effects. \nWhen an OCL expression is evaluated, it simply re turns a value. The state of the system will \nnever change because of the evaluation of an OCL expression, even though an OCL expression \ncan be used to specify  a state change, such as in a post-condition specification. \nOCL has four built-in types: Boolean, Integer, R eal, and String. Table 3-2 shows example values \nand some examples of the operations on the pred efined types. These pred efined value types are \nindependent of any object model and are part of the definition of OCL. \nWhen writing an OCL contract, the first step is to decide the context , which is the software class \nfor which the OCL expression is applicable. Within the given class context, the keyword self  \nrefers to all instances of the class. Other model elements can be obtained by navigating using the \ndot notation from the self  object. Consider the example of the class diagram in Figure 2-35 \n(Section 2.6). To access the attribute numOfAttempts_  of the class Controller , we write \n self.numOfAttempts_", "source": "Page 211", "chapter": "3"}
{"id": "7b573115da70-2", "text": "self.numOfAttempts_ \nDue to encapsulation, object attributes frequently  must be accessed via accessor methods. Hence, \nwe may need to write self.getNumOfAttempts() . Table 3-2: Basic predefined OCL types and operations on them. \nType Values Operations \nBoolean true, false and, or, xor, not, implies, if-then-else\nInteger 1, 48, \uf02d3, 84967, \u2026 *, \uf02b, \uf02d, /, abs() \nReal 0.5, 3.14159265, 1.e+5 *, \uf02b, \uf02d, /, floor() \nString 'With more exploration comes more text.' concat(), size(), substring()", "source": "Page 211", "chapter": "3"}
{"id": "3649398f57a2-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  198 \nStarting from a given context, we can navigate associations  on the class diagram to refer to other \nmodel elements and their properties. The three ba sic types of navigation are illustrated in Figure \n3-17. In the context of Class_A , to access its local attribute, we write self.attribute2 . \nSimilarly, to access instances of a directly asso ciated class we use the name of the opposite \nassociation-end in the class diagram. So in Figure 3-17(b), in the context of Class_A , to access \nthe set of instances of Class_B , we write self.assocAB . Lastly in Figure 3-17(c), in the \ncontext of Class_A , to access instances of an indirectly associated class Class_C , we write \nself.assocAB.assocBC . (This approach should not come as a surprise to the reader familiar \nwith an object programming language, such as Java or C#.) \nWe already know from UML class diagrams that object associations may be individual objects \n(association multiplicity equals 1) or  collections (association multiplicity \uf03e 1). Navigating a one-\nto-one association yields directly an object. Figure 2-35 shows a single LockCtrl  (assuming", "source": "Page 212", "chapter": "3"}
{"id": "3649398f57a2-1", "text": "that a single lock device is controlled by the sy stem). Assuming that this association is named \nlockCtrl_  as in Listing 2.2, the navigation self.lockCtrl_  yields the single object \nlockCtrl_ : LockCtrl . However, if the Controller  were associated with multiple \nlocks, e.g., on front and backyard doors, then this navigation would yield a collection of two \nLockCtrl  objects. \nOCL specifies three types of collections : \n\uf0b7 OCL sets  are used to collect the results of navi gating immediate associations with one-to-\nmany multiplicity. \n\uf0b7 OCL sequences  are used when navigating immediate ordered associations. \n\uf0b7 OCL bags  are used to accumulate th e objects when navigating indirectly related objects. \nIn this case, the same object can show up mu ltiple times in the collection because it was \naccessed via different navigation paths. \nNote that in the example in Figure 3-17(c), the expression self.assocAB.assocBC  \nevaluates to the set of all instances of class Class_C  objects associated with all instances of \nclass Class_B  objects that, in turn, are associated with class Class_A  objects. Class_A\n\u2013a t t r i b u t e 1\n\u2013a t t r i b u t e 2\u2013\u2026Class_A", "source": "Page 212", "chapter": "3"}
{"id": "3649398f57a2-2", "text": "\u2013a t t r i b u t e 2\u2013\u2026Class_A\n\u2013a t t r i b u t e 1\n\u2013a t t r i b u t e 2\u2013\u2026(a)Local attribute (b)Directly related class (c)Indirectly related class\nClass_A\nClass_B*\n*assocBA\nassocABClass_A\nClass_B*\n*assocBA\nassocABClass_A\nClass_B*\n*\nClass_C*\n*assocBA\nassocAB\nassocCB\nassocBCClass_A\nClass_B*\n*\nClass_C*\n*assocBA\nassocAB\nassocCB\nassocBC\n \nFigure 3-17: Three basic types of navigation in a UML class diagram. (a) Attributes of class\nA accessed from an instance of class A. (b) Accessing a set of instances of class B from an\ninstance of class A. (c) Accessing a set of inst ances of class C from an instance of class A.", "source": "Page 212", "chapter": "3"}
{"id": "51fa4a47fcb4-0", "text": "Chapter 3  \uf0b7  Modeling and System Specification 199\nTo distinguish between attributes in classes from collections, OCL uses the dot notation for \naccessing attributes and the arrow operator -> for accessing collections. To access a property of a \ncollection, we write the collection\u2019s name, followed by an arrow ->, and followed by the name of \nthe property. OCL provides many predefined ope rations for accessing collections, some of which \nare shown in Table 3-3. \nConstants are unchanging (non-mutabl e) values of one of the predefined OCL types (Table 3-2). \nOperators  combine model elements and constants to form an expression . \n \nOCL Constraints and Contracts \nContracts  are constraints on a class that enable th e users of the class, implementers, and \nextenders to share the same assumptions about th e class. A contract specifies constraints on the \nclass state that must be valid always or at certain  times, such as before or after an operation is \ninvoked. The contract is between the class implementer about the promises of what can be Table 3-3: Summary of OCL opera tions for accessing collections. \nOCL Notation Meaning \nEXAMPLE OPERATIONS ON ALL OCL  COLLECTIONS  \nc->size() Returns the number of elements in the collection c.", "source": "Page 213", "chapter": "3"}
{"id": "51fa4a47fcb4-1", "text": "c->size() Returns the number of elements in the collection c. \nc->isEmpty()  Returns true if c has no elements, false otherwise. \nc1->includesAll(c2)  Returns true if every element of c2 is found in c1. \nc1->excludesAll(c2)  Returns true if no element of c2 is found in c1. \nc->forAll(var | expr)  Returns true if the Boolean expression expr  true for all \nelements in c. As an element is being evaluated, it is bound \nto the variable var, which can be used in expr . This \nimplements universal quantification \uf022. \nc->forAll(var1, var2 \n  | expr)  Same as above, except that expr  is evaluated for every \npossible pair of elements from c, including the cases where \nthe pair consists of the same element. \nc->exists(var | expr)  Returns true if there exists at least one element in c for \nwhich expr  is true. This implements existential \nquantification \uf024. \nc->isUnique(var |  \n  expr)  Returns true if expr  evaluates to a different value when \napplied to every element of c. \nc->select(expr)  Returns a collection that contains only the elements of c for", "source": "Page 213", "chapter": "3"}
{"id": "51fa4a47fcb4-2", "text": "c->select(expr)  Returns a collection that contains only the elements of c for \nwhich expr  is true. \nEXAMPLE OPERATIONS SPECIFIC TO OCL  SETS  \ns1->intersection(s2)  Returns the set of the elements found in s1 and also in s2. \ns1->union(s2)  Returns the set of the elements found either s1 or s2. \ns->excluding(x)  Returns the set s without object x. \nEXAMPLE OPERATION SPECIFIC TO OCL  SEQUENCES  \nseq->first()  Returns the object that is the first element in the sequence \nseq.", "source": "Page 213", "chapter": "3"}
{"id": "5181a29870e0-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  200 \nexpected and the class user about the obligations that must be met before the class is used. There \nare three types of constraints in OCL: invariants, preconditions, and postconditions. \nOne important characterization of object states is describing what remains invariant throughout \nthe object\u2019s lifetime. This can be descri bed using an invariant predicate. An invariant  must \nalways evaluate to true for all instance objects of  a class, regardless of what operation is invoked \nand in what order. An invariant applies to a class attribute. \nIn addition, each operation can be specified by stating a precondition and a postcondition. A \nprecondition  is a predicate that is checked before  an operation is executed. A precondition \napplies to a specific operation. Preconditions are fre quently used to validate input parameters to \nan operation. \nA postcondition  is a predicate that must be true af ter an operation is executed. A postcondition \nalso applies to a specific operation. Postcond itions are frequently used to describe how the \nobject\u2019s state was changed by an operation. \nWe already encountered some preconditions and postconditions in the context of domain models \n(Section 2.5.4). Subsequently, in Figure 2-35 we assigned the domain attributes to specific", "source": "Page 214", "chapter": "3"}
{"id": "5181a29870e0-1", "text": "classes. Therein, we used an informal, ad-hoc  notation. OCL provides a formal notation for \nexpressing constraints. For example, one of the constraints for our case study system is that the \nmaximum allowed number of failed attempts at di sarming the lock is a positive integer. This \nconstraint must be always true, so we state it as an invariant: \ncontext Controller inv: \nself.getMaxNumOfAttempts() > 0  \nHere, the first line specifies the context, i.e., the model element to which the constraint applies, as \nwell as the type of the constraint. In this case the inv keyword indicates the invariant  constraint \ntype. In most cases, the keyword self can be omitted because the context is clear. \nOther possible types of constraint are precondition  (indicated by the pre keyword) and \npostcondition  (indicated by the post  keyword). A precondition for executing the operation \nenterKey()  is that the number of failed attempts is less than the maximum allowed number: \ncontext Controller::enterKey(k : Key) : boolean pre: \nself.getNumOfAttempts() \uf03c self.getMaxNumOfAttempts()  \nThe postconditions for enterKey() are that (Poc1) a failed attempt is recorded, and (Poc2) if", "source": "Page 214", "chapter": "3"}
{"id": "5181a29870e0-2", "text": "the number of failed attempts reached the ma ximum allowed number, the system becomes \nblocked and the alarm bell is sounded. The fi rst postcondition (Poc1) can be restated as: \n(Poc1\uf0a2) If the provided key is not element of the set  of valid keys, then the counter of failed \nattempts after exiting from enterKey()  must be by one greater than its value before \nentering enterKey() . \nThe above two postconditions (Poc1 \uf0a2) and (Poc2) can be expressed in OCL as: \ncontext Controller::enterKey(k : Key) : Boolean \n-- postcondition (Poc1 \uf0a2): \npost: let allValidKeys : Set = self.checker.validKeys() \n   if allValidKeys.exists(vk | k = vk) then", "source": "Page 214", "chapter": "3"}
{"id": "109007a69a4b-0", "text": "Chapter 3  \uf0b7  Modeling and System Specification 201\ngetNumOfAttempts() = getNumOfAttempts()@pre \nelse \ngetNumOfAttempts() = getNumOfAttempts()@pre + 1 \n-- postcondition (Poc2): \npost: getNumOfAttempts() >= getMaxNumOfAttempts() implies \nself.isBlocked() and self.alarmCtrl.isOn() \nThere are three features of OCL used in stati ng the first postcondition above that the reader \nshould note. First, the let expression allows one to define a variable (in this case \nallValidKeys  of the OCL collection type Set) which can be used in the constraint. \nSecond, the @pre  directive indicates the value of an object as it existed prior  to the operation. \nHence, getNumOfAttempts()@pre  denotes the value returned by \ngetNumOfAttempts() before invoking enterKey() , and \ngetNumOfAttempts() denotes the value returned by the same operation after invoking \nenterKey() . \nThird, the expressions about getNumOfAttempts()  in the if-then-else  operation are \nnot assignments . Recall that OCL is not a programming language and evaluation of an OCL \nexpression will never change the state of the system. Rather, this just evaluates the equality of the", "source": "Page 215", "chapter": "3"}
{"id": "109007a69a4b-1", "text": "two sides of the expression. The result is a Boolean value true or false. \n \n SIDEBAR 3.1: The Dependent Delegate Dilemma  \n  \n\uf0a8 The class invariant is a key concept of obj ect-oriented programming, essential for reasoning \nabout classes and their instances. Unfortunately, the class invariant is, for all but non-trivial \nexamples, not always satisfied. During the execution of the method that client object called on \nthe server object (\u201cdependent delegate\u201d), the inva riant may be temporarily violated. This is \nconsidered acceptable because in such an intermediate state the server object is not directly \nusable by the rest of the world\u2014it is busy executing the method that client called\u2014so it does \nnot matter that its state might be inconsistent. Wh at counts is that the invariant will hold before \nand after the execution of method calls. \nHowever, if during the executing of the server\u2019 s method the server calls back a method on the \nclient, then the server may catch the client object in an inconsistent state. This is known as the \ndependent delegate dilemma  and is difficult to handle. The interested reader should check \n[Meyer, 2005] for more details. \nThe OCL standard specifies only contracts. Alt hough not part of the OCL standard, nothing \nprevents us from specifying program behavior using Boolean logic.", "source": "Page 215", "chapter": "3"}
{"id": "109007a69a4b-2", "text": "prevents us from specifying program behavior using Boolean logic. \n[ give example ] \n \n3.2.4 TLA+ Notation \nThis section presents TLA+ system specification language, defined by Leslie Lamport. The book \ndescribing TLA+ can be downloaded from http://lamport.org/ . There are many other specification \nlanguages, and TLA+ reminds in many ways of Z (pronounced Zed, not Zee) specification", "source": "Page 215", "chapter": "3"}
{"id": "75f7e52ddbb2-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  202 \nlanguage. My reason for choosing TLA+ is that it uses the language of mathematics, specifically \nthe language of Boolean algebra, rather  than inventing another formalism. \nA TLA+ specification is organized in a module, as in the following example, Figure 3-18, which \nspecifies our home access case study system (S ection 1.3.1). Observe that TLA+ language \nreserved words are shown in SMALL CAPS  and comments are shown in a highlighted text. A \nmodule comprises several sections \n\uf0b7 Declaration of variables , which are primarily the manifestations of the system visible to \nan outside observer \n\uf0b7 Definition of the behavior : the initial state  and all the subsequent ( next) states , which \ncombined make the specification \n\uf0b7 The theorems  about the specification \nThe variables could include internal, invisible asp ects of the system, but they primarily address \nthe external system\u2019s manifestations. In our  case-study of the home access controller, the \nvariables of interest describe the state of the lo ck and the bulb. They are aggregated in a single \nstatus  record, lines 6 and 7. \nThe separator lines 8 and 20 are a pure decoration and can be omitted. Unlike these, the module", "source": "Page 216", "chapter": "3"}
{"id": "75f7e52ddbb2-1", "text": "start and termination lines, lines 1 and 22, respectiv ely, have semantic meaning and must appear. 1 MODULE  AccessController  \n2  CONSTANTS  validKeys ,  The set of valid keys. \n3    ValidateKey ( _ ) A ValidateKey (k) step checks if k is a valid key. \n4  ASSUME  validKeys  \uf0cc STRING  \n5  ASSUME  \uf022 key \uf0ce STRING : ValidateKey (key) \uf0ce BOOLEAN  \n6  VARIABLE  status  \n7  TypeInvariant  \uf03d\u02c6 status  \uf0ce [lock : {\u201cdisarmed \u201d, \u201carmed \u201d}, bulb : {\u201clit\u201d, \u201cunlit\u201d}] \n8 \n9  Init \uf03d\u02c6 \uf0d9 TypeInvariant    The initial predicate. \n10   \uf0d9 status .lock = \u201carmed \u201d \n11   \uf0d9 status .bulb = \u201cunlit\u201d \n12  Unlock (key) \uf03d\u02c6 \uf0d9 ValidateKey (key)   Only if the user enters a valid key, then \n13   \uf0d9 status\uf0a2.lock = \u201cdisarmed \u201d  unlock the lock and \n14   \uf0d9 status\uf0a2.bulb = \u201clit\u201d  turn on the light (if not already lit).", "source": "Page 216", "chapter": "3"}
{"id": "75f7e52ddbb2-2", "text": "15  Lock  \uf03d\u02c6 \uf0d9 status\uf0a2.lock = \u201carmed \u201d  Anybody can lock the doors \n16   \uf0d9 UNCHANGED  status .bulb  but not to play with the lights. \n17  Next \uf03d\u02c6 Unlock (key) \uf0da Lock    The next-state action. \n18   \n19  Spec  \uf03d\u02c6 Init \uf0d9 \u0000[Next]status   The specification. \n20 \n21  THEOREM  Spec  \uf0de \u0000 TypeInvariant   Type correctness of the specification. \n22 \nFigure 3-18: TLA+ specification of the cases study system.", "source": "Page 216", "chapter": "3"}
{"id": "940f8a1df719-0", "text": "Chapter 3  \uf0b7  Modeling and System Specification 203\nLines 2 and 3 declare the constants of the m odule and lines 4 and 5 list our assumptions about \nthese constants. For example, we assume that th e set of valid passwords is a subset of all \ncharacter strings, symbolized with STRING . Line 5 essentially says that we expect that for any key \nk, ValidateKey (k) yields a BOOLEAN  value. \nTypeInvariant  in line 7 specifies all the possible values that the system variable(s) can assume in \na behavior that satisfies the specification. This is  a property of a specification, not an assumption. \nThat is why it is stated as a theorem at the end of the specification, line 21. \nThe definition of the initial system state appears in lines 9 and 10. \nBefore defining the next state in line 17, we need to define the functions that could be requested \nof the system. In this case we focus only on the key functions of disarming and arming the lock, \nDisarm  and Arm, respectively, and ignore the rest (see all the use cases in Section 2.2). Defining \nthese functions is probably the most important part of a specification. \nThe variable status\uf0a2 with an apostrophe symbol represents th e state variable in the next step, after", "source": "Page 217", "chapter": "3"}
{"id": "940f8a1df719-1", "text": "an operation takes place. \n \n3.3 Problem Frames \n \n\u201cComputers are useless. They can only give you answers.\u201d \u2014Pablo Picasso \n\u201cSolving a problem simply means representing it so as to make the solution transparent.\u201d \n\u2014Herbert Simon, The Sciences of the Artificial  \nProblem frames were proposed by Michael Jack son [1995; 2001] as a way for understanding and \nsystematic describing the problem as a first step towards the solution. Problem frames decompose \nthe original complex problem into simple, know n subproblems. Each frame captures a problem \nclass stylized enough to be solved by a standard method and simple enough to present clearly \nseparated concerns. \nWe have an intuitive feeling that a problem of data acquisition and display is different from a \nproblem of text editing, which in turn is differe nt from writing a compiler that translates source \ncode to machine code. Some problems combine ma ny of these simpler problems. The key idea of \nproblem frames is to identify the categories of simple problems, and to devise a methodology for \nrepresenting complex problems in terms of simple problems. \nThere are several issues to be solved for successful formulation of a problem frame methodology. \nFirst we need to identify the frame  categories. One example is the information frame , which", "source": "Page 217", "chapter": "3"}
{"id": "940f8a1df719-2", "text": "First we need to identify the frame  categories. One example is the information frame , which \nrepresents the class of problems that are primarily about data acquisition and display. We need to \ndefine the notation  to be used in describing/representi ng the frames. Then, given a complex \nproblem, we need to determine how to decompose  it into a set of problem frames. Each individual \nframe can then be considered and solved independ ently of other frames. A key step in solving a \nframe is to address the frame concerns , which are generic aspects of each problem type that need \nto be addressed for solving a problem of a particular type.", "source": "Page 217", "chapter": "3"}
{"id": "9fb21f7bc001-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  204 \nFinally, we need to determine how to compose  the individual solutions into the overall solution \nfor the original problem. We need to determine how individual frames interact with each other \nand we may need to resolve potential conflicts of their interaction. \n3.3.1 Problem Frame Notation \nWe can picture the relationship between the comput er system to be developed and the real world \nwhere the problem resides as in Figure 3-19. The task  of software development is to construct the \nMachine by programming a general-purpose computer. The machine has an interface a consisting \nof a set of phenomena\u2014typically events and st ates\u2014shared with the Problem Domain. Example \nphenomena are keystrokes on a computer keyboard, characters and symbols shown on a computer screen, signals on the lines connecting the computer to an instrument, etc. \nThe purpose of the machine is described by the Requirement, which specifies that the machine \nmust produce and maintain some relationship among the phenomena of the problem domain. For \nexample, to disarm the lock device when a correct co de is presented, or to ensure that the figures \nprinted on a restaurant check correctly  reflect the patron\u2019s consumption. \nPhenomena a shared by a problem domain and the machine are called specification phenomena .", "source": "Page 218", "chapter": "3"}
{"id": "9fb21f7bc001-1", "text": "Phenomena a shared by a problem domain and the machine are called specification phenomena . \nConversely, phenomena b articulate the requirements and are called the requirement phenomena . \nAlthough a and b may be overlapping, they are genera lly distinct. The requirement phenomena \nare the subject matter of the customer\u2019s requirement, while the specification phenomena describe the interface at which the machine can m onitor and control the problem domain. \nA problem diagram as in Figure 3-19 provides a basis for problem analysis because it shows you \nwhat you are concerned with, and what you must describe and reason about in order to analyze \nthe problem completely. The key topics of your descriptions will be: The \nMachineThe \nMachineProblem \nDomainThe\nRequirementab\nThe \nMachineThe \nMachineProblem \nDomainThe\nRequirementab\nSpecification Domain properties\nseen by the machineDomain properties\nseen by the requirement\nRequirement\na: specification interface phenomena\nb: requirement interface phenomena(a)\n(b)\n \nFigure 3-19: (a) The Machine and the Problem Domain. (b) Interfaces between the problem\ndomain, the requirements and the machine.", "source": "Page 218", "chapter": "3"}
{"id": "1b39d048c354-0", "text": "Chapter 3  \uf0b7  Modeling and System Specification 205\n\uf0b7 The requirement  that states what the ma chine must do. The requirement is what your customer \nwould like  to achieve in the problem domain. Its description is optative  (it describes the \noption  that the customer has chosen). Sometimes y ou already have an exact description of the \nrequirement, sometimes not. For example, re quirement REQ1 given in Table 2-2 states \nprecisely how users are to register with our system. \n\uf0b7 The domain properties  that describe the relevant character istics of each problem domain. These \ndescriptions are indicative  because they describe what is true regardless of the machine\u2019s \nbehavior. For example, Section 1.3.2 describes the functioning of financial markets, which \nwe must understand to implement a useful system that will provide investment advice. \n\uf0b7 The machine specification . Like the requirement, this is an optative  description: it describes the \nmachine\u2019s desired behavior at its interfaces with the problem domain. \nObviously, the indicative domain properties play a key role: without a clear understanding of how \nfinancial markets work we would never be able to develop a useful investment assistant system. \n3.3.2 Problem Decomposition into Frames \nProblem analysis relies on a strategy of problem", "source": "Page 219", "chapter": "3"}
{"id": "1b39d048c354-1", "text": "Problem analysis relies on a strategy of problem \ndecomposition  based on the type of problem domain and \nthe domain properties. The resulting subproblems  are \ntreated independently of other subproblems, which is the basis of effective separation of concerns. Each \nsubproblem has its own machine (specification), problem \ndomain(s), and requirement. Each subproblem is a projection  of the full problem, like color separation in \nprinting, where colors are separated independently and \nthen overlaid (superimposed) to form the full picture. \nJackson [2001] identifies five primitive problem frames , \nwhich serve as the basic units  of problem decomposition. \nThese are ( i) required behavior, ( ii) commanded \nbehavior, ( iii) information display, ( iv) simple \nworkpieces, and ( v) transformation. They differ in their \nrequirements, domain characteristics, domain invol vement (whether the domain is controlled, \nactive, inert, etc.), and the frame concern. These problem frames correspond to the problem types \nidentified earlier in Section 2.3.1 (see Figure 2-11). \nEach frame has a particular concern, which is a set of generic issues that need to be solved when \nsolving the frame: \n(a) Required behavior frame concern : To describe precisely (1) how the controlled domain", "source": "Page 219", "chapter": "3"}
{"id": "1b39d048c354-2", "text": "(a) Required behavior frame concern : To describe precisely (1) how the controlled domain \ncurrently behaves; (2) the desired behavior for the domain, as stated by the requirement; \nand, (3) what the machine (software-to-be) will be able to observe about the domain state, \nby way of the sensors that will be used in the system-to-be. \n(b) Commanded behavior frame concern : To identify (1) all the commands that will be \npossible in the envisioned system-to-be; (2 ) the commands that will be supported or", "source": "Page 219", "chapter": "3"}
{"id": "817db219528c-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  206 \nallowed under different scenarios; and, (3) what should happen if the user tries to execute \na command that is not supported/allowed under the current scenario. \n(c) Information display frame concern : To identify (1) the information that the machine will \nbe able to observe from the problem domain, by  way of the sensors that will be used in \nthe system-to-be; (2) the information that needs to be displayed, as stated by the \nrequirement; and, (3) the transformations n eeded to process the raw observed information \nto obtain displayable information. \n(d) Simple workpieces frame concern : To describe precisely (1) the data structures of the \nworkpieces; (2) all the commands that will be possible in the envisioned system-to-be; \n(3) the commands that will be supported or allowed under different scenarios; and, (4) what should happen if the user tries to ex ecute a command that is not supported/allowed \nunder the current scenario. \n(e) Transformation frame concern : To describe precisely (1) the data structures of the input \ndata and output data; (2) how each data struct ure will be traversed (travelled over); and, \n(3) how each element of the input data structure will be transformed to obtain the", "source": "Page 220", "chapter": "3"}
{"id": "817db219528c-1", "text": "(3) how each element of the input data structure will be transformed to obtain the \ncorresponding element in the output data structure. \nIdentification and analysis of frame flavors , reflecting a finer classification of domain properties \nThe frame concern  is to make the requirement, specifica tion, and domain descriptions and to fit \nthem into a correctness argument for the mach ine to be built. Frame concerns include: \ninitialization, overrun, reliability, identities, and completeness. The initialization concern  is to \nensure that a machine is properly synchroni zed with the real world when it starts. \n\u2026 frame variants , in which a domain is usually added to a problem frame \n \nBasic Frame Type 1: Required Behavior \nIn this scenario, we need to build  a machine which controls the behavior of a part of the physical \nworld according to given conditions. \nFigure 3-20 shows the frame diagram for the require d behavior frame. The control machine is the \nmachine (system) to be built. The controlled domain is the part of the world to be controlled. The \nrequirement, giving the condition to be satisfied by the behavior of the controlled domain, is \ncalled the required behavior. \nThe controlled domain is a causal domain, as indicated  by the C in the botto m right corner of its", "source": "Page 220", "chapter": "3"}
{"id": "817db219528c-2", "text": "box. Its interface with the machine consists of tw o sets of causal phenomena: C1, controlled by \nthe machine, and C2, controlled by the controlle d domain. The machine imposes the behavior on \nthe controlled domain by the phenomena C1; the phenomena C2 provide feedback. Control \nMachineControl \nMachineControlled \nDomainRequired \nBehaviorCM!C1 C3\nCD!C2 C \nFigure 3-20: Problem frame diagram for the required behavior frame .", "source": "Page 220", "chapter": "3"}
{"id": "7c502d4ec709-0", "text": "Chapter 3  \uf0b7  Modeling and System Specification 207\nAn example is shown in Figure 3-21 for how a stock-broker\u2019s system handles trading orders. \nOnce the user places an order, the order is record ed in the broker\u2019s machine and from now on the \nmachine monitors the quoted prices to decide when the conditions for executing the order are \nmet. When the conditions are met, e.g., the price reaches a specified value, the controlled domain \n(stock exchange) is requested to  execute the order. The controlled domain will execute the order \nand return an acknowledgeme nt, known as \u201corder ticket.\u201d \nBasic Frame Type 2: Commanded Behavior \nIn this scenario, we need to bu ild a machine which allows an opera tor to control the behavior of a \npart of the physical world by issuing commands. \nBasic Frame Type 3: Information Display \nIn this scenario, we need to build a machine which acquires information about a part of the \nphysical world and presents it at a given place in a given form. \nBasic Frame Type 4: Simple Workpieces \nIn this scenario, we need to build  a machine which allows a user to create, edit, and store some \ndata representations, such as text or graphics.  The lexical domain that will be edited may be", "source": "Page 221", "chapter": "3"}
{"id": "7c502d4ec709-1", "text": "relatively simple to design, such as text document for taking notes. It may also be very complex, \nsuch as creating and maintaining a \u201csocial graph\u201d on a social networking website. A videogame is \nanother example of a very complex digital (lexical) domain that is edited as the users play and issue different commands. \nFigure 3-22 shows the frame diagram for the simple workpieces frame. Broker \nMachineBroker \nMachineStock \nExchangeOrder \nhandling \nrulesab\nCControl\nMachineControlled\nDomainRequired\nBehavior\nb: SE! {Place[i], Cancel[i],       \nExecuted[i], Expired[i]} [C3]a: BM! {Execute[i]} [C1]\nSE! {PriceQuotes, Ack[i]} [C2]  \nFigure 3-21: Example of a Required Behavior basic frame: handling of trading orders. \nEditing \ntoolEditing \ntoolEditing \ntoolCommand \neffectsET!E1\nY3 WP!Y2\nUser\nBUser\nBUS!E3 E3Work\npiecesXWork\npiecesX\n \nFigure 3-22: Problem frame diagram for the simple workpieces frame .", "source": "Page 221", "chapter": "3"}
{"id": "2e7e1a0f752a-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  208 \nAn example is shown in Figure 3-23. \nBasic Frame Type 5: Transformation \nIn this scenario, we need to build a machin e takes an input document and produces an output \ndocument according to certain rules, where both input and output documents may be formatted \ndifferently. For example, given the records retrie ved from a relational database, the task is to \nrender them into an HTML document for Web browser display. \nA key concern for a transformation frame problem is to define the order in which the data \nstructures of the input data and output data w ill be traversed and their elements accessed. For \nexample, if the input data structure is a binary tr ee, then it can be traversed in pre-order, in-order, \nor post-order manner. \n \nFigure 3-24 shows the key idea behind the frame d ecomposition. Given a problem represented as \na complex set of requirements relating to a comple x application domain, our goal is to represent \nthe problem using a set of basic problem frames. \n3.3.3 Composition of Problem Frames \nReal-world problems almost always consist of co mbinations of simple problem frames. Problem \nframes help us achieve understanding of simple subproblems and derive solutions (machines) for", "source": "Page 222", "chapter": "3"}
{"id": "2e7e1a0f752a-1", "text": "frames help us achieve understanding of simple subproblems and derive solutions (machines) for \nthese problem frames. Once the solution is reached at the local level of specialized frames, the \nintegration (or composition) or specialized understa nding is needed to make a coherent whole. \nThere are some standard composite frames , consisting of compositions of two or more simple \nproblem frames. ac Editing toolWorkpieces\nCommand\neffects\nc: TR! {Place[i], Cancel[i],        \nExecuted[i], Expired[i]}  [Y3]a: TM! {Create[i]}       [E1]\nb: TR! {PriceQuotes , Place[i]}  [Y2]Trading \nmachineTrading \nmachineOrder \nplacing rules\nTrader\nBTrader\nB\nUserbdTrading \norderXTrading \norderX\n \nFigure 3-23: Example of a Simple Workpieces basic frame: placing a trading order.", "source": "Page 222", "chapter": "3"}
{"id": "b038f322616a-0", "text": "Chapter 3  \uf0b7  Modeling and System Specification 209\n3.3.4 Models \nSoftware system may have world representation and this is always idealized. E.g., in our lock \nsystem, built-in (as opposed to runtime sensed/ac quired) knowledge is: IF valid key entered AND \nsensing dark THEN turn the light on. \n The \nMachineDomain \n1\nThe\nRequirements\nDomain \n2\nDomain \n3Domain \n4Domain \n5\nThe \nMachineThe \nMachineDomain \n1\nThe\nRequirements\nDomain \n2\nDomain \n3Domain \n4Domain \n5\n(a)M\nachine1\nDom\nain1\nRequirement1M\nachine1M\nachine1\nDom\nain1\nRequirement1\nMachine\n3Requirement\n3\nDomain\n3\nDomain\n4\nMachine\n3\nMachine\n3Requirement\n3\nDomain\n3\nDomain\n4Machine\n2Domain\n2Requirement\n2Machine\n2Machine\n2Domain\n2Requirement\n2\nMachine\n4Domain\n5Requirement\n4\nMachine\n4Machine\n4Domain\n5Requirement\n4\n(b)\nFigure 3-24: The goal of frame decomposition is to represent a complex problem (a) as a set\nof basic problem frames (b).", "source": "Page 223", "chapter": "3"}
{"id": "252848285153-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  210 \n3.4 Specifying Goals \n \n\u201cCorrectness is clearly the prime quality. If a system do es not do what it is supposed to do, then everything \nelse about it matters little.\u201d \u2014Bertrand Meyer \nThe basic idea of goal-oriented requirements engineer ing is to start with the aggregate goal of the \nwhole system, and to refine  it by successive steps into a goal hierarchy. \nAND-OR refinements \u2026 \nProblem frames can be related to  goals. Goal-oriented approach distinguishes different kinds of \ngoal, as problem-frames approach distinguishes different problem classes. Given a problem \ndecomposition into basic frames, we can restate this as an AND-refinement of the goal hierarchy: \nto satisfy the system requirement goal, it is necessary to satisfy each individual subgoal (of each \nbasic frame). \nWhen programmed, the program \u201cknows\u201d its goals implicitly  rather than explicitly , so it cannot \ntell those to another component. This ability to tell  its goals to others is important in autonomic \ncomputing, as will be seen in Section 9.3. \nState the goal as follows: given the states A=arme d, B=lightOff, C=user positively identified, \nD=daylight", "source": "Page 224", "chapter": "3"}
{"id": "252848285153-1", "text": "D=daylight \n(Goal is the equilibrium state to be reached after a perturbation.) Initial state: A \uf0d9B, goal state: \uf0d8A\uf0d9\uf0d8B. \nPossible actions: \uf061\u2014setArmed; \uf061\n\uf02d1\u2014setDisarmed; \uf062\u2014setLit; \uf062\uf02d1\u2014setUnlit \nPreconditions for \uf061\uf02d1: C; for \uf062: D \nWe need to make a plan to achieve \uf0d8A\uf0d9\uf0d8B by applying the permitted actions. \n \nProgram goals, see also \u201cfuzzy\u201d goals for multi-fidelity algorithms, MFAs, [Satyanarayanan & \nNarayanan, 2001]. http://www.cs.yale.edu/homes/elkin/ (Michael Elkin) \nThe survey \u201cDistributed approximation,\u201d by Michael Elkin. ACM SIGACT News , vol. 36, no. 1, \n(Whole Number 134), March 2005. http://theory.l cs.mit.edu/~rajsbaum/sigactNewsDC.html \nThe purpose of this formal representation is not to  automatically build a program; rather, it is to \nbe able to establish that a program meets its specification.", "source": "Page 224", "chapter": "3"}
{"id": "22cd8beead7f-0", "text": "Chapter 3  \uf0b7  Modeling and System Specification 211\n3.5 Summary and Bibliographical Notes \n \nThis chapter presents \u2026 \n People often complain about software quality (for example Microsoft products). The issue of \nsoftware quality is complex one. Software a ppeal depends on what it does (functionality), how \ngood it is (quality), and what it costs (economy). Di fferent people put different weights on each of \nthese, but in the end all three matter. Microsoft figured that the functionality they deliver is \nbeyond the reach of smeller software vendors who cannot produce it at a competitive price, so \nthey emphasized functionality. It paid off. It app ears that the market has been more interested in \nlow-cost, feature-laden products than reliability (fo r the mass market kind of products). It worked \nin the market, thus far, which is the ultimate test . Whether this strategy will continue to work, we \ndo not know. But the tradeoff between quality / fu nctionality / economy will always be present. \nAlso see the virtues if the \u201cgood enough\u201d principle extolled here: \nS. Baker, \u201cWhy \u2018good enough\u2019 is good enough: Imperfect technology greases innovation\u2014and", "source": "Page 225", "chapter": "3"}
{"id": "22cd8beead7f-1", "text": "the whole marketplace,\u201d Business Week , no. 4048, p. 48, September 3, 2007. Online at:  \nhttp://www.businessweek .com/magazine/conten t/07_36/b4048048.htm   \nComment \nFormal specifications have had lack of success, usually blamed on non-specialists finding such \nspecifications difficult to understand, see e.g., [S ommerville, 2004, p. 116; Larman, 2005, p. 65]. \nThe usual rationale given for a voiding rigorous, mathematically driven program development is \nthe time-to-market argument\u2014rigor takes too much  time and that cannot be  afforded in today\u2019s \nworld. We are also told that such things make  sense for developing safety-critical applications, \nsuch as hospital systems, or airplane controls , but not for everyday u se. Thanks to this \nphilosophy, we can all enjoy Intern et viruses, worms, spam, spyware, and many other inventions \nthat are thriving on lousy programs. \nThe problem, software ends up being used for pur poses that it was not intended for. Many of-the-\nshelf software products end up being used in mi ssion-critical operations, regardless of the fact \nthat they lack robustness necessar y to support such operations.", "source": "Page 225", "chapter": "3"}
{"id": "22cd8beead7f-2", "text": "that they lack robustness necessar y to support such operations. \nIt is worth noticing that often we don\u2019t wear wh at we think is \u201ccool\u201d\u2014we often wear what the \n\u201ctrend setters\u201d in our social circle, or society in  general, wear [Gladwell, 2000]. But, as Petroski \n[1992], echoing Raymond Loewy, observes, it has to be MAYA\u2014most advanced, yet acceptable. \nSo, if hackers let the word out that some technique  is cool, it shall become cool for the masses of \nprogrammers. \nBibliographical Notes \nMuch of this chapter is directly inspired by  the work of Michael Jackson [1995; 2001]. I have \ntried to retell it in a different way and relate it to other developments in software engineering. I", "source": "Page 225", "chapter": "3"}
{"id": "4632327efe20-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  212 \nhope I have not distorted his message in the pr ocess. In any case, the reader would do well by \nconsulting the original sources [Jackson, 1995; 2001]. \nThis chapter requires some background in discr ete mathematics. I tried to provide a brief \noverview, but the reader may need  to check a more comprehensive source. [Rosen, 2007] is an \nexcellent introduction to discrete mathematics and includes very nice pieces on logic and finite \nstate machines. \n[Guttenplan, 1986] [Woodcock & Loomes, 1988] \nJ. P. Bowen and M. G. Hinchey, \u201cTen comma ndments of formal methods\u2026 ten years later,\u201d \nIEEE Computer , vol. 39, no. 1, pp. 40-48, January 2006. \n \nThe original sources for problem frames are [Jacks on, 1995; 2001]. The reader can also find a \ngreat deal of useful information online at: http://www.ferg.org/pfa/  . \n \nProblem 3.7: Elevator Control given below is based on the classical elevator problem, which first", "source": "Page 226", "chapter": "3"}
{"id": "4632327efe20-1", "text": "appeared in Donald Knuth\u2019s book, The Art of Computer Programming: Vol. 1, Fundamental \nAlgorithms . It is based on the single elevator in the mathematics building at the California \nInstitute of Technology, where Knuth was a gradua te student. Knuth used the elevator problem to \nillustrate co-routines in an imaginary computing machine, called MIX. A detailed discussion of \nsoftware engineering issues in elevator control is available in [Jackson, 2001]. \n \nProblems \n \nProblem 3.1 \n \nProblem 3.2 \nConsider a system consisting of a button and two light bulbs, as shown in the figure. Assume that \nthe system starts from the initial state where both bulbs are turned off. When the button is pressed \nthe first time, one of the bulbs will be lit and th e other remains unlit. When the button is pressed \nthe second time, the bulb which is currently lit will be turned off and the other bulb will be lit. \nWhen the button is pressed the third time, both bulbs will be lit. When the button is pressed the fourth time, both bulbs will be turned off. For the subsequent button presses, the cycle is repeated.", "source": "Page 226", "chapter": "3"}
{"id": "75dd86a89981-0", "text": "Chapter 3  \uf0b7  Modeling and System Specification 213\nName and describe all the states and events in th is system. Draw the UML state diagram and be \ncareful to use the correct symbols. \nProblem 3.3 \nConsider the auto-locking feature of the case st udy of the home access-control system. In Section \n2.4 this feature is described via use cases (a timer is started when  the doors are unlocked and if it \ncounts down to zero, the doors will be automatically locked). \nSuppose now that you wish to represent the auto-locking subsystem using UML state diagrams. \nThe first step is to identify the states and events relevant for the auto-locking subsystem. Do the \nfollowing: \n(a) Name and describe the states that adequate ly represent the auto-locking subsystem. \n(b) Name and describe the events that cause the auto-locking subsystem to transition between \nthe states. \n(Note: You do not need to use UML notation to draw a state diagram, just focus on identifying \nthe states and events.) \nProblem 3.4 \nSuppose that in the virtual mitosis lab (described  at the book website, given in Preface), you are \nto develop a finite state machin e to control the mechanics of th e mitosis process. Write down the", "source": "Page 227", "chapter": "3"}
{"id": "75dd86a89981-1", "text": "state transition table and show the state diagram. See also Problem 2.21. \nProblem 3.5 \nConsider the grocery inventory management sy stem that uses Radio Frequency Identification \n(RFID), described in Problem 2.15 (Chapter 2). Identify the two most important entities of the \nsoftware-to-be and represent their states using UML state diagrams. Do the following: \n(a) List and describe the states that adequate ly represent the two most important entities \n(b) List and describe the events that cause th e entities to transition between the states \n(c) Draw the UML state diagrams for both entities \nNote: Consider all the requirements REQ1 \u2013 REQ7. \nProblem 3.6", "source": "Page 227", "chapter": "3"}
{"id": "48318107bf6a-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  214 \nProblem 3.7: Elevator Control \nConsider developing a software system to control an elevator in a building. Assume that there \nwill be a button at each floor to summon the elevat or, and a set of buttons inside the elevator \ncar\u2014one button per floor to direct the elevator to the corresponding floor. Pressing a button will be detected as a pulse (i.e., it does not matter if  the user keeps holding the button pressed). When \npressed, the button is illuminated. At each floor, ther e will be a floor sensor that is \u201con\u201d when the \nelevator car is within 10 cm of the rest position at the floor. \nThere will be an information panel above the elevator doors on each floor, to show waiting \npeople where the elevator car is at any time, so that they will know how long they can expect to \nwait until it arrives. \nThe information panels will have two lamps re presenting each floor (see the figure below). A \nsquare lamp indicates that the car is at the co rresponding floor, and a round lamp indicates that \nthere is a request outstanding for the elevator to  visit the corresponding floor. In addition, there \nwill be two arrow-shaped lamps to indicate the cu rrent direction of travel. For example, in the", "source": "Page 228", "chapter": "3"}
{"id": "48318107bf6a-1", "text": "figure below, the panel indicates that the elevator car  is currently on the fifth floor, going up, and \nthere are outstanding requests to visit the lobby, third, fourth, and sixth floor. \nAfter the elevator visits a requested floor, th e corresponding lamp on all information panels \nshould be turned off. Also, the button that summ oned the elevator to the floor should be turned \noff. \nLet us assume that the outstanding requests are serv ed so that the elevator will first visit all the \nrequested floors in the direction to which it went fi rst after the idle state. After this, it will serve \nthe requests in the opposite direction, if any. Wh en the elevator has no requests, it remains at its \ncurrent floor with its doors closed. \nL234567\nDownUpL234567\nDownUpL234567\nDownUp\nL 5 234 67\nDown UpRequests outstanding to visit the floors\nDirection of travelFloor where the elevator currently is\nButton to summon the elevator to this floor\n \nSuppose that you already have designed UML inter action and class diagrams. Your system will \nexecute in a single thread, and your  design includes the following classes: \nElevatorMain : This class runs an infinite loop. Du ring each iteration it checks the physical", "source": "Page 228", "chapter": "3"}
{"id": "48318107bf6a-2", "text": "buttons whether any has been pressed and reads the statuses of all the floor sensors. If a \nbutton has been pressed or the elevator car arrived/departed a floor, it calls the appropriate classes to do their work, and then starts a new iteration. \nCarControl : This class controls the movement of the elevator car. \nThis class has the attribute requests  that lists the outstanding requests for the elevator to \nvisit the corresponding floors. It also has three operations:  \naddRequest(floorNum : int)  adds a request to visit the floor floorNum ;", "source": "Page 228", "chapter": "3"}
{"id": "d273f17c8950-0", "text": "Chapter 3  \uf0b7  Modeling and System Specification 215\nstopAt(floorNum : int)  requests the object to stop the car at the floor floorNum . \nThis operation calls DoorControl.operateDoors()  to open the doors, let the \npassengers in or out, and close the doors.  \nWhen operateDoors()  returns, the CarControl  object takes this as a signal that it is \nsafe to start moving the car from the current fl oor (in case there are no pending requests, the \ncar remains at the current floor). \nInformationPanel : This class controls the display of information on the elevator \ninformation panel. It also has the attribute requests  and these operations:  \narrivedAt(floorNum : int)  informs the software object that the car has arrived at \nthe floor floorNum .  \ndeparted()  which informs the object that the car has departed from the current floor. \nOutsideButton : This class represents the buttons located outside the elevator on each floor \nthat serve to summon the elevator. The associated physical button should be illuminated \nwhen pressed and turned off afte r the car visits the floor.  \nThis class has the attribute illuminated  that indicates whether the button was pressed. It \nalso has two operations:  \nilluminate()  requests the object to illuminate the associated physical button (because it", "source": "Page 229", "chapter": "3"}
{"id": "d273f17c8950-1", "text": "illuminate()  requests the object to illuminate the associated physical button (because it \nwas pressed);  \nturnOff() requests the object to turn off the associated physical button (because the \nelevator car has arrived at this floor). \nInsideButton : This class represents the buttons located inside the elevator car that serve to \ndirect the elevator to the corresponding floor. The associated physical button should be \nilluminated when pressed and turned off after the car visits the floor . It has the same attributes \nand operations as the class OutsideButton . \nDoorControl : This class controls opening and closi ng of the elevator doors on each floor. \nThis class has the Boolean attribute doorsOpen  that is set true  when the associated doors \nare open and false  otherwise. It also has the operation:  \noperateDoors() : void  tells the software object when to open the doors. This \noperation sets a timer for a given amount of tim e to let the passengers in or out; after the \ntimer expires, the operation closes the doors automatically and returns. \nNote that some classes may have multiple instan ces (software objects), because there are multiple \ncorresponding physical objects. For example, ther e is an information panel, outside button, and \ndoors at each floor. In addition, we do not have a special class to represent a floor sensor that", "source": "Page 229", "chapter": "3"}
{"id": "d273f17c8950-2", "text": "senses when the elevator car is in or near the r est position at the floor. The reason for this choice \nis that this system is single-threaded and the ElevatorMain  object will notify the interested \nobjects about the floor sensor status, so there is  no reason to keep this information in a class \ndedicated solely for this purpose. \nDraw the interaction and class diagrams co rresponding to the design described above. \nProblem 3.8 \nConsider the class diagram for an online auction website given in Figure 2-48, and the system as \ndescribed in Problem 2.31 for which the solution is given on the back of this text. Suppose that \nyou want to specify a contract for the operation closeAuction(itemName : String)  of", "source": "Page 229", "chapter": "3"}
{"id": "02ce859c7080-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  216 \nthe class Controller . To close auction on an item means that no new bids will be accepted; \nthe item is offered to the current highest bidder. If this bidder fails to pay within the specified \ntime interval, the auction may be reopened. \nYou want to specify the preconditions  that the auction for the item itemName  is currently open \nand the item is not reserved. The postconditions  should state that the au ction is closed, and the \nitem is reserved to the name of the highest bidder,  given that there was at least one bidder. Write \nthis contract as statements in OCL. \nYou may add more classes, attributes, or operations, if you feel that this is necessary to solve the \nproblem, provided that you justify your modification. \nProblem 3.9 \n \nProblem 3.10 \n \nProblem 3.11 \nConsider the automatic patient monitoring sy stem described in Problem 2.3. Solve the \nfollowing: \n(a) Identify the problem frames and describ e the frame concerns for each frame. \n(b) Draw the state diagram for different subsystems (problem frames). Define each \nstate and event in the diagrams. \n(c) Explain if the system needs to behave di fferently when it reports abnormal vital", "source": "Page 230", "chapter": "3"}
{"id": "02ce859c7080-1", "text": "(c) Explain if the system needs to behave di fferently when it reports abnormal vital \nsigns or device failures. If yes, incorporate this behavior into your state diagrams. \n \nProblem 3.12 \nDerive the domain model for the patient monitoring system from Problem 3.11.  \n(a) Write a definition for each concept in your domain model. \n(b) Write a definition for each attribute and association in your domain model. \n(c) Draw the domain model. \n(d) Indicate the types of concepts, such as \u00abboundary\u00bb, \u00abcontrol\u00bb, or \u00abentity\u00bb. \nNote that you are not asked to derive the u se cases for this system (see Problem 2.14). The \ndescription of the system behavior that you will generate in the solutio n of Problem 3.11 should \nsuffice for deriving its domain model. \nProblem 3.13", "source": "Page 230", "chapter": "3"}
{"id": "3c5447f661c7-0", "text": "217 Contents \n4.1 Fundamentals of Measurement Theory \n4.1.1 Measurement Theory \n4.1.2  4.1.3  \n4.2 What to Measure? \n4.2.1 Cyclomatic Complexity 4.2.2 Use Case Points \n4.2.3  \n4.2.4  \n4.3 Measuring Module Cohesion \n4.3.1 Internal Cohesion or Syntactic Cohesion \n4.3.2 Semantic Cohesion 4.3.3  \n4.3.4  \n4.2.3  \n4.4 Psychological Complexity \n4.4.1 Algorithmic Information Content 4.4.2  \n4.4.3  \n4.4.4  \n4.5  \n4.5.1  4.5.2  4.5.3  \n4.5.4 \n \n4.6 Summary and Bibliographical Notes \nProblems  \nChapter 4  \nSoftware Measurement and Estimation \n \n \n\u201cWhat you measure improves.\u201d \n\u2014Donald Rumsfeld, Known and Unknown: A Memoir  \nMeasurement is a process by which numbers or symbols are \nassigned to properties of objects. To have meaningful assignment of numbers, it must be governed by rules or theory", "source": "Page 231", "chapter": "4"}
{"id": "3c5447f661c7-1", "text": "(or, model). There are many properties of software that can be \nmeasured. Similarities can be drawn with physical objects: we can measure height, width, weight, chemical composition, \netc., properties of physical objects. The numbers obtained \nthrough such measurement ha ve little value by themselves\u2014\ntheir key value is relative to something we want to do with \nthose objects. For example, we may want to know the weight \nso we can decide what it takes to lift an object. Or, knowing physical dimensions helps us decide whether the object will fit \ninto a certain space. Similarl y, software measurement is \nusually done with purpose. A common purpose is for management decision making. For example, the project \nmanager would like to be able to estimate the development \ncost or the time it will take to  develop and deliver a software \nproduct. Similar to how knowing the object weight helps us to \ndecide what it takes to lift it, the hope is that by measuring \ncertain software properties we will be able to estimate the necessary development effort. \nUses of software measurements: \n\uf0b7 Estimation of cost and effort (preferably early in the lifecycle) \n\uf0b7 Feedback to improve the quality of design and implementation \nObviously, once a software product is already co mpleted, we know how much effort it took to", "source": "Page 231", "chapter": "4"}
{"id": "3c5447f661c7-2", "text": "complete it. The invested effort is directly know n, without the need for inferring it indirectly via \nsome other properties of the software. However,  that is too late for management decisions. \nManagement decisions require knowing (or estimating) effort before  we start with the \ndevelopment, or at least early enough  in the process, so we can meaningfully negotiate the budget \nand delivery terms with the customer.", "source": "Page 231", "chapter": "4"}
{"id": "fad86e0aa1b9-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  218 \nTherefore, it is important to understand correctly what measurement is about: \nMeasured property  \uf0ae [ model for estimation ] \uf0ae Estimated property \n(e.g., number of functional features)   (e.g., development effort required) \nNotice also that we are trying to infer properti es of one entity from properties of another entity: \nthe entity the properties of which are measured is software  (design documents or code) and the \nentity the properties of which are estimated is development process  (people\u2019s effort). The \n\u201cestimation model\u201d is usually based on empirical evidence; that is, it is derived based on observations of past projects. For past projects,  both software and process characteristics are \nknown. From this, we can try to calculate th e correlation of, say, the number of functional \nfeatures to, say, the development effort required.  If correlation is high across a range of values, \nwe can infer that the number of functional featur es is a good predictor of the development effort \nrequired. Unfortunately, we know that correlation does not equal causation. A causal model , \nwhich not only establishes a relationship, but also explains why, would be better, if possible to \nhave. \nFeedback to the developer is based on the know ledge of \u201cgood\u201d ranges for software modules and", "source": "Page 232", "chapter": "4"}
{"id": "fad86e0aa1b9-1", "text": "systems: if the measured attributes are outside of \u201cgood\u201d ranges, the module needs to be redesigned. It has been reported  based on many observations that maintenance costs run to about \n70 % of all lifetime costs of software products. Hence, good design can not only speed up the \ninitial development, but can significantly affect the maintenance costs. \nMost commonly measured characteristics of softwa re modules and systems are related to its size \nand complexity. Several software characteristics were mentioned in Section 2.5, such as coupling \nand cohesion, and it was argued that \u201cgood desi gns\u201d are characterized by \u201clow coupling\u201d and \n\u201chigh cohesion.\u201d In this chapter I will presen t some techniques for measuring coupling and \ncohesion and quantifying the quality of software  design and implementation. A ubiquitous size \nmeasure is the number of lines of code (LOC). Complexity is readily observed as an important \ncharacteristic of software products, but it is difficu lt to operationalize complexity so that it can be \nmeasured. \ntaking a well-reasoned, thoughtful approach  that goes beyond the simplest correlative \nrelationships between the most s uperficial details of a problem. \nAlthough it is easy to agree that more complex softwa re is more difficult to develop and maintain,", "source": "Page 232", "chapter": "4"}
{"id": "fad86e0aa1b9-2", "text": "it is difficult to operationalize complexity so that it can be measured. The reader may already be familiar with computational complexity  measure big O (or big Oh), O(n). O(n) measures software \ncomplexity from the machine\u2019s viewpoint in terms of how the size of the input data affects an \nalgorithm\u2019s usage of computational resources (usua lly running time or memory). However, the \nkind of complexity measure that we need in software engineering should measure complexity \nform the viewpoint of human developers. \n \n4.1 Fundamentals of Measurement Theory", "source": "Page 232", "chapter": "4"}
{"id": "a7440c62c455-0", "text": "Chapter 4 \uf0b7 Software Measurement and Estimation 219\n\u201cIt is better to be roughly right than precisely wrong.\u201d \u2014John Maynard Keynes \nThe Hawthorne effect - an increase in worker  productivity produced by the psychological \nstimulus of being singled out and made to feel important. The Hawthorne effect describes a \ntemporary change to behavior or performance in  response to a change in the environmental \nconditions. This change is typica lly an improvement. Others have  broadened this definition to \nmean that people\u2019s behavior and performance ch ange following any new or increased attention. \nIndividual behaviors may be altered because they know they are being studied was demonstrated \nin a research project (1927\u20131932) of the Hawt horne Works plant of the Western Electric \nCompany in Cicero, Illinois. \nInitial improvement in a process of production caused by the obtrusive observation of that \nprocess. The effect was first noticed in the Hawthorne plant of Western Electric. Production \nincreased not as a consequence of actual changes in  working conditions introduced by the plant's \nmanagement but because management demonstrated interest in such improvements (related: self-\nfulfilling hypothesis). \n4.1.1 Measurement Theory \nMeasurement theory is a branch of applied mathematics. The specific theory we use is called the representational \ntheory of measurement . It formalizes our intuitions about", "source": "Page 233", "chapter": "4"}
{"id": "a7440c62c455-1", "text": "theory of measurement . It formalizes our intuitions about \nthe way the world actually works. \nMeasurement theory allows us to use statis tics and probability to understand quantitatively the \npossible variances, ranges, and types of errors in the data. \nMeasurement Scale \nIn measurement theory, we have five types of scales : nominal, ordinal, interval, ratio, and \nabsolute. \nIn nominal scale  we can group subjects into different categories. For example, we designate the \nweather condition as \u201csunny,\u201d \u201ccloudy,\u201d \u201crainy,\u201d or \u201csnowy.\u201d The two key requirements for the \ncategories are: jointly exhaustive and mutually ex clusive. Mutually excl usive means a measured \nattribute can be classified into one and only one  category. Jointly exhaustive means that all \ncategories together should cover all possible values of the attribute. If the measured attribute has \nmore categories than we are interested in, an \u201cother\u201d category can be introduced to make the \ncategories jointly exhaustive. Provided that cat egories are jointly exhaustive and mutually \nexclusive, we have the minimal conditions necessary for the application of statistical analysis. For \nexample, we may want to compare the values of software attributes such as defect rate, cycle \ntime, and requirements defects across the di fferent categories of software products.", "source": "Page 233", "chapter": "4"}
{"id": "a7440c62c455-2", "text": "time, and requirements defects across the di fferent categories of software products. \nOrdinal scale  refers to the measurement operations through which the subjects can be compared \nin order. An example ordinal scale is: \u201cbad,\u201d \u201c good,\u201d and \u201cexcellent,\u201d or \u201cstar\u201d ratings used for \nproducts or services on the Web. An ordinal scale is asymmetric in the sense that if A > B is true \nthen B > A is false. It has the transitivity property in that if A > B and B > C, then A > C. Although \nordinal scale orders subjects by the magnitude of  the measured property, it offers no information \n2345678012345923456780123459", "source": "Page 233", "chapter": "4"}
{"id": "d0d1e09e4203-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  220 \nabout the relative magnitude of the difference between subjects. For example, we only know that \n\u201cexcellent\u201d is better than \u201cgood,\u201d and \u201cgood\u201d is better than \u201cbad .\u201d However, we cannot compare \nthat the relative differences between the exce llent-good and good-bad pairs. A commonly used \nordinal scale is an n-point Likert scale, such as the Likert five-point, seven-point, or ten-point \nscales. For example, a five-point Likert scale fo r rating books or movies may assign the following \nvalues: 1 = \u201cHated It,\u201d 2 = \u201cDidn\u2019t Like It,\u201d 3 = \u201cNeutral,\u201d 4 = \u201cLiked It,\u201d and 5 = \u201cLoved It.\u201d \nWe know only that 5 > 4, 4 > 3, 5 > 2, etc., but we cannot say how much greater is 5 than 4. Nor can we say that the difference between categories 5 and 4 is equal to that between 3 and 2. This \nimplies that we cannot use arithmetic operations such as addition, subtraction, multiplication and", "source": "Page 234", "chapter": "4"}
{"id": "d0d1e09e4203-1", "text": "implies that we cannot use arithmetic operations such as addition, subtraction, multiplication and \ndivision. Nonetheless, the assumption of equal distance is often made and the average rating reported (e.g., product rating at Amazon. com uses fractional values, such as 3.7 \uf020stars). \nInterval scale  indicates the exact differences between measurement points. An interval scale \nrequires a well-defined, fixed unit of measurement  that can be agreed on as a common standard \nand that is repeatable. A good example is a trad itional temperature scale (centigrade or Fahrenheit \nscales). Although the zero point is defined in both scales, it is arbitrary and has no meaning. Thus \nwe can say that the difference between th e average temperature in Florida, say 80 \uf0b0F, and the \naverage temperature in Alaska, say 20 \uf0b0F, is 60\uf0b0F, but we do not say that 80 \uf0b0F is four times as hot \nas 20\uf0b0F. The arithmetic operations of addition and subtraction can be applied to interval scale \ndata.   \nRatio scale  is an interval scale for which an absolute  or nonarbitrary zero point can be located. \nAbsolute or true zero means that the zero poi nt represents the absence of the property being", "source": "Page 234", "chapter": "4"}
{"id": "d0d1e09e4203-2", "text": "Absolute or true zero means that the zero poi nt represents the absence of the property being \nmeasured (e.g., no money, no behavior, none corr ect). Examples are mass, temperature in degrees \nKelvin, length, and time interval. Ratio scale is  the highest level of measurement and all \narithmetic operations can be applied to it, including division and multiplication. \nFor interval and ratio scales, the measurement can be expressed in both integer and noninteger \ndata. Integer data are usually gi ven in terms of frequency counts (e.g., the number of defects that \ncould be encountered during the testing phase). \nAbsolute scale  is used when there is only one way to measure a property. It is independent of the \nphysical properties of any specific substance. In practice, values on an absolute scale are usually \n(if not always) obtained by counting. An example is counting entities, such as chairs in a room. \nSome Basic Measures \nRatio \nProportion \nPercentage Rate \nSix Sigma", "source": "Page 234", "chapter": "4"}
{"id": "e5e5e4cf0264-0", "text": "Chapter 4 \uf0b7 Software Measurement and Estimation 221\n4.2 What to Measure? \n \nGiven a software artifact (design document or  source code), generally we can measure \n1. Attributes of any representation  or description  of a problem or a solution. Two main \ncategories of representations are structure vs. behavior. \n2. Attributes of the development process  or methodology . \nMeasured aspect: \uf0b7 quantity (size) \n\uf0b7 complexity \nIf the purpose of software measurement is estimati on of cost and effort, we would like to measure \nat an early stage in the software life-cycle. Typi cally a budget allocation is set at an early phase of \na procurement process and a decision on contract price made on these budget constraints and \uf084\uf085\uf086\n\uf087\uf088\n\uf083\uf082\uf081\n\uf084\uf085\uf086\n\uf087\uf088\n\uf083\uf082\uf081\nFigure 4-1: Issues with subjective size measures (compare to Figure 1-10). Left side of the\nhedge as seen by a pessimist; right side seen by an optimist.", "source": "Page 235", "chapter": "4"}
{"id": "1dd15ae4dfa0-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  222 \nsuppliers\u2019 tender responses. Consequently, the functional decomposition of the planned system \nneeds to be at a high level, but must be of su fficient detail to flush out as many of the implied \nrequirements and hidden complexities as possible, and as early as possible. In the ideal world this \nwould be a full and detailed decomposition of the use cases, but this is impractical during the \nestimation process, because estimates need to  be produced within tight time frames. \nFigure 4-1 \n \n4.2.1 Use Case Points \nIntuitively, projects with many complicated requ irements take more effort to design and \nimplement than projects with few simple requirement s. In addition, the effort depends not only on \ninherent difficulty or complexity of the problem , but also on what tools the developers employ \nand how skilled the developers are. The factors that determine the time to complete a project \ninclude: \n\uf0b7 Functional requirements : These are often represented with use cases (Section 2.3). The \ncomplexity of use cases, in turn, depends on the number and complexity of the actors and the number of steps (transactions) to execute each use case. \n\uf0b7 Nonfunctional requirements : These describe the system\u2019s nonfunctional properties,", "source": "Page 236", "chapter": "4"}
{"id": "1dd15ae4dfa0-1", "text": "\uf0b7 Nonfunctional requirements : These describe the system\u2019s nonfunctional properties, \nknown as FURPS+ (see Section 2.2.1), such as security, usability, and performance. \nThese are also known as the \u201ctechnical complexity factors.\u201d \n\uf0b7 Environmental factors : Various factors such as the experience and knowledge of the \ndevelopment team, and how sophisticated tool s they will be using for the development. \nAn estimation method that took into account the above factors early in a project\u2019s life cycle, and \nproduced a reasonable accurate estimate, say within 20% of the actual completion time, would be \nvery helpful for project scheduling, cost, and resource allocation. \nBecause use cases are developed at the earliest or notional stages of system design, they afford \nopportunities to understand the scope of a project  early in the software life-cycle. The Use Case \nPoints (UCP)  method provides the ability to estimate the person-hours a software project requires \nbased on its use cases. The UCP method analyzes the use case actors, scenarios, nonfunctional \nrequirements, and environmental factors and abstracts them into an equation. Detailed use case \ndescriptions (Section 2.3.3) must be derived be fore the UCP method can be applied. The UCP", "source": "Page 236", "chapter": "4"}
{"id": "1dd15ae4dfa0-2", "text": "method cannot be applied to sketchy use cases. As discussed in Section 2.3.1, we can apply user \nstory points (described in Section 2.2.3) for project  effort estimation at this very early stage. \nThe formula for calculating UCP is composed of three variables: \n1. Unadjusted Use Case Points (UUCP) , which measures the complexity of the functional \nrequirements \n2. The Technical Complexity Factor (TCF) , which measures the complexity of the \nnonfunctional requirements \n3. The Environment Complexity Factor (ECF) , which assesses the development team\u2019s \nexperience and their development environment", "source": "Page 236", "chapter": "4"}
{"id": "44c2c234e82d-0", "text": "Chapter 4 \uf0b7 Software Measurement and Estimation 223\nEach variable is defined and computed separatel y using weighted values, subjective values, and \nconstraining constants. The subjective values are determined by the development team based on \ntheir perception of the project\u2019s technical comple xity and the team\u2019s efficiency. Here is the \nequation: \nUCP  = UUCP  \uf020\uf0b4 TCF \uf0b4 ECF    ( 4 . 1 )  \nUnadjusted Use Case Points (UUCPs) are computed as a sum of these two components: \n1. The Unadjusted Actor Weight (UAW) , based on the combined complexity of all the actors \nin all the use cases. \n2. The Unadjusted Use Case Weight (UUCW) , based on the total number of activities (or \nsteps) contained in all the use case scenarios. \nThe computation of these components is described next. \nUnadjusted Actor Weight (UAW) \nAn actor in a use case might be a person, another program, a piece of hardware, etc. The weight \nfor each actor depends on how sophisticated is the interface between the actor and the system. \nSome actors, such as a user working with a text -based command-line interface, have very simple", "source": "Page 237", "chapter": "4"}
{"id": "44c2c234e82d-1", "text": "needs and increase the complexity of a use c ase only slightly. Other actors, such as a user \nworking with a highly interactive graphical user interface, have a much more significant impact \non the effort to develop a use case. To capture these differences, each actor in the system is \nclassified as simple, average, or complex, and is  assigned a weight as shown in Table 4-1. This \nscale for rating actor complexity was devised by expert developers based on their experience. \nNotice that this is an ordinal scale  (Section\uf0204.1.1). You can think of this as a scale for \u201cstar \nrating,\u201d similar to \u201cstar ratings\u201d of books (Ama zon.com), films (IMDb.c om), or restaurants \n(yelp.com). Your task is, using this scale, to assign \u201cstar ratings\u201d to all actors in your system. In \nour case, we can assign one, two, or three \u201cstars\u201d to actors, corresponding to \u201cSimple,\u201d \n\u201cAverage,\u201d or \u201cComplex\u201d actors, respectively. Table 4-2 shows my ratings for the actors in the case study of home access control, for which the actors are described in Section 2.3.1. The UAW \nis calculated by totaling the number of actors in each category, multiplying each total by its", "source": "Page 237", "chapter": "4"}
{"id": "44c2c234e82d-2", "text": "is calculated by totaling the number of actors in each category, multiplying each total by its \nspecified weighting factor, and then adding the products we obtain: Table 4-1: Actor classification and associated weights. \nActor type Description of how to recognize the actor type Weight\nSimple The actor is another system which interacts with our system through \na defined application programming interface (API). 1 \nAverage The actor is a person interacting th rough a text-based user interface, \nor another system interacting through a protocol, such as a network \ncommunication protocol. 2 \nComplex The actor is a person interacting via a graphical user interface. 3", "source": "Page 237", "chapter": "4"}
{"id": "9184ac11999f-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  224 \n       UAW (home access) = 5 \uf0b4 Simple \uf02b 2 \uf0b4 Average \uf02b 1 \uf0b4 Complex = 5 \uf0b41 \uf02b 2\uf0b42 \uf02b 1\uf0b43 = 12 \nUnadjusted Use Case Weight (UUCW) \nThe UUCW is derived from the number of use cases in three categories: simple, average, \nand complex (see Table 4-3). Each use case is categorized based on the number of steps \n(or, transactions) within its event flow, including both the main success scenario and \nalternative scenarios (extensions). \nThe number of steps in a scenario affects the est imate. A large number of steps in a use case \nscenario will bias the UUCW toward complexity and increase the UCPs. A small number of steps \nwill bias the UUCW toward simplicity and decreas e the UCPs. Sometimes, a large number of \nsteps can be reduced without affecting the business process. \nThe UUCW is calculated by tallying the number of use cases in each category, multiplying each \ntotal by its specified weighting factor, and then adding the products. For example, Table 4-4 computes the UUCW for the sample case study.", "source": "Page 238", "chapter": "4"}
{"id": "9184ac11999f-1", "text": "There is a controversy on how to count alternate scenarios (extensions). Initially, it was suggested \nto ignore all scenarios except th e main success scenario. The current view is that extensions \nrepresent a significant amount of work and need to be included in effort estimation. However, it is \nnot agreed upon how to do the inclusion. The problem is that you cannot simply count the number \nof lines in an extension scenario and add tho se to the lines in th e main success scenario. Table 4-2: Actor classification for the case st udy of home access control (see Section 2.3). \nActor name Description of relevant characteristics Complexity Weight\nLandlord Landlord is interacting with the system via a graphical user \ninterface (when managing users on the central computer). Complex 3 \nTenant Tenant is interacting through a text-based user interface \n(assuming that identification is through a keypad; for \nbiometrics based identification methods Tenant would be a complex actor). Average 2 \nLockDevice LockDevice is another system which interacts with our \nsystem through a defined API. Simple 1 \nLightSwitch Same as LockDevice. Simple 1 \nAlarmBell Same as LockDevice. Simple 1 \nDatabase Database is another system interacting through a protocol. Average 2 \nTimer Same as LockDevice. Simple 1 \nPolice Our system just sends a text notification to Police. Simple 1", "source": "Page 238", "chapter": "4"}
{"id": "b70f222fce81-0", "text": "Chapter 4 \uf0b7 Software Measurement and Estimation 225\nAs seen in UC-7: AuthenticateUser (Section 2.3) , each extension starts with a result of a \ntransaction, rather than a new transaction itself.  For example, extension 2a (\u201cTenant/Landlord \nenters an invalid identification key\u201d) is the resu lt of the transaction described by step 2 of the \nmain success scenario (\u201cTenant/Landlord suppli es an identification key\u201d). So, item 2a in the \nextensions section of UC-7: AuthenticateUser is not  counted. The same, of course, is true for 2b, \n2c, and 3a. The transaction count for the use case in  UC-7: AuthenticateUser is then ten. You may \nwant to count 2b1 and 2b2 only once but that is more  effort than is worthwhile, and they may be \nseparate transactions sharing common text in the use case. \nAnother mechanism for measuring use case comple xity is counting the concepts obtained by \ndomain modeling (Section 2.4). Of course, this assu mes that the domain model is already derived \nat the time the estimate is being made. The concep ts can be used in place of transactions once it", "source": "Page 239", "chapter": "4"}
{"id": "b70f222fce81-1", "text": "has been determined which concepts model a sp ecific use case. As indicated in Table 4-3, a \nsimple use case is implemented by 5 or fewer c oncepts, an average use cas e by 5 to 10 concepts, \nand a complex use case by more than 10 concepts. The weights are as before. Each type of use \ncase is then multiplied by the weighting factor, a nd the products are added up to get the UUCW. \nThe UUCW is calculated by tallying the use cases in each category, multiplying each count by its \nspecified weighting factor (Table 4- 3), and then adding the products: \n     UUCW (home access) = 1 \uf0b4 Simple \uf02b 5 \uf0b4 Average \uf02b 2 \uf0b4 Complex = 1 \uf0b45 \uf02b 5\uf0b410 \uf02b 2\uf0b415 = 85 \nThe UUCP is computed by adding the UAW and the UUCW. Based on the scores in Table 4-2 \nand Table 4-4, the UUCP for our case study project is UUCP  = UAW  + UUCW  = 12 + 85 = 97. \nThe UUCP gives the unadjusted size of the overall system, unadjusted because it does not", "source": "Page 239", "chapter": "4"}
{"id": "b70f222fce81-2", "text": "account for the nonfunctional requirements (TCFs) and the environmental factors (ECFs). Table 4-3: Use case weights based on the number of transactions. \nUse case category Description of how to  recognize the use-case category Weight\nSimple Simple user interface. Up to one participating actor (plus \ninitiating actor). Number of st eps for the success scenario: \uf0a3 3. If \npresently available, its domain model includes \uf0a3 3 concepts. 5 \nAverage Moderate interface design. Two or more participating actors. \nNumber of steps for the success scenario: 4 to 7. If presently \navailable, its domain model includes between 5 and 10 concepts. 10 \nComplex Complex user interface or processing. Three or more \nparticipating actors. Number of steps for the success scenario: \n\uf0b3\uf0207. If available, its domain model includes \uf0b3\uf02010 concepts. 15", "source": "Page 239", "chapter": "4"}
{"id": "0732a9949528-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  226 \nTechnical Complexity Factor (TCF)\u2014Nonfunctional \nRequirements \nThirteen standard technical factors were identifie d (by expert developers) to estimate the impact \non productivity of the nonfunctional requirements fo r the project (see Table 4-5). Each factor is \nweighted according to its relative impact. \nThe development team should assess the perceive d complexity of each technical factor from \nTable 4-5 in the context of their project. Based on their assessment, they assign another \u201cstar \nrating,\u201d a perceived complexity  value between zero and five. The perceived complexity value \nreflects the team\u2019s subjective perception of how mu ch effort will be needed to satisfy a given \nnonfunctional requirement. For example, if they ar e developing a distributed system (factor T1 in \nTable 4-5), it will require more skill and time than  if developing a system that will run on a single \ncomputer. A perceived complexity value of 0 means that a technical factor is irrelevant for this project, 3 corresponds to average effort, and 5 corresponds to major effort. When in doubt, use 3. \nEach factor\u2019s weight (Table 4-5) is multiplied by its perceived complexity factor to produce the", "source": "Page 240", "chapter": "4"}
{"id": "0732a9949528-1", "text": "calculated factor. The calculated factors are summed to produce the Technical Total Factor. Table 4-6 calculates the technical complexity for the case study. \nTwo constants are used with the Technical Total Factor to produce the TCF. The constants limit \nthe impact the TCF has on the UCP equation (4.1) from a range of 0.6 (when perceived complexities are all zero) to a maximum of 1.3 (when perceived complexities are all five), see \nFigure 4-2(a). Table 4-4: Use case classification for the case study of home access control (see Section 2.3). \nUse case Description  Category Weight\nUnlock (UC-1) Simple user interface. 5 steps for the main success \nscenario. 3 participating actors (LockDevice, \nLightSwitch, and Timer). Average 10 \nLock (UC-2) \n Simple user interface. 2+3=5 steps for the all \nscenarios. 3 participating actors (LockDevice, LightSwitch, and Timer). Average 10 \nManageUsers \n(UC-3) Complex user interface. More than 7 steps for the \nmain success scenario (when counting UC-6 or UC-7). Two participating actors (Tenant, Database). Complex 15 \nViewAccessHistory", "source": "Page 240", "chapter": "4"}
{"id": "0732a9949528-2", "text": "ViewAccessHistory \n(UC-4) Complex user interface. 8 steps for the main success \nscenario. 2 participating actors (Database, Landlord). Complex 15 \nAuthenticateUser \n(UC-5) Simple user interface. 3+1=4 steps for all scenarios.  \n2 participating actors (AlarmBell, Police). Average 10 \nAddUser (UC-6) Complex user interface. 6 steps for the main success \nscenario (not counting UC-3). Two participating actors (Tenant, Database). Average 10 \nRemoveUser \n(UC-7) Complex user interface. 4 steps for the main success \nscenario (not counting UC-3). One participating actor \n(Database). Average 10 \nLogin (UC-8) Simple user interface. 2 steps for the main success \nscenario. No participating actors. Simple 5", "source": "Page 240", "chapter": "4"}
{"id": "78d02ee9d9b9-0", "text": "Chapter 4 \uf0b7 Software Measurement and Estimation 227\nTCF values less than one reduce the UCP becau se any positive value multiplied by a positive \nfraction decreases in magnitude: 100 \uf0b4 0.6 = 60 (a reduction of 40%). TCF values greater than \none increase the UCP because any positive value multiplied by a positive mixed number increases \nin magnitude: 100 \uf0b4 1.3 = 130 (an increase of 30%). The constants were determined by \ninterviews with experienced develope rs, based on their subjective estimates. \nBecause the constants limit the TCF from a range  of 0.6 to 1.3, the TCF can impact the UCP \nequation from \uf02d40% (0.6) to a maximum of \uf02b30% (1.3). The formula to compute the TCF is: \nTCF = Constant-1 \uf02b Constant-2 \uf0b4 Technical Factor Total = \uf0e5\n\uf03d\uf0d7\uf0d7\uf02b13\n12 1\nii iFW C C   (4.2) \nwhere, Table 4-5: Technical complexity factors and their weights. \nTechnical factor Description Weight\nT1 Distributed system (running on multiple machines) 2 \nT2 Performance objectives (are response time and throughput", "source": "Page 241", "chapter": "4"}
{"id": "78d02ee9d9b9-1", "text": "T2 Performance objectives (are response time and throughput \nperformance critical?) 1(\uf02a) \nT3 End-user efficiency 1 \nT4 Complex internal processing 1 \nT5 Reusable design or code 1 \nT6 Easy to install (are automa ted conversion and installation \nincluded in the system?) 0.5 \nT7 Easy to use (including operations such as backup, startup, and \nrecovery) 0.5 \nT8 Portable 2 \nT9 Easy to change (to add new features or modify existing ones) 1 \nT10 Concurrent use (by multiple users) 1 \nT11 Special security features 1 \nT12 Provides direct access for third parties (the system will be used \nfrom multiple sites in different organizations) 1 \nT13 Special user training facilities are required 1 \n(\uf02a) Some sources assign 2 as the weight fo r the performance obj ectives factor (T2). \n(a) (b)Technical Factor TotalTCF\n0\n02 0 4 0 6 0 8 00.20.40.60.811.21.4\n70 50 30 10(70, 1.3)\n(0, 0.6)\nTechnical Factor TotalTCF\n0", "source": "Page 241", "chapter": "4"}
{"id": "78d02ee9d9b9-2", "text": "(0, 0.6)\nTechnical Factor TotalTCF\n0\n02 0 4 0 6 0 8 00.20.40.60.811.21.4\n70 50 30 10(70, 1.3)\n(0, 0.6)\nEnvironmental Factor TotalECF\n0 1 02 03 04 000.811.21.4\n0.6\n0.40.2(0, 1.4)\n(32.5, 0.425)\nEnvironmental Factor TotalECF\n0 1 02 03 04 000.811.21.4\n0.6\n0.40.2(0, 1.4)\n(32.5, 0.425)\nFigure 4-2: Scaling constants for t echnical and environmental factors.", "source": "Page 241", "chapter": "4"}
{"id": "92c4062628e8-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  228 \nConstant-1 ( C1) = 0.6 \nConstant-2 ( C2) = 0.01 \nWi = weight of ith technical factor (Table 4-5) \nFi = perceived complexity of ith technical factor (Table 4-6) \nFormula (4.2) is illustrated in Figure 4-2(a). Give n the data in Table 4-6, the TCF = 0.6 + (0.01 \uf0b4 \n31) = 0.91. According to equation (4.1), this results in a reduction of the UCP by 9%. \nEnvironment Compl exity Factor (ECF) \nThe environmental factors (Table 4-7) measure th e experience level of the people on the project \nand the stability of the project. Greater experi ence will in effect reduce the UCP count, while \nlower experience will in effect increase the UCP coun t. One might wish to consider other external \nfactors, such as the available budget, company\u2019s market position, the state of the economy, etc. \nThe development team determines each factor\u2019s  perceived impact based on their perception the \nfactor has on the project\u2019s success. A value of 1 m eans the factor has a strong, negative impact for", "source": "Page 242", "chapter": "4"}
{"id": "92c4062628e8-1", "text": "the project; 3 is average; and 5 means it has a strong, positive impact. A value of zero has no \nimpact on the project\u2019s success. For factors E1-E4,  0 means no experience in the subject, 3 means \naverage, and 5 means expert. For E5, 0 means no motivation for the project, 3 means average, and \n5 means high motivation. For E6, 0 means unchanging requirements, 3 means average amount of \nchange expected, and 5 means extremely unstabl e requirements. For E7, 0 means no part-time \ntechnical staff, 3 means on average half of the team is part-time, and 5 means all of the team is Table 4-6: Technical complexity factors for the case study of home access (see Section 2.3). \nTechnical \nfactor Description WeightPerceived \nComplexityCalculated Factor \n(Weight\uf0b4Perceived \nComplexity) \nT1 Distributed, Web-based system, because \nof ViewAccessHistory (UC-4) 2 3 2\uf0b43 = 6 \nT2 Users expect good performance but \nnothing exceptional 1 3 1\uf0b43 = 3 \nT3 End-user expects efficiency but there are", "source": "Page 242", "chapter": "4"}
{"id": "92c4062628e8-2", "text": "T3 End-user expects efficiency but there are \nno exceptional demands 1 3 1\uf0b43 = 3 \nT4 Internal processing is relatively simple 1 1 1\uf0b41 = 1 \nT5 No requirement for reusability 1 0 1\uf0b40 = 0 \nT6 Ease of install is moderately important \n(will probably be installed by technician) 0.5 3 0.5\uf0b43 = 1.5 \nT7 Ease of use is very important 0.5 5 0.5\uf0b45 = 2.5 \nT8 No portability concerns beyond a desire \nto keep database vendor options open 2 2 2\uf0b42 = 4 \nT9 Easy to change minimally required 1 1 1\uf0b41 = 1 \nT10 Concurrent use is required (Section 5.3) 1 4 1\uf0b44 = 4 \nT11 Security is a significant concern 1 5 1\uf0b45 = 5 \nT12 No direct access for third parties 1 0 1\uf0b40 = 0 \nT13 No unique training needs 1 0 1\uf0b40 = 0 \nTechnical Factor Total: 31", "source": "Page 242", "chapter": "4"}
{"id": "1bd48b5219d9-0", "text": "Chapter 4 \uf0b7 Software Measurement and Estimation 229\npart-time. For E8, 0 means an easy-to-use programming language will be used, 3 means the \nlanguage is of average difficulty, and 5 means a ve ry difficult language is planned for the project. \nEach factor\u2019s weight is multiplied by its percei ved impact to produce its calculated factor. The \ncalculated factors are summed to produce the Envir onmental Factor Total. Larger values for the \nEnvironment Factor Total will have a greater impact on the UCP equation. Table 4-8 calculates the environmental factors for the case study project (home access control), assuming that the \nproject will be developed by a team of upper-division undergraduate students. \nTo produce the final ECF, two constants are computed with the Environmental Factor Total. \nSimilar to the TCF constants above, these constant s were determined based on interviews with \nexpert developers. The constants constrain th e impact the ECF has on the UCP equation from \n0.425 (part-time workers and difficult programming language = 0, all other values = 5) to 1.4 \n(perceived impact is all 0). Therefore, the EC F can reduce the UCP by 57.5% and increase the", "source": "Page 243", "chapter": "4"}
{"id": "1bd48b5219d9-1", "text": "UCP by 40%, see Figure 4-2(b). The ECF has a greater potential impact on the UCP count than \nthe TCF. The formula is: \nECF  = Constant-1 \uf02b Constant-2 \uf0b4 Environmental Factor Total = \uf0e5\n\uf03d\uf0d7\uf0d7\uf02b8\n12 1\nii iFW C C  (4.3) \nwhere, \nConstant-1 ( C1) = 1.4 \nConstant-2 ( C2) = \uf02d0.03 \nWi = weight of ith environmental factor (Table 4-7) \nFi = perceived impact of ith environmental factor (Table 4-8) \nFormula (4.3) is illustrated in Figure 4-2(b). Gi ven the data in Table 4-8, the ECF = 1.4 + \n(\uf02d0.03\uf0b411) = 1.07. For the sample case study, th e team\u2019s modest software development \nexperience resulted in an average EFT. All four f actors E1-E4 scored relatively low. According to \nequation (4.1), this results in an increase of the UCP by 7%. Table 4-7: Environmental complexi ty factors and their weights. \nEnvironmental factor Description Weight", "source": "Page 243", "chapter": "4"}
{"id": "1bd48b5219d9-2", "text": "Environmental factor Description Weight\nE1 Familiar with the developm ent process (e.g., UML-based) 1.5 \nE2 Application problem experience 0.5 \nE3 Paradigm experience (e.g., object-oriented approach) 1 \nE4 Lead analyst capability 0.5 \nE5 Motivation 1 \nE6 Stable requirements 2 \nE7 Part-time staff \uf02d1 \nE8 Difficult programming language  \uf02d1", "source": "Page 243", "chapter": "4"}
{"id": "28c18dfe1038-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  230 \nCalculating the Use Case Points (UCP) \nAs a reminder, the UCP equation (4.1) is copied here: \nUCP  = UUCP  \uf0b4 TCF \uf0b4 ECF  \nFrom the above calculations, the UCP variables have the following values: \nUUCP = 97 \nTCF = 0.91 \nECF = 1.07 For the sample case study, the final UCP is the following: \nUCP = 97 \n\uf0b4 0.91 \uf0b4 1.07 = 94.45 or 94 use case points. \nNote for the sample case study, the combined effect of TCF and ECF was to increase the UUCP \nby approximately 3 percent (94/97 \uf0b4100 \uf02d 100 = \uf02b3%). This is a minor adjustment and can be \nignored given that many other inputs into the calculation are subjective estimates. \nDiscussion of the UCP Metric \nNotice that the UCP equation (4.1) is not consis tent with measurement theory, because the counts \nare on a ratio scale and the scores for the adjustment factors are on an ordinal scale (see Section \n4.1.1). However, such formulas are often used in practice.", "source": "Page 244", "chapter": "4"}
{"id": "28c18dfe1038-1", "text": "4.1.1). However, such formulas are often used in practice. \nIt is worth noticing that UUCW (Unadjusted Use Case Weight) is calculated simply by adding up \nthe perceived weights of individual use cases (T able 4-3). This assumes that all use cases are \ncompletely independent, which us ually is not the case. The merit of linear summation of size \nmeasures was already discussed in Sections 1.2.5 and 2.2.3. Table 4-8: Environmental complexity factors for the case study of home access (Section 2.3). \nEnvironmental \nfactor Description WeightPerceived \nImpact Calculated Factor \n(Weight\uf0b4 \nPerceived Impact) \nE1 Beginner familiarity with the UML-\nbased development 1.5 1 1.5\uf0b41 = 1.5 \nE2 Some familiarity with application \nproblem 0.5 2 0.5\uf0b42 = 1 \nE3 Some knowledge of object-oriented \napproach 1 2 1\uf0b42 = 2 \nE4 Beginner lead analyst 0.5 1 0.5\uf0b41 = 0.5 \nE5 Highly motivated, but some team \nmembers occasionally slacking 1 4 1\uf0b44 = 4", "source": "Page 244", "chapter": "4"}
{"id": "28c18dfe1038-2", "text": "members occasionally slacking 1 4 1\uf0b44 = 4 \nE6 Stable requirements expected 2 5 2\uf0b45 = 5 \nE7 No part-time staff will be involved \uf02d1 0 \uf02d1\uf0b40 = 0 \nE8 Programming language of average \ndifficulty will be used \uf02d1 3 \uf02d1\uf0b43 = \uf02d3 \nEnvironmental Factor Total: 11", "source": "Page 244", "chapter": "4"}
{"id": "31508328ea48-0", "text": "Chapter 4 \uf0b7 Software Measurement and Estimation 231\nUCP appears to be based on a great deal of subjective and seemingly arbitrary parameters, \nparticularly the weighting coefficients. For all its imperfections, UCP has become widely adopted \nbecause it provides valuable estimate early on in th e project, when many critical decisions need to \nbe made. See the bibliographical notes (Section 4.7)  for literature on empirical evidence about the \naccuracy of UCP-based estimation. \nUCP measures how \u201cbig\u201d the software system will be in terms of functionality. The software size \nis the same regardless of who is building the syst em or the conditions under which the system is \nbeing built. For example, a project with a UCP of 100 may take longer than one with a UCP of \n90, but we do not know by how much. From the discussion in Section 1.2.5, we know that to \ncalculate the time to complete the project us ing equation (1.2) we need to know the team\u2019s \nvelocity . How to factor in the team velocity (productivity) and compute the estimated number of \nhours will be described later in Section 4.6. \n4.2.2 Cyclomatic Complexity \nOne of the most common areas of complexity in a program lies in complex conditional logic (or,", "source": "Page 245", "chapter": "4"}
{"id": "31508328ea48-1", "text": "control flow). Thomas McCabe [1974] devised a measure of cyclomatic complexity , intended to \ncapture the complexity of a program\u2019s conditional logic. A program with no branches is the least \ncomplex; a program with a loop is more complex;  and a program with two crossed loops is more \ncomplex still. Cyclomatic complexity corresponds roughly to an intuitive idea of the number of different paths through the program\u2014the great er the number of different paths through a \nprogram, the higher the complexity. \nMcCabe\u2019s metric is based on graph theory, in which you calculate the cyclomatic number of a \ngraph \nG, denoted by V(G), by counting the number of linearly independent paths within a \nprogram. Cyclomatic complexity is \n V(G) = e \uf02d n \uf02b 2      ( 4 . 4 )  \nwhere e is the number of edges, n is the number of nodes. \nConverting a program into a graph is illustrated in Figure 4-3. It follows that cyclomatic \ncomplexity is also equal to the number of binary d ecisions in a program plus 1. If all decisions are \nnot binary, a three-way decision is counted as two binary decisions and an n-way case (select or \nswitch) statement is counted as n \uf02d 1 binary decisions. The iteration test in a looping statement is", "source": "Page 245", "chapter": "4"}
{"id": "31508328ea48-2", "text": "counted as one binary decision.", "source": "Page 245", "chapter": "4"}
{"id": "48b4af1f234f-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  232 \nThe cyclomatic complexity is additive. The comple xity of several graphs considered as a group is \nequal to the sum of individual graphs\u2019 complexities. \nThere are two slightly different formulas for calculating cyclomatic complexity V(G) of a graph \nG. The original formula by McCabe [1974] is \n V(G) = e \uf02d n \uf02b 2\uf0d7p     ( 4 . 5 )  \nwhere e is the number of edges, n is the number of nodes, and p is the number of connected \ncomponents of the graph. Alternatively, [Henderson-Sellers & Tegarden, 1994] propose a \nlinearly-independent  cyclomatic complexity as \n VLI(G) = e \uf02d n \uf02b p \uf02b 1       (4.6) \nBecause cyclomatic complexity metric is based on decisions and branches, which is consistent \nwith the logic pattern of design and programming, it appeals to software professionals. But it is \nnot without its drawbacks. Cyclomatic comple xity ignores the complexity of sequential \nstatements. In other words, any program with  no conditional branching has zero cyclomatic \ncomplexity! Also, it does not distinguish different kinds of control flow complexity, such as loops", "source": "Page 246", "chapter": "4"}
{"id": "48b4af1f234f-1", "text": "vs. IF-THEN-ELSE statements or selection statements vs. nested IF-THEN-ELSE statements. \nCyclomatic complexity metric was originally designed to indicate a program\u2019s testability and \nunderstandability. It allows you to  also determine the minimum number of unique tests that must \nbe run to execute every executable statement in the program. One can expect programs with \nhigher cyclomatic complexity to be more diffi cult to test and maintain, due to their higher \ncomplexity, and vice versa. To have good test ability and maintainability, McCabe recommends \nthat no program module should exceed a cyclomatic complexity of 10. Many software ifexpression1 then\nstatement2\nelse\nstatement3\nend if\nstatement4\nswitchexpr1\ncase1:\nstatement2\ncase2:\nstatm3\ncase3:\nstatm4\nend switch\nstatm5(a)\n(b)\ndo\nstatement1\nwhileexpr2\nend dostatement3(c)CODE FLOWCHART GRAPH\nTFexpr1\n?\nstatm4statm2 statm3\n213expr1\n?\nstatm5statm3 statm2 statm4n1\nn2 n3\nn4n1\nn2 n3\nn4\nn1\nn2 n4\nn5n3n1\nn2 n4\nn5n3\nT", "source": "Page 246", "chapter": "4"}
{"id": "48b4af1f234f-2", "text": "n5n3n1\nn2 n4\nn5n3\nT\nFexpr2\n?\nstatm3statm1n1\nn2\nn3n1\nn2\nn3\n \nFigure 4-3: Converting software code into an abstract graph.", "source": "Page 246", "chapter": "4"}
{"id": "54a255a99124-0", "text": "Chapter 4 \uf0b7 Software Measurement and Estimation 233\nrefactorings are aimed at reducing the complexity  of a program\u2019s conditional logic [Fowler, 2000; \nKerievsky, 2005]. \n \n4.3 Measuring Module Cohesion \n \nCohesion  is defined as a measure of relatedness or c onsistency in the functionality of a software \nunit. It is an attribute that identifies to which de gree the parts within that unit belong together or \nare related to each other. In an object-oriented pa radigm, a class can be a unit, the data can be \nattributes, and the methods can be parts. Modules with high cohesion are usually robust, reliable, \nreusable, and easy to understand while modules  with low cohesion are associated with \nundesirable traits such as being difficult to unders tand, test, maintain, and reuse. Cohesion is an \nordinal type of measurement and is usually expressed as \u201chigh cohesion\u201d or \u201clow cohesion.\u201d \nWe already encountered the term cohesion in Ch apter 2, where it was argued that each unit of \ndesign, whether it is at the modular level or cl ass level, should be focused on a single purpose. \nThis means that it should have very few responsib ilities that are logically related. Terms such as", "source": "Page 247", "chapter": "4"}
{"id": "54a255a99124-1", "text": "\u201cintramodular functional relatedness\u201d or \u201cmodular strength\u201d have been used to address the notion \nof design cohesion. \n4.3.1 Internal Cohesion or Syntactic Cohesion \nInternal cohesion can best be understood as synt actic cohesion evaluated by examining the code \nof each individual module. It is thus closely related to the way in which large programs are \nmodularized. Modularization can be accomplished fo r a variety of reasons and in a variety of \nways. \nA very crude modularization is to require that each module should not exceed certain size, e.g., \n50 lines of code. This would arbitrarily quantize the program into blocks of about 50 lines each. \nAlternatively, we may require that each unit of design has certain prescribed size. For example, a \npackage is required to have certain number of classes, or each class a certain number of attributes \nand operations. We may well e nd up with the unit of design or  code which is performing \nunrelated tasks. Any cohesion here would be accidental or coincidental cohesion . \nCoincidental cohesion does not usually occur in an initial design. However, as the design goes \nthrough multiple changes and modifications, e.g., due to requirements changes or bug fixes, and \nis under schedule pressures, the original design may evolve into a coincidental one. The original", "source": "Page 247", "chapter": "4"}
{"id": "54a255a99124-2", "text": "is under schedule pressures, the original design may evolve into a coincidental one. The original \ndesign may be patched to meet new requirement s, or a related design may be adopted and \nmodified instead of a fresh start. This will easily  result in multiple unrelated elements in a design \nunit.", "source": "Page 247", "chapter": "4"}
{"id": "c05b00b142d1-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  234 \nAn Ordinal Scale for Cohesion Measurement \nMore reasonable design would have the contents  of a module bear some relationship to each \nother. Different relationships can be created fo r the contents of each module. By identifying \ndifferent types of module cohesion we can creat e a nominal scale for cohesion measurement. A \nstronger scale is an ordinal scale, which can be created by asking an expert to assess subjectively \nthe quality of different types of module cohesion a nd create a rank-ordering. Here is an example \nordinal scale for cohesion measurement: \nRank Cohesion type Quality\n6 Functional cohesion Good \n\uf0bd \n\uf0bd \n\uf0bd \n\uf0bd \n\uf0af \nBad 5 Sequential cohesion \n4 Communication cohesion\n3 Procedural cohesion \n2 Temporal cohesion \n1 Logical cohesion \n0 Coincidental cohesion \nFunctional cohesion  is judged to provide a tightest relationship because the design unit (module) \nperforms a single well-defined function or achieves a single goal. \nSequential cohesion  is judged as somewhat weaker, because  the design unit performs more than \none function, but these functions occur in an orde r prescribed by the specification, i.e., they are \nstrongly related.", "source": "Page 248", "chapter": "4"}
{"id": "c05b00b142d1-1", "text": "strongly related. \nCommunication cohesion  is present when a design unit performs multiple functions, but all are \ntargeted on the same data or the same sets of data. The data, however, is not organized in an \nobject-oriented manner as a single type or structure. \nProcedural cohesion  is present when a design unit performs multiple functions that are \nprocedurally related. The code in each module represents a single piece of functionality defining \na control sequence of activities. \nTemporal cohesion  is present when a design unit performs more than one function, and they are \nrelated only by the fact that they must occur w ithin the same time span. An example would be a \ndesign that combines all data initialization into one unit and performs all initialization at the same \ntime even though it may be defined and utilized in other design units. \nLogical cohesion  is characteristic of a design unit that performs a series of similar functions. At \nfirst glance, logical cohesion seems to make sense in that the elements are related. However, the \nrelationship is really quite weak. An example is the Java class java.lang.Math , which \ncontains methods for performing basic numeric operations such as the elementary exponential, \nlogarithm, square root, and trigonometric func tions. Although all methods in this class are", "source": "Page 248", "chapter": "4"}
{"id": "c05b00b142d1-2", "text": "logically related in that they perform mathema tical operations, they are entirely independent of \neach other. \nIdeally, object-oriented design units (classes) should exhibit the top two types of cohesion \n(functional or sequential), where operations work on the attribut es that are common for the class. \nA serious issue with this cohesion measure is that the success of any module in attaining high-\nlevel cohesion relies purely on human assessment.", "source": "Page 248", "chapter": "4"}
{"id": "97b1c146f454-0", "text": "Chapter 4 \uf0b7 Software Measurement and Estimation 235\nInterval Scales for Cohesion Measurement \nWe are mainly interested in the cohesion of object-oriented units of software, such as classes. \nClass cohesion  captures relatedness between various members of a class: attributes and \noperations (or, methods). Class cohesion metrics can be broadly classified into two groups: \n1. Interface-based metrics  compute class cohesion from information in method signatures \n2. Code-based metrics  compute class cohesion in terms of attribute accesses by methods \nWe can further classify code-based cohesion metric s into four sub-types based on the methods of \nquantification of cohesion: \n2.a) Disjoint component-based metrics count the number of disjoint sets of methods or \nattributes in a given class. \n2.b) Pairwise connection-based metrics compute cohesion as a function of number of \nconnected and disjoint method pairs. \n2.c) Connection magnitude-based metrics count the accessing methods per attribute and \nindirectly find an attribute-sharing index in terms of the count (instead of computing \ndirect attribute-sharing between methods). \n2.d) Decomposition-based metrics compute cohesion in terms of recursive decompositions of \na given class. The decompositions are generated by removal of pivotal elements that keep \nthe class connected. \nThese metrics compute class cohesion using manipulations of class elements. The key elements", "source": "Page 249", "chapter": "4"}
{"id": "97b1c146f454-1", "text": "These metrics compute class cohesion using manipulations of class elements. The key elements \nof a class C are its  a attributes A1, \u2026, Aa, m methods M1, \u2026, Mm, and the list of p parameter (or, \nargument) types of the methods P1, \u2026, Pm. The following sections describe various approaches to \ncomputing class cohesion. \nMany existing metrics qualify the class as either \u201cc ohesive\u201d or \u201cnot cohesive,\u201d and do not capture \nvarying strengths of cohesion. Ho wever, this approach makes it ha rd to compare two cohesive or \ntwo non cohesive classes, or to know whethe r a code modification increased or reduced the \ndegree of cohesiveness. If one wishes to compar e the cohesion of two different versions of \nsoftware, it is necessary to use a metric that can ca lculate not just whether a module is cohesive or \nnot cohesive but also the degree of its cohesive ness. Assuming that both the versions of our \nsoftware are cohesive, this would enable us to  judge which version is better designed and more \ncohesive. \n4.3.2 Interface-based Cohesion Metrics \nInterface-based cohesion metrics are design metric s that help evaluate cohesion among methods \nof a class early in the analysis  and the design phase. These metrics evaluate the consistency of", "source": "Page 249", "chapter": "4"}
{"id": "97b1c146f454-2", "text": "methods in a class\u2019s interface using the lists of para meters of the methods. They can be applied on \nclass declarations that only contain method prot otypes (method types and parameter types) and do \nnot require the class implementation code. One such metric is Cohesion Among Methods of \nClasses  (CAMC). The CAMC metric is based on the assumption that the parameters of a method \nreasonably define the types of interaction that method may implement. \nFigure 4-4", "source": "Page 249", "chapter": "4"}
{"id": "d26f1a9fc9c2-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  236 \nTo compute the CAMC metric value, we determin e a union of all parameters of all the methods \nof a class. A set Mi of parameter object types for each met hod is also determined. An intersection \n(set Pi) of M i with the union set T is computed for all methods in th e class. A ratio of the size of \nthe intersection ( Pi) set to the size of the union set ( T) is computed for all methods. The \nsummation of all intersection sets Pi is divided by product of th e number of methods and the size \nof the union set T, to give a value for the CAMC metric. Formally, the metric is \nkloklC CAMCk\nil\njij\uf073\uf03d \uf03d\uf0e5\uf0e5\n\uf03d\uf03d111)(    ( 4 . 7 )  \n \n4.3.3 Cohesion Metrics using Disjoint Sets of Elements \nAn early metric of this type is the Lack of Cohesion of Methods  (LCOM1). This metric counts the \nnumber of pairs of methods that do not share their class attributes. It considers how many disjoint \nsets are formed by the intersection of the sets of  the class attributes used by each method. Under", "source": "Page 250", "chapter": "4"}
{"id": "d26f1a9fc9c2-1", "text": "LCOM1, the perfect cohesion achieved when all methods access all attributes. Because of perfect cohesion, we expect the lack-of-cohesion value to be  0. At the opposite end of the spectrum, each \nmethod accesses only a single attribute (assuming that m = a). In this case, we expect LCOM = 1, \nwhich indicates extreme lack of cohesion. \nA formal definition of LCOM1 follows. Consider a set of methods { M\ni} (i = 1, \u2026, m} accessing a \nset of attributes { Aj} (j = 1, \u2026, a}. Let the number of attributes accessed by each method, Mi, be \ndenoted as \uf061(Mi) and the number of methods which access each attribute be \uf06d(Aj). Then the lack \nof cohesion of methods for a class Ci is given formally as \n\uf028\uf029\n11\n) LCOM1(C1\ni\uf02d\uf0f7\uf0f7\n\uf0f8\uf0f6\n\uf0e7\uf0e7\n\uf0e8\uf0e6\n\uf0d7\uf02d\n\uf03d\uf0e5\n\uf03d\nmAama\njj\uf06d\n   ( 4 . 8 )  \nThis version of LCOM is labe led as LCOM1 to allow for s ubsequent variations, LCOM2,", "source": "Page 250", "chapter": "4"}
{"id": "d26f1a9fc9c2-2", "text": "LCOM3, and LCOM4. Class cohesion, LCOM3, is measured as the number of connected DeviceCtrl\n#  devStatuses_ : Vector\n+  activate(dev : String) : boolean\n+  deactivate(dev :String) : boolean\n+  getStatus(dev : String) : ObjectDeviceCtrl\n#  devStatuses_ : Vector\n+  activate(dev : String) : boolean\n+  deactivate(dev :String) : boolean\n+  getStatus(dev : String) : Object\n(a) (b)DeviceCtrl\nactivate\ndeactivate\ngetStatus1String SerialPort\n0\n1110\n00O\nDeviceCtrl\nactivate\ndeactivate\ngetStatus1String SerialPort\n0\n1110\n00O\nmethodsparameter types\nFigure 4-4: Class (a) and its para meter occurrence matrix (b).", "source": "Page 250", "chapter": "4"}
{"id": "66c8fe328c73-0", "text": "Chapter 4 \uf0b7 Software Measurement and Estimation 237\ncomponents in the graph. LCOM2 calculates the di fference between the number of method pairs \nthat do or do not share their class attributes. LCOM 2 is classified as a Pairwise Connection-Based \nmetric (Section ____). See the bibliographical notes (Section 4.7) for references on LCOM \nmetrics. \n4.3.4 Semantic Cohesion \nCohesion or module \u201cstrength\u201d refers to the noti on of a module level \u201ctogetherness\u201d viewed at the \nsystem abstraction level. Thus, although in a sens e it can be regarded as a system design concept, \nwe can more properly regard cohesi on as a semantic concern expressed of a module evaluated \nexternally to the module.  \nSemantic cohesion is an externally discernable concept that assesses whether the abstraction \nrepresented by the module (class in object-oriented approach) can be considered to be a \u201cwhole\u201d \nsemantically. Semantic complexity  metrics evaluate whether an individual class is really an \nabstract data type in the sense of being complete  and also coherent. That is, to be semantically \ncohesive, a class should contain everything th at one would expect a class with those \nresponsibilities to possess but no more.", "source": "Page 251", "chapter": "4"}
{"id": "66c8fe328c73-1", "text": "responsibilities to possess but no more. \nIt is possible to have a class with high internal , syntactic cohesion but little semantic cohesion. \nIndividually semantically cohesive classes may be  merged to give an externally semantically \nnonsensical class while retaining internal syntactic  cohesion. For example, imagine a class that \nincludes features of both a person and the car th e person owns. Let us assume that each person \ncan own only one car and that each car can only be owned by one person (a one-to-one \nassociation). Then person_id  \uf0ab car_id , which would be equivalent to data normalization. \nHowever, classes have not only data but operati ons to perform various actions. They provide \nbehavior patterns for (1) the person aspect and (2 ) the car aspect of our proposed class. Assuming \nno intersecting behavior between PERSON and CAR,  then what is the meaning of our class, \npresumably named CAR_PERSON? Such a class could be internally highly cohesive, yet \nsemantically as a whole class seen from outside  the notion expressed (here of the thing known as \na person-car) is nonsensical. \n \n4.4 Coupling \n Coupling metrics are a measure of how interdepende nt different modules are of each other. High", "source": "Page 251", "chapter": "4"}
{"id": "66c8fe328c73-2", "text": "coupling occurs when one module modifies or relie s on the internal workings of another module. \nLow coupling occurs when there is no communication at all between different modules in a program. Coupling is contrasted with cohesion. Both cohesion and coupling are ordinal \nmeasurements and are defi ned as \u201chigh\u201d or \u201clow.\u201d It is mo st desirable to ac hieve low coupling \nand high cohesion. \nTightly coupled vs. loosely coupled", "source": "Page 251", "chapter": "4"}
{"id": "06c20ddfab5c-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  238 \n4.5 Psychological Complexity \n \n\u201cThen he explained that what can be observed is really determined by the theory. He said, you cannot first \nknow what can be observed, but you must first know a theory, or produce a theory, and then you can \ndefine what can be observed.\u201d \u2014Heisenberg\u2019s recollection of his first meeting with Einstein \n\u201cI have had my results for a long time: but I do not yet know how I am to arrive at them.\u201d \n\u2014Karl Friedrich Gauss \nOne frustration with software complexity measur ement is that, unlike placing a physical object on \na scale and measuring its weight, we cannot put a software object on a \u201ccomplexity scale\u201d and \nread out the amount. Complexity seems to be an interpreted measure, much like person\u2019s health \ncondition and it has to be stated as an \u201cavera ge case.\u201d Your doctor can precisely measure your \nblood pressure, but a specific number does not ne cessarily correspond to good or bad health. The \ndoctor will also measure your heart rate, body temp erature, and perhaps several other parameters, \nbefore making an assessment about  your health condition. Even so, the assessment will be the \nbest guess, merely stating that on average su ch and such combination of physiological", "source": "Page 252", "chapter": "4"}
{"id": "06c20ddfab5c-1", "text": "best guess, merely stating that on average su ch and such combination of physiological \nmeasurements corresponds to a cer tain health condition. Perhap s we should define software \nobject complexity similarly: as a statistical in ference based on a set of directly measurable \nvariables. \n4.5.1 Algorithmic Information Content \nI already mentioned that our abstractions are unavoidably approximate. Th e term often used is \n\u201ccoarse graining,\u201d which means that we are blurring detail in the world picture and single out only the phenomena we believe are relevant to the problem at hand. Hence, when defining \ncomplexity it is always necessary to specify the level of detail up to which the system is \ndescribed, with finer details being ignored. \nOne way of defining the complexity of a program or system is by means of its description, that is, \nthe length of the description. I discussed above th e merits of using size metrics as a complexity (a) (b)\n \nFigure 4-5: Random arrays illustrate information complexity vs. depth. See text for details.", "source": "Page 252", "chapter": "4"}
{"id": "7e3dc1efd6f4-0", "text": "Chapter 4 \uf0b7 Software Measurement and Estimation 239\nmeasure. Some problems menti oned above include: size coul d be measured differently; it \ndepends on the language in which th e program code (or any other accurate description of it) is \nwritten; and, the program description can be unnece ssarily stuffed to make it appear complex. A \nway out is to ignore the language issue and define  complexity in terms of the description length. \nSuppose that two persons wish to communicate a sy stem description at distance. Assume they are \nemploying language, knowledge, a nd understanding that both parties share (and know they share) \nbeforehand. The crude complexity  of the system can be defined as the length of the shortest \nmessage  that one party needs to employ to descri be the system, at a given level of coarse \ngraining, to the distant party. \nA well-known such measure is called algorithmic information content , which was introduced in \n1960s independently by Andrei N. Kolmogorov, Gregory Chaitin, and Ray Solomonoff. Assume \nan idealized general-purpose computer with an in finite storage capacity. Consider a particular \nmessage string, such as \u201c aaaaabbbbbbbbbb .\u201d We want to know: what is the shortest possible", "source": "Page 253", "chapter": "4"}
{"id": "7e3dc1efd6f4-1", "text": "program that will print out that string and then stop computing? Algorithmic information \ncontent (AIC) is defined as the length of the shortest  possible program that prints out a given \nstring. For the example string, th e program may look something like: P a{5}b{10} , which \nmeans \u201cPrint 'a' five times and 'b' ten times.\u201d \nInformation Theory \n \n \nLogical Depth and Crypticity \n \n\u201c...I think it better to write a long le tter than incur loss of time...\u201d \u2014Cicero \n\u201cI apologize that this letter is so long. I did not have the time to make it short.\u201d \u2014Mark Twain \n\u201cIf I had more time, I would have written a shorter letter.\u201d \n\u2014variously attributed to Cicero, Pascal, Voltaire, Mark Twain, Geor ge Bernard Shaw, and T.S. Elliot \n\u201cThe price of reliability is the pursuit of the utmost simplicity. It is a price which the very rich may find hard \nto pay.\u201d \u2014C.A.R. Hoare \nI already mentioned that algorithmic information content (AIC) does not exactly correspond to \neveryday notion of complexity because under AIC random strings appear as most complex. But \nthere are other aspects to consider, as well. C onsider the following description: \u201cletter X in a", "source": "Page 253", "chapter": "4"}
{"id": "7e3dc1efd6f4-2", "text": "random array of letters L.\u201d Then the description \u201cletter T in a random array of letters L\u201d should \nhave about the same AIC. Figure 4-5 pictures both descriptions in the manner pioneered by my \nfavorite teacher Bela Julesz. If you look at both arrays, I bet that you will be able to quickly \nnotice X in Figure 4-5(a), but you will spend quite some time scanning Figure 4-5(b) to detect the \nT! There is no reason to believe that human vi sual system developed a special mechanism to \nrecognize the pattern in Figure 4-5(a), but failed to  do so for the pattern in Figure 4-5(b). More \nlikely, the same general pattern recognition mechan ism operates in both cases , but with much less \nsuccess on Figure 4-5(b). Therefore, it appears that  there is something missing in the AIC notion", "source": "Page 253", "chapter": "4"}
{"id": "c57d3a203085-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  240 \nof complexity\u2014an apparently complex descripti on has low AIC. The solution is to include the \ncomputation time. \nCharles Bennett defined logical depth  of a description to characterize the difficulty of going from \nthe shortest program that can print the descrip tion to the actual description of the system. \nConsider not just the shortest program to print out  the string, but a set of short programs that have \nthe same effect. For each of these programs, de termine the length of time (or number of steps) \nneeded to compute and print the string. Finally, average the running times so that shorter programs are given greater weight. \n \n  \n4.6 Effort Estimation \n \n\u201cAdding manpower to a late software project makes it later.\u201d \n\u2014Frederick P. Brooks, Jr., The Mythical Man-Month  \n\u201cA carelessly planned project will take only twice as long.\u201d \n\u2014The law of computerdom according to Golub \n\u201cThe first 90 percent of the tasks takes 10 percent of the time and the last 10 percent takes the other 90 \npercent.\u201d \u2014The ninety-ninety rule of project schedules \n \n Working memory\nChunking unitChunking unitIntelligent\nsystem\nInput sequence from the world (time-varying)", "source": "Page 254", "chapter": "4"}
{"id": "c57d3a203085-1", "text": "system\nInput sequence from the world (time-varying)  \nFigure 4-6: A model of a limited working memory.", "source": "Page 254", "chapter": "4"}
{"id": "26008ed90a49-0", "text": "Chapter 4 \uf0b7 Software Measurement and Estimation 241\n \n4.6.1 Deriving Project Duration from Use Case Points \nUse case points ( UCP ) are a measure of software size (Section 4.2.1). We can use equation (1.2) \ngiven in Section 1.2.5 to derive the project dura tion. For this purpose we need to know the team\u2019s \nvelocity , which represents the team\u2019s rate of pr ogress through the use cases (or, the team\u2019s \nproductivity). Here is the equation that is equiva lent to equation (1.2), but using a Productivity \nFactor ( PF): \nDuration  = UCP  \uf0b4 PF    ( 4 . 9 )  \nThe Productivity Factor is the ratio of devel opment person-hours needed per use case point. \nExperience and statistical data collected from past projects provide the data to estimate the initial \nPF. For instance, if a past project with a UCP  of 112 took 2,550 hours to complete, divide 2,550 \nby 112 to obtain a PF of 23 person-hours per use case point. \nIf no historical data has been collected, the developer can consider one of these options: \n1. Establish a baseline by computing the UCP  for projects previously completed by your", "source": "Page 255", "chapter": "4"}
{"id": "26008ed90a49-1", "text": "1. Establish a baseline by computing the UCP  for projects previously completed by your \nteam (if such are available). \n2. Use a value for PF between 15 and 30 depending on th e development team\u2019s overall \nexperience and past accomplishments (Do th ey normally finish on time? Under budget? \netc.). For a team of beginners, such as underg raduate students, use the highest value (i.e., \n30) on the first project. \nA different approach was proposed by Schne ider and Winters [2001]. Recall that the \nenvironmental factors (Table 4-7) measure the e xperience level of the people on your project and \nthe stability of your project. Any negatives in this  area mean that you will have to spend time \ntraining people or fixing problems due to instab ility (of requirements). The more negatives you \nhave, the more time you will spend fixing probl ems and training people and less time you will \nhave to devote to your project. \nSchneider and Winters suggested counting the number of environmental factors among E1 \nthrough E6 (Table 4-8) that have the perceive d impact less than 3 and those among E7 and E8", "source": "Page 255", "chapter": "4"}
{"id": "26008ed90a49-2", "text": "with the impact greater than 3. If the total count is \uf0202 or less, assume 20 hours per use case point. \nIf the total is 3 or 4, assume 28 hours per use case . Any total greater than 4 indicates that there are \ntoo many environmental factors stacked against th e project. The project should be put on hold \nuntil some environmental factors can be improved. \nProbably the best solution for estimating the Productivity Factor is to calculate your \norganization\u2019s own historical average from past pr ojects. This is why collecting historic data is \nimportant for improving effort esti mation on future projects. After a project completes, divide the \nnumber of actual hours it took to complete the project by the UCP  number. The result becomes \nthe new PF that can be used in the future projects. \nWhen estimating the duration in calendar time, is important to avoid assuming ideal working \nconditions. The estimate should account for cor porate overhead\u2014answering email, attending \nmeetings, and so on. Suppose our past experience suggests a PF of 23 person-hours per use case \npoint and our current project has 94 use case point s (as determined Section 4.2.1). Equation (4.9)", "source": "Page 255", "chapter": "4"}
{"id": "22eaf6f346a2-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  242 \ngives the duration as 94 \uf0b4 23 = 2162 person-hours. Obviously, this  does not imply that the project \nwill be completed in 2162 / 24 \uf0bb 90 days! A reasonable assumption is that each developer will \nspend about 30 hours per week on project tasks and the rest of their time will be taken by \ncorporate overhead. With a team of four de velopers, this means the team will make 4 \uf0b4 30 = 120 \nhours per week. Dividing 2162 person-hours by 120 hours per week we obtain a total of \napproximately 18 weeks to complete this project. \n \n4.7 Summary and Bibliographical Notes \n In this chapter I described two kinds of soft ware measurements. One kind works with scarce \nartifacts that are available early on in a project, such as customer statement of requirements for \nthe planned system. There is a major subjective component to these measurements, and it works \nmainly based on guessing and past e xperience with similar projects . The purpose of this kind of \nmeasurements is to estimate the project duration  and cost of the effort, so to negotiate the terms \nof the contract with the customer who is sponsoring the project.", "source": "Page 256", "chapter": "4"}
{"id": "22eaf6f346a2-1", "text": "of the contract with the customer who is sponsoring the project. \nThe other kind of software measurements works with actual software artifacts, such as UML \ndesigns or source code. It aims to measure in trinsic properties of the software and avoid \ndeveloper\u2019s subjective guesses. Because it requires th at the measured artifacts already exist in a \ncompleted or nearly completed condition, it cannot  be applied early on in a project. The purpose \nof this kind of measurements is to evaluate the product quality . It can serve as a test of whether \nthe product is ready for deployment, or to provid e feedback to the development team about the \npotential weaknesses that need to be addressed. \nAn early project effort estimate helps managers, developers, and testers plan for the resources a \nproject requires. The use case points  (UCP) method has emerged as one such method. It is a \nmixture of intrinsic software properties, measur ed by Unadjusted Use Case Points (UUCP) as \nwell as technical (TCF) and environmental factors (ECF), which depend on developer\u2019s \nsubjective estimates. The UCP method quantifies th ese subjective factors into equation variables \nthat can be adjusted over time to produce more precise estimates. Industr ial case studies indicate \nthat the UCP method can produce an early esti mate within 20% of the actual effort.", "source": "Page 256", "chapter": "4"}
{"id": "22eaf6f346a2-2", "text": "Section 4.2: What to Measure? \n[Henderson-Sellers, 1996] provides a condensed review of software metrics up to the publication \ndate, so it is somewhat outdated. It is technica l and focuses on metrics of structural complexity. \nHorst Zuse, History of Software Measurement,  Technische Universit\u00e4t Berlin, Online at: \nhttp://irb.cs.tu-berlin.de/~zuse/sme.html \n[Halstead, 1977] distinguishes software science from computer science. The premise of software \nscience is that any programming task consists of selecting and arrangi ng a finite number of \nprogram \u201ctokens,\u201d which are basic syntactic units  distinguishable by a compiler: operators and \noperands. He defined several soft ware metrics based on these tokens. However, software science", "source": "Page 256", "chapter": "4"}
{"id": "6ca251b024be-0", "text": "Chapter 4 \uf0b7 Software Measurement and Estimation 243\nhas been controversial since its introduction and has been criticized from many fronts. Halstead\u2019s \nwork has mainly historical importance for softwa re measurement because it was instrumental in \nmaking metrics studies an issue among computer scientists. \nUse case points (UCP) were first described by Gustav Karner [1993], but his initial work on the \nsubject is closely guarded by Rational Software , Inc. Hence, the primary sources describing \nKarner\u2019s work are [Schneider & Winters, 2001]  and [Ribu, 2001]. UCP was inspired by Allan \nAlbrecht\u2019s \u201cFunction Point Analysis\u201d [Albrecht,  1979]. The weighted values and constraining \nconstants were initially based on Albrecht, but su bsequently modified by people at Objective \nSystems, LLC, based on their experience w ith Objectory\u2014a methodology created by Ivar \nJacobson for developing obje ct-oriented applications. \nMy main sources for use case points were [Schneider & Winters, 2001; Ribu, 2001; Cohn, 2005]. \n[Kusumoto, et al., 2004] describes the rules for a system that automatically computes the total \nUCP for given use cases. I believe these rules are very useful for a beginner human when", "source": "Page 257", "chapter": "4"}
{"id": "6ca251b024be-1", "text": "computing UCPs for a project. \nMany industrial case studies verified the esti mation accuracy of the UCP method. These case \nstudies found that the UCP method can produce an ea rly estimate within 20% of the actual effort, \nand often closer to the actual effort than expe rts or other estimation methodologies. Mohagheghi \net al. [2005] described the UCP estimate of an in cremental, large-scale de velopment project that \nwas within 17% of the actual effort. Carroll [2005 ] described a case study over a period of five \nyears and across more than 200 projects. After applying the process across hundreds of sizable \nsoftware projects (60 person-months average), they  achieved estimating accuracy of less than 9% \ndeviation from actual to estimated cost on 95% of the studied projects. To achieve greater \naccuracy, Carroll\u2019s estimation method includes a risk coefficient in the UCP equation. \nSection 4.3: Measuring Module Cohesion \nThe ordinal scale for cohesion measurement with  seven levels of c ohesion was proposed by \nYourdon and Constantine [1979]. \n[Constantine et al., 1974; Eder et al., 1992; Allen & Khoshgoftaar, 1999; Henry & Gotterbarn,", "source": "Page 257", "chapter": "4"}
{"id": "6ca251b024be-2", "text": "1996; Mitchell & Power, 2005] \nSee also: http://c2.com/cgi/wiki?CouplingAndCohesion \nB. Henderson-Sellers, L. L. Constantine, and I.  M. Graham, \u201cCoupling and cohesion: Towards a \nvalid suite of object-oriented metrics,\u201d Object-Oriented Systems , vol. 3, no. 3, 143-158, 1996. \n[Joshi & Joshi, 2010; Al Dallal, 2011] investigat ed the discriminative power of object-oriented \nclass cohesion metrics. \nSection 4.4: Coupling", "source": "Page 257", "chapter": "4"}
{"id": "2bc0cec2e3c5-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  244 \nSection 4.5: Psychological Complexity \n[Bennett, 1986; 1987; 1990] discus ses definition of complexity fo r physical systems and defines \nlogical depth. \nSection 4.6: Effort Estimation \n \nProblems \n \nProblem 4.1 \n \nProblem 4.2 \n \nProblem 4.3 \n(CYCLOMATIC /MCCABE COMPLEXITY ) Consider the following quicksort sorting algorithm: \n \nQUICKSORT (A, p, r) \n1    if p < r  \n2        then  q \uf0ac PARTITION (A, p, r) \n3            Q UICKSORT (A, p, q \uf02d 1) \n4            Q UICKSORT (A, q \uf02b 1, r) \nwhere the P ARTITION  procedure is as follows: \n \nPARTITION (A, p, r) \n1    x \uf0ac A[r] \n2    i \uf0ac p \uf02d 1 \n3    for j \uf0ac p to r \uf02d 1 \n4        do if  A[j] \uf0a3 x  \n5                  then  i \uf0ac i \uf02b 1", "source": "Page 258", "chapter": "4"}
{"id": "2bc0cec2e3c5-1", "text": "5                  then  i \uf0ac i \uf02b 1 \n6                       exchange A[i] \uf0ab A[j] \n7    exchange A[i \uf02b 1] \uf0ab A[r] \n8    return  i \uf02b 1 \n \n(a) Draw the flowchart of the above algorithm. \n(b) Draw the corresponding graph and label the nodes as n1, n2, \u2026 and edges as e1, e2, \u2026 \n(c) Calculate the cyclomatic complexity of the above algorithm.", "source": "Page 258", "chapter": "4"}
{"id": "0fcc86cef4b3-0", "text": "Chapter 4 \uf0b7 Software Measurement and Estimation 245\nProblem 4.4", "source": "Page 259", "chapter": "4"}
{"id": "5fdd362087c4-0", "text": "246 Contents \n5.1 Indirect Communication: Publisher-\nSubscriber \n5.1.1 Control Flow  \n5.1.2 Pub-Sub Pattern Initialization  \n5.1.3   \n5.1.4   5.1.5   \n5.2 More Patterns \n5.2.1 Command  \n5.2.2 Decorator \n5.2.3 State 5.2.4 Proxy \n5.3 Concurrent Programming \n5.3.1 Threads  5.3.2 Exclusive Resource Access\u2014Exclusion \nSynchronization  \n5.3.3 Cooperation between Threads\u2014Condition \nSynchronization  \n5.3.4   \n5.2.3   \n5.4 Broker and Distributed Computing \n5.4.1 Broker Pattern  5.4.2 Java Remote Method Invocation (RMI)  5.4.3   \n5.4.4   \n5.5 Information Security \n5.5.1 Symmetric and Public-Key Cryptosystems  5.5.2 Cryptographic Algorithms  \n5.5.3 Authentication  5.5.4  \n5.6 Summary and Bibliographical Notes \nProblems  \nChapter 5  \nDesign with Patterns \n \n \n\u201cIt is not the strongest of the species that survive, nor the most", "source": "Page 260", "chapter": "5"}
{"id": "5fdd362087c4-1", "text": "\u201cIt is not the strongest of the species that survive, nor the most \nintelligent, but the one most responsive to change.\u201d \n\u2014Charles Darwin \n\u201cMan has a limited biological capacity for change. When this \ncapacity is overwhelmed, the capacity is in future shock.\u201d \n\u2014Alvin Toffler \nDesign patterns are convenient solutions for software design \nproblems commonly employed by expert developers. The \npower of design patterns derives from reusing proven solution \u201crecipes\u201d from similar problems. In other words, patterns are \ncodifying  practice rather than prescribing  practice, or, they are \ncapturing the existing best practices, rather than inventing untried procedures. Patterns are used primarily to improve \nexisting designs or code by rearranging it according to a \n\u201cpattern.\u201d  By reusing a pattern, the developer gains \nefficiency , by avoiding a lengthy process of trials and errors in \nsearch of a solution, and predictability  because this solution is \nknown to work for a given problem. \nDesign patterns can be of different complexities and for \ndifferent purposes. In terms of complexity, the design pattern \nmay be as simple as a naming convention for object methods in the JavaBeans specification ( see Chapter 7) or can be a \ncomplex description of interactions between the multiple", "source": "Page 260", "chapter": "5"}
{"id": "5fdd362087c4-2", "text": "complex description of interactions between the multiple \nclasses, some of which will be reviewed in this chapter. In terms of the purpose, a pattern may be intended to facilitate \ncomponent-based development and reusability, such as in the \nJavaBeans specification, or its purpose may be to prescribe the rules for responsibility assignment to the objects in a system, \nas with the design principles described in Section 2.5. \nAs pointed earlier, finding effective represen tation(s) is a recurring theme of software \nengineering. By condensing many structural and behavioral aspects of the design into a few \nsimple concepts, patterns make it easier for team members to discuss the design. As with any \nsymbolic language, one of the greatest benefits of patterns is in chunking the design knowledge. \nOnce team members are familiar with the pattern te rminology, the use of this terminology shifts", "source": "Page 260", "chapter": "5"}
{"id": "c4b61428e55e-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 247\nthe focus to higher-level design concerns. No tim e is spent in describing the mechanics of the \nobject collaborations because they are condensed into a single pattern name. \nThis chapter reviews some of the most popular desi gn patterns that will be particularly useful in \nthe rest of the text. What follows is a some what broad and liberal interpretation of design \npatterns. The focus is rather on the techniqu es of solving specific problems; nonetheless, the \n\u201cpatterns\u201d described below do fit the definition of patterns as recurring solutions. These patterns \nare conceptual tools that facilita te the development of flexible and adaptive applications as well \nas reusable software components. \nTwo important observations are in order. First, finding a name that in one or few words conveys \nthe meaning of a design pattern is very difficult . A similar difficulty is experienced by user \ninterface designers when trying to find graphical icons that convey the meaning of user interface \noperations. Hence, the reader may find the same or similar software construct under different \nnames by different authors. For example, The Publisher-Subscriber  design pattern, described in \nSection 5.1, is most commonly called Observer  [Gamma et al., 1995], but [Larman, 2005] calls it", "source": "Page 261", "chapter": "5"}
{"id": "c4b61428e55e-1", "text": "Publish-Subscribe . I prefer the latter because I believe th at it conveys better the meaning of the \nunderlying software construct1. Second, there may be slight variations in what different authors \nlabel with the same name. The difference may be due to the particul ar programming language \nidiosyncrasies or due to evolution of the pattern over time. \nCommon players in a design pattern usage are shown in Figure 5-1. A Custodian object \nassembles and sets up a pattern and cleans up after th e pattern\u2019s operation is completed. A client \nobject (can be the same software object as the custodian) needs and uses the services of the \npattern. The design patterns reviewed below generally follow this usage \u201cpattern.\u201d \n \n5.1 Indirect Communication: Publisher-\nSubscriber \n \n                                                      \n1 The Publish-Subscribe  moniker has a broader use than presented here and the interested reader should \nconsult [Eugster et al. 2003]. ClientClientasks for serviceCustodianCustodian initializes the pattern\nInstantiation of the\nDesign PatternInstantiation of the\nDesign Pattern\ncollection of objects \nworking to provide service \nFigure 5-1: The players in a design pattern usage.", "source": "Page 261", "chapter": "5"}
{"id": "231f47764da7-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  248 \n\u201cIf you find a good solution and become attached to  it, the solution may become your next problem.\u201d \n\u2014Robert Anthony \n\u201cMore ideas to choose from mean more complexity \u2026 and more opportunities to choose wrongly.\u201d \n\u2014Vikram Pandit \nPublisher-subscriber design pattern (see Figure 5-2) is used to implement indirect communication  \nbetween software objects. Indirect communication is usually used when an object cannot or does \nnot want to know the identity of the object whose method it calls. Another reason may be that it \ndoes not want to know what the effect of the call will be. The most popular use of the pub-sub \npattern is in building reusable software components. \n1) Enables building reusable components \n2) Facilitates separation of the business logic (responsibilities, concerns) of objects \nCentralized vs. decentralized execution/prog ram-control method\u2014spreads responsibilities for \nbetter balancing. Decentralized control does not necessarily imply concurrent threads of \nexecution. \nThe problem with building reusable components can be illustrated on our case-study example. Let \nus assume that we want to reuse the KeyChecker  object in an extended version of our case-study \napplication, one that sounds alarm if someone is tampering with the lock. We need to modify the", "source": "Page 262", "chapter": "5"}
{"id": "231f47764da7-1", "text": "method unlock()  not only to send message to LockCtrl but also to AlarmCtrl, or to introduce a \nnew method. In either case, we must change the object code, meaning that the object is not \nreusable as-is. Subscribers Publisher\nFigure 5-2: The concept of indirect comm unication in a Publisher/Subscriber system.", "source": "Page 262", "chapter": "5"}
{"id": "526eee6d2621-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 249\nInformation source acquires information in some way and we assume that this information is \nimportant for other objects to do the work they are designed for. Once the source acquires \ninformation (becomes \u201cinformation expert\u201d), it is lo gical to expect it to pass this information to \nothers and initiate their work. However, this t acitly implies that the source object \u201cknows\u201d what \nthe doer object should do next. This knowledge is  encoded in the source object as an \u201cIF-THEN-\nELSE\u201d rule and must be modified every time the doe r code is modified (as seen earlier in Section \n2.5). \nRequest- vs. event-based communication, Figure 5- 4: In the former case, an object makes an \nexplicit request, whereas in the latter, the object expresses interest ahead of time and later gets \nnotified by the information source. In a way, the source is making a method request on the object. Notice also that \u201crequest-based\u201d is also synchrono us type of communication, whereas event based \nis asynchronous. \nAnother way to design the KeyChecker object is  to make it become a publisher of events \nas follows. We need to define two class inte rfaces: Publisher and Subscriber (see Figure", "source": "Page 263", "chapter": "5"}
{"id": "526eee6d2621-1", "text": "5-3). The first one, Publisher, allows any object  to subscribe for information that it is the \nsource of. The second, Subscriber, has a method, here called receive() , to let the \nPublisher publish the data of interest. \n \nListing 5-1: Publish-Subscribe class interfaces. \n \npublic interface Subscriber { \n    public void receive(Content content); \n} \n (a) (b)Publisher\nKnowing Responsibilities:\n\u2022 Knows event source(s)\n\u2022 Knows interested obj\u2019s (subscribers)\nDoing Responsibilities:\n\u2022 Registers/Unregisters subscribers\n\u2022 Notifies the subscribers of events\nSubscriber\nKnowing Responsibilities:\n\u2022 Knows event types of interest\u2022K n o w s  p u b l i s h e r ( s )\nDoing Responsibilities:\n\u2022 Registers/Unregisters with publishers\u2022 Processes received event notificationsType1Subscriber\n+  receive()\u00abinterface\u00bb\nSubscriber\n+  receive()\u00abinterface\u00bb\nPublisher\n+  subscribe()\n+  unsubscribe()\nType1Publisher\n+  subscribe()\n+  unsubscribe()Type2Publisher\n+  subscribe()\n+  unsubscribe()subscribers*\nFigure 5-3: Publisher/Subscriber objects employee cards (a), and the class diagram of their \ncollaborations (b).", "source": "Page 263", "chapter": "5"}
{"id": "a2dcb88ea284-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  250 \nimport java.util.ArrayList; \npublic class Content { \n    public Publisher source_; \n    public ArrayList data_; \n \n    public Content(Publisher src, ArrayList dat) { \n        source_ = src; \n        data_ = (ArrayList) dat.clone(); // for write safety... \n    }                      // ...avoid aliasing and create a new copy \n} \n \npublic interface Publisher { \n    public subscribe (Subscriber subscriber); \n    public unsubscribe (Subscriber subscriber); \n} \n \nA Content  object contains only data, no business logic,  and is meant to transfer data from \nPublisher  to Subscriber . The actual classes then implement those two interfaces. In our \nexample, the key Checker object would then implement the Publisher , while DeviceCtrl \nwould implement the Subscriber . \n \nListing 5-2: Refactored the case-study code of using the Publisher-Subscriber design \npattern. Here, the class DeviceCtrl  implements the Subscriber  interface and the \nclass Checker  implements the Publisher  interface. \n \npublic class DeviceCtrl implements Subscriber  { \n    protected LightBulb bulb_; \n    protected PhotoSObs sensor_; \n \n    public DeviceCtrl(Publisher keyChecker, PhotoSObs sensor, ... ) {", "source": "Page 264", "chapter": "5"}
{"id": "a2dcb88ea284-1", "text": "public DeviceCtrl(Publisher keyChecker, PhotoSObs sensor, ... ) { \n        sensor_ = sensor; \n        keyChecker.subscribe(this); \n        ... \n    } Info\nSrcInfo\nSrcDoerDoerRequest: doSomething(info) Request: getInfo()\nInfo\nSrcInfo\nSrcDoerDoer info(1) Request: subscribe()\nInfo\nSrcInfo\nSrcDoerDoer\n(2) event (info)\n(a) (b) (c) \nFigure 5-4: Request- vs. event-based communication among objects. (a) Direct request \u2014\ninformation source controls the activity of the doer. (b) Direct request\u2014the doer controls\nits own activity, information source is only for lookup, but doer must know when is the\ninformation ready and available. (c) Indirect  request\u2014the doer controls its own activity\nand does not need to worry when the informat ion is ready and available\u2014it gets prompted\nby the information source.", "source": "Page 264", "chapter": "5"}
{"id": "d13b6c68710e-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 251\n \n    public void receive(Content content) { \n        if (content.source_ instanceof Checker) { \n            if ( ((String)content.data_).equals(\"valid\") ) { \n                // check the time of day; if daylight, do nothing \n                if (!sensor_.isDaylight()) bulb_.setLit(true); \n            } \n        } else (check for another source of the event ...) { \n            ... \n        } \n    } \n} \n \nimport java.util.ArrayList; \nimport java.util.Iterator; \n \npublic class Checker implements Publisher  { \n    protected KeyStorage validKeys_; \n    protected ArrayList subscribers_ = new ArrayList(); \n \n    public Checker( ... ) { } \n \n    public subscribe (Subscriber subscriber) { \n        subscribers_.add(subscriber); // could check whether this \n    }                                 // subscriber already subscribed \n \n    public unsubscribe (Subscriber subscriber) { \n        int idx = subscribers_.indexOf(subscriber); \n        if (idx != -1) { subscribers_.remove(idx); } \n    } \n \n    public void checkKey(Key user_key) { \n        boolean valid = false; \n        ...  // verify the user key against the \"validKeys_\" database", "source": "Page 265", "chapter": "5"}
{"id": "d13b6c68710e-1", "text": "...  // verify the user key against the \"validKeys_\" database \n \n        // notify the subscribers \n        Content cnt = new Content(this, new ArrayList()); \n \n        if (valid) {  // authorized user \n            cnt.data.add(\"valid\"); \n        } else {      // the lock is being tampered with \n            cnt.data.add(\"invalid\"); \n        } \n        cnt.data.add(key); \n \n        for (Iterator e = subscribers_.iterator(); e.hasNext(); ) { \n            ((Subscriber) e.next()). receive(cnt); \n        } \n    } \n}", "source": "Page 265", "chapter": "5"}
{"id": "c32f4b2f5606-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  252 \nA Subscriber may be subscribed to several s ources of data and each source may provide several \ntypes of content. Thus, the Subscriber must dete rmine the source and the content type before it \ntakes any action. If a Subscriber gets subscribed  to many sources which publish different content, \nthe Subscriber code may become quite complex and difficult to manage. The Subscriber would \ncontain many if() or switch()  statements to account for di fferent options. A more object-\noriented solution for this is to use class polymorphism \u2014instead of having one Subscriber, we \nshould have several Subscribers, each specialized  for a particular source. The Subscribers may \nalso have more than one receive()  method, each specialized for a particular data type. Here is \nan example. We could implement a Switch by inheriting from the generic Subscriber  \ninterface defined above, or we can define new interfaces specialized for our problem domain. \n \nListing 5-3: Subscriber interfaces for \u201ckey-is-valid\u201d and \u201ckey-is-invalid\u201d events. \npublic interface KeyIsValidSubscriber { \n    public void keyIsValid(LockEvent event); // receive() method \n} \n \npublic interface KeyIsInvalidSubscriber {", "source": "Page 266", "chapter": "5"}
{"id": "c32f4b2f5606-1", "text": "} \n \npublic interface KeyIsInvalidSubscriber { \n    public void keyIsInvalid(LockEvent event); // receive() method soundAlarm()optoptk := create()\nsk := getNext(): Controller : Checker : KeyStorage : LockCtrl : Logger : PhotoSObs\ndl := isDaylight()alt\n[else]enterKey()k : Key\ncheckKey(k)loop: LightCtrl : AlarmCtrl\nsetLit(true)valid == truecompare()\ndl == falsekeyIsValid() loop\nkeyIsValid()\nloop keyIsInvalid()\nkeyIsInvalid()keyIsValid()for all KeyIsValid subscribers\nfor all KeyIsInvalid subscribers\nkeyIsInvalid()prompt:\n\"try again\"numOfAttempts++\nnumOfAttempts == maxNumOfAttempts\nsoundAlarm()optoptk := create()\nsk := getNext(): Controller : Checker : KeyStorage : LockCtrl : Logger : PhotoSObs\ndl := isDaylight()alt\n[else]enterKey()k : Key\ncheckKey(k)loop: LightCtrl : AlarmCtrl\nsetLit(true)valid == truecompare()\ndl == falsekeyIsValid() loop\nkeyIsValid()\nloop keyIsInvalid()\nkeyIsInvalid()keyIsValid()for all KeyIsValid subscribers\nfor all KeyIsInvalid subscribers\nkeyIsInvalid()prompt:\n\"try again\"numOfAttempts++\nnumOfAttempts == maxNumOfAttempts", "source": "Page 266", "chapter": "5"}
{"id": "c32f4b2f5606-2", "text": "\"try again\"numOfAttempts++\nnumOfAttempts == maxNumOfAttempts\nFigure 5-5: Sequence diagram for publish-subs cribe version of the use case \u201cUnlock.\u201d \nCompare this with Figure 2-27.", "source": "Page 266", "chapter": "5"}
{"id": "402f819bd857-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 253\n} \nThe new design for the Unlock use case is show n in Figure 5-5, and the corresponding code \nmight look as shown next. Notice that here the attribute numOfAttempts  belongs to the \nAlarmCtrl , unlike the first implementation in Listing 2-2 (Section 2.7), where it belonged to \nthe Controller . Notice also that the Controller  is a KeyIsInvalidSubscriber  so it \ncan prompt the user to enter a new key if the previous attempt was unsuccessful. \n \nListing 5-4: A variation of the Publisher-Subscriber design from Listing 5-2 using the \nsubscriber interfaces from Listing 5-3. \npublic class Checker implements LockPublisher { \n    protected KeyStorage validKeys_; \n    protected ArrayList keyValidSubscribers_ = new ArrayList(); \n    protected ArrayList keyInvalidSubscribers_ = new ArrayList(); \n \n    public Checker(KeyStorage ks) { validKeys_ = ks; } \n \n    public void subscribeKeyIsValid (KeyIsValidSubscriber sub) { \n        keyValidSubscribers_.add(sub); \n    } \n \n    public void subscribeKeyIsInvalid (KeyIsInvalidSubscriber sub) { \n        keyInvalidSubscribers_.add(sub); \n    }", "source": "Page 267", "chapter": "5"}
{"id": "402f819bd857-1", "text": "keyInvalidSubscribers_.add(sub); \n    } \n \n    public void checkKey(Key user_key) { \n        boolean valid = false; \n        ...  // verify the key against the database \n \n        // notify the subscribers \n        LockEvent evt = new LockEvent(this, new ArrayList()); \n        evt.data.add(key); \n \n        if (valid) { \n            for (Iterator e = keyValidSubscribers_.iterator(); \n                 e.hasNext(); ) { \n                ((KeyIsValidSubscriber) e.next()). keyIsValid (evt); \n            } \n        } else { // the lock is being tampered with \n            for (Iterator e = keyInvalidSubscribers_.iterator(); \n                e.hasNext(); ) { \n                ((KeyIsInvalidSubscriber) e.next()). keyIsInvalid (evt); \n            } \n        } \n    } \n} \n \npublic class DeviceCtrl implements KeyIsValidSubscriber { \n    protected LightBulb bulb_; \n    protected PhotoSObs photoObserver_; \n \n    public DeviceCtrl(LockPublisher keyChecker, PhotoSObs sensor, .. ) \n    { \n        photoObserver_ = sensor;", "source": "Page 267", "chapter": "5"}
{"id": "176bee32d548-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  254 \n        keyChecker.subscribeKeyIsValid(this); \n        ... \n    } \n \n    public void keyIsValid (LockEvent event) { \n        if (!photoObserver_.isDaylight())  bulb_.setLit(true); \n    } \n} \n \npublic class AlarmCtrl implements KeyIsInvalidSubscriber { \n    public static final long maxNumOfAttempts_ = 3; \n    public static final long interAttemptInterval_ =300000; //millisec \n    protected long numOfAttempts_ = 0; \n    protected long lastTimeAtempt_ = 0; \n \n    public AlarmCtrl(LockPublisher keyChecker, ...) { \n        keyChecker.subscribeKeyIsInvalid(this); \n        ... \n    } \n \n    public void keyIsInvalid (LockEvent event) { \n        long currTime = System.currentTimeMillis(); \n        if ((currTime \u2013 lastTimeAttempt_) < interAttemptInterval_) { \n            if (++numOfAttempts_ >= maxNumOfAttempts_) { \n                soundAlarm(); \n                numOfAttempts_ = 0; // reset for the next user \n            } \n        } else {  // this must be a new user's first mistake ... \n            numOfAttempts_ = 1; \n        }", "source": "Page 268", "chapter": "5"}
{"id": "176bee32d548-1", "text": "numOfAttempts_ = 1; \n        } \n        lastTimeAttempt_ = currTime; \n    } \n} \n \nIt is of note that what we just did with the original design for th e Unlock use case can be \nconsidered refactoring. In software engineering, the term refactoring  is often used to describe \nmodifying the design and/or implementation of a software module without changing its external \nbehavior, and is sometimes informally referre d to as \u201ccleaning it up.\u201d Refactoring is often \npracticed as part of the software development cy cle: developers altern ate between adding new \ntests and functionality and refactoring the code to improve its internal consistency and clarity. In \nour case, the design from Figure 2-27 has been transformed to the design in Figure 5-5. \nThere is a tradeoff between the number of receive()  methods and the switch()  statements. \nOn one hand, having a long switch()  statement complicates the Subscriber\u2019s code and makes \nit difficult to maintain and reuse. On  the other hand, having too many receive()  statements \nresults in a long class interface, difficult to read and represent graphically. \n5.1.1 Applications of Publisher-Subscriber \nThe Publisher-Subscriber design pattern is u sed in the Java AWT and Swing toolkits for", "source": "Page 268", "chapter": "5"}
{"id": "176bee32d548-2", "text": "notification of the GUI interface components about user generated events. (This pattern in Java is \nknown as Source-Listener  or delegation event model , see Chapter 7.)", "source": "Page 268", "chapter": "5"}
{"id": "3d323ca056b1-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 255\nOne of the main reasons for software components is easy visualization in integrated development \nenvironments (IDEs), so the developer can vi sually assemble the components. The components \nare represented as \u201cintegrated circuits\u201d in analogy to hardware design, and different receive()  \n/ subscribe()  methods represent \u201cpins\u201d on the circuit. If a component has too many pins, it \nbecomes difficult to visualize, and generates too ma ny \u201cwires\u201d in the \u201cblueprint.\u201d The situation is \nsimilar to determining the right number of pins on an integrated circuit. (See more about software \ncomponents in Chapter 7.) \nHere I reiterate the key benefits of using the pub-sub design pattern and indirect communication \nin general: \n\uf0b7 The components do not need to know each other\u2019s identity. For example, in the sample \ncode given in Listing 1-1 (Section 1.4.2), Lo ckCtrl maintains a reference to a LightCtrl \nobject. \n\uf0b7 The component\u2019s business logic is contained within the component alone. In the same \nexample, LockCtrl explicitly invokes the LightCtrl\u2019s method setLit() , meaning that it \nminds LightCtrl\u2019s business. In the worst case,  even the checking of the time-of-day may", "source": "Page 269", "chapter": "5"}
{"id": "3d323ca056b1-1", "text": "be delegated to LockCtrl in order to  decide when to turn the light on. \nBoth of the above form the basis for co mponent reusability, because making a component \nindependent of others makes it reusable. The pub-sub pattern is the most basic pattern for \nreusable software components as will be discussed in Chapter 7. \nIn the \u201cideal\u201d case, all objects could be made se lf-contained and thus reusable by applying the \npub-sub design pattern. However, th ere are penalties to pay. As visible from the examples above, \nindirect communication requires much more code, which results in increased demand for memory and decreased performance. Thus, if it is not likely that a component will need to be reused or if \nperformance is critical, direct communication s hould be applied and the pub-sub pattern should \nbe avoided. \nWhen to apply the pub-sub pattern?  The answer depends on whether you anticipate that the \ncomponent is likely to be reused in future pr ojects. If yes, apply pub-sub. You should understand \nthat decoupled objects are independent, therefore reusable and easier to understand, while highly \ninterleaved objects provide fast inter-object co mmunication and compact code. Decoupled objects \nare better suited for global understanding, whereas interleaved objects are better suited for local", "source": "Page 269", "chapter": "5"}
{"id": "3d323ca056b1-2", "text": "are better suited for global understanding, whereas interleaved objects are better suited for local \nunderstanding. Of course, in a large sy stem, global understa nding matters more. \n5.1.2 Control Flow \nFigure 5-6 highlights the difference in control flow for direct and indirect communication types. \nIn the former case, the control is  centralized and all flows emanate from the Controller. In the \nlatter case, the control is decentralized, and it is passed as a token around, cascading from object \nto object. These diagrams also show the dynamic  (behavioral) architecture  of the system.", "source": "Page 269", "chapter": "5"}
{"id": "6d8420b68f35-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  256 \nAlthough in Figure 5-6(b) it appears as if the Checke r plays a central role, this is not so because it \nis not \u201caware\u201d of being assigned such a role, i. e., unlike the Controller from Figure 5-6(a), this \nChecker does not encode the requisite knowledge to  play such a role. The outgoing method calls \nare shown in dashed lines to indicate that these are indirect calls, through the Subscriber interface. \nWhatever the rules of behavior are stored in one Controller or distributed (cascading) around in \nmany objects, the output  (seen from outside of the system) is the same. Organization (internal \nfunction) matters only if it simplifies th e software maintenance and upgrading. create()getNext()\n: Checker: KeyStorage\n: LockCtrl: Logger\n: PhotoSObs: Key\ncheckKey()\n: LightCtrl: AlarmCtrl: ControllerlogTransaction()setOpen()\nisDaylight()\nsetLit() soundAlarm()\n(a)create()getNext(): Checker\n: KeyStorage\n: LockCtrl\n: Logger\n: PhotoSObs: Key\ncheckKey()\n: LightCtrl: AlarmCtrl: ControllerkeyIsValid()\nisDaylight()keyIsInvalid()\n(b)", "source": "Page 270", "chapter": "5"}
{"id": "6d8420b68f35-1", "text": "isDaylight()keyIsInvalid()\n(b)\nFigure 5-6: Flow control without (a) and wi th the Pub-Sub pattern (b). Notice that these \nUML communication diagrams  are redrawn from Figure 2-27 and Figure 5-5, respectively.", "source": "Page 270", "chapter": "5"}
{"id": "61dc4d510cce-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 257\n5.1.3 Pub-Sub Pattern Initialization \nNote that the \u201csetup\u201d part of the pattern, exampl e shown in Figure 5-7, plays a major, but often \nignored, role in the pattern. It essentially represents  the master plan of solving the problem using \nthe publish-subscribe pattern and indirect communication. \nMost programs are not equipped to split hard pr oblems into parts and then use divide-and-\nconquer methods. Few programs, too, represent thei r goals, except perhaps as comments in their \nsource codes. However, a class of programs, called General Problem Solver (GPS), was \ndeveloped in 1960s by Allen Newe l, Herbert Simon, and collaborat ors, which did have explicit \ngoals and subgoals and solved some si gnificant problems [Newel & Simon, 1962]. \nI propose that goal representation in object-oriente d programs be implemented in the setup part of \nthe program, which then can act at any time during the execution (not only at the initialization) to \n\u201crewire\u201d the object relationships. \n \n5.2 More Patterns \n Publisher-Subscriber belongs to the category of behavioral design patterns. Behavioral patterns  \nseparate the interdependent behavior of objects fro m the objects themselves, or stated differently,", "source": "Page 271", "chapter": "5"}
{"id": "61dc4d510cce-1", "text": "separate the interdependent behavior of objects fro m the objects themselves, or stated differently, \nthey separate functionality from the object to wh ich the functionality applies. This promotes \nreuse, because different types of functionality can be applied to the same object, as needed. Here I \nreview Command  as another behavioral pattern. \nAnother category is structural patterns. An ex ample structural pattern reviewed later is Proxy . : Controller : Checker : LockCtrl : Logger : LightCtrl : AlarmCtrl\nsubscribeKeyIsValid()\nsubscribeKeyIsValid()\nsubscribeKeyIsInvalid()\nsubscribeKeyIsValid()\nsubscribeKeyIsInvalid()create()\nsubscribeKeyIsInvalid() A method call\nthat passes a\nreference to theChecker: Controller : Checker : LockCtrl : Logger : LightCtrl : AlarmCtrl\nsubscribeKeyIsValid()\nsubscribeKeyIsValid()\nsubscribeKeyIsInvalid()\nsubscribeKeyIsValid()\nsubscribeKeyIsInvalid()create()\nsubscribeKeyIsInvalid() A method call\nthat passes a\nreference to theChecker\n \nFigure 5-7: Initialization of the pub-sub for the lock control example.", "source": "Page 271", "chapter": "5"}
{"id": "f1aecc686663-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  258 \nA common drawback of design patterns, particularly behavioral patterns, is that we are replacing \nwhat would be a single method call with many  method calls. This results in performance \npenalties, which in certain cases may not be acceptabl e. However, in most cases the benefits of \ngood design outweigh the performance drawbacks. \n5.2.1 Command \nObjects invoke methods on other objects as depicted in Figure 1-22, which is abstracted in Figure 5-8(a). The need for the Command pattern arises if  the invoking object (client) needs to reverse \nthe effect of a previous method invocation. Anot her reason is the ability to trace the course of the \nsystem operation. For example, we may need to ke ep track of financial transactions for legal or \nauditing reasons. The purpose of the Command patte r is to delegate the functionality associated \nwith rolling back the server object\u2019s state and logging the history of the system operation away \nfrom the client object to the Command object, see Figure 5-8(b). \nInstead of directly invoking a method on the Rece iver (server object), the client object appoints a \nCommand for this task. The Command pattern (Fig ure 5-9) encapsulates an action or processing", "source": "Page 272", "chapter": "5"}
{"id": "f1aecc686663-1", "text": "task into an object thus increasing flexibility in calling for a service. Command represents \noperations as classes  and is used whenever a method call alone is not sufficient. The Command \nobject is the central player in the Command pattern, but as with most patterns, it needs other \nobjects to assist with accomplishing the task. At runtime, a control is passed to the execute()  \nmethod of a non-abstract-class object derived from Command. \nFigure 5-9(c) shows a sequence diagram on how to  create and execute a command. In addition to \nexecuting requests, we may need to be able to trace the course of the system operation. For \nexample, we may need to keep track of fina ncial transactions for legal or auditing reasons. \nCommandHistory maintains history log of Comma nds in linear sequence of their execution. Client\nAClient\nAServer\nBServer\nBdoAction( params )\n(a)Client\nAClient\nAexecute()\nReceiver\nBReceiver\nBdoAction( params )\nCommandCommandcreate( params )\n(b)unexecute()\n \nFigure 5-8: Command pattern interposes Command (and other) objects between a client\nand a server object. Complex actions about ro lling back and forward the execution history\nare delegated to the Command, away from the client object.", "source": "Page 272", "chapter": "5"}
{"id": "6f5a1765ac98-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 259\nIt is common to use Command pattern in operatin g across the Internet. Fo r example, suppose that \nclient code needs to make a function call on an object of a class residing on a remote server. It is not possible for the client code to make an ordinary method call on this object because the remote \nobject cannot appear in the usual compile-execute process. It is also difficult to employ remote \nmethod invocation (Section 5.4.2) here because we often cannot program the client and server at \nthe same time, or they may be programmed by diffe rent parties. Instead, the call is made from the \nclient by pointing the browser to the file containing the servlet (a server-side software \ncomponent). The servlet then calls its method service(HttpServletRequest, \nHttpServletResponse) . The object HttpServletRequest  includes all the information \nthat a method invocation requires, such as the argument values, obtained from the \u201cenvironment\u201d \nvariables at standardized global locations. The object HttpServletResponse  carries the \nresult of invoking service() . This technique embodies the basic idea of the Command design \npattern. (See also Listing 5-5.) \nWeb services allow a similar runtime function di scovery and invocation, as will be seen in \nChapter 8. (a) (b)invokerinvoker \u00abinterface\u00bb\nCommand\n+  execute()", "source": "Page 273", "chapter": "5"}
{"id": "6f5a1765ac98-1", "text": "Command\n+  execute()\nActionType1Cmd+  execute()ActionType2Cmd\n+  execute()Receiver1\n+  doAction1()\nReceiver2\n+  doAction2()receiver\nreceiverCommand\nKnowing Responsibilities:\n\u2022 Knows receiver of action request\n\u2022Optional: May know whether action is reversible\nDoing Responsibilities:\n\u2022 Executes an action\n\u2022Optional: May undo an action if it is reversible\ncustodian invoker cmd : Command\nexecute()receiver\ndoAction(args)create(receiver, args)\naccept(cmd): CommandHistory\nlog(cmd)custodian invoker cmd : Command\nexecute()receiver\ndoAction(args)create(receiver, args)\naccept(cmd): CommandHistory\nlog(cmd)(c)\nFigure 5-9: (a) Command object employee ca rd. (b) The Command design pattern (class \ndiagram). The base Command class is an int erface implemented by concrete commands. \n(c)\uf020Interaction diagram for creati ng and executing a command.", "source": "Page 273", "chapter": "5"}
{"id": "09ca4523b0a4-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  260 \nUndo/Redo \nThe Command pattern may optionally be able to support rollback  of user\u2019s actions in an elegant \nfashion. Anyone who uses computers appreciates the value of being able to undo their recent \nactions. Of course, this feature assumes that a command\u2019s effect can be reversed. In this case, the \nCommand interface would have two mo re operations (Figure 5-10(a)): isReversible()  to \nallow the invoker to find out whether this command can be undone; and unexecute()  to undo \nthe effects of a previous execute()  operation. \nFigure 5-10(b) shows a sequence diagram on how  to undo/redo a command, assuming that it is \nundoable. Observe also that CommandHistory should decrement its pointer of the current \ncommand every time a command is undone and incr ements it every time a command is redone. \nAn additional requirement on CommandHistory is to manage properly the undo/redo caches. For \nexample, if the user backs up along the undo queue  and then executes a new command, the whole \nredo cache should be flushed. Similarly, upon a context switching, both undo/redo caches should \nbe flushed. Obviously, this does not provide for long-term archiving of the commands; if that is", "source": "Page 274", "chapter": "5"}
{"id": "09ca4523b0a4-1", "text": "required, the archive should be maintain ed independently of the undo/redo caches. \nIn physical world, actions are never reversible (b ecause of the laws of thermodynamics). Even an \napproximate reversibility may not be realistic to  expect. Consider a simple light switch. One \nmight thing that turning the switch off is exactly opposite of turning it on. Therefore, we could \nimplement a request to turn the switch off as an undo operation of the command to turn the switch on. Unfortunately, this may not be true. For exam ple, beyond the inability to recover the energy \nlost during the period that the switch was on, it may also happen that the light bulb is burnt. \nObviously, this cannot be undone (unless the syst em has a means of automatically replacing a \nburnt light bulb with a new one \uf04a). \nIn digital world, if the previous state is stored  or is easy to compute, then the command can be \nundone. Even here we need to beware of potential error accumulation. If a number is repeatedly \ndivided and then multiplied by another number, ro unding errors or limited number of bits for \nnumber representation may yield a different  number than the one we started with. (a) (b)optinvoker : Command\nundo()receiver\nisReversible(): CommandHistory\nreversible == true\nunexecute()doInverseAction()", "source": "Page 274", "chapter": "5"}
{"id": "09ca4523b0a4-2", "text": "isReversible(): CommandHistory\nreversible == true\nunexecute()doInverseAction()\nsetCurrentCmdPtr()ActionType1Cmd\n+  execute()\n+  unexecute()\n+  isReversible()ActionType2Cmd\n+  execute()\n+  unexecute()\n+  isReversible()\u00abinterface\u00bb\nCommand\n+  execute()\n+  unexecute()+  isReversible() : boolean\nActionType1Cmd\n+  execute()\n+  unexecute()\n+  isReversible()ActionType2Cmd\n+  execute()\n+  unexecute()\n+  isReversible()\u00abinterface\u00bb\nCommand\n+  execute()\n+  unexecute()+  isReversible() : boolean\n \nFigure 5-10: (a) Class diagram for commands th at can be undone. (b) Interaction diagram \nfor undoing a (reversible) comma nd. Compare to Figure 5-9.", "source": "Page 274", "chapter": "5"}
{"id": "e03e8c270fde-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 261\n5.2.2 Decorator \nThe Decorator pattern is used to add non-essential behavior to key objects in a software design. \nThe embellished class (or, decoratee) is wrapped up by an arbitrary number of Decorator classes, \nwhich provide special-case behaviors (embellishments). \nFigure 5-11 Notice that the Decorator is an  abstract class (the class and method names are italicized). The \nreason for this choice is to collect the common th ings from all different decorators into a base \ndecorator class. In this case, th e Decorator class will contain a re ference to the next decorator. \nThe decorators are linked in a chain. The client has a reference to the start of the chain and the \nchain is terminated by the real subject. Figure 5-11(c) illustrates how a request from the client \npropagates forward through the chain until it r eaches the real subject, and how the result \npropagates back. \nTo decide whether you need to introduce Decorator, look for special-case behaviors \n(embellishment logic) in your design. \nConsider the following example, where we wish to implement the code that will allow the user to \nconfigure the settings for controlling the house hold devices when the doors are unlocked or", "source": "Page 275", "chapter": "5"}
{"id": "e03e8c270fde-1", "text": "configure the settings for controlling the house hold devices when the doors are unlocked or \nlocked. The corresponding user interface is show n in Figure 2-2 (Section 2.2). Figure 5-12 and Decorator\nKnowing Responsibilities:\n\u2022 Knows next decorator or real subject\u2022 Has same interface as real subject\nDoing Responsibilities:\n\u2022 Contributes a special-case processing\n\u2022 Forwards the request to next object\nin chain (decorator or real subject)\n(a)\n: ConcreteDecorator2 : RealSubject\naddedProcessing( )\nresult\nmoreAddedProcessing( ): ConcreteDecorator1 client :\naddedProcessing( )request( args )\n(c)\nmoreAddedProcessing( )result? \u2021\uf02arequest( args\uf02a)\nrequest(? args\uf02a\u2021)\nresult? \u2021\uf02aand \u2021 denote \nadded special-\ncase processing(b)clientclient \u00abinterface\u00bb\nSubject\n+  request() \nRealSubject\n+  request()RealSubject\n+  request()Decorator\n+  request()Decorator\n+  request()next object\nConcreteDecorator1\n+  request()ConcreteDecorator2\n+  request()\nFigure 5-11: (a) Decorator object employee card . (b) The Decorator design pattern (class \ndiagram). (c) \uf020Interaction diagram for the Decorator pattern.", "source": "Page 275", "chapter": "5"}
{"id": "4c049c3327a1-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  262 \nFigure 5-13 show UML diagrams that use the Decorator design pattern in solving this problem. \nNotice the slight differences in the class diagrams in Figure 5-11(b) and Figure 5-12. As already pointed out, the actual pattern implementation will not always strictly adhere to its generic \nprototype. \nIn this example, the decorating functionalities coul d be added before or after the main function, \nwhich is to activate the lock control. For ex ample, in Figure 5-13 the decorating operation \nLightCtrl.turnOnLight()  is added before LockCtrl.activate() , but \nMusicCtrl.turnOnMusicPlayer()  is added after it. In this case all of these operations \nare commutative and can be executed in any orde r. This may not always be the case with the \ndecorating functionalities. \n \n5.2.3 State \nThe State design pattern is usually used when an  object\u2019s behavior depends on its state in a \ncomplex way. In this case, the state  determines a mode  of operation. Recall that the state  of a \nsoftware object is represented by the current values of its attributes. The State pattern externalizes", "source": "Page 276", "chapter": "5"}
{"id": "4c049c3327a1-1", "text": "software object is represented by the current values of its attributes. The State pattern externalizes \nthe relevant attributes into a State object, and this State object has the responsibility of managing the state transitions of the original object. The original object is called \u201cContext\u201d and its attributes \nare externalized into a State object (Figure 5-14). \nA familiar example of object\u2019s state determining its mode of operation includes tools in document \neditors. Desktop computers normally have only ke yboard and mouse as interaction devices. To \nenable different manipulations of document object s, the document needs to be put in a proper \nstate or mode of operation. That is why we sel ect a proper \u201ctool\u201d in a toolbar before performing a \nmanipulation. The selected tool sets the document state. Consider an example of a graphics \neditor, such as Microsoft PowerP oint. When the user clicks the mouse pointer on a graphical \nobject and drags the mouse, what will happen depends on the currently selected tool. The default ControllerController\u00abinterface\u00bb\nDeviceCtrl\n+  activate() \nLockCtrl\n+  activate()\n\u2013 disarmLock()\nMusicCtrl\n+  activate()\n\u2013 turnOnMusicPlayer()nextDevice\nLightCtrl\n+  activate()\n\u2013 turnOnLight()AlarmCtrl\n+  activate()\n\u2013. . .Subject and\nDecorator interfaceclient\nRealSubject", "source": "Page 276", "chapter": "5"}
{"id": "4c049c3327a1-2", "text": "+  activate()\n\u2013. . .Subject and\nDecorator interfaceclient\nRealSubject\nConcrete Decorators\nFigure 5-12: Example Decorator class diagram, for implementing the interface in Figure 2-2.", "source": "Page 276", "chapter": "5"}
{"id": "462e91511c0c-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 263\ntool will relocate the object to a new location; the rotation tool will rotate the object for an angle \nproportional to the distance the mouse is dragged over; etc. Notice that the same action (mouse \nclick and drag) causes different behaviors, dependi ng on the document state (i.e., the currently \nselected tool). \nThe State pattern is also useful when an object implements complex conditional logic for \nchanging its state (i.e., the values of this object\u2019s attributes). We say that the object is \ntransitioning from one state  (one set of attribute values) to another state  (another set of attribute \nvalues). To simplify the state transitioning, we de fine a State interface and different classes that \nimplement this interface correspond to different st ates of the Context object (Figure 5-14(b)). \nEach concrete State class implements the beha vior of the Context associated with the state \nimplemented by this State class. The behavior in cludes calculating the new state of the Context. \nBecause specific attribute values are encapsulated in different concrete states, the current State \nclass just determines the next state and returns it to  the Context. Let us assume that the UML state \ndiagram for the Context class is represented by the example in Figure 5-14(c). As shown in", "source": "Page 277", "chapter": "5"}
{"id": "462e91511c0c-1", "text": "Figure 5-14(d), when the Context receives a method call request()  to handle an event, it calls \nthe method handle()  on its currentState . The current state processes the event and optactivate(): Controller\ndl := isDaylight()alt\n[else]enterKey( )\nval == true\nnumOfAttempts++\nalt numOfAttempts == maxNumOfAttempts\nactivate()denyMoreAttempts()\n[else]refval := check the key validity\n(see sequence fragment in Figure 2-20): LockCtrl : MusicCtrl : LightCtrl : AlarmCtrl : PhotoObsrv\nactivate()\nturnOnMusicPlayer()activate()turnOnLight()dl == false\ndisarmLock()\n\u2026AlarmCtrl\npreceded by\nsuitable decorators\n \nFigure 5-13: Decorator sequence diagram for the class diagram in Figure 5-12.", "source": "Page 277", "chapter": "5"}
{"id": "7195a85504be-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  264 \nperforms any action associated with the current state transition. Finally, it returns the next state to \nthe caller Context object. The Context sets this next state as the current state and the next \nrequest  will be handle d by the new current state. \n5.2.4 Proxy \nThe Proxy pattern  is used to manage or control access to an object. Proxy is needed when the \nlogistics  of accessing the subject\u2019s services is overly complex and comparable or greater in size \nthan that of client\u2019s primary responsibility. In  such cases, we introduce a helper object (called \n\u201cproxy\u201d) for management of the subject invocati on. A Proxy object is a surrogate that acts as a \nstand-in for the actual subject, and controls or  enhances the access to it (Figure 5-15). The proxy \nobject forwards requests to the subject when appr opriate, depending on whether the constraint of \nthe proxy is satisfied. (a)(b)Context\n+  request(evt : Event)Context\n+  request(evt : Event)\u00abinterface\u00bb\nState\n+  handle()\nConcreteStateA\n+  handle()ConcreteStateB\n+  handle()currentState State\nKnowing Responsibilities:\n\u2022 Knows one set of values (state) of\nattributes of the Context object\nDoing Responsibilities:", "source": "Page 278", "chapter": "5"}
{"id": "7195a85504be-1", "text": "attributes of the Context object\nDoing Responsibilities:\n\u2022 Implement behavior associated\nwith this state of the Context\n(c)event-2 [condition] / action-2 event-1\nState-A State-B: Context\nrequest( event-1 )currentState : ConcreteStateA\nhandle( event-1 )\nresult, nextState\nresult currentState := nextState\nrequest( event-2 )\nopt condition == truenextState := this\nhandle( event-2 )perform action-2\nresult, nextState\ncurrentState := nextStatenextState :=\nConcreteStateB (d)\nFigure 5-14: (a) State object employee card. (b) The State design pattern (class diagram). \n(c) Example state diagram for the Context object. (d) \uf020Interaction diagram for the state \ndiagram in (c).", "source": "Page 278", "chapter": "5"}
{"id": "38a2a7ab4c95-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 265\nThe causes of access complexity and th e associated constraints include: \n\uf0b7 The subject is located in a remote address sp ace, e.g., on a remote host, in which case the \ninvocation (sending messages to it) requires following complex networking protocols. \nSolution : use the Remote Proxy  pattern for crossing the barrier between different \nmemory spaces \n\uf0b7 Different access policies constrain the access to the subject. Security policies require that \naccess is provided only to the authorized clie nts, filtering out others. Safety policies may \nimpose an upper limit on the number of simultaneous accesses to the subject.  Solution : use the Protection Proxy  pattern for additional housekeeping \n\uf0b7 Deferred instantiation of the subject, to speed  up the performance (provided that its full \nfunctionality may not be immediately necessary). For example, a graphics editor can be started faster if the graphical elements outsi de the initial view are not loaded until they \nare needed; only if and when the user chang es the viewpoint, the missing graphics will be \nloaded. Graphical proxies make this process tr ansparent for the rest of the program.  \nSolution : use the Virtual Proxy  pattern for optimization in object creation \nIn essence we could say that proxy allows client  objects to cross a barrier to server objects (or,", "source": "Page 279", "chapter": "5"}
{"id": "38a2a7ab4c95-1", "text": "\u201csubjects\u201d). The barrier may be physical (suc h as network between the client and server \ncomputers) or imposed (such as security policies to prevent unauthorized access). As a result, the \nclient cannot or should not access the server by a simple method call as when the barrier does not \nexist. The additional functionality needed to cross th e barrier is extraneous to the client\u2019s business \nlogic. The proxy object abstracts the details of  the logistics of accessing the subject\u2019s services Proxy\nKnowing Responsibilities:\n\u2022 Knows the real subject of requests\u2022 Has same interface as real subject\nDoing Responsibilities:\n\u2022 Intercepts & preprocesses requests\u2022 Ensures safe, efficient & correct\naccess to the real subject\n(a) (b)clientclient \u00abinterface\u00bb\nSubject\n+  request() \nRealSubject\n+  request()RealSubject\n+  request()Proxy\n+  request()Proxy\n+  request()realSubject\nclient : : Proxy\nresult?\uf02a: RealSubject\npreprocessRequest( )\npostprocessResult( )request( args\uf02a)request( args )\nresult (c)opt constraint satisfied\uf02adenotes possibly\npreprocessed\ninput arguments\nFigure 5-15: (a) Proxy object employee card. (b) The Proxy design pattern (class diagram). \n(c)\uf020Interaction diagram for the Proxy pattern.", "source": "Page 279", "chapter": "5"}
{"id": "3480bc9fc7bd-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  266 \nacross different barriers. It does this transparen tly, so the client has an illusion it is directly \ncommunicating with the subject, and does not know that there is a barrier in the middle. \nProxy offers the same interface (set of methods and their signatures) as the real subject and \nensures correct access to the real subject. For th is reason, the proxy maintains a reference to the \nreal subject (Figure 5-15(b)). Because of the identi cal interface, the client does not need to change \nits calling behavior and syntax from that which it would use if there were no barrier involved. \nThe Remote Proxy pattern will be incorporated in to a more complex Broker pattern (Section 5.4). \nThe rest of this section provides more detail on the Protection Proxy. \nProtection Proxy \nThe Protection Proxy pattern can be used to impl ement different policies to constrain the access \nto the subject. For example, a security policy may require that a defined service should be seen differently by clients with different privileges. Th is pattern helps us customize the access, instead \nof using conditional logic to control the service a ccess. In other words, it is applicable where a \nsubset of capabilities or partial capability should be made available to different actors, based on \ntheir roles and privileges.", "source": "Page 280", "chapter": "5"}
{"id": "3480bc9fc7bd-1", "text": "their roles and privileges. \nFor example, consider our case study system for secure home access. The sequence diagram for \nuse case UC-5: Inspect Access History is shown in  Figure 2-26. Before the Controller calls the \nmethod accessList := retrieve(params : string)  on Database Connection, the \nsystem should check that this user is authorized  to access the requested data. (This fragment is not \nshown in Figure 2-26.) Figure 5-16 depicts the B oolean logic for controlling the access to the data \nin the system database. One way to implement th is scheme is to write one large conditional IF-\nTHEN-ELSE statement. This appr oach would lead to a complex code that is difficult to \nunderstand and extend if new policies or roles n eed to be considered (e.g., the Maintenance [ user == sys-admin ]\n[ user == landlord ][else]Grant full access\nto metadata and data\nGrant read/write access\nto all data\nGrant read-only access to \npersonal data and activity \ndata for own apartment\nDeny all access[else]\n[ user == tenant ]\n[else]Obtain user role\nand credentials\n \nFigure 5-16: Conditional logic for controllin g access to the database of the secure home\naccess system.", "source": "Page 280", "chapter": "5"}
{"id": "1b5e1aa9524c-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 267\nactor). In addition, it serves as a distraction from th e main task of the client or server objects. This \nis where protection proxy enters the picture in  and takes on the authorization responsibility. \nFigure 5-17 shows how Protection Proxy is implemen ted in the example of safe database access. \nEach different proxy type specifies a set of le gal messages from client to subject that are \nappropriate for the current user\u2019s access rights.  If a message is not legal, the proxy will not \nforward it to the real subject (the database connection object ConnectionImpl ); instead, the \nproxy will send an error message back to the caller (i.e., the client). \nIn this example, the Factory object acts as a cust odian that sets up the Proxy pattern (see Figure \n5-17 and Figure 5-18). \nIt turns out that in this example we need tw o types of proxies: (a) proxies that implement the \ndatabase connection interface, such as java.sql.Connection  if Java is used; and (b) \nproxies that implement the SQL statement interface, such as java.sql.Statement  if Java is \nused. The connection proxy guards access to the database metadata, while the statement proxy \nguards access to the database data. The partial class diagram in Figure 5-17 shows only the", "source": "Page 281", "chapter": "5"}
{"id": "1b5e1aa9524c-1", "text": "connection-proxy classes, and Figur e 5-18 mentions the statement proxy only in the last method \ncall createStatmProxy() , by which the database proxy ( DBConTenant ) creates a \nstatement proxy and returns it. client : Controllerclient : Controller\ndBase\u00abinterface\u00bb\njava.sql.Connection\n+  createStatement( \u2026 ) : Statement\n+  getMetaData() : DatabaseMetaData\n\u2026\u00abinterface\u00bb\njava.sql.Connection\n+  createStatement( \u2026 ) : Statement\n+  getMetaData() : DatabaseMetaData\n\u2026\nrequest() methodsSubject\nConnectionImpl\n\u2026\n+  createStatement( \u2026 ) : Statement\n+  getMetaData() : DatabaseMetaData\n\u2026ConnectionImpl\n\u2026\n+  createStatement( \u2026 ) : Statement\n+  getMetaData() : DatabaseMetaData\n\u2026RealSubjectRealSubject\ndBc dBc\nDBConTenant\n#  credentials_ : Object\n+  createStatement( \u2026 ) : Statement\n+  getMetaData() : DatabaseMetaData\u2026\u2013 checkRequestAuthorized()\u2013 createStatmProxy( \u2026 ) : StatementDBConTenant\n#  credentials_ : Object\n+  createStatement( \u2026 ) : Statement\n+  getMetaData() : DatabaseMetaData\u2026\u2013 checkRequestAuthorized()\u2013 createStatmProxy( \u2026 ) : Statementtenant\u2019s Proxy\nDBConAdmin\n#  credentials_ : Object\n+  createStatement( \u2026 ) : Statement", "source": "Page 281", "chapter": "5"}
{"id": "1b5e1aa9524c-2", "text": "#  credentials_ : Object\n+  createStatement( \u2026 ) : Statement\n+  getMetaData() : DatabaseMetaData\u2026\u2013 checkRequestAuthorized()\u2013 createStatmProxy( \u2026 ) : StatementDBConAdmin\n#  credentials_ : Object\n+  createStatement( \u2026 ) : Statement\n+  getMetaData() : DatabaseMetaData\u2026\u2013 checkRequestAuthorized()\u2013 createStatmProxy( \u2026 ) : Statementadmin\u2019s Proxy\nFactory\n+  getDbaseConnection(credentials : Object) : java.sql.ConnectionFactory\n+  getDbaseConnection(credentials : Object) : java.sql.Connectionfactory\nFactory pattern\nfor creating Connection\nand wrapping with Proxy\nFigure 5-17: Class diagram for the example proxy for enforcing authorized database access.\nSee the interactions in Figure 5-18. (Compare to Figure 5-15(b) for generic Proxy pattern.)", "source": "Page 281", "chapter": "5"}
{"id": "6bb5f1c1a3e8-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  268 \nFigure 5-18 \n \nListing 5-5: Implementation of the Protection Proxy that provides safe access to the \ndatabase in the secure home access system. \nimport java.sql.Connection; \nimport java.sql.DriverManager; \nimport java.sql.ResultSet; \nimport java.sql.Statement; \nimport javax.servlet.ServletConfig; \nimport javax.servlet.http.HttpServlet; \nimport javax.servlet.http.HttpServletRequest; \nimport javax.servlet.http.HttpServletResponse; \n \npublic class WebDataAccessServlet extends HttpServlet { \n    private String        // database access parameters \n        driverClassName = \"com.mysql.jdbc.Driver\", \n        dbURL = \"jdbc:mysql://localhost/homeaccessrecords\", \n        dbUserID = null, \n        dbPassword = null; \n    private Connection dBase = null; dBase := getDbaseConnection( credentials ): Controller factory : Factory\n[credentls == \"landlord\"]altproxyLL :\nDBConLlorddBc :\nConnectionImplproxyTN :\nDBConTenant\n[credentls == \"admin\"]\nreturn proxyAD\nreturn proxyLL\nreturn proxyTN\n[else][credentls == \"tenant\"]\nreturn NULL\nreturn SQL Statement Proxy(a)\n(b)proxyAD :\nDBConAdmin\ndBc := java.sql.DriverManager.getConnection(\u2026)", "source": "Page 282", "chapter": "5"}
{"id": "6bb5f1c1a3e8-1", "text": "(b)proxyAD :\nDBConAdmin\ndBc := java.sql.DriverManager.getConnection(\u2026)\nproxyLL := create( dBc )\nproxyTN := create( dBc )proxyAD := create( dBc )\nquery := createStatement( \u2026 )statm := createStatement( \u2026 )\ncreateStatmProxy( statm, \u2026 )\nFigure 5-18: Example of Protection Proxy set up (a) and use (b) that solves the access-\ncontrol problem from Figure 5-16. (See the co rresponding class diagram in Figure 5-17.)", "source": "Page 282", "chapter": "5"}
{"id": "134ac34f9ae2-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 269\n \n    public void init(ServletConfig config) throws ServletException { \n        super.init(config); \n        ... \n \n        dbUserID = config.getInitParameter(\"userID\"); \n        dbPassword = config.getInitParameter(\"password\"); \n        Factory factory = new Factory(driverClassName, dbURL); \n        dBase = factory.getDbaseConnection(dbUserID, dbPassword); \n    } \n \n    public void service( \n        HttpServletRequest req, HttpServletResponse resp \n    ) throws ServletException, java.io.IOException { \n        Statement statm = dBase.createStatement(); \n        // process the request and prepare ... \n        String sql = // ... an SQL statement from the user's request \n        boolean ok = statm.execute(sql); \n \n        ResultSet result = statm.getResultSet(); \n        // print the result into the response (resp argument) \n    } \n} \n \npublic class Factory { \n    protected String dbURL_; \n    protected Connection dBc_ = null; \n \n    public Factory(String driverClassName, String dbURL) { \n        // load the database driver class   (the Driver class creates \n        Class.forName(driverClassName);  //    an instance of itself) \n        dbURL_ = dbURL; \n    }", "source": "Page 283", "chapter": "5"}
{"id": "134ac34f9ae2-1", "text": "dbURL_ = dbURL; \n    } \n \n    public Connection getDbaseConnection ( \n        String dbUserID, String dbPassword \n    ) { \n        dBc_ = DriverManager.getConnection( \n            dbURL_, dbUserID, dbPassword \n        ); \n \n        Connection proxy = null; \n \n        int userType = getUserType(dbUserID, dbPassword); \n        switch (userType) { \n            case 1:        // dbUserID is a system administrator \n                proxy = new DBConAdmin(dBc_, dbUserID, dbPassword); \n            case 2:        // dbUserID is a landlord \n                proxy = new DBConLlord(dBc_, dbUserID, dbPassword); \n            case 3:        // dbUserID is a tenant \n                proxy = new DBConTenant(dBc_, dbUserID, dbPassword); \n            default:        // dbUserID cannot be identified \n                proxy = null; \n        } \n        return proxy; \n    } \n}", "source": "Page 283", "chapter": "5"}
{"id": "8fb3186cd30e-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  270 \n \n// Protection Proxy class for the actual java.sql.Connection \npublic class DBConTenant implements Connection { \n    protected Connection dBc_ = null; \n    protected String \n        dbUserID = null, \n        dbPassword = null;; \n \n    public DBConTenant( \n        Connection dBc, String dbUserID, String dbPassword \n    ) { \n        ... \n    } \n \n    public Statement createStatement () { \n        statm = dBc_.createStatement(); \n \n        return createStatmProxy(statm, credentials_); \n    } \n \n    private Statement createStatmProxy( \n        Statement statm, credentials_ \n    ) { \n        // create a proxy of java.sql.Statement that is appropriate \n        // for a user of the type \"tenant\" \n    } \n} \n \nOne may wonder if we should similarly use Protect ion Proxy to control th e access to the locks in \na building, so the landlord has access to all apartm ents and a tenant only to  own apartment. When \nconsidering the merits of this approach, th e developer first needs to compare it to a \nstraightforward conditional statement and see which approach would create a more complex implementation.", "source": "Page 284", "chapter": "5"}
{"id": "8fb3186cd30e-1", "text": "straightforward conditional statement and see which approach would create a more complex implementation. \nThe above example illustrated the use of Proxy to implement security policies for authorized data \naccess. Another example involves safety policies to limit the number of simultaneous accesses. \nFor example, to avoid inconsistent reads/writes, th e policy may allow at most one client at a time \nto access the subject, which in effect serializes th e access to the subject. This constraint is \nimplemented by passing a token among clients\u2014only the client in possession of the token can access the subject, by presenting th e token when requesting access. \nThe Protection Proxy pattern is structurally iden tical to the Decorator pattern (compare Figure \n5-11 and Figure 5-15). We can also create a chain of Proxies, same as with the Decorators (Figure 5-11(c)). The key difference is in the intent: Protection Proxy protects an object (e.g., from \nunauthorized access) while Decorator adds special-case behavior to an object. \n \n SIDEBAR 5.1: Structure and In tention of Design Patterns", "source": "Page 284", "chapter": "5"}
{"id": "73a0c3b93dab-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 271\n\uf0a8 The reader may have noticed that many desi gn patterns look similar to one another. For \nexample, Proxy is structurally  almost identical to Decorator. The difference between them is in \ntheir intention \u2014what they are used for. The intention of Decorator is to add functionality, \nwhile the intention of Proxy is to subtract  functionality, particularly for Protection Proxy. \n \n5.3 Concurrent Programming \n \n\u201cThe test of a first-rate intelligence is the ability to hold two opposed ideas in mind at the same time and \nstill retain the ability to function.\u201d \u2014F. Scott Fitzgerald \nThe benefits of concurrent programming incl ude better use of multiple processors and easier \nprogramming of reactive (event-driven) applicatio ns. In event-driven applications, such as \ngraphical user interfaces, the user expects a quick response from the system. If the (single-\nprocessor) system processes all requests sequentia lly, then it will respond with significant delays \nand most of the requestors will be unha ppy. A common technique is to employ time-sharing  or \ntime slicing\u2014a single processor dedicates a small amount of time for each task , so all of them \nmove forward collectively by taking turns on  the processor. Although none of the tasks", "source": "Page 285", "chapter": "5"}
{"id": "73a0c3b93dab-1", "text": "move forward collectively by taking turns on  the processor. Although none of the tasks \nprogresses as fast as it would if it were alone, none of  them has to wait as long as it could have if \nthe processing were performed sequentially. Th e task executions are really sequential but \ninterleaved  with each other, so they virtually ap pear as concurrent. In the discussion below I \nignore the difference between real concurrency, when the system has multiple processors, and \nvirtual concurrency on a single-processor system. From the user\u2019s viewpoint, there is no logical or functional difference between these two opti ons\u2014the user would only see difference in the \nlength of execution time. \nComputer process  is, roughly speaking, a task being executed by a processor. A task is defined by \na temporally ordered sequence of instructions (p rogram code) for the processor. In general, a \nprocess consists of: \n\uf0b7 Memory, which contains executable program code and/or associated data \n\uf0b7 Operating system resources that are allocated  to the process, such as file descriptors \n(Unix terminology) or handles (Windows terminology) \n\uf0b7 Security attributes, such as the identity of process owner and the process\u2019s set of \nprivileges \n\uf0b7 Processor state, such as the content of regi sters, physical memory addresses, etc. The", "source": "Page 285", "chapter": "5"}
{"id": "73a0c3b93dab-2", "text": "state is stored in the actual registers when  the process is executing, and in memory \notherwise \nThreads  are similar to processes, in that both repr esent a single sequence of instructions executed \nin parallel with other sequences, either by time slicing on a single processor or multiprocessing. A process  is an entirely independent program, carries considerable state information, and interacts \nwith other processes only thro ugh system-provided inter-process communication mechanisms. \nConversely, a thread directly shares the state variab les with other threads that are part of the same", "source": "Page 285", "chapter": "5"}
{"id": "69ad762ef291-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  272 \nprocess, as well as memory and other resources. In  this section I focus on threads, but many \nconcepts apply to processes as well. \nSo far, although I promoted the metaphor of an object-based program as a \u201cbucket brigade,\u201d the \nobjects carried their tasks sequentially, one after anot her, so in effect the whole system consists of \na single worker taking the guises one-by-one of different software objects. Threads allow us to \nintroduce true parallelism in the system functioning. \nSubdividing a problem to smaller problems (subtasks) is a common strategy in problem solving. \nIt would be all well and easy if the subtasks were always disjoint, clearly partitioned and \nindependent of each other. However, during the execution the subtasks often operate on the same \nresources or depend on results of other task(s).  This is what makes concurrent programming \ncomplex: threads (which roughly correspond to s ubtasks) interact with each other and must \ncoordinate their activities to avoid inco rrect results or undesired behaviors. \n5.3.1 Threads \nA thread  is a sequence of processor instructions, which can share a single address space with \nother threads\u2014that is, they can read and write the same program variables and data structures.", "source": "Page 286", "chapter": "5"}
{"id": "69ad762ef291-1", "text": "other threads\u2014that is, they can read and write the same program variables and data structures. \nThreads are a way for a program to split itself into tw o or more concurrently running tasks. It is a \nbasic unit of program execution. A common use of th reads is in reactive applications, having one \nthread paying attention to the graphical user interface, while others do long calculations in the \nbackground. As a result, the application more  readily responds to user\u2019s interaction. \nFigure 5-19 summarizes different states that a thread may go through in its lifetime. The three \nmain states and their sub-states are: \n1. New: The thread object has been created, but it has not been started yet, so it cannot run NewAlive\nRunnable\nReady\nInterrupted\ninterrupt()Blocked\nWaiting for\nnotification\nWaiting for\nrendezvous\nSleepingDeadstart()\nrun() returnsnotify() or\nnotifyAll()wait()\nTarget finishesjoin()\nTime outsleep()\ninterrupt()\n/ throws InterruptedExceptionyield()\nWaiting for\nI/O or lock\n \nFigure 5-19: State diagram representing the lifecycle of Java threads. (State diagram \nnotation is defined in Section 3.2.2.)", "source": "Page 286", "chapter": "5"}
{"id": "eca327779350-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 273\n2. Alive : After a thread is started, it becomes alive,  at which point it can enter several different \nsub-states (depending on the method called or actions of other threads within the same \nprocess): \na. Runnable : The thread can be run when the time-slicing mechanism has CPU cycles \navailable for the thread. In other words, wh en there is nothing to prevent it from being \nrun if the scheduler can arrange it \nb. Blocked : The thread could be run, but there is something that prevents it (e.g., another \nthread is holding the resource needed for this th read to do its work). While a thread is in \nthe blocked state, the scheduler will simply skip over it and not give it any CPU time, so \nthe thread will not perform any operations. As visible from Figure 5-19, a thread can become blocked for the following reasons: \ni. Waiting for notification : Invoking the method wait()  suspends the thread until the \nthread gets the notify()  or notifyAll()  message \nii. Waiting for I/O or lock : The thread is waiting for an input or output operation to \ncomplete, or it is trying to call a synchronized  method on a shared object, and \nthat object\u2019s lock is not available", "source": "Page 287", "chapter": "5"}
{"id": "eca327779350-1", "text": "that object\u2019s lock is not available \niii. Waiting for rendezvous : Invoking the method join(target)  suspends the thread \nuntil the target  thread returns from its run()  method \niv. Sleeping : Invoking the method sleep(milliseconds)  suspends the thread for \nthe specified time \n3. Dead : This normally happens to a th read when it returns from its run()  method. A dead \nthread cannot be restarted, i.e., it cannot become alive again \nThe meaning of the states and the events or me thod invocations that cause state transitions will \nbecome clearer from the example in Section 5.3.4. \nA thread object may appear as any other softwa re object, but there are important differences. \nThreads are not regular objects, so we have to be careful with their interaction with other objects. \nMost importantly, we cannot just call a method on  a thread object, because that would execute the \ngiven method from our current thread\u2014neglecti ng the thread of the method\u2019s object\u2014which \ncould lead to conflict. To pass a message from one thread to another, we must use only the \nmethods shown in Figure 5-19. No other me thods on thread objects should be invoked.", "source": "Page 287", "chapter": "5"}
{"id": "eca327779350-2", "text": "If two or more threads compete for the same \u201cres ource\u201d which can be used by only one at a time, \nthen their access must be serialized, as depicted  in Figure 5-20. One of them becomes blocked \nwhile the other proceeds. We are all familiar with  conflicts arising from people sharing resources. \nFor example, people living in a house/apartment share the same bathroom. Or, many people may \nbe sharing the same public payphone. To avoid conflicts, people follow certain protocols, and \nthreads do similarly.", "source": "Page 287", "chapter": "5"}
{"id": "373ab712249e-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  274 \n5.3.2 Exclusive Resource Access\u2014Exclusion \nSynchronization \nIf several threads attempt to access and manipulate the same data concurrently a race condition  or \nrace hazard  exists, and the outcome of the execution de pends on the particular order in which the \naccess takes place. Consider the following exam ple of two threads simultaneously accessing the \nsame banking account (say, husband and wife inte ract with the account from different branches): \nThread 1 Thread 2 \noldBalance = account.getBalance(); ... \nnewBalance = oldBalance + deposit; oldBalance = account.getBalance(); \naccount.setBalance(newBalance); newBalance =  \n    oldBalance - withdrawal; \n... account.setBalance(newBalance); \nThe final account balance is incorrect and the va lue depends on the order of access. To avoid race \nhazards, we need to control access to the common da ta (shared with other threads) and make the \naccess sequential instead of parallel. \nA segment of code in which a thread may modify \nshared data is known as a critical section  or critical \nregion . The critical-section problem is to design a \nprotocol that threads can use to avoid interfering \nwith each other. Exclusion synchronization , or", "source": "Page 288", "chapter": "5"}
{"id": "373ab712249e-1", "text": "with each other. Exclusion synchronization , or \nmutual exclusion (mutex), see Figure 5-21, stops different threads from calling methods on the same \nobject at the same time and thereby jeopardizing the \nintegrity of the shared data. If thread is executing in its critical region then no other thread can be Shared\nResourceThread 1\nStep 2: Use Step 3: UnlockRAIL     ROAD CROSSINGRAIL     ROAD CROSSINGRAIL     ROAD CROSSINGRAIL     ROAD CROSSINGRAIL     ROAD CROSSINGRAIL     ROAD CROSSING\nThread 2\nStep 1: LockRAIL     ROAD CROSSING\nStep 1: LockRAIL     ROAD CROSSINGRAIL     ROAD CROSSING\nFigure 5-20: Illustration of exclusion sync hronization. The lock simply ensures tha t\nconcurrent accesses to the sha red resource are serialized. \nI THINK I CAN,\nI THINK I CAN,I THINK I CAN...\nDING\nDING\nDING\nDINGI THINK I CAN,\nI THINK I CAN,I THINK I CAN...\nDING\nDING\nDING\nDING", "source": "Page 288", "chapter": "5"}
{"id": "ec7b4abfedbb-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 275\nexecuting in its critical region. Only one thread is allowed in a critical region at any moment. \nJava provides exclusion synchronization through the keyword synchronized , which simply \nlabels a block of code that should be protected  by locks. Instead of the programmer explicitly \nacquiring or releasing the lock, synchronized  signals to the compiler to do so. As illustrated \nin Figure 5-22, there are two ways to use the keyword synchronized . First technique declares \nclass methods synchronized , Figure 5-22(a). If one thread invokes a synchronized  \nmethod on an object, that object is locked . Another thread invoking this or another \nsynchronized  method on that same object will block until the lock is released. \nNesting method invocations are handled in the obvious way: when a synchronized method is \ninvoked on an object that is already locked by that  same thread, the method returns, but the lock \nis not released until the outerm ost synchronized method returns. \nSecond technique designates a statement or a block of code as synchronized . The \nparenthesized expression  must produce an object to lock\u2014usua lly, an object reference. In the \nsimplest case, it could be this  reference to the current object, like so \n    synchronized (this) {  /* block of code statements */  }", "source": "Page 289", "chapter": "5"}
{"id": "ec7b4abfedbb-1", "text": "synchronized (this) {  /* block of code statements */  } \nWhen the lock is obtained, statement  is executed as if it were synchronized  method on the \nlocked object. Examples of exclusion synchronization in Java are given in Section 5.3.4. thrd1 : Thread shared_obj : Object\nacquire lock\nSuccessful :\nthrd1 locks itself \nin & does the workthrd2 : Thread\nrelease lockacquire lock\nUnsuccessful :\nthrd2 blocked and \nwaiting for the \nshared object to \nbecome vacant\ntransfer lock\nthrd2 acquires \nthe lock & \ndoes the workCritical region;  the code fragment can have only one thread executing it at once.region\nLock transfer controlled by operating system and hardware\n \nFigure 5-21: Exclusion synchronizat ion pattern for concurrent threads. \npublic class SharedClass {\n...public synchronized void\nmethod1( ... ) {\n...\n}\n}acquire\nlock\nrelease\nlockshared object public class AnyClass {\n...\npublic void method2( ... ) {\n...\nsynchronized (expression ) {\nstatement\n}\n...\n}\n}acquire\nlock\nrelease\nlock\nshared object\n(a) (b)\nFigure 5-22: Exclusion synchronization in Java: (a) synchronized  methods, an d", "source": "Page 289", "chapter": "5"}
{"id": "ec7b4abfedbb-2", "text": "(b) synchronized  statements.", "source": "Page 289", "chapter": "5"}
{"id": "06f26812bfc2-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  276 \n5.3.3 Cooperation between Threads\u2014Condition \nSynchronization \nExclusion synchronization ensures that threads \u201cdo not step on each other\u2019s toes,\u201d but other than \npreventing them from colliding, their activities ar e completely independent. However, sometimes \none thread\u2019s work depends on activities of another thread, so they must cooperate and coordinate. \nA classic example of cooperation between threads is a Buffer  object with methods put()  and \nget() . Producer thread calls put()  and consumer thread calls get() . The producer must wait \nif the buffer is full, and the consumer must wait if it is empty. In both cases, threads wait for a \ncondition to become fulfilled. Condition synchronization includes no assumption that the wait \nwill be brief; threads could wait indefinitely. \nCondition synchronization (illustrated in Figure 5- 23) complements exclusion synchronization. In \nexclusion synchronization, a thread encountering an occupied shared resource becomes blocked \nand waits until another thread is finished with  using the resource. Conversely, in condition \nsynchronization, a thread encountering an unmet condition cannot continue holding the resource \non which condition is checked and just wait until th e condition is met. If the tread did so, no other \nthread would have access to the resource and the condition would never change\u2014the resource", "source": "Page 290", "chapter": "5"}
{"id": "06f26812bfc2-1", "text": "thread would have access to the resource and the condition would never change\u2014the resource \nmust be released, so another thread can affect it.  The thread in question might release the resource \nand periodically return to check it, but this w ould not be an efficient use of processor cycles. \nRather, the thread becomes blocked and does not hing while waiting until the condition changes, \nat which point it must be explicitly notified of such changes. \nIn the buffer example, a producer thread, t, must first lock the buffer to check if it is full. If it is, t \nenters the \u201cwaiting for notification\u201d  state, see Figure 5-19. But while t is waiting for the condition \nto change, the buffer must remain unloc ked so consumers can empty it by calling get() . \nBecause the waiting thread is blocked and inactive, it  needs to be notified wh en it is ready to go. \nEvery software object in Java has the methods wait()  and notify()  which makes possible \nsharing and condition synchronization on every Java object, as explained next. The method \nwait()  is used for suspending threads that ar e waiting for a condition to change. When t finds \nthe buffer full, it calls wait() , which atomically  releases the lock and suspends the thread (see", "source": "Page 290", "chapter": "5"}
{"id": "06f26812bfc2-2", "text": "Figure 5-23). Saying that the thread  suspension and lock release are atomic  means that they \nhappen together, indivisibly from the application\u2019s point of view. After some other thread notifies \nt that the buffer may no longer be full, t regains the lock on the buffer and retests the condition. \nThe standard Java idiom for condition synchronization is the statement: \n    while (conditionIsNotMet) sharedObject.wait(); \nSuch a wait-loop statement  must be inside a synchronized  method or block. Any attempt to \ninvoke the wait()  or notify()  methods from outside the synchronized  code will throw \nIllegalMonitorStateException . The above idiom states th at the condition test should \nalways  be in a loop\u2014never assume that being woken up means that the condition has been met. \nThe wait loop blocks the calling thread, t, for as long as the condition is not met. By calling \nwait() , t places itself in the shared object\u2019s wait set a nd releases all its locks on that object. (It \nis of note that standard Java implements an unor dered \u201cwait set\u201d rather than an ordered \u201cwait \nqueue.\u201d Real-time specification for Java\u2014RTSJ\u2014corrects this somewhat.)", "source": "Page 290", "chapter": "5"}
{"id": "53d3a8fe28c6-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 277\nA thread that executes a synchronized  method on an object, o, and changes a condition that \ncan affect one or more threads in o\u2019s wait set must notify those thr eads. In standard Java, the call \no.notify()  reactivates one arbitrarily chosen thread, t, in o\u2019s wait set. The reactivated thread \nthen reevaluates the condition and either proceeds in to the critical region or reenters the wait set. \nThe call to o.notifyAll()  releases all threads in the o\u2019s wait set. In standard Java this is the \nonly way to ensure that the highest priority thr ead is reactivated. This is inefficient, though, \nbecause all the threads must attempt access while  only one will succeed in acquiring the lock and \nproceed. \nThe reader might have noticed resemblance between the above m echanism of wait/notify and the \npublish/subscribe pattern of Section 5.1. In fact, they are equivalent conceptually, but there are \nsome differences due to concurrent na ture of condition synchronization.  \n5.3.4 Concurrent Programming Example \nThe following example illustrates cooperation between threads. \nExample 5.1 Concurrent Home Access \nIn our case-study, Figure 1-12 shows lock controls both on front and backyard doors. Suppose two", "source": "Page 291", "chapter": "5"}
{"id": "53d3a8fe28c6-1", "text": "different tenants arrive (almost)  simultaneously at the different doors and attempt the access, see \nFigure 5-24. The single-threaded system designed in Section 2.7 would process them one-by-one, which may cause the second user to wait considerable amount of time. A user unfamiliar with the system intricacies may perceive this as a serious glitch. As shown in Figure 5-24, the processor is idle \nmost of the time, such as between  individual keystrokes or while the user tries to recall the exact   thrd1 : Thread shared_obj : Object\nacquire lockthrd2 : Thread\nDoes the work\nacquire lockaltCondition is metSuccessful :\nChecks condition\n[else]\nAtomically releases the \nlock and waits blockedwait()\nSuccessful :\nDoes the work that can \naffect the wait condition\nnotify()\ntransfer lockloop\nrelease lockregion\nLock transfer \ncontrolled by operating system and hardwareregion\nrelease lockthrd1 : Thread shared_obj : Object\nacquire lockthrd2 : Thread\nDoes the work\nacquire lockaltCondition is metSuccessful :\nChecks condition\n[else]\nAtomically releases the \nlock and waits blockedwait()\nSuccessful :\nDoes the work that can \naffect the wait condition\nnotify()\ntransfer lockloop\nrelease lockregion\nLock transfer", "source": "Page 291", "chapter": "5"}
{"id": "53d3a8fe28c6-2", "text": "notify()\ntransfer lockloop\nrelease lockregion\nLock transfer \ncontrolled by operating system and hardwareregion\nrelease lock\n \nFigure 5-23: Condition synchronization pattern for concurrent threads.", "source": "Page 291", "chapter": "5"}
{"id": "09fb6df6bb59-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  278 \npassword after an unsuccessful a ttempt. Meanwhile, the second user is needlessly waiting. To improve \nthe user experience, let us design a multithreaded solution. \nThe solution is given next. \n \nThe first-round implementation in Section 2.7, cons idered the system with a single door lock. We \nhave not yet tackled the architectural issue of r unning a centralized or a distributed system. In the \nformer case, the main computer runs the system and at the locks we have only embedded \nprocessors. We could add an extra serial port, dais y-chained with the other one, and the control \nwould remain as in Section 2.7. In the latter case of a distributed system, each lock would have a \nproximal embedded computer. The embedded com puters would communicate mutually or with \nthe main computer using a local area network. The main computer may even not be necessary, and the embedded processors could coordinate in a \u201cpeer-to-peer\u201d mode. Assume for now that we \nimplement the centralized PC solution with multiple serial ports. We also assume a single \nphotosensor and a single light bulb, for the sake of simplicity. \nThe first question to answer is, how many thr eads we need and which objects should be turned", "source": "Page 292", "chapter": "5"}
{"id": "09fb6df6bb59-1", "text": "into threads? Generally, it is not a good idea to add threads indiscriminately, because threads \nconsume system resources, such as computing cycles and memory space. \nIt may appear attractive to attach a thread to  each object that operates physical devices, such as \nLockCtrl and LightCtrl, but is th is the right approach? On the ot her hand, there are only two users \n(interacting with the two locks), so perhaps tw o threads would suffice? Let us roll back, see why \nwe consider introducing threads in the first place.  The reason is to improve the user experience, \nso two users at two different doors can access the home simultaneously, without waiting. Two \ncompletely independent threads would work, wh ich would require duplicating all the resources, \nbut this may be wasteful. Here is the list of resources they could share: \n\uf0b7 KeyStorage, used to lookup the valid keys \n\uf0b7 Serial port(s), to communicate with the devices \n\uf0b7 System state, such as the device status or current count of unsuccessful attempts \nSharing KeyStorage seems reasonable\u2014here it is just looked up, not modified. The serial port can \nalso be shared because the communication follo ws a well-defined RS-232 protocol. However, \nsharing the system state needs to be carefu lly examined. Sharing the current count of TimeUser 1", "source": "Page 292", "chapter": "5"}
{"id": "09fb6df6bb59-2", "text": "User 2ArrivalService\nArrival WaitingService\nTotal interaction time for both users\nAverage interaction time  \nFigure 5-24: Single-threaded, sequential servicing of users in Example 4.1.", "source": "Page 292", "chapter": "5"}
{"id": "3ae58f4e3163-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 279\nunsuccessful attempts seems to make no sense\u2014 there must be two counters, each counting \naccesses for its corresponding door. \nThere are several observations that guide our design. From the system sequence diagram of \nFigure 2-15(a), we can observe that the system juggles two distinct tasks: user interaction and internal processing which includes controlling th e devices. There are two copies (for the two \ndoors) of each task, which should be able to r un in parallel. The natural point of separation \nbetween the two tasks is the Controller object, Figur e 2-27, which is the entry point of the domain \nlayer of the system. The Controller is a natural candidate for a thread object, so two internal \nprocessing tasks can run in parallel, possibly sh aring some resources. The threaded controller \nclass, ControllerThd , is defined below. I assume that all objects operating the devices \n(LockCtrl, LightCtrl, etc.) can be shared as l ong as the method which writes to the serial port is \nsynchronized. LockCtrl must also know which lock  (front or backyard) it currently operates. \n \nListing 5-6: Concurrent version of the main class for home access control. Compare to \nListing 2-1. \nimport javax.comm.*;", "source": "Page 293", "chapter": "5"}
{"id": "3ae58f4e3163-1", "text": "Listing 2-1. \nimport javax.comm.*; \nimport java.io.IOException; \nimport java.io.InputStream; \nimport java.util.TooManyListenersException; \n \npublic class HomeAccessControlSystem_2x extends Thread \n        implements SerialPortEventListener { \n    protected ControllerThd contrlFront_;  // front door controller \n    protected ControllerThd contrlBack_;   // back door controller \n    protected InputStream inputStream_;  // from the serial port \n    protected StringBuffer keyFront_ = new StringBuffer(); \n    protected StringBuffer keyBack_ = new StringBuffer(); \n    public static final long keyCodeLen_ = 4;  // key code of 4 chars \n \n    public HomeAccessControlSystem_2x( \n        KeyStorage ks, SerialPort ctrlPort \n    ) { \n        try { \n            inputStream_ = ctrlPort.getInputStream(); \n        } catch (IOException e) { e.printStackTrace(); } \n \n        LockCtrl lkc = new LockCtrl(ctrlPort); \n        LightCtrl lic = new LightCtrl(ctrlPort); \n        PhotoObsrv sns = new PhotoObsrv(ctrlPort); \n        AlarmCtrl ac = new AlarmCtrl(ctrlPort); \n \n        contrlFront_ = new ControllerThd(", "source": "Page 293", "chapter": "5"}
{"id": "3ae58f4e3163-2", "text": "contrlFront_ = new ControllerThd( \n            new KeyChecker(ks), lkc, lic, sns, ac, keyFront_ \n        ); \n        contrlBack_  = new ControllerThd( \n            new KeyChecker(ks), lkc, lic, sns, ac, keyBack_ \n        ); \n \n        try { \n            ctrlPort.addEventListener(this); \n        } catch (TooManyListenersException e) {", "source": "Page 293", "chapter": "5"}
{"id": "04a759ca4b5e-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  280 \n            e.printStackTrace(); // limited to one listener per port \n        } \n        start(); // start the serial-port reader thread \n    } \n \n    /** The first argument is the handle (filename, IP address, ...) \n     * of the database of valid keys. \n     * The second arg is optional and, if present, names \n     * the serial port. */ \n    public static void main(String[] args) { \n        ... \n        // same as in Listing 2-1 above \n    } \n \n    /** Thread method; does nothing, just waits to be interrupted \n     * by input from the serial port. */ \n    public void run() { \n        while (true) { \n            try { Thread. sleep(100); } \n            catch (InterruptedException e) { /* do nothing */ } \n        } \n    } \n \n    /** Serial port event handler. \n     * Assume that the characters are sent one by one, as typed in. \n     * Every character is preceded by a lock identifier (front/back). \n     */ \n    public void serialEvent(SerialPortEvent evt) { \n        if (evt.getEventType() == SerialPortEvent.DATA_AVAILABLE) {", "source": "Page 294", "chapter": "5"}
{"id": "04a759ca4b5e-1", "text": "if (evt.getEventType() == SerialPortEvent.DATA_AVAILABLE) { \n            byte[] readBuffer = new byte[5]; // just in case, 5 chars \n \n            try { \n                while (inputStream_.available() > 0) { \n                    int numBytes = inputStream_.read(readBuffer); \n                    // could chk if numBytes == 2 (char + lockId) ... \n                } \n            } catch (IOException e) { e.printStackTrace(); } \n \n            // Append the new char to a user key, and if the key \n            // is complete, awaken the corresponding Controller thread \n            if (inputStream_[0] == 'f') { // from the front door \n                // If this key is already full, ignore the new chars \n                if (keyFront_.length() < keyCodeLen_) { \n                    synchronized  (keyFront_) { // CRITICAL REGION  \n                        keyFront_.append(new String(readBuffer, 1,1)); \n                        // If the key just got completed, \n                        // signal the condition to others \n                        if (keyFront_.length() >= keyCodeLen_) { \n                            // awaken the Front door Controller \n                            keyFront_. notify();  //only 1 thrd waiting \n                        } \n                    } // END OF THE CRITICAL REGION", "source": "Page 294", "chapter": "5"}
{"id": "04a759ca4b5e-2", "text": "} \n                    } // END OF THE CRITICAL REGION \n                } \n            } else if (inputStream_[0] == 'b') { // from back door \n                if (keyBack_.length() < keyCodeLen_) { \n                    synchronized  (keyBack_) { // CRITICAL REGION  \n                        keyBack_.append(new String(readBuffer, 1, 1));", "source": "Page 294", "chapter": "5"}
{"id": "62e76aef48c0-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 281\n                        if (keyBack_.length() >= keyCodeLen_) { \n                            // awaken the Back door Controller \n                            keyBack_. notify(); \n                        } \n                    } // END OF THE CRITICAL REGION \n            } // else, exception ?! \n        } \n    } \n} \n \nEach Controller object is a thread, and it synchronizes with HomeAccessControlSystem_2x via \nthe corresponding user key. In the above method serialEvent() , the port reader thread fills \nin the key code until completed; thereafter,  it ignores the new keys until the corresponding \nControllerThd processes the key and resets it in its run()  method, shown below. The reader \nshould observe the reuse of a StringBuffer  to repeatedly build strings, which works here, but \nin a general case many subtleties of Java StringBuffer s should be considered. \n \nListing 5-7: Concurrent version of the Controller  class. Compare to Listing 2-2. \nimport javax.comm.*; \n \npublic class ControllerThd implements Runnable  { \n    protected KeyChecker checker_; \n    protected LockCtrl lockCtrl_; \n    protected LightCtrl lightCtrl_; \n    protected PhotoObsrv sensor_; \n    protected AlarmCtrl alarmCtrl_;", "source": "Page 295", "chapter": "5"}
{"id": "62e76aef48c0-1", "text": "protected PhotoObsrv sensor_; \n    protected AlarmCtrl alarmCtrl_; \n    protected StringBuffer key_; \n    public static final long maxNumOfAttempts_ = 3; \n    public static final long attemptPeriod_ = 600000; // msec [=10min] \n    protected long numOfAttempts_ = 0; \n \n    public ControllerThd( \n        KeyChecker kc, LockCtrl lkc, LightCtrl lic, \n        PhotoObsrv sns, AlarmCtrl ac, StringBuffer key \n    ) { \n        checker_ = kc; \n        lockCtrl_ = lkc; alarmCtrl_ = ac; \n        lightCtrl_ = lic; sensor_ = sns; key_ = key; \n \n        Thread t = new Thread(this, getName()); \n        t. start(); \n    } \n \n    public void run() { \n        while(true) {  // runs forever \n            synchronized (key_) { // CRITICAL REGION  \n                // wait for the key to be completely typed in \n                while(key_.length() < \n                    HomeAccessControlSystem_2x.keyCodeLen_) { \n                    try { \n                        key_. wait(); \n                    } catch(InterruptedException e) { \n                        throw new RuntimeException(e);", "source": "Page 295", "chapter": "5"}
{"id": "6ecdb2421d73-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  282 \n                    } \n                } \n            } // END OF THE CRITICAL REGION \n            // Got the key, check its validity: \n            // First duplicate the key buffer, then release old copy \n            Key user_key = new Key(new String(key_)); \n            key_.setLength(0);  // delete code, so new can be entered \n            checker_.checkKey(user_key); // assume Publish-Subs. vers. \n        } \n    } \n} \n \nThe reader should observe the thread coordina tion in the above code. We do not want the \nController to grab a half-ready Key and pass it to the Checker for validation. The Controller will \ndo so only when notify()  is invoked. Once it is done with the key, the Controller resets it to \nallow the reader to fill it again. \nYou may wonder how is it that in ControllerThd.run()  we obtain the lock and then loop \nuntil the key is completely typed in\u2014would this  not exclude the port reader thread from the \naccess to the Key object, so the key would never be completed?! Recall that wait()  atomically \nreleases  the lock and suspends the ControllerThd  thread, leaving Key accessible to the port \nreader thread.", "source": "Page 296", "chapter": "5"}
{"id": "6ecdb2421d73-1", "text": "reader thread. \nIt is interesting to consider the last three lines of code in ControllerThd.run() . Copying a \nStringBuffer  to a new String  is a thread-safe operation; so is setting the length of a \nStringBuffer . However, although each of these met hods acquires the lock, the lock is \nreleased in between and another thread may grab the key object and do something bad to it. In our \ncase this will not happen, because HomeAccessControlSystem_2x.serialEvent()  \nchecks the length of the key before modifying it, but generally, this is a concern. \nFigure 5-25 summarizes the benefit achieved by a multithreaded solution. Notice that there still \nmay be micro periods of waiting for both users and servicing the user who arrived first may take \nlonger than in a single-threaded solution. Howeve r, the average service ti me per user is much \nshorter, close to the single-user average service time. \nHazards and Performance Penalties \nIdeally, we would like that the pr ocessor is never idle while there is a task waiting for execution. \nAs seen in Figure 5-25(b), even with threads th e processor may be idle while there are users who \nare waiting for service. The question of \u201cgranularity\u201d of the shared resource. Or stated differently,", "source": "Page 296", "chapter": "5"}
{"id": "6ecdb2421d73-2", "text": "the key issue is how to minimize the length (i.e., processing time) of the critical region. \nSolution: Try to narrow down the critical region by lock splitting or using finer-grain locks. \nhttp://www.cs.panam.edu/~meng/Cour se/CS6334/Note/master/node49.html \nhttp://searchstorage.techtarget.com/sDe finition/0,,sid5_gc i871100,00.html \nhttp://en.wikipedia.org/wiki/T hread_(computer_programming)", "source": "Page 296", "chapter": "5"}
{"id": "caa07077af67-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 283\n \nControl of access to shared resources itself can in troduce problems, e.g., it can cause deadlock. \n \n5.4 Broker and Distributed Computing \n \n\u201cIf computers get too powerful, we can organize them into a committee\u2014that will do them in.\u201d \n\u2014Bradley\u2019s Bromide \nLet us assume that in our case-study example of home access control the tenants want to remotely \ndownload the list of recent accesses. This requires network communication. The most basic \nnetwork programming uses network sockets, whic h can call for considerable programming skills \n(see Appendix B for a brief review). To simplify distributed computing, a set of software \ntechniques have been developed. These generally  go under the name of network middleware. \nWhen both client and server objects reside in the same memory space, the communication is \ncarried out by simple method calls on the server object (see Figure 1-22). If the objects reside in \ndifferent memory spaces or even on different m achines, they need to implement the code for \ninterprocess communication, such as opening netw ork connections, sending messages across the \nnetwork, and dealing with many other aspect s of network communication protocols. This \nsignificantly increases the complexity of objects. Even worse, in addition to its business logic,", "source": "Page 297", "chapter": "5"}
{"id": "caa07077af67-1", "text": "significantly increases the complexity of objects. Even worse, in addition to its business logic, \nobjects obtain responsibility for communication logic which is extraneous to their main function. TimeUser 1\nUser 2ArrivalService\nArrival WaitingService\nTotal interaction time for both users\nAverage interaction time(a)\nTimeUser 1\nUser 2ArrivalService\nArrivalWaiting\nTotal interaction time for both users\nAverage interaction timeService(b)\nFigure 5-25: Benefit of a multithreaded solu tion. (a) Sequential servicing, copied from \nFigure 5-24. (b) Parallel servicing by two threads.", "source": "Page 297", "chapter": "5"}
{"id": "d362a42e1e4d-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  284 \nEmploying middleware helps to delegate this co mplexity away out of the objects, see Figure \n5-26. A real world example of middleware is the post service\u2014it deals with the intricacies of delivering letters/packages to ar bitrary distances. Another example is the use of different metric \nsystems, currencies, spoken languages, etc., in which case the functionality for conversion \nbetween the systems is offloaded to middlew are services. Middleware is a good software \nengineering practice that should be applied any time the communication between objects becomes \ncomplex and starts rivaling the object\u2019s business l ogic in terms of the implementation code size. \nMiddleware  is a collection of objects that offer a set of services related to object communication, \nso that extraneous functionality is offloaded to the middleware. In general, middleware is \nsoftware used to make diverse applications work together smoothly. The process of deriving \nmiddleware is illustrated in Figure 5-27. We start by introducing the proxies for both communicating objects. (The Proxy  pattern is described in Section 5.2.4.) The proxy object B\uf0a2 of \nB acts so to provide an illusion for A that it is directly communicating with B. The same is \nprovided to B by A\uf0a2. Having the proxy objects keeps simple  the original objects, because the", "source": "Page 298", "chapter": "5"}
{"id": "d362a42e1e4d-1", "text": "proxies provide them with an illusion that nothi ng changed from the original case, where they \ncommunicated directly with each other, as in Figure 5-27(a). In other words, proxies provide \nlocation transparency  for the objects\u2014objects remain (almost) the same no matter whether they NetworkMarshalingUnmarshaling\nMiddleware\nFigure 5-26: Client object invokes a method on a server object. If the message sending\nbecomes too complex, introducing middleware offloads the communication intricacies of f\nthe software objects. (Compare with Figure 1-22.)", "source": "Page 298", "chapter": "5"}
{"id": "89e602b28e39-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 285\nreside in the same address space or in different address spaces / machines. Objects A' and B' \ncomprise the network middleware. \nBecause it is not likely that we will deve lop middleware for only two specific objects \ncommunicating, further division of responsibilities results in the Broker  pattern. Object \nAObject \nAObject \nBObject \nB\nMiddleware\nObject \nAObject \nAObject \nB'Object \nB'Object \nA'Object \nA'Object \nBObject \nB(a)\n(b)\n \nFigure 5-27: Middleware design. Objects A\uf0a2 and B\uf0a2 are the proxies  of A and B, respectively.", "source": "Page 299", "chapter": "5"}
{"id": "b9bbd69a122e-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  286 \n5.4.1 Broker Pattern \nThe Broker pattern is an architectural pattern used  to structure distributed software systems with \ncomponents that interact by remote method calls , see Figure 5-28. The proxies are responsible \nonly for the functions specific to individual objects for which they act as substitutes. In a \ndistributed system the functions that are common to all or most of the proxies are delegated to the \nBroker  component, Figure 5-28(b). Figure 5-28(c) shows the objects constituting the Broker \npattern and their relationships. The proxies act as representatives of their corresponding objects in (a)Middleware\nBroker component\nSS S'S' CC BclientBclient BserverBserver C'C'\nServiceService ServiceServiceMiddleware\nBroker component\nSS S'S' CC BclientBclient BserverBserver C'C'\nServiceService ServiceService\nClient\n+  callServer()\n#  useBrokerAPI()\n\u00abclient proxy\u00bb\nSkeleton\n+  forwardRequest()\n#  marshal()\n#  unmarshal()\u00abserver proxy\u00bb\nStub\n+  request()\n+  forwardResponse()\n#  marshal()\n#  unmarshal()Broker\n+  mainEventLoop()\n+  registerService()+  forwardRequest()\n+  forwardResponse()\n#  findServer()", "source": "Page 300", "chapter": "5"}
{"id": "b9bbd69a122e-1", "text": "+  forwardResponse()\n#  findServer()\n#  findClient()Server\n+  initialize()\n+  mainEventLoop()\n+  request()\n#  registerService()\n#  useBrokerAPI()MiddlewareService\n(c)Client\n+  callServer()\n#  useBrokerAPI()Client\n+  callServer()\n#  useBrokerAPI()\n\u00abclient proxy\u00bb\nSkeleton\n+  forwardRequest()\n#  marshal()\n#  unmarshal()\u00abclient proxy\u00bb\nSkeleton\n+  forwardRequest()\n#  marshal()\n#  unmarshal()\u00abserver proxy\u00bb\nStub\n+  request()\n+  forwardResponse()\n#  marshal()\n#  unmarshal()\u00abserver proxy\u00bb\nStub\n+  request()\n+  forwardResponse()\n#  marshal()\n#  unmarshal()Broker\n+  mainEventLoop()\n+  registerService()+  forwardRequest()\n+  forwardResponse()\n#  findServer()\n#  findClient()Broker\n+  mainEventLoop()\n+  registerService()+  forwardRequest()\n+  forwardResponse()\n#  findServer()\n#  findClient()Server\n+  initialize()\n+  mainEventLoop()\n+  request()\n#  registerService()\n#  useBrokerAPI()Server\n+  initialize()", "source": "Page 300", "chapter": "5"}
{"id": "b9bbd69a122e-2", "text": "#  registerService()\n#  useBrokerAPI()Server\n+  initialize()\n+  mainEventLoop()\n+  request()\n#  registerService()\n#  useBrokerAPI()MiddlewareServiceMiddlewareService\n(c)(b)Broker\nKnowing Responsibilities:\n\u2022 Registry of name-t o-reference mappings\nDoing Responsibilities:\n\u2022 Maintains the registry and provides lookup\u2022 Instantiates proxies\n\u2022 Network transport of request and result backBroker\nKnowing Responsibilities:\n\u2022 Registry of name-t o-reference mappings\nDoing Responsibilities:\n\u2022 Maintains the registry and provides lookup\u2022 Instantiates proxies\n\u2022 Network transport of request and result back\nFigure 5-28: (a) The Broker component of  middleware represents the intersection o f\ncommon proxy functions, along with middlew are services. (b) Broker\u2019s employee card. (c) \nThe Broker pattern class diagram. The server proxy, called Stub , resides on the same host \nas the client and the client proxy, called Skeleton , resides on the same host as the server.", "source": "Page 300", "chapter": "5"}
{"id": "c0e826b6d233-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 287\nthe foreign address space and contain all the ne twork-related code. The broker component is \nresponsible for coordinating communication and pr oviding links to various middleware services. \nAlthough Broker is shown as a single class in Fi gure 5-28(c), actual brokers consist of many \nclasses are provide many services. \nTo use a remote object, a client first finds  the object through the Broker, which returns a proxy \nobject or Stub. As far as the client is concerned, th e Stub appears and works like any other local \nobject because they both implement the same interfa ce. But, in reality it only arranges the method \ncall and associated parameters into a stream of bytes using the method marshal() . Figure 5-29 \nshows the sequence diagram for remote method invocation (also called remote procedure call\u2014\nRPC) via a Broker. The Stub marshals the method call into a stream of bytes and invokes the \nBroker, which forwards the byte stream to the client\u2019s proxy, Skeleton , at the remote host. Upon \nreceiving the byte stream, the Skeleton rearranges this stream into the original method call and \nassociated parameters, using the method unmarshal() , and invokes this method on the server \nwhich contains the actual implementation. Fina lly, the server performs the requested operation", "source": "Page 301", "chapter": "5"}
{"id": "c0e826b6d233-1", "text": "which contains the actual implementation. Fina lly, the server performs the requested operation \nand sends back the return value(s), if any. \nThe Broker pattern has been proven effective tool  in distributed computing, because it leads to \ngreater flexibility, maintainability, and adaptab ility of the resulting system. By introducing new \ncomponents and delegating responsibility for co mmunication intricacies, the system becomes \npotentially distributable and scalable. Java Remo te Method Invocation (RMI), which is presented \nnext, is an example of elaborati ng and implementing the Broker pattern. : Client : Stub : Broker\nforwardRequest(): Skeleton\nforwardRequest()request(): Server\ncallServer()\nmarshal()\nfindServer()\nunmarshal()\nrequest()\nresponse\nforwardResponse()marshal()\nforwardResponse()findClient()\nunmarshal()\nresponse: Client : Stub : Broker\nforwardRequest(): Skeleton\nforwardRequest()request(): Server\ncallServer()\nmarshal()\nfindServer()\nunmarshal()\nrequest()\nresponse\nforwardResponse()marshal()\nforwardResponse()findClient()\nunmarshal()\nresponse\n \nFigure 5-29: Sequence diagram for a client call to the server (remote method invocation).", "source": "Page 301", "chapter": "5"}
{"id": "b45f05138a06-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  288 \n5.4.2 Java Remote Method Invocation (RMI) \nThe above analysis indicates that the Broker component is common to all remotely \ncommunicating objects, so it needs to be implemented only once. The proxies are object-specific and need to be implemented for every new obj ect. Fortunately, the process of implementing the \nproxy objects can be made automatic. It is important  to observe that the original object shares the \nsame interface with its Stub and Skeleton (if the object acts as a client, as well). Given the object\u2019s interface, there are tools to automatically  generate source code for proxy objects. In the \ngeneral case, the interface is defined in an Interface Definition Langua ge (IDL). Java RMI uses \nplain Java for interface definition, as well . The basic steps for using RMI are: \n1. Define the server object interface \n2. Define a class that implements this interface \n3. Create the server process \n4. Create the client process \nGoing back to our case-study example of home access control, now I will show how a tenant \ncould remotely connect and download the list of recent accesses. \nStep 1: Define the server object interface", "source": "Page 302", "chapter": "5"}
{"id": "b45f05138a06-1", "text": "Step 1: Define the server object interface \nThe server object will be running on the home computer and currently offers a single method which returns the list of home accesse s for the specified time interval: \n \nListing 5-8: The Informant remote server object interface. \n/* file Informant.java */ \nimport java.rmi.Remote; \nimport java.rmi.RemoteException; \nimport java.util.Vector; \n \npublic interface Informant extends Remote { \n    public Vector getAccessHistory(long fromTime, long toTime) \n        throws RemoteException; \n} \n \nThis interface represents a contract  between the server and its clients. Our interface must extend \njava.rmi.Remote  which is a \u201ctagging\u201d interface that contains no methods. Any parameters \nof the methods of our interface, such as the retu rn type Vector in our case, must be serializable, \ni.e., implement java.io.Serializable . \nIn the general case, an IDL compiler would generate a Stub and Skeleton files for the Informant \ninterface. With Java RMI, we just use the Java compiler, javac : \n% javac Informant.java", "source": "Page 302", "chapter": "5"}
{"id": "acf921538b00-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 289\nStep 2: Define a class that implements this interface \nThe implementation class must extend class java.rmi.server.RemoteObject  or one of \nits subclasses. In practice, most implementations extend the subclass \njava.rmi.server.UnicastRemoteObject , because this class supports point-to-point \ncommunication using the TCP protocol. The class di agram for this example is shown in Figure \n5-30. The implementation class must implement th e interface methods and a constructor (even if \nit has an empty body). I adopt the common convention of adding Impl  onto the name of our \ninterface to form the implementation class. \n \nListing 5-9: The class InformantImpl  implements the actual remote server object. \n/* file InformantImpl.java (Informant server implementation) */ \nimport java.rmi.RemoteException; \nimport java.rmi.server.UnicastRemoteObject; \nimport java.util.Vector; \n \npublic class InformantImpl extends UnicastRemoteObject \n    implements Informant  { \n    protected Vector accessHistory_ = new Vector(); \n \n    /** Constructor; currently empty. */ \n    public InformantImpl() throws RemoteException { } \n \n    /** Records all the home access attempts. \n     * Called from another class, e.g., from KeyChecker, Listing 2-2", "source": "Page 303", "chapter": "5"}
{"id": "acf921538b00-1", "text": "* @param access Contains the entered key, timestamp, etc. \n     */ \n    public void recordAccess(String access) { \n        accessHistory_.add(access); \n    } \n \n    /** Implements the \"Informant\" interface. */ \n    public Vector getAccessHistory (long fromTime, long toTime) \n        throws RemoteException { \n        Vector result = new Vector(); \n        // Extract from accessHistory_ accesses in the \n        // interval [fromTime, toTime] into \"result\" InformantImpl_Stub\n+  getAccessHistory()InformantImpl_Stub\n+  getAccessHistory()InformantImpl\n+  getAccessHistory()InformantImpl\n+  getAccessHistory()Informant\n+  getAccessHistory()Informant\n+  getAccessHistory()ClientClientRemote UnicastRemoteObject\nRemoteRef\n \nFigure 5-30: Class diagram for the Java RMI example. See text for details.", "source": "Page 303", "chapter": "5"}
{"id": "c7040776dcac-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  290 \n        return result; \n    } \n} \nHere, we first use the Java compiler, javac , then the RMI compiler, rmic : \n% javac InformantImpl.java \n% rmic \u2013v1.2 InformantImpl \nThe first statement compiles the Java file a nd the second one generates the stub and skeleton \nproxies, called InformantImpl_Stub.class  and InformantImpl_Skel.class , \nrespectively. It is noteworthy, although perhaps it might appear strange, that the RMI compiler \noperates on a .class  file, rather than on a source file. In  JDK version 1.2 or higher (Java 2), \nonly the stub proxy is used; the skeleton is incorpor ated into the server itself so that there are no \nseparate entities as skeletons. Server programs now communicate directly with the remote \nreference layer. This is why the command line option -v1.2  should be employed (that is, if you \nare working with JDK 1.2 or higher), so that only the stub file is generated. \nAs shown in Figure 5-30, the stub is associated with a RemoteRef , which is a class in the RMI", "source": "Page 304", "chapter": "5"}
{"id": "c7040776dcac-1", "text": "Broker that represents the handle for a remote object. The stub uses a remote reference to carry \nout a remote method invocation to a remote object via the Broker. It is instructive to look inside \nthe InformantImpl_Stub.java , which is obtained if the RMI compiler is run with the \noption -keep . Here is the stub file (the ser ver proxy resides on client host): \n \nListing 5-10: Proxy classes (Stub and Skeleton) are automatically generated by the Java \nrmic  compiler from the Informant  interface (Listing 5-8). \n// Stub class  generated by rmic, do not edit. \n// Contents subject to change without notice. \n \n 1 public final class InformantImpl_Stub \n 2    extends java.rmi.server. RemoteStub  \n 3    implements Informant, java.rmi.Remote \n 4 { \n 5    private static final long serialVersionUID = 2; \n 6     \n 7    private static java.lang.reflect.Method \n$method_getAccessHistory_0; \n 8     \n 9    static { \n10 try { \n11     $method_getAccessHistory_0 = \nInformant.class.getMethod(\"getAccessHistory\", new java.lang.Class[] \n{long.class, long.class});", "source": "Page 304", "chapter": "5"}
{"id": "c7040776dcac-2", "text": "{long.class, long.class}); \n12 } catch (java.lang.NoSuchMethodException e) { \n13     throw new java.lang.NoSuchMethodError( \n14  \"stub class initialization failed\"); \n15 } \n16    } \n17     \n18    // constructors \n19    public InformantImpl_Stub(java.rmi.server. RemoteRef  ref) { \n20 super(ref); \n21    } \n22     Marshaling", "source": "Page 304", "chapter": "5"}
{"id": "5777655375f1-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 291\n23    // methods from remote interfaces \n24     \n25    // implementation of getAccessHistory(long, long) \n26    public java.util.Vector getAccessHistory (long $param_long_1, \nlong $param_long_2) \n27 throws java.rmi.RemoteException \n28    { \n29 try { \n30     Object $result = ref. invoke(this, \n$method_getAccessHistory_0, new java.lang.Object[] {new \njava.lang.Long($param_long_1), new java.lang.Long($param_long_2)}, -\n7208692514216622197L); \n31     return ((java.util.Vector) $result); \n32 } catch (java.lang.RuntimeException e) { \n33     throw e; \n34 } catch (java.rmi.RemoteException e) { \n35     throw e; \n36 } catch (java.lang.Exception e) { \n37     throw new java.rmi.UnexpectedException(\"undeclared checked \nexception\", e); \n38 } \n39    } \n40 } \n \nThe code description is as follows: \nLine 2: shows that our stub extends the RemoteStub  class, which is the common superclass \nto client stubs and provides a wide range of re mote reference semantics, similar to the broker", "source": "Page 305", "chapter": "5"}
{"id": "5777655375f1-1", "text": "services in Figure 5-28(a). \nLines 7\u201315: perform part of the marshaling process of the getAccessHistory()  method \ninvocation. Computational reflection is empl oyed, which is described in Section 7.3. \nLines 19\u201321: pass the remote server\u2019s reference to the RemoteStub  superclass. \nLine 26: starts the definition of the stub\u2019s version of the getAccessHistory()  method. \nLine 30: sends the marshaled arguments to the server and makes the actual call on the remote \nobject. It also gets the result back. \nLine 31: returns the result to the client. \nThe reader should be aware that, in terms of how much of the Broker component is revealed in a \nstub code, this is only a tip of the iceberg. The Broker component, also known as Object Request \nBroker  (ORB), can provide very complex functio nality and comprise many software objects. \nStep 3: Create the server process \nThe server process instantiates object(s) of the above implementation class, which accept remote \nrequests. The first problem is, how does a client ge t handle of such an object, so to be able to \ninvoke a method on it? The solution is for the serve r to register the implementation objects with a", "source": "Page 305", "chapter": "5"}
{"id": "5777655375f1-2", "text": "naming service known as registry . A naming registry is like a telephone directory. The RMI \nRegistry is a simple name repository which acts as a central management point for Java RMI. The registry must be run before the server and client processes using the following command line:", "source": "Page 305", "chapter": "5"}
{"id": "62aff890059c-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  292 \n % rmiregistry \nIt can run on any host, including the server\u2019s or client\u2019s hosts, and there can be several RMI \nregistries running at the same time. (Note: The RM I Registry is an RMI server itself.) For every \nserver object, the registry contains a mapping between the well-known object\u2019s name and its \nreference (usually a globally unique sequence of characters). The process of registration is called \nbinding . The client object can, thus, get handle of a server object by looking up its name in the \nregistry. The lookup is performed by supplying a URL with protocol rmi: \nrmi:// host_name:port_number /object_name   \nwhere host_name  is the name or IP address of the host on which the RMI registry is running, \nport_number  is the port number of the RMI registry, and object_name  is the name bound to the \nserver implementation object. If the host name is not provided, the default is assumed as \nlocalhost . The default port number of RMI registry is  1099, although this can be changed as \ndesired. The server object, on the other hand, listens  to a port on the server machine. This port is \nusually an anonymous port that is chosen at runtime by the JVM or the underlying operating", "source": "Page 306", "chapter": "5"}
{"id": "62aff890059c-1", "text": "usually an anonymous port that is chosen at runtime by the JVM or the underlying operating \nsystem. Or, you can request the server to listen on a specific port on the server machine. \nI will use the class HomeAccessControlSystem , defined in Listing 2-1, Section 2.7, as the \nmain server class. The class remains the same, except for several modifications: \n \nListing 5-11: Refactored HomeAccessControlSystem  class (from Listing 2-1) to \ninstantiate remote server objects of type Informant . \n 1 import java.rmi.Naming; \n 2 \n 3 public class HomeAccessControlSystem extends Thread \n 4         implements SerialPortEventListener { \n 5     ... \n 6     private static final String RMI_REGISTRY_HOST = \"localhost\"; \n 7 \n 8     public static void main(String[] args) throws Exception { \n 9         ... \n10         InformantImpl temp = new InformantImpl() ; \n11         String rmiObjectName  = \n12             \"rmi://\" + RMI_REGISTRY_HOST + \"/Informant\"; \n13         Naming.rebind (rmiObjectName, temp); \n14         System.out.println(\"Binding complete...\"); \n15         ... \n16     } \n       ... \n   }", "source": "Page 306", "chapter": "5"}
{"id": "62aff890059c-2", "text": "15         ... \n16     } \n       ... \n   } \nThe code description is as follows: \nLines 3\u20135: The old HomeAccessControlSystem  class as defined in Section 2.7. \nLine 6: For simplicity\u2019s sake, I use localhost  as the host name, which could be omitted \nbecause it is default. \nLine 8: The main()  method now throws Exception  to account for possible RMI-related \nexceptions thrown by Naming.rebind() . \nLine 10: Creates an instance object of the server implementation class.", "source": "Page 306", "chapter": "5"}
{"id": "e6b7e945e3c9-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 293\nLines 11\u201312: Creates the string URL which incl udes the object\u2019s name, to be bound with its \nremote reference. \nLine 13: Binds the object\u2019s name to the remote reference at the RMI naming registry. \nLine 14: Displays a message for our information,  to know when the binding is completed. \nThe server is, after compilation, run on the co mputer located at home by invoking the Java \ninterpreter on the command line: \n % java HomeAccessControlSystem \nIf Java 2 is used, the skeleton is not n ecessary; otherwise, the skeleton class, \nInformantImpl_Skel.class , must be located on the server\u2019s host because, although not \nexplicitly used by the server, the skel eton will be invoked by Java runtime. \nStep 4: Create the client process \nThe client requests services from the server obj ect. Because the client has no idea on which \nmachine and to which port the server is listening, it looks up the RMI naming registry. What it \ngets back is a stub object that knows all these, but to the client the stub appears to behave same as \nthe actual server object. The client code is as follows:", "source": "Page 307", "chapter": "5"}
{"id": "e6b7e945e3c9-1", "text": "the actual server object. The client code is as follows: \n \nListing 5-12: Client class InformantClient  invokes services on a remote Informant  \nobject. \n 1 import java.rmi.Naming; \n 2 \n 3 public class InformantClient { \n 4     private static final String RMI_REGISTRY_HOST = \" ... \"; \n 5 \n 6     public static void main(String[] args) { \n 7         try { \n 8             Informant grass = (Informant) Naming.lookup ( \n 9                 \"rmi://\" + RMI_REGISTRY_HOST + \"/Informant\" \n10             ); \n11             Vector accessHistory = \n12                 grass. getAccessHistory (fromTime, toTime); \n13 \n14             System.out.println(\"The retrieved history follows:\"); \n15             for (Iterator i = accessHistory; i.hasNext(); ) { \n16                 String record = (String) i.next(); \n17                 System.out.println(record); \n18             } \n19         } catch (ConnectException conEx) { \n20             System.err.println(\"Unable to connect to server!\"); \n21             System.exit(1); \n22         } catch (Exception ex) { \n23             ex.printStackTrace(); \n24             System.exit(1); \n25         }", "source": "Page 307", "chapter": "5"}
{"id": "e6b7e945e3c9-2", "text": "24             System.exit(1); \n25         } \n26         ... \n27     } \n       ... \n   }", "source": "Page 307", "chapter": "5"}
{"id": "e9f2867a9d55-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  294 \nThe code description is as follows: \nLine 4: Specifies the host name on which the RMI naming registry is running. \nLine 8: Looks up the RMI naming registry to get handle of the server object. Because the \nlookup returns a java.rmi.Remote  reference, this reference must be typecast into an \nInformant  reference (not InformantImpl  reference). \nLines 11\u201312: Invoke the service method on the stub, which in turn invokes this method on the \nremote server object. The result is returned as a java.util.Vector  object named \naccessHistory . \nLines 14\u201318: Display the retrieved history list. \nLines 19\u201325: Handle possible RMI-related exceptions. \nThe client would be run from a remote machine,  say from the tenant\u2019s notebook or a PDA. The \nInformantImpl_Stub.class  file must be located on the client\u2019s host because, although \nnot explicitly used by the client, a reference to it will be given to the client by Java runtime. A \nsecurity-conscious practice is to make the stub files accessible on a website for download. Then, \nyou set the java.rmi.server.codebase  property equal to the website\u2019s URL, in the", "source": "Page 308", "chapter": "5"}
{"id": "e9f2867a9d55-1", "text": "application which creates the server obj ect (in our example above, this is \nHomeAccessControlSystem  ). The stubs will be downloa ded over the Web, on demand. \n \nThe reader should notice that distributed object computing is relatively easy using Java RMI. The \ndeveloper is required to do just slightly more work, essentially to bind the object with the RMI \nregistry on the server side and to obtain a reference to it on the client side. All the complexity \nassociated with network programming is hidden by the Java RMI tools. \n \n SIDEBAR 5.2: How Transpar ent Object Distribution?  \n  \n\uf0a8 The reader who experiments with Java RMI, see e.g., Problem 5.22, and tries to implement \nthe same with plain network sockets (see Appe ndix B), will appreciate how easy it is to work \nwith distributed objects. My recollection from using some CORBA object request brokers was \nthat some provided even greater transparency than Java RMI. Although this certainly is an \nadvantage, there are perils of making object di stribution so transparen t that it becomes too \neasy. \nThe problem is that people tended to forget that  there is a network between distributed objects \nand built applications that relie d on fine-grained communication across the network. Too many", "source": "Page 308", "chapter": "5"}
{"id": "e9f2867a9d55-2", "text": "and built applications that relie d on fine-grained communication across the network. Too many \nround-trip communications led to poor performan ce and reputation problems for CORBA. An \ninteresting discussion of object distribution issues is available in [Waldo et al., 1994] from the \nsame developers who authored Java RMI [Wollrath et al., 1996].", "source": "Page 308", "chapter": "5"}
{"id": "97f94c499e25-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 295\n5.5 Information Security \n \n\u201cThere is nothing special about security; it\u2019s ju st part of getting the job done.\u201d \u2014Rob Short \nInformation security is a nonfunctiona l property of the system, it is an emergent  property. Owing \nto different types of information use, there are two main security disciplines. Communication \nsecurity  is concerned with protecting information wh en it is being transported between different \nsystems. Computer security  is related to protecting information within a single system, where it \ncan be stored, accessed, and processed. Although both disciplines must work in accord to successfully protect information, informati on transport faces greater challenges and so \ncommunication security has received greater atten tion. Accordingly, this review is mainly \nconcerned with communication security. Notice that both communication- and computer security must be complemented with physical (buildi ng) security as well as personnel security. Security \nshould be thought of as a chain that is as strong as its weakest link. \nThe main objectives of information security are: \n\uf0b7 Confidentiality : ensuring that information is not disclosed or revealed to unauthorized \npersons \n\uf0b7 Integrity : ensuring consistency of data, in par ticular, preventing unauthorized creation, \nmodification, or destruction of data", "source": "Page 309", "chapter": "5"}
{"id": "97f94c499e25-1", "text": "modification, or destruction of data \n\uf0b7 Availability : ensuring that legitimate users are not unduly denied access to resources, \nincluding information resources, computing resources, and communication resources \n\uf0b7 Authorized use : ensuring that resources are not used by unauthorized persons or in \nunauthorized ways \nTo achieve these objectives, we institute various safeguards , such as concealing ( encryption ) \nconfidential information so that its me aning is hidden from spying eyes; and key management  \nwhich involves secure distribution and handling of  the \u201ckeys\u201d used for encryption. Usually, the \ncomplexity of one is inversely proportional to that  of the other\u2014we can afford relatively simple \nencryption algorithm with a sophisticated key management method.", "source": "Page 309", "chapter": "5"}
{"id": "a031742db718-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  296 \nFigure 5-31 illustrates the problem of transmitting a confidential message by analogy with \ntransporting a physical document via untrusted carri er. The figure also lists the security needs of \nthe communicating parties and the potential thr eats posed by intruders. The sender secures the \nbriefcase, and then sends it on. The receiver mu st use a correct key in order to unlock the \nbriefcase and read the document. Analogously, a se nding computer encrypts the original data \nusing an encryption algorithm  to make it unintelligible to any intruder. The data in the original \nform is known as plaintext  or cleartext . The encrypted message is known as ciphertext . Without \na corresponding \u201cdecoder,\u201d the transmitted informati on (ciphertext) would remain scrambled and \nbe unusable. The receiving computer must regenerate the original plaintext from the ciphertext \nwith the correct decryption algorithm  in order to read it. This pair of data transformations, \nencryption and decryption, together forms a cryptosystem . \nThere are two basic types of cryptosystems: ( i) symmetric  systems, where both parties use the \nsame  (secret) key in encryption and decryption transformations; and, ( ii) public-key  systems, also", "source": "Page 310", "chapter": "5"}
{"id": "a031742db718-1", "text": "known as asymmetric  systems, where the parties use two related keys, one of which is secret and \nthe other one can be publicly disclosed. I first review the logistics of how the two types of \ncryptosystems work, while leaving the details of encryption algorithms for the next section. Sender ReceiverPadlock\nand shared\nkey copyShared\nkey copyContent\nMessage\nIntermediary\nThreats posed by intruder/adversary :\n\u2022 forge the key and view the content\u2022 damage/substitute the padlock\u2022 damage/destroy the message\n\u2022 observe characteristics of messages\n(statistical and/or metric properties)Receiver needs\n:\n\u2022 receive securely a shared key copy\u2022 positively identify the message sender \u2022 detect any tampering with messagesSender needs\n:\n\u2022 receive securely a copy of the shared key \u2022 positively identify the message receiver\nFigure 5-31: Communication security problem: Sender needs to transport a confidential \ndocument to Receiver over an untrusted intermediary.", "source": "Page 310", "chapter": "5"}
{"id": "1742371eca4d-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 297\n5.5.1 Symmetric and Public-Key Cryptosystems \nIn symmetric cryptosystems, both parties use the same key in encryption and decryption \ntransformations. The key must remain secret and this, of course, implies trust between the two parties. This is how cryptography traditionall y works and prior to the late 1970s, these were the \nonly algorithms available. \nThe system works as illustrated in Figure 5-31. In order to ensure the secrecy of the shared key, \nthe parties need to meet prior to communication.  In this case, the fact that only the parties \ninvolved know the secret key implicitly identifies  one to the other. \nUsing encryption involves two basic steps: encoding  a message, and decoding  it again. More \nformally, a code takes a message M and produces a coded form f(M). Decoding the message \nrequires an inverse function \n1\uf02df, such that \uf028\uf029)(1Mff\uf02d = M. For most codes, anyone who \nknows how to perform the first step also knows how to perform the second, and it would be \nunthinkable to release to the adversary the met hod whereby a message can be turned into code.", "source": "Page 311", "chapter": "5"}
{"id": "1742371eca4d-1", "text": "Merely by \u201cundoing\u201d the encoding procedures, the adversary would be able to break all \nsubsequent coded messages. \nIn the 1970s Ralph Merkle, Whitfield Diffie, and Ma rtin Hellman realized th at this need not be \nso. The weasel word above is \u201cmerely.\u201d Suppose that the encoding procedure is very hard to \nundo. Then it does no harm to release its details. This led them to the idea of a trapdoor function . \nWe call f a trapdoor function if f is easy to compute, but 1\uf02df is very hard, indeed impossible for \npractical purposes. A trapdoor function in this sen se is not a very practical code, because the \nlegitimate user finds it just as hard to decode th e message as the adversary does. The final twist is Sender Receiver1.Sender secures the briefcase\nwith his/her padlock and sends\n2.Receiver additionally secures\nthe briefcase with his/her\npadlock and returns\n3.Sender removes his/her\npadlock and sends again\n4.Receiver removes his/her\npadlock to access the contentSender\u2019s\npadlockReceiver\u2019s\npadlock\nFigure 5-32: Secure transmission via untrustwo rthy carrier. Note that both sender and\nreceiver keep their own keys with them all the time\u2014the keys are never exchanged.", "source": "Page 311", "chapter": "5"}
{"id": "ec299e089b72-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  298 \nto define f in such a way that a single extra piece of information makes the computation of 1\uf02df \neasy. This is the only bit of information that must be kept secret. \nThis alternative approach is known as public-key cryptosystems . To understand how it works, it is \nhelpful to examine the analogy illus trated in Figure 5-32. The pro cess has three steps. In the first \nstep, the sender secures the briefcase with his or her padlock and sends. Second, upon receiving \nthe briefcase, the receiver secures it additionally w ith their own padlock and returns. Notice that \nthe briefcase is now doubly secured. Finally, the se nder removes his padlock and re-sends. Hence, \nsender manages to send a confidential document to  the receiver without needing the receiver\u2019s \nkey or surrendering his or her own key. \nThere is an inefficiency of sending the briefc ase back and forth, which can be avoided as \nillustrated in Figure 5-33. Here we can skip steps 1 and 2 if the receiver distributed his/her padlock (unlocked, of course!) ahead of time. When the sender needs to send a document, i.e.,", "source": "Page 312", "chapter": "5"}
{"id": "ec299e089b72-1", "text": "message, he/she simply uses the receiver\u2019s padl ock to secure the briefcase and sends. Notice that, \nonce the briefcase is secured, nobody else but rece iver can open it, not even the sender. Next I \ndescribe how these concepts can be im plemented for electronic messages. \n5.5.2 Cryptographic Algorithms \nEncryption has three aims: keeping data conf idential; authenticating who sends data; and, \nensuring data has not been tamp ered with. All cryptographic al gorithms involve substituting one \nthing for another, which means taking a piece of  plaintext and then computing and substituting \nthe corresponding ciphertext to create the encrypted message. SenderReceiverReceiver distributes his/her padlock (unlocked)\nto sender ahead of time, but keeps the key\nSender uses the receiver\u2019s padlock\nto secure the briefcase and sends\nReceiver removes his/her\npadlock to access the contentReceiver\u2019s\npadlock (unlocked)Receiver\u2019s\nkey\u201cPublic key\u201d \u201cPrivate key\u201d\nFigure 5-33: Public-key cryptosystem simplifies the procedure from Figure 5-32.", "source": "Page 312", "chapter": "5"}
{"id": "db6a057152d4-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 299\nSymmetric Cryptography \nThe Advanced Encryption Standard has a fixed block size of 128 bits and a key size of 128, 192, \nand 256 bits. \nPublic-Key Cryptography \nAs stated above, f is a trapdoor function if f is easy to compute, but 1\uf02df is very hard or \nimpossible for practical purposes. An example of such difficulty is factorizing a given number n \ninto prime numbers. An encryption algorithm that  depends on this was invented by Ron Rivest, \nAdi Shamir, and Leonard Adelman (RSA system) in 1978. Another example algorithm, designed \nby Taher El Gamal in 1984, depends on the difficulty of the discrete logarithm problem. \nIn the RSA system, the receiver  does as follows: \n1. Randomly select two large prime numbers p and q, which always must be kept secret. \n2. Select an integer number E, known as the public exponent , such that ( p \uf02d 1) and E have \nno common divisors, and ( q \uf02d 1) and E have no common divisors. \n3. Determine the product n = p\uf0d7q, known as public modulus .", "source": "Page 313", "chapter": "5"}
{"id": "db6a057152d4-1", "text": "3. Determine the product n = p\uf0d7q, known as public modulus . \n4. Determine the private exponent , D, such that ( E\uf0d7D \uf02d 1) is exactly divisible by both ( p \uf02d 1) \nand ( q \uf02d 1). In other words, given E, we choose D such that the integer remainder when \nE\uf0d7D is divided by ( p \uf02d 1)\uf0d7(q \uf02d 1) is 1. \n5. Release publicly the public key , which is the pair of numbers n and E, K\uf020\uf02b = (n, E). Keep \nsecret the private key , K\uf020\uf02d = (n, D). \nBecause a digital message is a sequence of digits, break it into blocks whic h, when considered as \nnumbers, are each less than n. Then it is enough to encode block by block. \nEncryption works so that the sender substitutes each plaintext block B by the ciphertext C = BE % \nn, where % symbolizes the modulus operation. (The modulus  of two integer numbers x and y, \ndenoted as x % y, is the integer remainder when x is divided by y.) \nThen the encrypted message C (ciphertext) is transmitted. To decode, the receiver uses the", "source": "Page 313", "chapter": "5"}
{"id": "db6a057152d4-2", "text": "decoding key D , to compute B = CD % n, that is, to obtain the plaintext B from the ciphertext C. \nExample 5.2 RSA cryptographic system \nAs a simple example of RSA, suppose the receiver chooses p = 5 and q = 7. Obviously, these are too \nsmall numbers to provide any security, but they make the presentation manageable. Next, the receiver \nchooses E = 5, because 5 and (5 \uf02d 1)\uf0d7(7 \uf02d 1) have no common factors. Also, n = p\uf0d7q = 35. Finally, the \nreceiver chooses D = 29, because 624144\n641295\n)1()1(1\uf03d\uf03d\uf03d\uf0d7\uf02d\uf0d7\n\uf02d\uf0d7\uf02d\uf02d\uf0d7\nq pDE, i.e., they are exactly divisible. The \nreceiver\u2019s public key is K\uf020\uf02b = (n, E) = (35, 5), which is made public. The private key K\uf020\uf02d = (n, D) = (35, \n29) is kept secret. \nNow, suppose that the sender wants to send the plai ntext \u201chello world.\u201d The following table shows the", "source": "Page 313", "chapter": "5"}
{"id": "db6a057152d4-3", "text": "encoding of \u201chello.\u201d I assign to letters a numeric re presentation, so that a=1, b=2, \u2026, y=25, and z=26, \nand I assume that block B is one letter long. In an actual implementation, letters are represented as \nbinary numbers, and the blocks B are not necessarily aligned with le tters, so that plaintext \u201cl\u201d will not \nalways be represented as ciphertext \u201c12.\u201d", "source": "Page 313", "chapter": "5"}
{"id": "1cd80b51fdaf-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  300 \nPlaintext letter Plaintext numeric \nrepresentation BE Ciphertext BE % n \nh 8 85 = 32768 85 % 35 = 8 \ne 5 55 = 3125 55 % 35 = 10 \nl 12 125 = 248832 125 % 35 = 17 \nl 12 248832 17 \no 15 155 = 759375 155 % 35 = 15 \nThe sender transmits this ciphertext to the receiver:  8, 10, 17, 17, 15. Upon  the receipt, the receiver \ndecrypts the message as shown in the following table. \nCiphertext CD B  = CD % n Plaintext \nletter \n8 829 = 154742504910672534362390528 829 % 35 = 8 h \n10 100000000000000000000000000000 5 e 17 481968572106750915091411825223071697 12 l \n17 481968572106750915091411825223071697 12 l \n15 12783403948858939111232757568359375 15 o \nWe can see that even this toy example produces some extremely large numbers.", "source": "Page 314", "chapter": "5"}
{"id": "1cd80b51fdaf-1", "text": "We can see that even this toy example produces some extremely large numbers. \n \nThe point is that while the adversary knows n and E, he or she does not know p and q, so they \ncannot work out ( p \uf02d 1)\uf0d7(q \uf02d 1) and thereby find D. The designer of the code, on the other hand, \nknows p and q because those are what he started from. So does any legitimate receiver: the \ndesigner will have told them. The security of this system depends on exactly one thing: the \nnotoriously difficulty of factorizing a given number n into primes. For example, given n = 267 \uf02d 1 \nit took three years working on Sundays for F. N. Cole to find by hand in 1903 p and q for n = p\uf0d7q \n= 193707721 \uf0b4 761838257287. It would be waste of time (and often combinatorially self-\ndefeating) for the program to grind through all possible options. \nEncryption strength is measured by the length of its  \u201ckey,\u201d which is expressed in bits. The larger \nthe key, the greater the strength of the encryption. Using 112 computers, a graduate student decrypted one 40-bit encrypted message in a little ov er 7 days. In contrast, data encrypted with a", "source": "Page 314", "chapter": "5"}
{"id": "1cd80b51fdaf-2", "text": "128-bit key is 309,485,009,821,345,068,724,781,056 times stronger than data encrypted with a \n40-bit key. RSA Laboratories recommends that the product of \np and q be on the order of 1024 \nbits long for corporate use and 768 bits for use with less valuable information. \n5.5.3 Authentication \n \n \n \n5.5.4 Program Security \nA virus is malicious code carried from one computer to another by some medium\u2014often an \n\u201cinfected\u201d file. Any operating system that allows third-party programs to run can theoretically run \nviruses. Some operating systems are more secure  than others; earlier versions of Microsoft", "source": "Page 314", "chapter": "5"}
{"id": "687575418cd7-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 301\nWindows did not even provide something as simple  as maintain memory space separation. Once \non a computer, a virus is executed when its carrier file is \u201copened\u201d in some meaningful way by \nsoftware on that system. When the virus executes,  it does something unwanted, such as causing \nsoftware on the host system to send more copies of infected files to other computers over the \nnetwork, infecting more files, and so on. In  other words, a virus typically maximizes its \nlikelihood of being passed on,  making itself contagious. \nViral behavior relies on security vulnerabilities that  exist in software running on the host system. \nFor example, in the past, viruses have often e xploited security vulnerabilities in Microsoft Office \nmacro scripting capabilities. Macro viruses are no longer among the most common virus types. \nMany viruses take advantage of Trident, the re ndering engine behind Internet Explorer and \nWindows Explorer that is also used by almost every piece of Microsoft software. Windows \nviruses often take advantage of image-renderi ng libraries, SQL Server \u2019s underlying database \nengine, and other components of a complete Windows operating system environment as well. \nViruses are typically addressed by antivirus  software vendors. These vendors produce virus \ndefinitions used by their antivirus software to  recognize viruses on the system. Once a specific", "source": "Page 315", "chapter": "5"}
{"id": "687575418cd7-1", "text": "definitions used by their antivirus software to  recognize viruses on the system. Once a specific \nvirus is detected, the software attempts to quaran tine or remove the virus\u2014or at least inform the \nuser of the infection so that some action may be taken to protect the system from the virus. \nThis method of protection relies on knowledge of th e existence of a virus, however, which means \nthat most of the time a virus against which you ar e protected has, by defi nition, already infected \nsomeone else\u2019s computer and done its damage. The question you should be as king yourself at this \npoint is how long it will be until you are the lucky soul who gets to be the discoverer of a new \nvirus by way of getting infected by it. \nIt\u2019s worse than that, though. Each virus explo its a vulnerability \u2014 but they don\u2019t all have to \nexploit different vulnerabilities. In fact, it\u2019s comm on for hundreds or even thousands of viruses to \nbe circulating \u201cin the wild\u201d that, between them, only exploit a handful of vulnerabilities. This is \nbecause the vulnerabilities exist in the software  and are not addressed by virus definitions \nproduced by antivirus software vendors. \nThese antivirus software vendors\u2019 definitions ma tch the signature of a given virus \u2014 and if", "source": "Page 315", "chapter": "5"}
{"id": "687575418cd7-2", "text": "These antivirus software vendors\u2019 definitions ma tch the signature of a given virus \u2014 and if \nthey\u2019re really well-designed might even match similar,  but slightly altered, variations on the virus \ndesign. Sufficiently modified viruses that explo it the same vulnerability are safe from recognition \nthrough the use of virus definitions, however. Y ou can have a photo of a known bank robber on \nthe cork bulletin board at the bank so your tellers  will be able to recogni ze him if he comes in \u2014 \nbut that won\u2019t change the fact that if his modus  operandi is effective, others can use the same \ntactics to steal a lot of money. \nBy the same principle, another virus can explo it the same vulnerability without being recognized \nby a virus definition, as long as the vulnerab ility itself isn\u2019t addressed by the vendor of the \nvulnerable software. This is a key difference between open source operating system projects and \nMicrosoft Windows: Microsoft leaves dealing with viruses to the antivirus software vendors, but \nopen source operating system projects generally  fix such vulnerabilities immediately when \nthey\u2019re discovered. \nThus, the main reason you don\u2019t tend to need antiv irus software on an open source system, unless \nrunning a mail server or other software that re lays potentially virus-la den files between other", "source": "Page 315", "chapter": "5"}
{"id": "687575418cd7-3", "text": "running a mail server or other software that re lays potentially virus-la den files between other \nsystems, isn\u2019t that nobody\u2019s targeting your open s ource OS; it\u2019s that any time someone targets it,", "source": "Page 315", "chapter": "5"}
{"id": "693477a88eb2-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  302 \nchances are good that the vulnerabilit y the virus attempts to exploit has been closed up \u2014 even if \nit\u2019s a brand-new virus that nobody has ever seen before. Any half-baked script-kiddie has the \npotential to produce a new virus that will slip past  antivirus software vendor virus definitions, but \nin the open source software world one tends to need to discover a whole new vulnerability to \nexploit before the \u201cgood guys\u201d discover and patch it. \nViruses need not simply be a \u201cfact of life\u201d for anyone using a computer. Antivirus software is \nbasically just a dirty hack used to fill a gap in your system\u2019s defenses left by the negligence of \nsoftware vendors who are unwilling to invest the re sources to correct certain classes of security \nvulnerabilities. \nThe truth about viruses is simple, but it\u2019s not pleas ant. The truth is that you\u2019re being taken to the \ncleaners \u2014 and until enough software users realize this, and do something about it, the software \nvendors will continue to leave you in this vulnera ble state where additional money must be paid \nregularly to achieve what protection you can get from a dirty hack that simply isn\u2019t as effective as \nsolving the problem at the source would be.", "source": "Page 316", "chapter": "5"}
{"id": "693477a88eb2-1", "text": "solving the problem at the source would be. \n \nHowever, we should not forget that security comes at a cost. In theory, application programs are supposed to  access hardware of the computer only through \nthe interfaces provided by the operating system. But many application programmers who dealt \nwith small computer operating systems of the 1970s and early 1980s often bypassed the OS, \nparticularly in dealing with the video display. Programs that directly wrote bytes into video \ndisplay memory run faster than programs that didn't. Indeed, for some applications\u2014such as \nthose that needed to display graphics on the video display\u2014the operating system was totally \ninadequate. \nWhat many programmers liked most about MS-DOS was that it \u201cstayed out of the way\u201d and let \nprogrammers write programs as fast as the hardwa re allowed. For this reason, popular software \nthat ran on the IBM PC often relied upon id iosyncrasies of the IBM PC hardware. \n \n \n5.6 Summary and Bibliographical Notes \n Design patterns are heuristics for structuring the so ftware modules and their interactions that are \nproven in practice. They yield in design for cha nge, so the change of the computing environment \nhas as minimal and as local effect on the code as possible. \nKey Points: \n\uf0b7", "source": "Page 316", "chapter": "5"}
{"id": "693477a88eb2-2", "text": "Key Points: \n\uf0b7\n Pattern use must be need-driven: use a patte rn only when you need it to improve your \nsoftware design, not because it can be used, or you simply like hitting nails with your \nnew hammer.", "source": "Page 316", "chapter": "5"}
{"id": "2440784110a8-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 303\n\uf0b7 Using the Broker pattern, a client object invokes methods of a remote server object, \npassing arguments and receiving a return value with each call, using syntax similar to \nlocal method calls. Each side requires a proxy that interacts with the system\u2019s runtime. \n There are many known design patterns and I have reviewed above only few of the major ones. \nThe text that most contributed to the popularity of patterns is [Gamma \net al., 1995]. Many books \nare available, perhaps the best known are [Gamma et al., 1995] and [Buschmann et al., 1996]. \nThe reader can also find a great amount of useful information on the web. In particular, a great \ndeal of information is available in  Hillside.net\u2019s Patterns Library: http://hillside.net/patterns/  . \nR. J. Wirfs-Brock, \u201cRefreshing patterns,\u201d IEEE Software , vol. 23, no. 3, pp. 45-47, May/June \n2006. \nSection 5.1: Indirect Communicati on: Publisher-Subscriber \n \nSection 5.2: More Patterns \n \nSection 5.3: Concurrent Programming \nConcurrent systems are a large research and practice filed and here I provide only the", "source": "Page 317", "chapter": "5"}
{"id": "2440784110a8-1", "text": "Concurrent systems are a large research and practice filed and here I provide only the \nintroductory basics. Concurrency methods are usua lly not covered under design patterns and it is \nonly for the convenience sake that here they app ear in the section on software design patterns. I \navoided delving into the intricacies of Java thr eads\u2014by no means is this a reference manual for \nJava threads. Concurrent programming in Java is  extensively covered in [Lea, 2000] and a short \nreview is available in [Sand\u00e9n, 2004]. \n[Whiddett, 1987] \nPthreads tutorial: http://www.cs.nmsu.ed u/~jcook/Tools/pthreads/pthreads.html \nPthreads tutorial from CS6210 (by Phillip Hutto):  \nhttp://www.cc.gatech.edu/classes/AY2000/cs6210_spring/pthreads_tutorial.htm \n \nSection 5.4: Broker and Distributed Computing \nThe Broker  design pattern is described in [Buschmann et al., 1996; V\u00f6lter et al., 2005]. \nJava RMI: \nSun Developer Network (SDN) jGuru: \u201cRemote Method Invocation (RMI),\u201d Sun Microsystems, \nInc., Online at: http://java.sun.com/developer/ onlineTraining/rmi/RMI.html", "source": "Page 317", "chapter": "5"}
{"id": "2440784110a8-2", "text": "http://www.javaworld.com/javaworld/jw-04-2005/jw-0404-rmi.html \nhttp://www.developer.com/java/e nt/article.php/ 10933_3455311_1", "source": "Page 317", "chapter": "5"}
{"id": "ef621f035d60-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  304 \nAlthough Java RMI works only if both client a nd server processes are coded in the Java \nprogramming language, there are other systems, such as CORBA (Common Object Request \nBroker Architecture), which work with arb itrary programming languages, including Java. A \nreadable appraisal of the state of affairs with CORBA is available in [Henning, 2006]. \nSection 5.5: Information Security \nIn an increasingly networked world, all computer  users are at risk of having their personally \nidentifying information and private access data in tercepted. Even if information is not stolen, \ncomputing resources may be misused for criminal  activities facilitated by unauthorized access to \nothers\u2019 computer systems. \nKerckhoffs\u2019 Principle states that a cryptosystem s hould remain secure even if everything about it \nother than the key is public knowledge. The secur ity of a system\u2019s design is in no way dependent \nupon the secrecy of the design, in and of itself. B ecause system designs can be intercepted, stolen, \nsold, independently derived, reverse engineered by observations of the system\u2019s behavior, or just \nleaked by incompetent custodians, the secrecy of its design can never really be assumed to be", "source": "Page 318", "chapter": "5"}
{"id": "ef621f035d60-1", "text": "secure itself. Hence, the \u201csecurity through obscu rity\u201d security model by attempting to keep \nsystem design secret Open source movement even advocates widespread access to the design of a \nsystem because more people can review the sy stem\u2019s design and detect potential problems. \nTransparency ensures that the s ecurity problems tend to arise more quickly, and to be addressed \nmore quickly. Although an increased likelihood of security provides no guarantees of success, it \nis beneficial nonetheless. \nThere is an entire class of software, known as \u201cfu zzers,\u201d that is used to quickly detect potential \nsecurity weaknesses by feeding abusive input at a target application and observing its behavior \nunder that stress. These are the tools that malicious  security crackers use all the time to find ways \nto exploit software systems. Therefore, it is not necessary to have access to software design (or its \nsource code) to be able to detect its security vulnerabilities. This should not be surprising, given \nthat software defects are rarely found by looki ng at source code. (Recall the software testing \ntechniques from Section 2.7.) Where access to source code becomes much more important is \nwhen trying to determine why a particular weakness exists, and how to remove it. One might \nconclude, then, that the open source transparen cy does not contribute as much to detecting", "source": "Page 318", "chapter": "5"}
{"id": "ef621f035d60-2", "text": "security problems as it does to fixing them. \nCryptography [Menezes et al ., 1997], which is available for download, entirely, online at \nhttp://www.cacr.math .uwaterloo.ca/hac/ . \nICS 54: History of Public-Key Cryptography:  \nhttp://www.ics.uci.edu/~ics54/doc/security/pkhistory.html \nhttp://www.netip.com/articles/keith/diffie-helman.htm \nhttp://www.rsasecurity.com/rsalabs/node.asp?id=2248 \nhttp://www.scramdisk.clara.net/pgpfaq.html http://postdiluvian.org/~seven/diffie.html \nhttp://www.sans.org/rr/whitepapers/vpns/751.php \nhttp://www.fors.com/eoug97/papers/0356.htm", "source": "Page 318", "chapter": "5"}
{"id": "d2e7ad2de772-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 305\nClass iaik.security.dh.DHKeyAgreement \nhttp://www.cs.utexas.edu/users/chris/cs378/f98/ resources/iaikdocs/iaik.security.dh.DHKeyAgree\nment.html \n Bill Steele, \u201c\u2018Fabric\u2019 would tighten the weave of online security,\u201d \nCornell Chronicle  (09/30/10): \nFabric\u2019s programming language, whic h is based on Java, builds in security as the program is \nwritten.  Myers says most of what Fabric does is transparent to the programmer.  http://www.news.cornell.edu/st ories/Sept10/Fabric.html \nP. Dourish, R. E. Grinter, J. Delgado de la Flor, and M. Joseph, \u201cSecurity in the wild: user \nstrategies for managing security as an everyday, practical problem,\u201d \nPersonal and Ubiquitous \nComputing (ACM/Springer) , vol. 8, no. 6, pp. 391-401, November 2004. \nM. J. Ranum, \u201cSecurity: The root of the problem,\u201d ACM Queue (Special Issue: Surviving \nNetwork Attacks) , vol. 2, no. 4, pp. 44-49, June 2004.", "source": "Page 319", "chapter": "5"}
{"id": "d2e7ad2de772-1", "text": "H. H. Thompson and R. Ford, \u201cPerfect storm: The insider, naivety, and hostility,\u201d ACM Queue \n(Special Issue: Surviving Network Attacks) , vol. 2, no. 4, pp. 58-65, June 2004.  \nintroducing trust and its pervasiv eness in information technology \nMicrosoft offers integrated hardware-level secu rity such as data execution prevention, kernel \npatch protection and its free Secu rity Essentials software:  \nhttp://www.microsoft.com/security_essentials/ \nMicrosoft's 'PassPort' Out, Federation Services In  \nIn 2004 Microsoft issued any official pronouncements on \"TrustBridge,\" its collection of \nfederated identity-management technologies sl ated to go head-to-head with competing \ntechnologies backed by the Liberty Alliance.  \nhttp://www.eweek.com/c/a/Windows/Microsofts -Passport-Out-Federated-Services-In/ \n  \nProblems \n \nProblem 5.1 \n  \nProblem 5.2 \nConsider the online auction site described in Problem 2.31 (Chapter 2). Suppose you want to \nemploy the Publish-Subscribe (also known as Obse rver) design pattern in your design solution for \nProblem 2.31. Which classes should implement the Publisher interface? Which classes should", "source": "Page 319", "chapter": "5"}
{"id": "20c18848d8ed-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  306 \nimplement the Subscriber interface? Explain your  answer. (Note: You can introduce new classes \nor additional methods on the existing classes if you feel it necessary for solution.) \nProblem 5.3 \nIn the patient-monitoring scenario of Problem 2.35 (Chapter 2), assume that multiple recipients \nmust be notified about the patient condition. Suppos e that your software is to use the Publish-\nSubscribe design pattern. Identify the key software  objects and draw a UML interaction diagram \nto represent how software objects in the system could accomplish the notification problem. \nProblem 5.4 \n \nProblem 5.5 \n \n \nProblem 5.6:  Elevator Control \nConsider the elevator control problem defined in Problem 3.7 (Chapter 3). Your task is \nto determine whether the Publisher-Subscriber  design pattern can be applied in this \ndesign. Explain clearly your answer. If the answer is yes, identify which classes are suitable for the publisher role and which one s are suitable for the subscriber role. \nExplain your choices, list the events genera ted by the Publishers, and state explicitly \nfor each Subscriber to which ev ents it is subscribed to.  \nProblem 5.7 \n \n \nProblem 5.8", "source": "Page 320", "chapter": "5"}
{"id": "20c18848d8ed-1", "text": "Problem 5.7 \n \n \nProblem 5.8 \n \nProblem 5.9 \nConsider the automatic patient monitoring sy stem described in Problem 2.35. Carefully \nexamine the draft UML sequence diagram in  Figure 2-45. Check if the given design \nalready uses some patterns and explain your claim. Identify as many opportunities as you can to improve the design by applying de sign patterns. Consider how an unnecessary \napplication of some design patterns would make this design worse. Draw UML sequence \ndiagrams or write pseudo-code to describe the proposed design. Always describe your motivation \nfor adopting or rejecting design modifications. L234567\nDownUpL234567\nDownUpL234567\nDownUp", "source": "Page 320", "chapter": "5"}
{"id": "30439eec32dc-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 307\nProblem 5.10 \nConsider the system for inventory management grocery supermarket from Problem 2.15. Suppose \nyou are provided with an initial software desi gn as follows. This design is based on a basic \nversion of the inventory system, but the reader shoul d be aware of extensions that are discussed in \nthe solution of Problem 2.15(c) and Problem 2.16. The software consists of the following classes: \nReaderIface: \nThis class receives messages from RFID readers that specific tags moved in or out of \ncoverage. \nDBaseConn: \nThis class provides a connection to a relationa l database that contains data about shelf \nstock and inventory tasks. The databa se contains several tables, including \nProductsInfo[key = tagID] , PendingTasks[key = userID] , \nCompletedTasks , and Statistics[key = infoType]  for various information \ntypes, such as the count of erroneous mess ages from RFID readers and the count of \nreminders sent for individual pending tasks. \nDispatcher: \nThis class manages inventory tasks by ope ning new tasks when needed and generates \nnotifications to the concerned store employees. \nMonitor: \nThis class periodically keeps track of potentia lly overdue tasks. It retrieves the list of", "source": "Page 321", "chapter": "5"}
{"id": "30439eec32dc-1", "text": "This class periodically keeps track of potentia lly overdue tasks. It retrieves the list of \npending tasks from the database and genera tes reminders to the concerned store \nemployees. \nMessenger: \nThis class sends email notifications to the concerned store employees. (The notifications \nare generated by other classes.) \nAssume that email notifications are used as a supplementary tool, but the system must keep an \ninternal record of sent notifications and pe nding tasks, so it can take appropriate actions. \nNotice that the current design has a single timer  for the whole system. The software designer \nnoticed that sending notifications for overdue task s does not need to be exactly timed in this \nsystem. Delays up to a certain period (e.g., hour or even day) are tolerable. Maintaining many \ntimers would be overkill and would significantly sl ow down the system. It would not be able to \ndo important activities, such as processing RFID events in a timely fashion. Therefore, the \nsoftware is designed so that, when a new pending ta sk is created, there is no explicit activation of \nan associated timer. Instead, the task is simply  added to the list of pending tasks. The Monitor \nobject periodically retrieves this list and checks for overdue tasks, as seen below in the design for \nthe use case UC-5 SendReminder.", "source": "Page 321", "chapter": "5"}
{"id": "30439eec32dc-2", "text": "the use case UC-5 SendReminder. \nAnother simplification is to check only for \u201cout -of-stock\u201d events and not for \u201clow-stock\u201d events. \nIf the customer demands that \u201clow-stock\u201d events be included, then the design of the software-to-\nbe will become somewhat more complex.", "source": "Page 321", "chapter": "5"}
{"id": "ca4962e2ac97-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  308 \nThe UML sequence diagrams for all the use cases are shown in the following figures. Notice that \nuse cases UC-3, UC-4, and UC-6 \u00abinclude\u00bb UC-7 : Login (user authentication), which is not \nshown to avoid clutter. \nprodInfo := getProductInfo( tagID ): Messenger : DBaseConn : Dispatcherrfid :\nReaderIface\nreceive(event)\nopt recordStatistics( \"error: unknown tagID\" )[prodInfo == nil]\nreturn\ndecrement( prodCount )\n[prodCount \uf020\uf0a3Threshold]alt [prodCount < 0]\n[else]send( \"error: negative prodCount\" )recordStatistics( \"error: negative prodCount\" )\nreturnemail to store manager\ncreateTask( \"out-of-stock\" )\nemail to store managersend( \u201calert: out-of-stock\" )recordPendingTask( task info )recordProductInfo( updated product count )\nrecordProductInfo( updated product count )\nreturnPending Task Info :\nTask-type = \"out-of-stock\"\nAssigned-time = current timeAssigned-to = Store ManagerUC1: RemoveItem\n \nIn the design for UC-1, the system may check if a pending task for the given product already", "source": "Page 322", "chapter": "5"}
{"id": "ca4962e2ac97-1", "text": "exists in the database; if yes, it should not ge nerate a new pending task for the same product.", "source": "Page 322", "chapter": "5"}
{"id": "4546fb60d619-0", "text": "Chapter 5 \uf0b7 Design wi th Patterns 309\nUC2: AddItem\nprodInfo := getProductInfo( tagID )rfid :\nReaderIface\nreceive(event)\nrecordStatistics( \"error: unknown tagID\" )[prodInfo == nil]\nreturn\nincrement( prodCount )alt\n[else]\nrecordProductInfo( updated product count )\nreturn: DBaseConn\n \nUC3: ViewPendingWork\n: Dispatcher : DBaseConn user interface :\nview pending\n[userID == manager]\ntasksList := getPendingTasks( ALL )\nshow tasks[else]\nshow erroralt\n[userID == associate]\ntasksList := getPendingTasks( associateID )\nreturn error\nreturn tasksListgetPendingTasks( userID )\nref\nUC4: AssignReplenishTaskExtension:\nStore Manager may\noptionally run UC4to assign a pending task", "source": "Page 323", "chapter": "5"}
{"id": "d9712589cc4f-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  310 \nUC4: AssignReplenishTask\n: Messenger : DBaseConn : Dispatcher\nview pending\n[ taskInfo != nil && taskType == \"out-of-stock\" ]\nemail to store associate\nshow resulttaskInfo := getPendingTaskInfo( taskID )\nsend( \"alert: task assigned\" )user interface :\nref\nUC3: ViewPendingWork\nassign taskassignTask( taskID, associateID, \u2026 )\nopt\nremovePendingTask( taskID )recordPendingTask( task info )\nreturn resultStore Manager runs\nUC3 to view pending tasksand selects one to assign\nseq\nPending Task Info :\nTask-type = \"replenish-shelf\"\nAssigned-time = current time\nAssigned-to = Store Associate\n \nThe [seq]  interaction fragment specifies that the inte ractions contained within the fragment box \nmust occur exactly in the given order. The reason for using this constraint in UC-4 is that the \nsystem may crash while the task is bei ng converted from unassigned to pending. If \nremovePendingTask()  were called first, and the system crashed after it but before \nrecordPendingTask() , then all information about this ta sk would be lost! Depending on the \ndatabase implementation, it may be possible to perform these operations as atomic for they", "source": "Page 324", "chapter": "5"}
{"id": "d9712589cc4f-1", "text": "database implementation, it may be possible to perform these operations as atomic for they \nupdate the same table in the database. To deal w ith crash scenarios where a task ends up in both \ntables, the Monitor object in UC-5 SendReminde r should be extended to perform a database \nclean-up after a crash. It should remove those tasks from the PendingTasks  table that are \nmarked both as unassigned and pending.", "source": "Page 324", "chapter": "5"}
{"id": "49fd32d804bf-0", "text": "Chapter 5 \uf0b7 Design with Patterns 311\nreturnpendingList := getPendingTasks( ): DBaseConn : Dispatcher\nwakeup\n[ (currentTime \uf02dtask.assignTime) \uf0b3thresholdPendingInterval ]\nsendReminder( receivers, task ): Messenger : Monitor\nloop [ for every task in pendingList ]\nemail to receiverssend( \u201calert:: \" + task.ID + \" overdue\"  )recordStatistics( task reminder alert info )recordPendingTask( task info )increment task.remindAttempts\nincrement task.remindAttemptsUC5: SendReminder\nset sleep periodopt\n[ task.remindAttempts < maxAttempts ] alt\nreceivers := task.assignedTo\nreceivers := ALL employees (system-wide)\n \nNote that the Monitor discards the list of pendi ng tasks before going to sleep, so it starts every \ncycle with a fresh list of pending tasks, retrie ved from the database, because our assumption is \nthat the database contains the most current information (possibly updated by other objects). \nBy examining the design for the use case UC-5 Send Reminder, we see that the Monitor has to do \na lot of subtractions and comparisons every tim e it wakes up, but this can be done at leisure \nbecause seconds or minutes are not critical fo r this activity. The computing power should be", "source": "Page 325", "chapter": "5"}
{"id": "49fd32d804bf-1", "text": "because seconds or minutes are not critical fo r this activity. The computing power should be \nbetter used for other use cases. Of course, we mu st ensure that the Monitor still works fast enough \nnot to introduce delays on the order of hours or days during each cycle! \nIn addition, we need to handle the case where the time values are not incrementing constantly \nupwards, such as when a full 24 hours passes and a new day starts, the time resets to zero. In \nJava, using java.lang.System.currentTimeMillis()  returns the current time in \nmilliseconds as a long integer.", "source": "Page 325", "chapter": "5"}
{"id": "c7dd9a7c6c69-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  312 \nIn the solution of Problem 2.16 we discussed using adaptive timeout calculation to adjust the \nfrequency of reminders for busy pe riods. Another option is to ha ve shorter sleep periods, but \nduring each wakeup, process only part of the list  of pending tasks, and leave the rest for \nsubsequent wakeups. Then cycle again from the head  of the list. This way, the reminders will be \nspread over time and not all reminders will be generated at once (avoid generating one \u201cbulk\u201d \nnotification each period). \nseqUC6: ReplenishCompleted\ntaskInfo := getPendingTask( taskID ): Messenger : DBaseConn : Dispatcher\nclose(taskID)\n[taskInfo == nil]\nreturn error\nsend( \"alert: task completed\" )prodInfo := getProductInfo( taskInfo.getProductID( ) )\nemail to store manager\nreturn[else]\n[prodCount \uf020\uf0a3Threshold] alt\nreturn error\n[else]\nrecordCompletedTask( taskInfo )alt\nremovePendingTask( taskID )\n \nThe logic of UC-6 is that it first retrieves the task , checks if such a task exists, makes sure it is \nreally done, and finally marks it as completed. The [seq]  interaction fragment specifies that the", "source": "Page 326", "chapter": "5"}
{"id": "c7dd9a7c6c69-1", "text": "interactions contained within the fragment box must  occur exactly in the given order. Similar to \nUC-4 AssignReplenishTask, this constraint is need ed in case the system crashes while the task is \nbeing closed. If removePendingTask()  were called first, and the system crashed after it but \nbefore recordCompletedTask() , then all information about this task would be lost! These \noperations cannot be performed as atomic, because they work on different tables in the database. \nTo deal with crash scenarios where a task ends  up in both tables, the Monitor object in UC-5 \nshould be modified to perform a database clean-u p after a crash. It should remove those tasks \nfrom the PendingTasks  table that are already in the CompletedTasks  table.", "source": "Page 326", "chapter": "5"}
{"id": "c5a858df121a-0", "text": "Chapter 5 \uf0b7 Design with Patterns 313\nNotice also that the Monitor runs in a separate thr ead, so while UC-6 is in the process of closing a \ntask, the Monitor may send an unnecessary reminder about this task (in UC-5). \n \narefully examine the existing design and id entify as many opportunities as you can to \nimprove the design by applying design patterns.  Note that the existing design ignores the \nissue of concurrency, but we will leave the mu ltithreading issue aside for now and focus only on \nthe patterns that improve the quality of softwa re design. (The concurrency issues will be \nconsidered later in Problem 5.20.) \n(a) If you introduce a pattern, first provide arguments why the existing design may be \nproblematic. \n(b) Provide as much details as possible about how  the pattern will be implemented and how the \nnew design will work (draw UML sequence diagrams or write pseudo-code). \n(c) Explain how the pattern improved the design (i.e ., what are the expected benefits compared to \nthe original design). \nIf considering future evolution and extensions of the system when proposing a modification, then \ndescribe explicitly what new features will likel y be added and how the existing design would be", "source": "Page 327", "chapter": "5"}
{"id": "c5a858df121a-1", "text": "describe explicitly what new features will likel y be added and how the existing design would be \ninadequate to cope with resulting changes. Th en introduce a design pattern and explain how the \nmodified version is better. \nIf you believe that the existing design (or some parts of it) is sufficiently good then explain how \nthe application of some design patterns would make  the design worse. Use concrete examples and \nUML diagrams or pseudo-code to illustrate and refer to specific qualities of software design. \nProblem 5.11 \n \nProblem 5.12 \n \nProblem 5.13 \n \nProblem 5.14 \n \nProblem 5.15 \nIn Section 5.3, it was stated that the standard  Java idiom for condition synchronization is the \nstatement: \nwhile (condition) sharedObject.wait(); \n(a) Is it correct to substitute the yield()  method call for wait() ? Explain your answer \nand discuss any issues arising from the substitution. C", "source": "Page 327", "chapter": "5"}
{"id": "cfb2e7fe2373-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  314 \n(b) Suppose that if substitutes for while , so we have:  \n   if (condition) sharedObject.wait()  \nIs this correct? Explain your answer. \n \nProblem 5.16 \nParking lot occupancy monitoring, see Figure 5-34. Consider a parking lot with the total number \nof spaces equal to capacity . There is a single barrier gate with two poles, one for the entrance \nand the other for the exit. A computer in the ba rrier gate runs a single program which controls \nboth poles. The program counts the current number of free spaces, denoted by occupancy , such \nthat \n0 \uf020\uf0a3 occupancy  \uf0a3 capacity  \n When a new car enters, the occupancy is increm ented by one; conversely, when a car exits, the \noccupancy is decremented by one. If occupancy  equals capacity , the red light should turn \non to indicate that the parking is full. \nIn order to be able to serve an entering and an  exiting patron in parallel, you should design a \nsystem which runs in two threads. EnterThread  controls the entrance gate and ExitThread  \ncontrols the exit gate. The threads share the occupancy  counter so to correctly indicate the", "source": "Page 328", "chapter": "5"}
{"id": "cfb2e7fe2373-1", "text": "controls the exit gate. The threads share the occupancy  counter so to correctly indicate the \nparking-full state. Complete the UML sequence diagram in Figure 5-35 that shows how the two \nthreads update the shared variable, i.e., occupancy . \nFULLFULL\n \nFigure 5-34: Parking lot occupancy monitoring, Problem 5.16.", "source": "Page 328", "chapter": "5"}
{"id": "44f93cfd6c30-0", "text": "Chapter 5 \uf0b7 Design with Patterns 315\nHint: Your key concern is to maintain the consistent shared state ( occupancy ) and indicate \nwhen the parking-full sign should be posted. Extran eous actions, such as issuing the ticket for an \nentering patron and processing the payment for an  exiting patron, should not be paid attention\u2014\nonly make a high-level remark where appropriate. \nProblem 5.17 \nConsider a restaurant scenario shown in Figure 5- 36. You are to write a simulation in Java such \nthat each person runs in a different thread. Assume that each person takes different amount of \ntime to complete their task. The egg tray a nd the pickup counter have limited capacities, Neggs and \nNplates, respectively. The supplier stocks the egg tr ay but must wait if there are no free slots. \nLikewise, the cooks must hold the prepared meal if the pickup counter is full. \nProblem 5.18 \nA priority inversion  occurs when a higher-priority thread is  waiting for a lower-priority thread to \nfinish processing of a critical region that is shared by both. Although higher-priority threads \nnormally preempt lower-priority threads, this is not possible when both share the same critical \nregion. While the higher-priority thread is waiting,  a third thread, whose priority is between the", "source": "Page 329", "chapter": "5"}
{"id": "44f93cfd6c30-1", "text": "first two, but it does not share the critical region, preempts the low-priority thread. Now the Car: EnterThread : ExitThread\nCar: SharedState\nrequestEntry()\nrequestExit()\nFigure 5-35: UML diagram template for parking lot occupancy monitoring, Problem 5.16. \nSupplier\nEgg tray\nCook 1Cook 2\nPickup\ncounterWaiter\nFigure 5-36: Concurrency problem in a restaurant scenario, Problem 5.17.", "source": "Page 329", "chapter": "5"}
{"id": "95d51c7c8608-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  316 \nhigher-priority thread is waiting for more than one  lower-priority thread. Search the literature and \ndescribe precisely a possible mechan ism to avoid priority inversion. \nProblem 5.19 \nAssume that the patient device described in Problem  2.3 (at the end of Chapter 2) runs in a multi-\nthreaded mode, where different threads acquire and process data from different sensors. (See also \nProblem 2.35 and its solution on the back of this book.) What do you believe is the optimal \nnumber of threads? When designing this syst em, what kind of race conditions or other \nconcurrency issues can you think of? Propose a sp ecific solution for each issue that you identify \n(draw UML sequence diagrams or write pseudo-code). \nProblem 5.20 \nConsider the supermarket invent ory management system from Problem 5.10. A first observation \nis that the existing design ignores the issu e of concurrency\u2014there will be many users \nsimultaneously removing items, and/ or several associates may be  simultaneously restocking the \nshelves. Also, it is possible that several empl oyees may simultaneously wish to view pending \ntasks, assign replenishment tasks, or report repl enishment completed. Clearly, it is necessary to", "source": "Page 330", "chapter": "5"}
{"id": "95d51c7c8608-1", "text": "introduce multithreading even if the present syst em will never be extended with new features. \nModify the existing design and introduce multithreading. \n \nProblem 5.21 \n \nProblem 5.22 \nUse Java RMI to implement a distributed  Publisher-Subscriber design pattern. \nRequirements: The publisher and subscribers are to be run on different machines. The naming \nserver should be used for rendezvous only; after the first query to the naming server, the publisher \nshould cache the contact information locally. \nHandle sudden (unannounced) depart ures of subscribers by implementing a heartbeat protocol. \nProblem 5.23 \nSuppose that you are designing an online grocery store. The only supported payment method will \nbe using credit cards. The information exchanges between the parties are shown in Figure 5-37. \nAfter making the selection of items for purchas e, the customer will be prompted to enter \ninformation about his/her credit card account. Th e grocery store (merchant) should obtain this \ninformation and relay it to the bank for the transaction authorization. \nIn order to provide secure communication, you should design a public-key cryptosystem  as \nfollows. All messages between the involved parties must be encrypted for confidentiality, so that \nonly the appropriate parties can read the messag es. Even the information about the purchased", "source": "Page 330", "chapter": "5"}
{"id": "95d51c7c8608-2", "text": "only the appropriate parties can read the messag es. Even the information about the purchased \nitems, payment amount, and the outcome of credit -card authorization request should be kept \nconfidential. Only the initial catalog information is not confidential.", "source": "Page 330", "chapter": "5"}
{"id": "32130d3e3946-0", "text": "Chapter 5 \uf0b7 Design with Patterns 317\nThe credit card information must be encrypted by the customer so that only the bank can read it\u2014\nthe merchant should relay it without being able to  view the credit card information. For the sake \nof simplicity, assume that all credit cards are issued by a single bank. \nThe message from the bank containing binary decisi on (\u201capproved\u201d or \u201crejected\u201d) will be sent to \nthe merchant, who will forward it securely to the customer. Both  the merchant and customer \nshould be able to read it. \nAnswer the following questions about the cr yptosystem that is to be developed: \n(a) What is the (minimum) total number of public-private key pairs (\uf02b\niK, \uf02d\niK) that must be \nissued? In other words, which actors need to  possess a key pair, or perhaps some actors \nneed more than one pair? \n(b) For each key pair i, specify which actor should issue this pair, to whom the public key \n\uf02b\niK should be distributed, and at what time (prior to each shopping session or once for \nmultiple sessions). Provide an explanation for your answer! \n(c) For each key pair i, show which actor holds the public key \uf02b\niK and which actor holds the \nprivate key \uf02d", "source": "Page 331", "chapter": "5"}
{"id": "32130d3e3946-1", "text": "iK and which actor holds the \nprivate key \uf02d\niK. \n(d) For every message in Figure 5-37, show exactly which key \uf02b\niK/\uf02d\niK should be used in the \nencryption of the message and which key should be used in its decryption. \n Customer Merchant Bank\nplace order (\u201cselected items\")\nenter credit card info (\u201cpayment amount\u201c)\nprocess payment (\u201ccard info\")enter selection (\u201citems catalog\u201c)\napprove transaction (\u201ccard info\u201c, \u201cpayment amount\")\nnotify outcome (\u201cresult value\u201c)\nnotify outcome (\u201cresult value\u201c)\nFigure 5-37: Information exchanges between the relevant parties. The quoted variables in\nthe parentheses represent the parameters that a re passed on when the operation is invoked.", "source": "Page 331", "chapter": "5"}
{"id": "bb3c33cf4e07-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  318 \nProblem 5.24 \nIn the Model-View-Controller design pattern, discu ss the merits of having Model subscribe to the \nController using the Publish-Subscribe desi gn pattern? Argue whether Controller should \nsubscribe to the View?", "source": "Page 332", "chapter": "5"}
{"id": "afd16565c7d7-0", "text": "319 Contents \n6.1 Structure of XML Documents \n6.1.1 Syntax  \n6.1.2 Document Type Definition (DTD)  6.1.3 Namespaces  \n6.1.4 XML Parsers  \n6.2 XML Schemas \n6.2.1 XML Schema Basics  6.2.2 Models for Structured Content   \n6.2.3 Datatypes  6.2.4 Reuse  \n6.2.5 RELAX NG Schema Language \n6.3 Indexing and Linking \n6.3.1 XPointer and Xpath  6.3.2 XLink  \n6.3.3   6.2.4   \n6.4 Document Transformation and XSL \n6.4.1   \n6.4.2   \n6.4.3   6.4.4   \n6.5  \n6.5.1   6.5.2   \n6.5.3   \n6.5.4 \n \n6.6  \n6.6.1   \n6.6.2   6.6.3 \n  \n6.7 Summary and Bibliographical Notes \nProblems  \nChapter 6  \nXML and Data Representation", "source": "Page 333", "chapter": "6"}
{"id": "afd16565c7d7-1", "text": "Problems  \nChapter 6  \nXML and Data Representation \n \n \n\u201cDescription is always a bore, both to the describer and the \ndescribee.\u201d \n\u2014Disraeli \nXML defines a standard way to add markup to documents, \nwhich facilitates representation, storage, and exchange of information. A markup language  is a mechanism to identify \nparts of a document and to describe their logical relationships. \nXML stands for \u201ceXtensible Markup Language\u201d (extensible because it is not a fixed set of markup tags like HTML\u2014\nHyperText Markup Language). Th e language is standardized \nby the World Wide Web Consortium (W3C), and all relevant information is available at: http://www.w3.org/XML/ . \nStructured information contains both content  (words, pictures, \netc.) and metadata  describing what role that content plays (for \nexample, content in a section heading has a different meaning \nfrom content in a footnote, which means something different \nthan content in a figure caption or content in a database table, etc.). \nXML is not a single, predefined markup language: it is a meta-\nlanguage\u2014language for defining other languages\u2014which lets \nyou design your own markup language. A predefined markup \nlanguage like HTML defines a specific vocabulary and", "source": "Page 333", "chapter": "6"}
{"id": "afd16565c7d7-2", "text": "language like HTML defines a specific vocabulary and \ngrammar to describe information, and the user is unable to modify or extend either of these. Conversely, XML, being a \nmeta-language for markup, lets you design a new markup \nlanguage, with tags and the rules of their nesting that best suite your problem domain. \nWhy cover XML in a basic software engineering te xt? Because so far we dealt only with program \ndevelopment, but neglected data. [Brooks\u2019s co mment about code vs. data.] If you are writing \nsoftware, you are inevitably representing structured information, whether it is a configuration file, \ndocumentation, or program\u2019s inpu t/output data. You need to specify how data is represented and \nexchanged, i.e., the data format. But there is more to it.", "source": "Page 333", "chapter": "6"}
{"id": "7c5200a97f83-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  320 \n The perception and nature of the term \u201cdocumen t\u201d has changed over the time. In the past, a \ndocument was a container of static information a nd it was often an end result of an application. \nRecently, the nature of documents changed from passive to active. The documents themselves \nbecame \u201clive\u201d applications. Witness the client -side event-handling scripting languages in Web \nbrowsers, such as JavaScript. Moreover, great d eal of a program\u2019s business logic can be encoded \nseparately, as data, rather than hard-coded as inst ructions. Cf. data-driven design and reflection, \nChapter 7 below. \nStructured Documents and Markup \nThe word \u201cdocument\u201d refers not only to traditiona l documents, like a book or an article, but also \nto the numerous of other \u201cdata collections.\u201d  These include vector graphics, e-commerce \ntransactions, mathematical equations, object meta-d ata, server APIs, and great many other kinds \nof structured information. Generally, structured document  is a document in which individual parts \nare identified and they are arranged in a certain pattern. Documents having structured information \ninclude both the content as well as what the cont ent stands for. Consider these two documents: \nUnstructured Document Structured Document", "source": "Page 334", "chapter": "6"}
{"id": "7c5200a97f83-1", "text": "Unstructured Document Structured Document \n \nMr. Charles Morse 13 Takeoff Lane Talkeetna, AK 99676 \n \n29 February, 1997  Mrs. Robinson 1 Entertainment Way \nLos Angeles, CA 91011 \n Dear Mrs. Robinson,  Here\u2019s part of an update on my first day at the edge. I hope to relax and sow my wild \noats. <letter> \n  <sender>     <name>Mr. Charles Morse</name>     <address> \n      <street>13 Takeoff Lane</street> \n      <city>Talkeetna</city> <state>AK</state>       <postal-c ode>99676</postal-code> \n    </address>   </sender> \n  <date>29 February, 1997</date> \n  <recipient>     <name>Mrs. Robinson</name>     <address>       <street>1 Entertainment Way</street>       <city>Los Angeles</city> <state>CA</state> \n      <postal-c ode>91011</postal-code> \n    </address>   </recipient>   <salutation>Dear Mrs. Robinson,</ salutation>   <body> \n    Here\u2019s part of an update \u2026", "source": "Page 334", "chapter": "6"}
{"id": "7c5200a97f83-2", "text": "Here\u2019s part of an update \u2026 \n  </body>   <closing>Sincerely,</closing>   <signature>Charlie</signature> </letter> \nYou probably guessed that the do cument on the left is a corr espondence letter, because you are \nfamiliar with human conventions about composing letters. (I highlighted the prominent parts of \nthe letter by gray boxes.) Also, postal addresses adhere to certain templates as well. Even if you \nnever heard of a city called Talkeetna, you can quickly recognize what part of the document appears to represent a valid postal address. But, if you are a computer, not accustomed to human \nconventions, you would not know what the text c ontains. On the other hand, the document on the sender\u2019s \naddress recipient\u2019s \naddress date \nsalutation \nclosing \nsignature  \nletter\u2019s body", "source": "Page 334", "chapter": "6"}
{"id": "d47b1c2e3d6e-0", "text": "Chapter 6 \uf0b7 XML and Data Representation 321\nright has clearly identified (marked) parts a nd their sub-parts. Parts are marked up with tags that \nindicate the nature of the part they surround. In  other words, tags assign meaning/semantics to \ndocument parts. Markup is a form of metadata , that is, document\u2019s dictionary capturing \ndefinitions of document parts a nd the relationships among them. \nHaving documents marked up enables automatic da ta processing and analysis. Computer can be \napplied to extract relevant and novel informati on and present to the user, check official forms \nwhether or not they are properly filled out by user s, etc. XML provides a standardized platform to \ncreate and exchange structured documents. Moreover, XML provides a platform for specifying \nnew tags and their arrangements,  that is, new markup languages. \nXML is different from HTML, although there is a superficial similarity. HTML is a concrete and \nunique markup language, while XM L is a meta-language\u2014a syst em for creating new markup \nlanguages. In a markup language, such as HTML, bot h the tag set and the tag semantics are fixed \nand only those will be recognized by a Web browser. An <h1>  is always a first level heading and \nthe tag <letter>  is meaningless. The W3C, in conjunction with browser vendors and the", "source": "Page 335", "chapter": "6"}
{"id": "d47b1c2e3d6e-1", "text": "WWW community, is constantly working to extend the definition of HTML to allow new tags to \nkeep pace with changing technology and to bring variations in presentation (stylesheets) to the \nWeb. However, these changes are always rigidl y confined by what the browser vendors have \nimplemented and by the fact that backward compatibility is vital. And for people who want to \ndisseminate information widely, features supported only by the latest release of a particular \nbrowser are not useful. \nXML specifies neither semantics nor a tag set. The tags and grammar used in the above example \nare completely made up. This is the power of XML\u2014it allows you to define the content of your \ndata in a variety of ways as long as you conform to the general structure that XML requires. XML \nis a meta-language for describing markup languag es. In other words, XML provides a facility to \ndefine tags and the structural relationships be tween them. Since there is no predefined tag set, \nthere cannot be any preconceived semantics. All of the semantics of XML documents will be \ndefined by the applications that process them. \n A document has both a logical  and a physical structure . The logical structure allows a document \nto be divided into named parts and sub-parts, called elements . The physical structure allows \ncomponents of the document, called entities , to be named and stored separately, sometimes in", "source": "Page 335", "chapter": "6"}
{"id": "d47b1c2e3d6e-2", "text": "components of the document, called entities , to be named and stored separately, sometimes in \nother data files so that information can be reus ed and non-textual data (s uch as images) can be \nincluded by reference. For example, each chapte r in a book may be represented by an element, \ncontaining further elements that describe each pa ragraph, table and image, but image data and \nparagraphs that are reused (perhaps from other documents) are entities, stored in separate files. \nXML Standard \nXML is defined by the W3C in a number of  related specifications available here: \nhttp://www.w3.org/TR/ . Some of these include: \n\uf0b7 Extensible Markup Language (X ML), current version 1.1 ( http://www.w3.org/XML/Core/ ) \u2013 \nDefines the syntax of XML, i.e., the base XML specification.", "source": "Page 335", "chapter": "6"}
{"id": "ab2a67f3cac7-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  322 \n \uf0b7 Namespaces ( http://www.w3.org/TR/xml-names11 ) \u2013 XML namespaces provide a simple \nmethod for qualifying element and attribute na mes used in Extensible Markup Language \ndocuments by associating them with nam espaces identified by URI references. \n\uf0b7 Schema ( http://www.w3.org/XML/Schema ) \u2013 The schema language, which is itself \nrepresented in XML, provides a superset of the capabilities found in XML document type \ndefinitions (DTDs). DTDs are explained below. \n\uf0b7 XML Pointer Language (XPointer) ( http://www.w3.org/TR/xptr/ ) and XML Linking \nLanguage (XLink) ( http://www.w3.org/TR/xlink/ ) \u2013 Define a standard way to represent links \nbetween resources. In addition to simple links, like HTML\u2019s <A> tag, XML has \nmechanisms for links between multiple res ources and links between read-only resources. \nXPointer describes how to address a resource, XLink describes how to associate two or \nmore resources. \n\uf0b7 XML Path Language (XPath) ( http://www.w3.org/TR/xpath20/ ) \u2013 Xpath is a language for \naddressing parts of an XML document, designed to be used by both XSLT and XPointer.", "source": "Page 336", "chapter": "6"}
{"id": "ab2a67f3cac7-1", "text": "\uf0b7 Extensible Stylesheet Language (XSL) ( http://www.w3.org/TR/xsl/ ) and XSL \nTransformations (XSLT) ( http://www.w3.org/TR/xslt/ ) \u2013 Define the standard stylesheet \nlanguage for XML. \nUnlike programming languages, of which there ar e many, XML is universally accepted by all \nvendors. The rest of the chapter gives a brief overview and relevant examples. \n \n6.1 Structure of XML Documents \n \n6.1.1 Syntax \nSyntax defines how the words of a language are arranged into phrases and sentences and how \ncomponents (like prefixes and suffixes) are co mbined to make words. XML documents are \ncomposed of markup and content\u2014content (text) is hierarchically structured by markup tags. \nThere are six kinds of markup that can occur in an XML document: elements, entity references, \ncomments, processing instructions, marked sec tions, and document type declarations. The \nfollowing subsections introduce each of these markup concepts. \nElements \nElements indicate logical parts of a document and they are the most common form of markup. An \nelement is delimited by tags which are surrounded by angle brackets (\u201c <\u201d, \u201c>\u201d and \u201c</\u201d, \u201c/>\u201d). \nThe tags give a name to the document part th ey surround\u2014the element name should be given to", "source": "Page 336", "chapter": "6"}
{"id": "ab2a67f3cac7-2", "text": "convey the nature or meaning of the content. A non-empty element begins with a start-tag, \n<tag> , and ends with an end-tag, </tag> . The text between the start-tag and end-tag is called \nthe element\u2019s content . In the above example of a letter document, the element", "source": "Page 336", "chapter": "6"}
{"id": "820508477f29-0", "text": "Chapter 6 \uf0b7 XML and Data Representation 323\n<salutation>Dear Mrs. Robinson,</salutation>  indicates the salutation part of \nthe letter. Rules for forming an element name are: \n\uf0b7 Must start with a letter character \n\uf0b7 Can include all standard programming la nguage identifier characters, i.e., \n[0-9A-Za-z]  as well as underscore _, hyphen -, and colon :   \n\uf0b7 Is case sensitive, so <name>  and <Name>  are different element names \nSome elements may be empty, in which case they  have no content. An empty element can begin \nand end at the same place in which case it is denoted as <tag/> . Elements can contain sub-\nelements. The start tag of an element can have, in  addition to the element name, related (attribute, \nvalue) pairs. Elements can also have mixed content  where character data can appear alongside \nsubelements, and character data is not confined to  the deepest subelements. Here is an example: \n    <salutation> Dear <name>Mrs. Robinson</name> , </salutation> \nNotice the text appearing between the element <salutation>  and its child element <name> . \nAttributes \nAttributes are name-value pairs that occur inside start-tags  after the element name. A start tag can", "source": "Page 337", "chapter": "6"}
{"id": "820508477f29-1", "text": "have zero or more attributes. For example, \n<date format=\"English_US\"> \nis an element named date  with the attribute format  having the value English_US , meaning \nthat month is shown first and named in English. Attribute names are formed using the same rules \nas element names (see above). In XML, all attr ibute values must be quoted. Both single and \ndouble quotes can be used, provided they are correctly matched. \nEntities and Entity References \nXML reserves some characters to distinguish markup from plain text (content). The left angle \nbracket, <, for instance, identifies the beginning of an element\u2019s start- or end-tag. To support the \nreserved characters as part of content and avoid confusion with markup, there must be an \nalternative way to represent them. In XML, entities  are used to represent these reserved \ncharacters. Entities are also used to refer to ofte n repeated or varying text and to include the \ncontent of external files. In this  sense, entities are similar to macros. \nEvery entity must have a unique name. Defini ng your own entity names is discussed in the \nsection on entity declarations (Section 6.1.2 below). In order to use an entity, you simply \nreference it by name. Entity references  begin with the ampersand and end with a semicolon, like", "source": "Page 337", "chapter": "6"}
{"id": "820508477f29-2", "text": "this &entityname; . For example, the lt entity inserts a literal < into a document. So to \ninclude the string <non-element>  as plain text, not markup, inside an XML document all \nreserved characters should be escaped, like so &lt;non-element&gt; . \nA special form of entity reference, called a charact er reference, can be used to insert arbitrary \nUnicode characters into your document. This is  a mechanism for inserting characters that cannot \nbe typed directly on your keyboard.", "source": "Page 337", "chapter": "6"}
{"id": "0e728510b56a-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  324 \n Character references take one of  two forms: decimal references, &#8478; , and hexadecimal \nreferences, &#x211E; . Both of these refer to character number U+211E from Unicode (which is \nthe standard R x prescription symbol). \nComments \nA comment begins with the characters <!--  and ends with -->. A comment can span multiple \nlines in the document and contain any data except the literal string \u201c --.\u201d You can place \ncomments anywhere in your document outside  other markup. Here is an example: \n    <!-- ******************** \n      My comment is imminent. \n    --> \nComments are not part of the textual content of an XML document and the parser will ignore \nthem. The parser is not required to pass them along to the application, although it may do so. \nProcessing Instructions \nProcessing instructions (PIs) allow documents to co ntain instructions for applications that will \nimport the document. Like comments, they are not textually part of the XML document, but this \ntime around the XML processor is required to pass them to an application. \nProcessing instructions have the form: <?name pidata?> . The name, called the PI target, \nidentifies the PI to the application. For example, you might have <?font start italic?>", "source": "Page 338", "chapter": "6"}
{"id": "0e728510b56a-1", "text": "and <?font end italic?> , which indicate the XML processor to start italicizing the text \nand to end, respectively. \nApplications should process only the targets they r ecognize and ignore all other PIs. Any data that \nfollows the PI target is optional; it is for the application that recognizes the target. The names \nused in PIs may be declared as notations in orde r to formally identify them. Processing instruction \nnames beginning with xml are reserved for XML standardization. \nCDATA Sections \nIn a document, a CDATA  section instructs the parser to i gnore the reserved markup characters. So, \ninstead of using entities to include  reserved characters in the content as in the above example of \n&lt;non-element&gt; , we can write: \n        <![CDATA[  <non-element> ]]> \nBetween the start of the section, <![CDATA[  and the end of the section, ]]>, all character data \nare passed verbatim to the application, wit hout interpretation. Elements, entity references, \ncomments, and processing instructions are all unrecogn ized and the characters that comprise them \nare passed literally to the application.  The only string that cannot occur in a CDATA  section is \n\u201c]]>\u201d.", "source": "Page 338", "chapter": "6"}
{"id": "a59d7cdc0fbd-0", "text": "Chapter 6 \uf0b7 XML and Data Representation 325\nDocument Type Declarations (DTDs) \nDocument type declarations (DTDs) are reviewed in Section 6.1.2 below. DTD is used mainly to \ndefine constraints on the logical structure of documents, that is, the valid tags and their \narrangement/ordering. \n \nThis is about as much as an average user needs to know about XML. Obviously, it is simple and \nconcise. XML is designed to handle almost any kind  of structured data\u2014it constrains neither the \nvocabulary (set of tags) nor the grammar (rules of  how the tags combine) of the markup language \nthat the user intends to create. XML allows y ou to create your own tag names. Another way to \nthink of it is that XML only defines punctuation symbols and rules for forming \u201csentences\u201d and \u201cparagraphs,\u201d but it does not prescribe any vocab ulary of words to be used. Inventing the \nvocabulary is left to the language designer. \nBut for any given application, it is probably not meaningful for tags to occur in a completely \narbitrary order. From a strictly syntactic point of view, there is nothing wrong with such an XML \ndocument. So, if the document is to have meaning, and certainly if you are writing a stylesheet or", "source": "Page 339", "chapter": "6"}
{"id": "a59d7cdc0fbd-1", "text": "application to process it, there must be some constraint on the sequence and nesting of tags, \nstating for example, that a <chapter>  that is a sub-element of a <book>  tag, and not the other \nway around. These constraints can be expressed using an XML schema (Section 6.2 below). \nXML Document Example \nThe letter document shown initiall y in this chapter can be represented in XML as follows: \nListing 6-1: Example XML document of a correspondence letter. \n 1  <?xml version=\"1.0\" encoding=\"UTF-8\"?> \n 2  <!-- Comment: A personal letter marked up in XML. --> \n 3  <letter language=\"en-US\" template=\"personal\"> \n 4    <sender> \n 5      <name>Mr. Charles Morse</name> \n 6      <address kind=\"return\"> \n 7        <street>13 Takeoff Lane</street> \n 8        <city>Talkeetna</city><state>AK</state> \n 9        <postal-code>99676</postal-code> \n10      </address> \n11    </sender> \n12    <date format=\"English_US\">February 29, 1997</date> \n13    <recipient>", "source": "Page 339", "chapter": "6"}
{"id": "a59d7cdc0fbd-2", "text": "13    <recipient> \n14      <name>Mrs. Robinson</name> \n15      <address kind=\"delivery\"> \n16        <street>1 Entertainment Way</street> \n17        <city>Los Angeles</city><state>CA</state> \n18        <postal-code>91011</postal-code> \n19      </address> \n20    </recipient> \n21    <salutation style=\"formal\">Dear Mrs. Robinson,</ salutation> \n22    <body> \n23      Here's part of an update ... \n24    </body> \n25    <closing>Sincerely,</closing>", "source": "Page 339", "chapter": "6"}
{"id": "b2bc97717c5d-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  326 \n 26    <signature>Charlie</signature> \n27  </letter> \nLine 1 begins the document with a processing instruction <?xml ... ?> . This is the XML \ndeclaration , which, although not required, explicitly identifies the document as an XML \ndocument and indicates the version of XML to which it was authored. \nA variation on the above example is to define  the components of a postal address (lines 6\u20139 and \n14\u201317) as element attributes: \n    <address kind=\"return\" street=\"13 Takeoff Lane\" city=\"Talkeetna\" \n             state=\"AK\" postal-code=\"99676\" /> \nNotice that this element has no content, i.e., it is  an empty element. This produces a more concise \nmarkup, particularly suitable for elements w ith well-defined, simple, and short content. \nOne quickly notices that XML encourages naming th e elements so that the names describe the \nnature of the named object, as opposed to describing how  it should be displayed or printed. In this \nway, the information is self-describing, so it can be located, extracted, and manipulated as \ndesired. This kind of power has previously been reserved for organized scalar information \nmanaged by database systems.", "source": "Page 340", "chapter": "6"}
{"id": "b2bc97717c5d-1", "text": "managed by database systems. \nYou may have also noticed a potential hazard th at comes with this freedom\u2014since people may \ndefine new XML languages as they please, how can we resolve ambiguities and achieve common \nunderstanding? This is why, although the core XML is very simple, there are many XML-related \nstandards to handle translation and specification of  data. The simplest way is to explicitly state \nthe vocabulary and composition rules of an XM L language and enforce those across all the \ninvolved parties. Another option, as with natural la nguages, is to have a translator in between, as \nillustrated in Figure 6-1. The former solution em ploys XML Schemas (introduced in Section 6.2 \nbelow), and the latter employs transformation languages (introduced in Section 6.4 below). \nWell-Formedness \nA text document is an XML document if it has a proper syntax as per the XML specification. \nSuch document is called a well-formed  document. An XML document is well-formed if it \nconforms to the XML syntax rules: \n\uf0b7 Begins with the XML declaration <?xml ... ?>   \n\uf0b7 Has exactly one root element, called the root or document , and no part of it can appear in \nthe content of any other element XML language for letters, variant 1\n<address kind=\"return\u201c", "source": "Page 340", "chapter": "6"}
{"id": "b2bc97717c5d-2", "text": "<address kind=\"return\u201c\nstreet=\"13 Takeoff Lane\u201c\ncity=\"Talkeetna\"\nstate=\"AK\u201c\nzip=\"99676\" /><address kind=\"return\u201c\nstreet=\"13 Takeoff Lane\u201c\ncity=\"Talkeetna\"\nstate=\"AK\u201c\nzip=\"99676\" /><address kind=\"return\">\n<street>13 Takeoff Lane</street>\n<city>Talkeetna</city>\n<state>AK</state>\n<postal-code>99676</postal-code>\n</address><address kind=\"return\">\n<street>13 Takeoff Lane</street>\n<city>Talkeetna</city>\n<state>AK</state>\n<postal-code>99676</postal-code>\n</address>XML language for letters, variant 2\nTranslator\nFigure 6-1: Different XML languages can be de fined for the same domain and/or concepts.\nIn such cases, we need a \u201ctranslator\u201d  to translate between those languages.", "source": "Page 340", "chapter": "6"}
{"id": "b619ca1bcb1a-0", "text": "Chapter 6 \uf0b7 XML and Data Representation 327\n\uf0b7 Contains one or more elements  delimited by start-tags  and end-tags  (also remember that \nXML tags are case sensitive) \n\uf0b7 All elements are closed, that is all start-tags must match end-tags \n\uf0b7 All elements must be properly nested within each other, such as \n<outer><inner>inner content</inner> </outer>   \n\uf0b7 All attribute values must be within quotations \n\uf0b7 XML entities  must be used for special characters. Each of the parsed entities  that are \nreferenced directly or indirectly within the document is well-formed. \nEven if documents are well-formed  they can still contain errors, a nd those errors can have serious \nconsequences. XML Schemas (introduced in Secti on 6.2 below) provide further level of error \nchecking. A well-formed XML document may in addition be valid  if it meets constraints \nspecified by an associated XML Schema. \nDocument- vs. Data-Centric XML \nGenerally speaking, there are two broad applica tion areas of XML technologies. The first relates \nto document-centric applications, and the second to data-centric applications. Because XML can \nbe used in so many different ways, it is impor tant to understand the difference between these two", "source": "Page 341", "chapter": "6"}
{"id": "b619ca1bcb1a-1", "text": "categories. (See more at http://www.xmleverywhere.com/newsletters/20000525.htm ) \nInitially, XML\u2019s main application was in semi -structured document representation, such as \ntechnical manuals, legal documen ts, and product catalogs. The content of these documents is \ntypically meant for human consumption, alth ough it could be processed by any number of \napplications before it is presented to humans.  The key element of these documents is semi-\nstructured marked-up text. A good example is the correspondence letter in Listing 6-1 above. \nBy contrast, data-centric XML is used to mark  up highly structured information such as the \ntextual representation of relational data from da tabases, financial transaction information, and \nprogramming language data structures. Data-centric  XML is typically generated by machines and \nis meant for machine consumption. It is XML\u2019s natural ability to nest and repeat markup that \nmakes it the perfect choice for representing these types of data. \nKey characteristics of data-centric XML: \n\uf0b7 The ratio of markup to content is high. The XML includes many different types of tags. \nThere is no long-running text. \n\uf0b7 The XML includes machine-generated informa tion, such as the submission date of a \npurchase order using a date-time format of year-month-day. A human authoring an XML", "source": "Page 341", "chapter": "6"}
{"id": "b619ca1bcb1a-2", "text": "purchase order using a date-time format of year-month-day. A human authoring an XML \ndocument is unlikely to enter a date-time value in this format. \n\uf0b7 The tags are organized in a highly struct ured manner. Order and positioning matter, \nrelative to other tags. For example, TBD \n\uf0b7 Markup is used to describe what a piece of information means  rather than how it should \nbe presented to a human.", "source": "Page 341", "chapter": "6"}
{"id": "a55173973c3f-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  328 \n An interesting example of data-centric XML is the XML Metadata Interchange  (XMI), which is \nan OMG standard for exchanging metadata info rmation via XML. The most common use of XMI \nis as an interchange format for UML models, a lthough it can also be used for serialization of \nmodels of other languages (metamodels). XMI en ables easy interchange of metadata between \nUML-based modeling tools and MOF (Meta-Object Facility)-based metadata repositories in \ndistributed heterogeneous environmen ts. For more information see here:  \nhttp://www.omg.o rg/technology/documents/formal/xmi.htm . \n6.1.2 Document Type Definition (DTD) \nDocument Type Definition (DTD) is a schema language for XML inherited from SGML, used \ninitially, before XML Schema was developed. DTD is one of ways to define the structure of \nXML documents, i.e., the document\u2019s metadata. \nSyntactically, a DTD is a sequence of declarations. There are four kinds of declarations in XML: \n(1) element type declarations, used to define tags; (2) attribute list declarations, used to define tag \nattributes; (3) entity declarations, used to define entities; and, (4) notation declarations, used to", "source": "Page 342", "chapter": "6"}
{"id": "a55173973c3f-1", "text": "define data type notations. Each declaration has the form of a markup representation, starting with \na keyword followed by the production rule that specifies how the content is created: \n<!keyword production-rule > \nwhere the possible keywords are: ELEMENT , ATTLIST  (for attribute list), ENTITY , and \nNOTATION . Next, I describe these declarations. \nElement Type Declarations \nElement type declarations identify the names of el ements and the nature of their content, thus \nputting a type constraint on the element. A t ypical element type declaration looks like this: \n<!ELEMENT chapter (title, paragraph+, figure?)> \n<!ELEMENT title (#PCDATA)> \nDeclaration type  Element name  Element\u2019s  content model  (definition  of allowed \ncontent: list of names of child elements) \nThe first declaration identifies the element named chapter . Its content model follows the \nelement name. The content model defines what an  element may contain. In this case, a chapter \nmust contain paragraphs and title and may contain figures. The commas between element names \nindicate that they must occur in succession. The plus after paragraph  indicates that it may be \nrepeated more than once but must occur at least once. The question mark after figure  indicates \nthat it is optional (it may be absent). A name with no punctuation, such as title , must occur", "source": "Page 342", "chapter": "6"}
{"id": "a55173973c3f-2", "text": "exactly once. The following tabl e summarizes the meaning of th e symbol after an element: \nKleene symbol Meaning \nnone The element must occur exactly once \n? The element is optional (zero or one occurrence allowed) \n* The element can be skipped or included one or more times \n+ The element must be included one or more times \nDeclarations for paragraphs, title, figures and all ot her elements used in any content model must \nalso be present for an XML processor to check th e validity of a document. In addition to element", "source": "Page 342", "chapter": "6"}
{"id": "3c2d09aa3dc0-0", "text": "Chapter 6 \uf0b7 XML and Data Representation 329\nnames, the special symbol #PCDATA  is reserved to indicate character data. The PCDATA  stands \nfor parseable character data. \nElements that contain only other elements are said to have element content. Elements that contain \nboth other elements and #PCDATA  are said to have mixed content. For example, the definition \nfor paragraphs might be  \n<!ELEMENT paragraph (#PCDATA | quote)*> \nThe vertical bar indicates an \u201cor\u201d relationship, th e asterisk indicates that the content is optional \n(may occur zero or more times); therefore, by th is definition, paragraphs may contain zero or \nmore characters and quote tags, mixed in any orde r. All mixed content models must have this \nform: #PCDATA  must come first, all of the elements mu st be separated by vertical bars, and the \nentire group must be optional. \nTwo other content models are possible: EMPTY  indicates that the element has no content (and \nconsequently no end-tag), and ANY indicates that any content is allowed. The ANY content model \nis sometimes useful during document conversion, bu t should be avoided at almost any cost in a \nproduction environment because it disables all content checking in that element. \nAttribute List Declarations", "source": "Page 343", "chapter": "6"}
{"id": "3c2d09aa3dc0-1", "text": "production environment because it disables all content checking in that element. \nAttribute List Declarations \nElements which have one or more attributes are to be specified in the DTD using attribute list \ntype declarations. An example for a figure element could be like so \n<!ATTLIST figure caption CDATA #REQUIRED \n  scaling CDATA #FIXED \"100%\"> \nDeclaration type  Name of the \nassociated \nelement   Names of attributes  Data type  Keyword or default value \nRepeat for each attribute of the element \nThe CDATA  as before stands for character data  and #REQUIRED  means that the caption attribute \nof figure has to be present. Other marker could be #FIXED  with a value, which means this \nattribute acts like a constant. Yet another marker is #IMPLIED , which indicates an optional \nattribute. Some more markers are ID and enumerated data type like so \n<!ATTLIST person sibling (brother | sister) #REQUIRED> \nEnumerated attributes can take one of a list of values provided in the declaration. \nEntity Declarations \nAs stated above, entities are used  as substitutes for reserved characters, but also to refer to often \nrepeated or varying text and to include the conten t of external files. An entity is defined by its \nname and an associated value. An internal entity  is the one for which the parsed content", "source": "Page 343", "chapter": "6"}
{"id": "3c2d09aa3dc0-2", "text": "name and an associated value. An internal entity  is the one for which the parsed content \n(replacement text) lies inside the document, like so: \n<!ENTITY substitute \"This text is often repeated.\"> \nDeclaration type  Entity name  Entity value (any literal) \u2013 single or double quotes can \nbe used, but must be properly matched \nOnce the above example entity is defined, it can be used in the XML document as \n&substitute;  anywhere where the full text should  appear. Entities can contain markup as", "source": "Page 343", "chapter": "6"}
{"id": "188a1b6194cd-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  330 \n well as plain text. For example, this declaration defines &contact;  as an abbreviation for \nperson\u2019s contact information that may be rep eated multiple times in one or more documents: \n<!ENTITY contact '<a href=\"mailto:user@any.company.com\"> \n e-mail</a><br> \n<a href=\"732-932-4636.tel\">telephone</a> <address>13 Takeoff Lane<br> Talkeetna, AK 99676</address> '> \nConversely, the content of the replacement text of an external entity  resides in a file separate from \nthe XML document. The content can be accessed using either system identifier , which is a URI \n(Uniform Resource Identifier, see Appendix C) address, or a public identifier , which serves as a \nbasis for generating a URI address. Examples are: \n<!ENTITY contact SYSTEM \"http://any.company.com/contact.xml\"> \n<!ENTITY surrogate PUBLIC \"-//home/mrsmith/text\" \nDeclaration type  Entity name  SYSTEM or PUBLIC identifier, foll owed by the external ID (URI or other) \nNotation Declarations \nNotations  are used to associate actions with entities.  For example, a PDF file format can be \nassociated with the Acrobat application program. No tations identify, by name, the format of these", "source": "Page 344", "chapter": "6"}
{"id": "188a1b6194cd-1", "text": "actions. Notation declarations  are used to provide an identifying  name for the notation. They are \nused in entity or attribute list declarations and in attribute specifications. This is a complex and \ncontroversial feature of DTD and the inter ested reader should seek details elsewhere. \nDTD in Use \nA DTD can be embedded in the XML document for which it describes the syntax rules and this is \ncalled an internal DTD . The alternative is to have the DTD st ored in one or more separate files, \ncalled external DTD . External DTDs are preferable since they can be reused in different XML \ndocuments by different users. The reader should be by now aware of the benefits of modular \ndesign, a key one being able to (re-)use modules th at are tested and fixed by previous users. \nHowever, this also means that if the reused DTD module is chan ged, all documents that use the \nDTD must be tested against the new DTD and possi bly modified to conform to the changed DTD. \nIn an XML document, external DTDs are referred to with a DOCTYPE  declaration in the second \nline of the XML document (after the first line: <?xml ... ?> ) as seen in Listing 6-3 below. \nThe following fragment of DTD code defines the production rules for constructing book \ndocuments.", "source": "Page 344", "chapter": "6"}
{"id": "188a1b6194cd-2", "text": "documents. \n \nListing 6-2: Example DTD for a postal address element. File name: address.dtd   \n 1  <!ELEMENT address (street+, city, state, postal-code)> \n 2  <!ATTLIST address kind (return | delivery) #IMPLIED> \n 3  <!ELEMENT street (#PCDATA)> \n 4  <!ELEMENT city (#PCDATA)> \n 5  <!ELEMENT state (#PCDATA)> \n 6  <!ELEMENT postal-code (#PCDATA)>", "source": "Page 344", "chapter": "6"}
{"id": "82e9c592f743-0", "text": "Chapter 6 \uf0b7 XML and Data Representation 331\nLine 1 shows the element address  definition, where all four sub-elements are required, and the \nstreet  sub-element can appear more than once. Line 2 says that address  has an optional \nattribute, kind , of the enumerated type. \nWe can (re-)use the postal address declaration as an external DTD, for example, in an XML \ndocument of a correspondence letter as shown in Listing 6-3. \n \nListing 6-3: Example correspondence letter that uses an external DTD. \n 1  <?xml version=\"1.0\"?> <!-- Comment: Person DTD --> \n 2  <!DOCTYPE letter SYSTEM \"http://any.website.net/address.dtd\" [ \n 3      <!ELEMENT letter (sender?, recipient+, body)> \n 4      <!ATTLIST letter language (en-US | en-UK | fr) #IMPLIED \n 4a                      template (personal | business) #IMPLIED> \n 5      <!ELEMENT sender (name, address)> \n 6      <!ELEMENT recipient (name, address)> \n 7      <!ELEMENT name (#PCDATA)> \n 8      <!ELEMENT body ANY> \n 9  ]> \n10 \n11  <letter language=\"en-US\" template=\"personal\"> \n12    <sender>", "source": "Page 345", "chapter": "6"}
{"id": "82e9c592f743-1", "text": "12    <sender> \n13      <name>Mr. Charles Morse</name> \n14      <address kind=\"return\"> \n \n        . . .      <!-- continued as in Listing 6-1 above --> \n \nIn the above DTD document, Lines 2 \u2013 9 define  the DTD for a correspondence letter document. \nThe complete DTD is made up of two parts: (1) the external DTD subset , which in this case \nimports a single external DTD named address.dtd  in Line 2; and (2) the internal DTD subset  \ncontained between the brackets in Lines 3 \u2013 8. Th e external DTD subset will be imported at the \ntime the current document is parsed. The address  element is used in Lines 5 and 6. \nThe content of the body of letter is specified using the keyword ANY (Line 8), which means that a \nbody  element can contain any content, including mi xed content, nested elements, and even other \nbody  elements. Using ANY is appropriate initially when beginning to design the DTD and \ndocument structure to get quickly to a working version. However, it is a very poor practice to use \nANY in finished DTD documents. \nLimitations of DTDs \nDTD provided the first schema for XML documents. Their limitations include:", "source": "Page 345", "chapter": "6"}
{"id": "82e9c592f743-2", "text": "DTD provided the first schema for XML documents. Their limitations include: \n\uf0b7 Language inconsistency since DTD uses a non-XML syntax \n\uf0b7 Failure to support namespace integration \n\uf0b7 Lack of modular vocabulary design \n\uf0b7 Rigid content models (cannot derive new type definitions based on the old ones) \n\uf0b7 Lack of integration with data-oriented applications", "source": "Page 345", "chapter": "6"}
{"id": "7c2ccc66ba34-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  332 \n \uf0b7 Conversely, XML Schema allows much more expressive and precise specification of the \ncontent of XML documents. This flexibility also carries the price of complexity. \nW3C is making efforts to phase DTDs out. XML Sc hema is described in Section 6.2 below. \n6.1.3 Namespaces \nInventing new languages is an arduous task, so it will be beneficial if we can reuse (parts of) an \nexisting XML language (defined by a schema). Also, there are many occasions when an XML \ndocument needs to use markups defined in multip le schemas, which may have been developed \nindependently. As a result, it may happen that some tag names may be non-unique. \nFor example, the word \u201ctitle\u201d is used to signify the name of a book or work of art, a form of \nnomenclature indicating a person\u2019s status, the right to ownership of property, etc. People easily \nfigure out context, but computers are very poor at  absorbing contextual in formation. To simplify \nthe computer\u2019s task and give a specific meaning to what might otherwise be an ambiguous term, \nwe qualify  the term with and additional id entifier\u2014a namespace identifier. \nAn XML namespace  is a collection of names, used as element names or attribute names, see", "source": "Page 346", "chapter": "6"}
{"id": "7c2ccc66ba34-1", "text": "examples in Figure 6-2. The C++ programming language defines namespaces and Java package \nnames are equivalent to namespaces. Using namespaces, you can qualify your elements as \nmembers of a particular context, thus eliminating the ambiguity and enabling namespace-aware \napplications to process your document correctly. In other words: \nQualified name (QName) = Nam espace identifier + Local name \nA namespace is declared as an attribute  of an element. The general form is as follows: \n<bk:tagName    xmlns  :bk  = \"http://any.website.net/book\" /> \nmandatory  prefix  namespace name \nThere are two forms of namespace declarations due to  the fact that the prefix is optional. The first \nform binds a prefix to a given namespace name. The prefix  can be any string starting with a letter, \nfollowed by any combination of digits, letters, and punctuation signs (except for the colon \u201c:\u201d \nsince it is used to separate the mandatory string xmlns  from the prefix, which indicates that we \nare referring to an XML namespace). The namespace name , which is the attribute value, must be \na valid, unique URI. However, since all that is  required from the name is its uniqueness, a URL http://any.website.net/book\ntitle\nauthorchapter\nparagraphfigure\ncaptionhttp://any.website.net/person\ntitle\nnameaddress\nemailphone\ngender", "source": "Page 346", "chapter": "6"}
{"id": "7c2ccc66ba34-2", "text": "captionhttp://any.website.net/person\ntitle\nnameaddress\nemailphone\ngender\nFigure 6-2: Example XML namespaces provi ding context to individual names.", "source": "Page 346", "chapter": "6"}
{"id": "ec99c9cc1f5a-0", "text": "Chapter 6 \uf0b7 XML and Data Representation 333\nsuch as http://any.website.net/schema  also serves the purpose. Note that this does \nnot have to point to anything in particular\u2014it is merely a way to uniquely label a set of names. \nThe namespace is in effect within the scope of th e element for which it is defined as an attribute. \nThis means that the namespace is effective for all the nested elements, as well. The scoping \nproperties of XML namespaces are analogous to variable scoping properties in programming \nlanguages, such as C++ or Java. Th e prefix is used to qualify the tag names, as in the following \nexample: \nListing 6-4: Example of using namespaces in an XML document. \n 1      <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?> \n 2      <book> \n 3        <bk:cover xmlns:bk =\"http://any.website.net/book\"> \n 4          <bk:title>A Book About Namespaces</bk:title> \n 5          <bk:author>Anonymous</bk:title> \n 6          <bk:isbn number=\"1881378241\"/> \n 7        </bk:cover> \n 8        <bk2:chapter xmlns:bk2 =\"http://any.website.net/book\"", "source": "Page 347", "chapter": "6"}
{"id": "ec99c9cc1f5a-1", "text": "9          ch_name=\"Introduction\"> \n10          <bk2:paragraph> \n11            In this chapter we start from the beginning. \n12            ... \n13          </bk2:paragraph> \n14          . . . \n15        </bk2:chapter> \nAs can be seen, the namespace identifier must be declared only in the outermost element. In our \ncase, there are two top-level elements: <bk:cover>  and <bk:chapter> , and their embedded \nelements just inherit the namespace attribute(s). All the elements of the namespace are prefixed \nwith the appropriate prefix, in our case \u201cbk.\u201d The actual prefix\u2019s name is not important, so in the \nabove example I define \u201c bk\u201d and \u201cbk2\u201d as prefixes for the same namespace (in different \nscopes!). Notice also that an element can have an  arbitrary number of namespace attributes, each \ndefining a different prefix and referring to a different namespace. \nIn the second form, the prefix is omitted, so the el ements of this namespace are not qualified. The \nnamespace attribute is bound to the default namespace . For the above example (Listing 6-4), the \nsecond form can be declared as: \nListing 6-5: Example of using a default namespace.", "source": "Page 347", "chapter": "6"}
{"id": "ec99c9cc1f5a-2", "text": "Listing 6-5: Example of using a default namespace. \n 1      <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?> \n 2      <book> \n 3        <cover xmlns=\"http://any.website.net/book\"> \n 4          <title>A Book About Namespaces</title> \n 5          <author>Anonymous</title> \n 6          <isbn number=\"1881378241\"/> \n 7        </cover> \n 8        . . . \nNotice that there can be at most one default nam espace declared within a given scope. In Listing \n6-5, we can define another default namespace in the same document, but its scope must not \noverlap with that of the first one. \nScope of \"bk\" Scope of \"bk2\"  Scope of default n.s.", "source": "Page 347", "chapter": "6"}
{"id": "199616b6e384-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  334 \n 6.1.4 XML Parsers \nThe parsers define standard APIs to access and manipulate the parsed XML data. The two most \npopular parser APIs are DOM (Document Object Model) based and SAX (Simple API for XML). See Appendix E for a brief review of DOM. \nSAX and DOM offer complementary paradigms to access the data contained in XML documents. \nDOM allows random access to any part of a parsed XML document. To use DOM APIs, the \nparsed objects must be stored in the working memory. Conversely, SAX provides no storage and \npresents the data as a linear stream. With SAX, if  you want to refer back to anything seen earlier \nyou have to implement the underlying mechanism yourself. For example, with DOM an application program can import an  XML document, modify it in arbitrary order, and write back \nany time. With SAX, you cannot perform the editing arbitrarily since there is no stored document \nto edit. You would have to edit it by filtering th e stream, as it flows, and write back immediately. \nEvent-Oriented Paradigm: SAX \nSAX (Simple API for XML) is a simple, event-based API for XML parsers. The benefit of an \nevent-based API is that it does not require th e creation and maintenance of an internal", "source": "Page 348", "chapter": "6"}
{"id": "199616b6e384-1", "text": "event-based API is that it does not require th e creation and maintenance of an internal \nrepresentation of the parsed XML document. This  makes possible parsing XML documents that \nare much larger than the available system memory  would allow, which is particularly important \nfor small terminals, such as PDAs and mobile phones. Because it does not require storage behind \nits API, SAX is complementary to DOM.", "source": "Page 348", "chapter": "6"}
{"id": "b93964e781b4-0", "text": "Chapter 6 \uf0b7 XML and Data Representation 335\nSAX provides events for the following stru ctural information for XML documents: \n\uf0b7 The start and end of the document \n\uf0b7 Document type declaration (DTD) \n\uf0b7 The start and end of elements \n\uf0b7 Attributes of each element \n\uf0b7 Character data \n\uf0b7 Unparsed entity declarations \n\uf0b7 Notation declarations \n\uf0b7 Processing instructions \nObject-Model Oriented Paradigm: DOM \nDOM (Document Object Model) \n \nPractical Issues \nAdditional features relevant for both event-orie nted and object-model oriented parsers include: \n\uf0b7 Validation  against a DTD Initiating the parser\n. . .\nParserparser = \nParserFactory. makeParser\n(\"com.sun.xml.parser.Parser\");\nparser.setDocumentHandler (new\nDocumentHandlerImpl());\nparser.parse (input);\n. . .\nDocumentHandler Interface\npublic void startDocument ()throws\nSAXException{}\npublic void endDocument ()throws\nSAXException{}\npublic void startElement (String name, \nAttributeList attrs) throws SAXException{}\npublic void endElement (String\nname)throws SAXException{}\npublic void characters (char buf [], \nint offset, int len)throws\nSAXException{}<?xml ...>\n<element attr1=\u201cval1\u201d>\nThis is a test.", "source": "Page 349", "chapter": "6"}
{"id": "b93964e781b4-1", "text": "<element attr1=\u201cval1\u201d>\nThis is a test.\n</element>\n<element attr1=\u201cval2\u201d/>\nend of the documentstartDocument\nstartElement\ncharacters\nendElement\nendDocumentDocument\nHandlerEvent triggering in SAX parser:\nFigure 6-3: SAX parser Java example.", "source": "Page 349", "chapter": "6"}
{"id": "71c7b72ff0fb-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  336 \n \uf0b7 Validation  against an XML Schema \n\uf0b7 Namespace awareness , i.e., the ability to determine the namespace URI of an element or \nattribute \nThese features affect the performance and memory footprint  of a parser, so some parsers do not \nsupport all the features. You should check the documen tation for the particular parser as to the list \nof supported features. \n6.2 XML Schemas \n \nAlthough there is no universal definition of schem a, generally scholars agree that schemas are \nabstractions or generalizations of our perceptions  of the world around us, which is molded by our \nexperience. Functionally, schemas are knowledge st ructures that serve as heuristics which help us \nevaluate new information. An integral part of schema is our expectations of people, place, and \nthings. Schemas provide a mechanism for describing the logical structure of information, in the \nsense of what elements can or should be present and how they can be arranged. Deviant news \nresults in violation of these expectati ons, resulting in schema incongruence. \nIn XML, schemas are used to make a class of documents adhere to a particular interface and thus \nallow the XML documents to be created in a unifo rm way. Stated another way, schemas allow a", "source": "Page 350", "chapter": "6"}
{"id": "71c7b72ff0fb-1", "text": "document to communicate meta-information to the par ser about its content, or its grammar. Meta-\ninformation includes the allowed sequence and a rrangement/nesting of tags, attribute values and \ntheir types and defaults, the names of external f iles that may be referenced and whether or not \nthey contain XML, the formats of some external (non-XML) data that may be referenced, and the \nentities that may be encountered. Ther efore, schema defines the document production rules . \nXML documents conforming to a particular schema are said to be valid  documents. Notice that \nhaving a schema associated with a given XML doc ument is optional. If there is a schema for a \ngiven document, it must appear before the first element in the document. \nHere is a simple example to motivate the need for schemas. In Section 6.1.1 above I introduced \nan XML representation of a correspondence letter and used the tags <letter> , <sender> , \n<name> , <address> , <street> , <city> , etc., to mark up the elements of a letter. What if \nsomebody used the same vocabulary in a somewhat different manner, such as the following? \nListing 6-6: Variation on the XML example document from Listing 6-1. \n 1  <?xml version=\"1.0\" encoding=\"UTF-8\"?>", "source": "Page 350", "chapter": "6"}
{"id": "71c7b72ff0fb-2", "text": "1  <?xml version=\"1.0\" encoding=\"UTF-8\"?> \n 2  <letter> \n 3    <sender>Mr. Charles Morse</sender> \n 4    <street>13 Takeoff Lane</street> \n 5    <city>Talkeetna, AK 99676</city> \n 6    <date>29.02.1997</date> \n 7    <recipient>Mrs. Robinson</recipient> \n 8    <street>1 Entertainment Way</street> \n 9    <city>Los Angeles, CA 91011</city> \n10    <body> \n11      Dear Mrs. Robinson, \n12", "source": "Page 350", "chapter": "6"}
{"id": "eedd797b999b-0", "text": "Chapter 6 \uf0b7 XML and Data Representation 337\n13      Here's part of an update ... \n14       \n15      Sincerely, \n16    </body> \n17    <signature>Charlie</signature> \n18  </letter> \nWe can quickly figure that this document is a le tter, although it appears to follow different rules \nof production than the example in Listing 6-1 above. If asked whether Listing 6-6 represents a \nvalid letter, you would likely respond: \u201cIt probably does.\u201d However, to support automatic \nvalidation of a document by a machine, we mu st precisely specify and enforce the rules and \nconstraints of composition. Machines are not good at handling ambiguity and this is what \nschemas are about. The purpose of a schema in markup languages is to: \n\uf0b7 Allow machine validation  of document structure \n\uf0b7 Establish a contract  (how an XML document will be structured) between multiple parties \nwho are exchanging XML documents \nThere are many other schemas that are used regul arly in our daily activities. Another example \nschema was encountered in Section 2.3.3\u2014th e schema for representing the use cases of a \nsystem-to-be, Figure 2-13. \n6.2.1 XML Schema Basics", "source": "Page 351", "chapter": "6"}
{"id": "eedd797b999b-1", "text": "6.2.1 XML Schema Basics \nXML Schema provides the vocabulary to state the rules of document production. It is an XML language for which the vocabulary is defined using it self. That is, the elements and datatypes that http://www.w3.org/2001/XMLSchema\nschema\nelement\ncomplexType\nsequencestring\nbooleanhttp://any.website.net/letter\nletter\nsender\naddress\nstreetname\nsalutation\nThis is the vocabulary that\nXML Schema provides to define\nyour new vocabularyrecipient\ncity\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<lt:letter xmlns:lt =\"http://any.website.net/letter\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://any.website.net/letter\nhttp://any.website.net/letter/letter.xsd\"\nlt:language=\"English_US\" lt:template=\"personal\">\n<lt:sender>\n... \n</lt:letter>\nAn instance document that conforms to the \u201cletter\u201d schema\nFigure 6-4: Using XML Schema. Step 1:  use the Schema vocabulary to define a new XML\nlanguage (Listing 6-7). Step 2: use both to produce valid XML documents (Listing 6-8).", "source": "Page 351", "chapter": "6"}
{"id": "bcb43e7feb56-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  338 \n are used to construct schemas, such as <schema> , <element> , <sequence> , <string> , \netc., come from the http://www.w3.org/2001/XMLSchema  namespace, see Figure 6-4. \nThe XML Schema namespace is also called the \u201csch ema of schemas,\u201d for it defines the elements \nand attributes used for defining new schemas. \nThe first step involves defining a new language (see Figure 6-4). The following is an example \nschema for correspondence letters, an example of which is given in Listing 6-1 above. \n \nListing 6-7: XML Schema for correspondence letters (see an instance in Listing 6-1). \n 1 \n 2 \n 2a \n 2b \n 2c \n 3 \n 4 \n 5 \n 6 \n 6a \n 7 \n 8 \n 9 \n10 \n11 \n12 \n13 \n14 \n15 \n16 \n17 \n18 \n19 \n20 \n21 \n22 \n23 \n24 \n25 \n26 \n27 \n27a \n28 \n29 \n30 \n31 \n32 \n33", "source": "Page 352", "chapter": "6"}
{"id": "bcb43e7feb56-1", "text": "28 \n29 \n30 \n31 \n32 \n33 \n34 <?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<xsd:schema xmlns:xsd =\"http://www.w3.org/2001/XMLSchema\" \n            targetNamespace =\"http://any.website.net/letter\" \n            xmlns=\"http://any.website.net/letter\" \n            elementFormDefault =\"qualified\"> \n  <xsd:element  name=\"letter\"> \n    <xsd:complexType > \n      <xsd:sequence> \n        <xsd:element name=\"sender\" type=\"personAddressType\" \n                     minOccurs=\"1\" maxOccurs=\"1\"/> \n        <xsd:element name=\"date\" type=\"xsd:date\" minOccurs=\"0\"/> \n        <xsd:element name=\"recipient\" type=\"personAddressType\"/> \n        <xsd:element name=\"salutation\" type=\"xsd:string\"/> \n        <xsd:element name=\"body\" type=\"xsd:string\"/> \n        <xsd:element name=\"closing\" type=\"xsd:string\"/> \n        <xsd:element name=\"signature\" type=\"xsd:string\"/> \n      </xsd:sequence> \n      <xsd:attribute  name=\"language\" type=\"xsd:language\"/> \n      <xsd:attribute name=\"template\" type=\"xsd:string\"/>", "source": "Page 352", "chapter": "6"}
{"id": "bcb43e7feb56-2", "text": "<xsd:attribute name=\"template\" type=\"xsd:string\"/> \n    </xsd:complexType> \n  </xsd:element> \n  <xsd:complexType  name=\"personAddressType \"> \n    <xsd:sequence> \n      <xsd:element name=\"name\" type=\"xsd:string\"/> \n      <xsd:element ref=\"address\"/> \n    </xsd:sequence> \n  </xsd:complexType> \n  <xsd:element name=\"address\"> \n    <xsd:complexType> \n      <xsd:sequence> \n        <xsd:element name=\"street\" type=\"xsd:string\" \n                     minOccurs=\"1\" maxOccurs=\"unbounded\"/> \n        <xsd:element name=\"city\" type=\"xsd:string\"/> \n        <xsd:element name=\"state\" type=\"xsd:string\"/> \n        <xsd:element name=\"postal-code\" type=\"xsd:string\"/> \n      </xsd:sequence> \n    </xsd:complexType> \n  </xsd:element> \n</xsd:schema> \n \nThe graphical representation of document structure defined by this schema is shown in Figure \n6-5. The explanation of the above listing is as follows: \nLine 1: This indicates that XML Schemas are XML documents.", "source": "Page 352", "chapter": "6"}
{"id": "06bda85f6c31-0", "text": "Chapter 6 \uf0b7 XML and Data Representation 339\nLine 2: Declares the xsd:  namespace. A common convention is to use the prefix xsd:  for \nelements belonging to the schema namespace.  Also notice that all XML Schemas have \n<schema>  as the root element\u2014the rest of the doc ument is embedded into this element. \nLine 2a: Declares the target namespace as http://any.website.net/letter \u2014the \nelements defined by this schema ar e to go in the target namespace. \nLine 2b: The default namespace is set to http://any.website.net/letter \u2014same \nas the target namespace\u2014so the elements of  this namespace do not need the namespace \nqualifier/prefix (within this schema document). \nLine 2c: This directive instructs the instance documents which conform to this schema that \nany elements used by the instance document wh ich were declared in this schema must be \nnamespace qualified. The default value of elementFormDefault  (if not specified) is lt:addressanonymous typeanonymous type\nlt:letter\nlt:signaturelt:closinglt:bodylt:salutationlt:recipientlt:sender\nlt:postal-codelt:statelt:citylt:personAddressType\nlt:senderlt:name\nlt:address\nlt:templatelt:languagelt:street+\n?", "source": "Page 353", "chapter": "6"}
{"id": "06bda85f6c31-1", "text": "lt:address\nlt:templatelt:languagelt:street+\n?\n?lt:date?\nlt:addressanonymous typeanonymous type\nlt:letterlt:letter\nlt:signaturelt:closinglt:bodylt:salutationlt:recipientlt:sender\nlt:postal-codelt:statelt:citylt:personAddressType\nlt:senderlt:senderlt:namelt:name\nlt:addresslt:address\nlt:templatelt:languagelt:street+\n?\n?lt:date?\nKleene operators :\n(no indicator) Required One and only one\n? Optional None or one (minOccu rs = 0, maxOccurs = 1)\n\uf02a Optional, repeatable None, one, or more (minOccurs = 0, maxOccurs = \uf0a5)\n+ Required, repeatable One or more (minOccurs = 1, maxOccurs = \uf0a5)\n! Unique element values must be unique<choice><sequence>\n<all><element> reference<element> immediately within <schema>, i.e. global\n<element> notimmediately within <schema>, i.e. local\n<element> has sub-elements (not shown)\n<element> has sub-elements (shown)<attribute> of an <element>XML Schema symbols\n<group> of elements\n<attributeGroup>\nKleene operators :", "source": "Page 353", "chapter": "6"}
{"id": "06bda85f6c31-2", "text": "<group> of elements\n<attributeGroup>\nKleene operators :\n(no indicator) Required One and only one\n? Optional None or one (minOccu rs = 0, maxOccurs = 1)\n\uf02a Optional, repeatable None, one, or more (minOccurs = 0, maxOccurs = \uf0a5)\n+ Required, repeatable One or more (minOccurs = 1, maxOccurs = \uf0a5)\n! Unique element values must be unique<choice><sequence>\n<all><element> reference<element> reference<element> immediately within <schema>, i.e. global <element> immediately within <schema>, i.e. global\n<element> notimmediately within <schema>, i.e. local <element> notimmediately within <schema>, i.e. local\n<element> has sub-elements (not shown)<element> has sub-elements (not shown)\n<element> has sub-elements (shown)<element> has sub-elements (shown)<attribute> of an <element><attribute> of an <element>XML Schema symbols\n<group> of elements<group> of elements\n<attributeGroup><attributeGroup>\nFigure 6-5: Document structure defined by correspondence letters schema (see Listing 6-7).\nNOTE: The symbolic notation is insp ired by the one used in [McGovern et al., 2003].", "source": "Page 353", "chapter": "6"}
{"id": "4042a0c460b8-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  340 \n \"unqualified\" . The corresponding directive about qualifying the attributes is \nattributeFormDefault , which can take the same values. \nLines 3\u201317: Define the root element <letter>  as a compound datatype  \n(xsd:complexType ) comprising several other elements. Some of these elements, such as \n<salutation>  and <body> , contain simple, predefined datatype xsd:string . Others, \nsuch as <sender>  and <recipient> , contain compound type personAddressType  \nwhich is defined below in this  schema document (lines 18\u201323). This complex type is also a \nsequence , which means that all the named elements must appear in the sequence listed. \nThe letter  element is defined as an anonymous type  since it is defined directly within the \nelement definition, without specifying the attribute \u201c name \u201d of the <xsd:complexType>  \nstart tag (line 4). This is called inlined element declaration . Conversely, the compound type \npersonAddressType , defined as an independent entity in line 18 is a named type , so it \ncan be reused  by other elements (see lines 6 and 8). \nLine 6a: The multiplicity attributes minOccurs  and maxOccurs  constrain the number of", "source": "Page 354", "chapter": "6"}
{"id": "4042a0c460b8-1", "text": "occurrences of the element. The default value of  these attributes equals to 1, so line 6a is \nredundant and it is omitted for the remaining el ements (but, see lines 7 and 27a). In general, \nan element is required to appear in an instan ce document (defined belo w) when the value of \nminOccurs  is 1 or more. \nLine 7: Element <date>  is of the predefined type xsd:date . Notice that the value of \nminOccurs  is set to 0, which indicates that this element is optional. \nLines 14\u201315: Define two attributes of the element <letter> , that is, language  and \ntemplate . The language  attribute is of the built-in type xsd:language  (Section 6.2.3 \nbelow). \nLines 18\u201323: Define our own personAddressType  type as a compound type comprising \nperson\u2019s name and postal address (as opposed to  a business-address-type). Notice that the \npostal <address>  element is referred to in line 21 (attribute ref) and it is defined \nelsewhere in the same document. The personAddressType  type is extended as \n<sender>  and <recipient>  in lines 6 and 8, respectively.", "source": "Page 354", "chapter": "6"}
{"id": "4042a0c460b8-2", "text": "Lines 24\u201333: Define the postal <address>  element, referred to in line 21. Of course, this \ncould have been defined directly within the personAddressType  datatype, as an \nanonymous sub-element, in which case it would not  be reusable. (Although the element is not \nreused in this schema, I anticipate that an exte rnal schema may wish to reuse it, see Section \n6.2.4 below.) \nLine 27a: The multiplicity attribute maxOccurs  is set to \u201cunbounded ,\u201d to indicate that the \nstreet address is allowed to extend over several lines. \nNotice that Lines 2a and 2b above accomplish tw o different tasks. One is to declare the \nnamespace URI that the letter sche ma will be associated with (Lin e 2a). The other task is to \ndefine the prefix for the target namespace that w ill be used in this document (Line 2b). The reader \nmay wonder whether this could have been done in one line. But, in the spirit of the modularity \nprinciple, it is always to assign different respons ibilities (tasks) to different entities (in this case \ndifferent lines).", "source": "Page 354", "chapter": "6"}
{"id": "7dbf6dff6ece-0", "text": "Chapter 6 \uf0b7 XML and Data Representation 341\n    Schema\ndocumentInstance\ndocumentsconforms-to The second step is to use the newly defined schema for production of valid \ninstance documents (see Figure 6-4). An instance document  is an XML \ndocument that conforms to a particul ar schema. To reference the above \nschema in letter documents, we do as follows: \nListing 6-8: Referencing a schema in an XML instance document (compare to Listing 6-1) \n 1  <?xml version=\"1.0\" encoding=\"UTF-8\"?> \n 2  <!-- Comment: A personal letter marked up in XML. --> \n 3  <lt:letter xmlns:lt  =\"http://any.website.net/letter\" \n 3a         xmlns:xsi =\"http://www.w3.org/2001/XMLSchema-instance\" \n 3b         xsi:schemaLocation=\"http://any.website.net/letter  \n 3c                     http://any.website.net/letter/letter.xsd\"  \n 3d         lt:language=\"en-US\" lt:template=\"personal\"> \n 4    <lt:sender> \n        ...           <!-- similar to Listing 6-1 --> \n10    </lt:sender> \n      ...           <!-- similar to Listing 6-1 -->", "source": "Page 355", "chapter": "6"}
{"id": "7dbf6dff6ece-1", "text": "...           <!-- similar to Listing 6-1 --> \n25  </lt:letter> \nThe above listing is said to be valid  unlike Listing 6-1 for which we  generally only know that it is \nwell-formed . The two documents (Listings 6-1 and 6-8)  are the same, except for referencing the \nletter schema as follows: \nStep 1  (line 3): Tell a schema-aware XML processor that all of the elements used in this \ninstance document come from the http://any.website.net/letter  namespace. All \nthe element and attribute names will be prefaced with the lt: prefix. (Notice that we could \nalso use a default namespace declaration and avoid the prefix.) \nStep 2  (line 3a): Declare another namespace, the XMLSchema-instance namespace, which \ncontains a number of attributes (such as schemaLocation , to be used next) that are part of \na schema specification. These attributes can be applied to elements in instance documents to \nprovide additional information to a schema-aw are XML processor. Again, a usual convention \nis to use the namespace prefix xsi:  for XMLSchema-instance. \nStep 3  (lines 3b\u20133c): With the xsi:schemaLocation  attribute, tell the schema-aware", "source": "Page 355", "chapter": "6"}
{"id": "7dbf6dff6ece-2", "text": "XML processor to establish the binding between  the current XML document and its schema. \nThe attribute contains a pair of values. The first value is the namespace identifier whose \nschema\u2019s location is identified by the second value. In our case the namespace identifier is \nhttp://any.website.net/letter  and the location of the schema document is \nhttp://any.website.net/letter/letter.xsd . (In this case, it would suffice to \nonly have letter.xsd  as the second value, since th e schema document\u2019s URL overlaps \nwith the namespace identifier.) Typically, th e second value will be a URL, but specialized \napplications can use other types of values, such  as an identifier in a schema repository or a \nwell-known schema name. If the document us ed more than one namespace, the \nxsi:schemaLocation  attribute would contain multiple pairs of values (all within a \nsingle pair of quotations). \nNotice that the schemaLocation  attribute is merely a hint. If the parser already knows about \nthe schema types in that namespace, or has some other means of finding them, it does not have to \ngo to the location you gave it. \nXML Schema defines two aspects of an XML document structure:", "source": "Page 355", "chapter": "6"}
{"id": "b24b8d1a46f0-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  342 \n 1. Content model validity , which tests whether the arrange ment and embedding of tags is \ncorrect. For example, postal address tag must have nested the street, city, and postal-code \ntags. A country tag is optional. \n2. Datatype validity , which is the ability to test whether specific units of information are of \nthe correct type and fall within the specified legal values. For example, a postal code is a \nfive-digit number. Data types are the classes of  data values, such as string, integer, or \ndate. Values are instances of types. \nThere are two types of data: \n1. Simple types  are elements that contain data but not attributes or sub-elements. Examples \nof simple data values are integer  or string , which do not have parts. New simple \ntypes are defined by deriving them from existing simple types (built-in\u2019s and derived). \n2. Compound types  are elements that allow sub-elements and/or attributes. An example is \npersonAddressType  type defined in Listing 6-7. Complex types are defined by \nlisting the elements and/or attributes nested within them. \n6.2.2 Models for Structured Content  \nAs noted above, schema defines the content mode l of XML documents\u2014the legal building blocks", "source": "Page 356", "chapter": "6"}
{"id": "b24b8d1a46f0-1", "text": "As noted above, schema defines the content mode l of XML documents\u2014the legal building blocks \nof an XML document. A content model  indicates what a particular element can contain. An \nelement can contain text, other elements, a mixture of  text and elements, or nothing at all. Content \nmodel defines: \n\uf0b7 elements that can appear in a document \n\uf0b7 attributes that can appear in a document \n\uf0b7 which elements are child elements \n\uf0b7 the order of child elements \n\uf0b7 the multiplicity of child elements \n\uf0b7 whether an element is empty or can include text \n\uf0b7 data types for elements and attributes \n\uf0b7 default and fixed values for elements and attributes \nThis section reviews the schema tools for specify ing syntactic and structural constraints on \ndocument content. The next section reviews datatyp es of elements and attributes, and their value \nconstraints. \nXML Schema Elements \nXML Schema defines a vocabulary on its own, wh ich is used to define other schemas. Here I \nprovide only a brief overview of XML Schema elements that commonly appear in schema \ndocuments. The reader should look for the complete list here: http://www.w3.org/TR/2004/REC-\nxmlschema-1-20041028/structures.html .  \nThe <schema>  element defines the root element of every XML Schema.", "source": "Page 356", "chapter": "6"}
{"id": "e91288898721-0", "text": "Chapter 6 \uf0b7 XML and Data Representation 343\nSyntax of the <schema>  element Description (attributes are optional unless stated else) \n<schema \n  id=ID \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026   attributeFormDefault=qualified | unqualified \n   \n   \n \n  elementFormDefault=qualified | unqualified   \n \n    blockDefault=(#all | \n    list of (extension | restriction | substitution)) \n  finalDefault=(#all |     list of (extension | restriction | list | union))   targetNamespace=anyURI  \u2026\u2026\u2026\u2026\u2026\u2026\u2026 \n  version=token \n  xmlns=anyURI   \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026     any attributes \n> \n \n((include | import | redefine | annotation) \uf02a, \n(((simpleType | complexType | group | attributeGroup) | element | attribute | \nnotation), annotation \uf02a)\uf02a) \n \n</schema>  \nSpecifies a unique ID for the element. The form for attributes declared in the target namespace of this \nschema. The value must be \"qualifi ed\" or \"unqualified\". Default is \n\"unqualified\". \"unqualified\" indicates t hat attributes from the target \nnamespace are not required to be qualified with the namespace prefix. \"qualified\" indicates that a ttributes from the target namespace \nmust be qualified with the namespace prefix.", "source": "Page 357", "chapter": "6"}
{"id": "e91288898721-1", "text": "must be qualified with the namespace prefix. \nThe form for elements declared in the target namespace of this schema. The value must be \"qualifi ed\" or \"unqualified\". Default is \n\"unqualified\". \"unqualified\" indicates that elements from the target \nnamespace are not required to be qualified with the namespace \nprefix. \"qualified\" indicates that elements from the target namespace \nmust be qualified with the namespace prefix.  \n \n  A URI reference of the namespace of this schema. \n \nRequired . A URI reference that specifies one or more namespaces for \nuse in this schema. If no prefix is assigned, the schema components of the namespace can be used with unqualified references.  \n \n \nKleene operators ?, \uf02b, and \uf02a are defined in Figure 6-5. \n \nThe <element>  element defines an element. Its parent  element can be one of the following: \n<schema> , <choice> , <all> , <sequence> , and <group> . \nSyntax of the <element>  element Description (all attributes are optional) \n<element \n  id=ID  \n  name=NCName \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026    ref=QName \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026 \n \n  type=QName\n  \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026 \n   substitutionGroup=QName", "source": "Page 357", "chapter": "6"}
{"id": "e91288898721-2", "text": "type=QName\n  \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026 \n   substitutionGroup=QName \n  default=string\n  \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026 \n    fixed=string \n  form=qualified|unqualified \n  maxOccurs=nonNegativeInteger|unbounded   \n \nSpecifies a name for the element. This attribute is required if the parent element is the schema element. Refers to the name of another element. This attribute cannot be used \nif the parent element is the schema element. \nSpecifies either the name of a built-in data type, or the name of a simpleType or complexType element.  \nThis value is automatically assigned to the element when no other \nvalue is specified. (Can only be used if the element\u2019s content is a simple type or text only).  \n \nSpecifies the maximum number of times this element can occur in the parent element. The value can be any number >= 0, or if you want to", "source": "Page 357", "chapter": "6"}
{"id": "fbfdf72c1cd5-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  344 \n  \n   minOccurs=nonNegativeInteger \u2026\u2026\u2026\u2026\u2026 \n \n  nillable=true|false   abstract=true|false    block=(#all|list of (extension|restriction)) \n  final=(#all|list of (extension|restriction)) \n  any attributes \n>  \nannotation?,((simpleType | \ncomplexType)?,(unique | key | keyref) \uf02a)) \n \n</element>\n set no limit on the maximum number, use the value \"unbounded\". Default value is 1. Specifies the minimum number of times this element can occur in the \nparent element. The value can be any number >= 0. Default is 1. \n   \n \n   \nKleene operators ?, \uf02b, and \uf02a are defined in Figure 6-5. \n \nThe <group>  element is used to define a collection of elements to be used to model compound \nelements. Its parent element can be one of the following: <schema> , <choice> , \n<sequence> , <complexType> , <restriction>  (both <simpleContent>  and \n<complexContent> ), <extension>  (both <simpleContent>  and \n<complexContent> ).", "source": "Page 358", "chapter": "6"}
{"id": "fbfdf72c1cd5-1", "text": "<complexContent> ). \nSyntax of the <group>  element Description (all attributes are optional) \n<group \n  id=ID \n  name=NCName  \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026   \n  ref=QName  \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026 \n    maxOccurs=nonNegativeInteger | unbounded   minOccurs=nonNegativeInteger \n  any attributes \n>  (annotation?, (all | choice | sequence)) \n \n</group>\n  \n \nSpecifies a name for the group. This attribute is used only when the schema element is the parent of this group element. Name and ref attributes cannot both be present. \nRefers to the name of another group. Name and ref attributes cannot \nboth be present. \n \nThe <attributeGroup>  element is used to group a set of attribute declarations so that they \ncan be incorporated as a group into complex type definitions. \nSyntax of <attributeGroup>   Description (all attributes are optional) \n<attributeGroup \n  id=ID \n  name=NCName  \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026    ref=QName  \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026 \n \n  any attributes \n>  \n(annotation?), ((attribute | attributeGroup) \uf02a, \nanyAttribute?))", "source": "Page 358", "chapter": "6"}
{"id": "fbfdf72c1cd5-2", "text": "anyAttribute?))  \n \nSpecifies the name of the attribute group. Name and ref attributes cannot both be present. Refers to a named attribute group. Name and ref attributes cannot both \nbe present.", "source": "Page 358", "chapter": "6"}
{"id": "77090d6d203c-0", "text": "Chapter 6 \uf0b7 XML and Data Representation 345\n \n</attributeGroup>  \n \nThe <annotation>  element specifies schema comments that are used to document the \nschema. This element can contain two elements: the <documentation>  element, meant for \nhuman consumption, and the <appinfo>  element, for machine consumption. \nSimple Elements \nA simple element  is an XML element that can contain only text. It cannot contain any other \nelements or attributes. However, the \u201conly text\u201d r estriction is ambiguous since the text can be of \nmany different types. It can be one of the built-in types that are included in the XML Schema \ndefinition, such as boolean , string , date , or it can be a custom type that you can define \nyourself as will be seen Section 6.2.3 below. You can also add restrictions (facets) to a data type \nin order to limit its content, and you can re quire the data to match a defined pattern. \nExamples of simple elements are <salutation>  and <body>  elements in Listing 6-7 above. \nGroups of Elements \nXML Schema enables collections of elements to be defined and named, so that the elements can \nbe used to build up the content models of comple x types. Un-named groups of elements can also", "source": "Page 359", "chapter": "6"}
{"id": "77090d6d203c-1", "text": "be defined, and along with elements in named gr oups, they can be constrained to appear in the \nsame order (sequence) as they are declared. Altern atively, they can be constrained so that only \none of the elements may appear in an instance. \nA model group  is a constraint in the form of a grammar fragment that applies to lists of element \ninformation items, such as plain text or other markup elements. There are three varieties of model \ngroup: \n\uf0b7 Sequence element <sequence>  (all the named elements must appear in the order \nlisted); \n\uf0b7 Conjunction element <all>  (all the named elements must appear, although they can \noccur in any order); \n\uf0b7 Disjunction element <choice>  (one, and only one, of the elements listed must appear). \n \n6.2.3 Datatypes \nIn XML Schema specification, a datatype  is defined by: \n(a) Value space , which is a set of distinct values that a given datatype can assume. For \nexample, the value space for the integer  type are integer numbers in the range \n[\uf02d4294967296, 4294967295], i.e., signed 32-bit numbers.", "source": "Page 359", "chapter": "6"}
{"id": "da52bbb749f7-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  346 \n (b) Lexical space , which is a set of allowed lexical repres entations or literals for the datatype. \nFor example, a float -type number 0.00125 has alternative representation as 1.25E \uf02d3. \nValid literals for the float  type also include abbreviations for positive and negative \ninfinity (\uf0b1INF) and Not a Number (NaN). \n(c) Facets  that characterize properties of the value space, individual values, or lexical items. \nFor example, a datatype is said to have a \u201cnumeric\u201d facet if its values are conceptually \nquantities (in some mathematical number system). Numeric datatypes further can have a \u201cbounded\u201d facet, meaning that an upper and/or lower value is specified. For example, \npostal codes in the U.S. are bounded to the range [10000, 99999]. \nXML Schema has a set of built-in or primitive datatypes  that are not defined in terms of other \ndatatypes. We have already seen some of these, such as xsd:string  which was used in Listing \n6-7. More will be exposed below. Unlike these, derived datatypes  are those that are defined in \nterms of other datatypes (either primitive types or derived ones). \nSimple Types: <simpleType>", "source": "Page 360", "chapter": "6"}
{"id": "da52bbb749f7-1", "text": "Simple Types: <simpleType>   \nThese types are atomic  in that they can only contain charact er data and cannot have attributes or \nelement content. Both built-in simple types and their derivations can be used in all element and \nattribute declarations. Simple-type definitions are u sed when a new data type needs to be defined, \nwhere this new type is a modification of some other existing simpleType -type. \nTable 6-1 shows a partial list of the Schema-def ined types. There are over 40 built-in simple \ntypes and the reader should consult the XML Schema specification (see \nhttp://www.w3.org/ TR/xmlschema-0/ , Section 2.3) for the complete list. \n \nTable 6-1: A partial list of primitive data types that are built into the XML Schema. \nName Examples Comments \nstring My favorite text example  \nbyte \uf02d128, \uf02d1, 0, 1, \u2026, 127 A signed byte value \nunsignedByte 0, \u2026, 255 Derived from unsignedShort  \nboolean 0, 1, true, false May contain either true  or false , 0 or 1 \nshort \uf02d5, 328 Signed 16-bit integer \nint \uf02d7, 471 Signed 32-bit integer", "source": "Page 360", "chapter": "6"}
{"id": "da52bbb749f7-2", "text": "int \uf02d7, 471 Signed 32-bit integer \ninteger \uf02d2, 435 Same as int \nlong \uf02d4, 123456 Signed 64-bit integer \nfloat 0, \uf02d0, \uf02dINF, INF, \uf02d1E4, \n1.401298464324817e \uf02d45, \n3.402823466385288e \uf02b38, \nNaN Conforming to the IEEE 754 standard for 32-\nbit single precision floating point number. Note the use of abbreviations for positive and \nnegative infinity ( \uf0b1INF), and Not a Number \n(NaN) \ndouble 0, \uf02d0, \uf02dINF, INF, \n\uf02d1E4, \n4.9e\uf02d324, 1.797e308, NaN Conforming to the IEEE 754 standard for 64-\nbit double precision floating point numbers \nduration P1Y2M3DT10H30M12.3S 1 year, 2 months, 3 days, 10 hours, 30 \nminutes, and 12.3 seconds \ndateTime 1997-03-31T13:20:00.000- March 31st 1997 at 1.20pm Eastern Standard", "source": "Page 360", "chapter": "6"}
{"id": "262d1080f3bd-0", "text": "Chapter 6 \uf0b7 XML and Data Representation 347\n05:00 Time which is 5 hours behind Coordinated \nUniversal Time \ndate 1997-03-31  \ntime 13:20:00.000, \n13:20:00.000-05:00  \ngYear 1997 The \u201cg\u201d prefix signals time periods in the \nGregorian calendar. \ngDay ---31 the 31st day \nQName lt:sender XML Namespace QName (qualified name) \nlanguage en-GB, en-US, fr valid values for xml:lang  as defined in \nXML 1.0 \nID this-element An attribute that  identifies the element; can be \nany string that confir ms to the rules for \nassigning the <element> names. \nIDREF this-element IDREF attribute type; refers to an element \nwhich has the ID attribute with the same value \nA straightforward use of built-in types is the direct declaration of elements and attributes that \nconform to them. For example, in Listing 6-7 above I declared the <signature>  element and \ntemplate  attribute of the <letter>  element, both using xsd:string  built-in type: \n      <xsd:element name=\"signature\" type=\"xsd:string\"/>", "source": "Page 361", "chapter": "6"}
{"id": "262d1080f3bd-1", "text": "<xsd:element name=\"signature\" type=\"xsd:string\"/> \n      <xsd:attribute name=\"template\" type=\"xsd:string\"/> \nNew simple types are defined by deriving them  from existing simple types (built-in\u2019s and \nderived). In particular, we can derive a new simple type by restricting  an existing simple type, in \nother words, the legal range of values for the new ty pe are a subset of the existing type\u2019s range of \nvalues. We use the <simpleType>  element to define and name the new simple type. We use \nthe restriction element to indicate the existing (base) type, and to identify the facets  that constrain \nthe range of values. A complete list of facets is provided below. \nFacets and Regular Expressions \nWe use the \u201cfacets\u201d of datatypes to constrain the range of values. \nSuppose we wish to create a new type of integer called zipCodeType  whose range of values is \nbetween 10000 and 99999 (inclusive ). We base our definition on the built-in simple type \ninteger , whose range of values also includes inte gers less than 10000 and greater than 99999. \nTo define zipCodeType , we restrict the range of the integer  base type by employing two", "source": "Page 361", "chapter": "6"}
{"id": "262d1080f3bd-2", "text": "facets called minInclusive  and maxInclusive  (to be introduced below): \nListing 6-9: Example of new type definition by facets of the base type. \n<xsd:simpleType name=\"zipCodeType\"> \n  <xsd:restriction  base=\"xsd:integer\"> \n    <xsd:minInclusive  value=\"10000\"/> \n    <xsd:maxInclusive  value=\"99999\"/> \n  </xsd:restriction> \n</xsd:simpleType> \nTable 6-2 and Table 6-3 list the facets that are applicable for built-in types. The facets identify \nvarious characteristics of the types, such as:", "source": "Page 361", "chapter": "6"}
{"id": "771f59c64a45-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  348 \n \uf0b7 length , minLength , maxLength \u2014the exact, minimum and maximum character \nlength of the value \n\uf0b7 pattern \u2014a regular expression pattern for the value (see more below) \n\uf0b7 enumeration \u2014a list of all possible values (an example given in Listing 6-10 below) \n\uf0b7 whiteSpace \u2014the rules for handling white-space in the value \n\uf0b7 minExclusive , minInclusive , maxExclusive , maxInclusive \u2014the range \nof numeric values that are allowed (see example in Listing 6-9 above) \n\uf0b7 totalDigits \u2014the maximum allowed number of decimal digits in numeric values \n\uf0b7 fractionDigits \u2014the number of decimal digits after the decimal point \nAs indicated in the tables, not all facets apply to all types. \nTable 6-2: XML Schema facets for built-in simple  types. Indicated are the facets that apply \nto the particular type. \nSimple Types Facets \nlength minLength maxLength pattern enumeration whitespace \nstring \u2666 \u2666 \u2666 \u2666 \u2666 \u2666 \nbase64Binary \u2666 \u2666 \u2666 \u2666 \u2666 \u2666 \nhexBinary \u2666 \u2666 \u2666 \u2666 \u2666 \u2666 \ninteger    \u2666 \u2666 \u2666 \npositiveInteger    \u2666 \u2666 \u2666", "source": "Page 362", "chapter": "6"}
{"id": "771f59c64a45-1", "text": "positiveInteger    \u2666 \u2666 \u2666 \nnegativeInteger    \u2666 \u2666 \u2666 \nnonNegativeInteger    \u2666 \u2666 \u2666 \nnonPositiveInteger    \u2666 \u2666 \u2666 \ndecimal    \u2666 \u2666 \u2666 \nboolean    \u2666 \u2666 \u2666 \ntime    \u2666 \u2666 \u2666 \ndateTime    \u2666 \u2666 \u2666 \nduration    \u2666 \u2666 \u2666 \ndate    \u2666 \u2666 \u2666 \nName \u2666 \u2666 \u2666 \u2666 \u2666 \u2666 \nQName \u2666 \u2666 \u2666 \u2666 \u2666 \u2666 \nanyURI \u2666 \u2666 \u2666 \u2666 \u2666 \u2666 \nID \u2666 \u2666 \u2666 \u2666 \u2666 \u2666 \nIDREF \u2666 \u2666 \u2666 \u2666 \u2666 \u2666 \n \nTable 6-3: XML Schema facets for built-in ordered  simple types. \nSimple Types Facets \nmaxInclusive maxExclusive  minInclusive  minExclusive  totalDigits fr actionDigits  \ninteger \u2666 \u2666 \u2666 \u2666 \u2666 \u2666 \npositiveInteger \u2666 \u2666 \u2666 \u2666 \u2666 \u2666 \nnegativeInteger \u2666 \u2666 \u2666 \u2666 \u2666 \u2666 \nnonNegativeInteger \u2666 \u2666 \u2666 \u2666 \u2666 \u2666", "source": "Page 362", "chapter": "6"}
{"id": "771f59c64a45-2", "text": "nonNegativeInteger \u2666 \u2666 \u2666 \u2666 \u2666 \u2666 \nnonPositiveInteger \u2666 \u2666 \u2666 \u2666 \u2666 \u2666 \ndecimal \u2666 \u2666 \u2666 \u2666 \u2666 \u2666", "source": "Page 362", "chapter": "6"}
{"id": "95c05f3c0c58-0", "text": "Chapter 6 \uf0b7 XML and Data Representation 349\ntime \u2666 \u2666 \u2666 \u2666   \ndateTime \u2666 \u2666 \u2666 \u2666   \nduration \u2666 \u2666 \u2666 \u2666   \ndate \u2666 \u2666 \u2666 \u2666   \nThe pattern  facet shown in Table 6-2 is particularly  interesting since it allows specifying a \nvariety of constraints using regular expressions . The following example (Listing 6-10) shows how \nto define the datatype for representing IP addresses. This datatype has four quads, each restricted to have a value between zero and 2 55, i.e., [0-255].[0-255].[0-255].[0-255] \nListing 6-10: Example of IP address type definition via the pattern  facet. \n<xsd:simpleType name=\"IPaddress\">  \n  <xsd:restriction base=\"xsd:string\"> \n    <xsd:pattern \n          value=\"(([1-9]?[0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3} \n                  ([1-9]?[0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\"/> \n  </xsd:restriction>", "source": "Page 363", "chapter": "6"}
{"id": "95c05f3c0c58-1", "text": "</xsd:restriction> \n</xsd:simpleType> \nNote that in the value  attribute above, the regular expr ession has been split over three lines. \nThis is for readability purposes only; in practice the regular expression would all be on one line. \nSelected regular expressions with examples are given in Table 6-4. \nTable 6-4: Examples of regular expressions. \nRegular Expression Example Regular Expression Example \nSection \\d Section 3 Chapter\\s\\d Chapter followed by a \nblank followed by a digit\nChapter&#x020;\\d Chapter 7 (hi){2} there hihi there \na*b b, ab, aab, aaab, \n... (hi\\s){2} there hi hi there \n[xyz]b xb, yb, zb .abc any (one) char followed by  \nabc \na?b b, ab (a|b)+x ax, bx, aax, \nbbx, abx, bax,... \na+b ab, aab, aaab, ... a{1,3}x ax, aax, aaax \n[a-c]x ax, bx, cx a{2,}x aax, aaax, \naaaax, ... \n[-ac]x -x, ax, cx \\w\\s\\w word character", "source": "Page 363", "chapter": "6"}
{"id": "95c05f3c0c58-2", "text": "[-ac]x -x, ax, cx \\w\\s\\w word character \n(alphanumeric plus dash) followed by a space followed by a word \ncharacter \n[ac-]x ax, cx, -x [a-zA-Z-[Ok]]* A string comprised of any \nlower and upper case letters, except \"O\" and \"k\"\n[^0-9]x any non-digit char followed \nby x \\. The period \".\" (Without the \nbackward slash the period means \"any character\") \n\\Dx any non-digit char followed \nby x \\n linefeed", "source": "Page 363", "chapter": "6"}
{"id": "cafc01e429d9-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  350 \n Compound Types: <complexType>   \nCompound or complex types can have any kind of combination of element content, character \ndata, and attributes. The element requires an attri bute called name, which is used to refer to the \n<complexType>  definition. The element then contains the list of sub-elements. You may have \nnoticed that in the example schema (Listing 6-7), some attributes of the elements from Listing 6-1 \nwere omitted for simplicity sake. For example, <salutation>  could have a style  attribute, \nwith the value space defined as { \"informal\" , \"formal\" , \"business\" , \"other\" }. To \naccommodate this, <salutation>  should be defined as a complex type, as follows: \nListing 6-11: Upgraded XML Schema for the <salutation>  element. This code \nreplaces line 9 Listing 6-7. The rest remains the same. \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n10 \n11 \n12 \n13 \n14 \n15 \n16 \n17 \n18", "source": "Page 364", "chapter": "6"}
{"id": "cafc01e429d9-1", "text": "13 \n14 \n15 \n16 \n17 \n18 \n  \n        <xsd:element name=\"salutation\"> \n          <xsd:complexType> \n            < xsd:simpleContent > \n              < xsd:extension  base=\"xsd:string\"> \n                < xsd:attribute name=\"style\"  use=\"required\"> \n                  < xsd:simpleType > \n                    < xsd:restriction  base=\"xsd:string\"> \n                      <xsd:enumeration value=\"informal\"/> \n                      <xsd:enumeration value=\"formal\"/> \n                      <xsd:enumeration value=\"business\"/> \n                      <xsd:enumeration value=\"other\"/> \n                    </xsd:restriction> \n                  </xsd:simpleType> \n                </xsd:attribute> \n              </xsd:extension> \n            </xsd:simpleContent> \n          </xsd:complexType> \n        </xsd:element> \n \nThe explanation of the above listing is as follows: \nLine 2: Uses the <complexType>  element to start the definition of a new (anonymous) \ntype. \nLine 3: Uses a <simpleContent>  element to indicate that the content model of the new \ntype contains only character data and no elements.", "source": "Page 364", "chapter": "6"}
{"id": "cafc01e429d9-2", "text": "type contains only character data and no elements. \nLines 4\u20135: Derive the new type by extending the simple xsd:string  type. The extension \nconsists of adding a style  attribute using attribute declaration. \nLine 6: The attribute style  is a simpleType  derived from xsd:string  by restriction. \nLines 7\u201312: The attribute value space is specified using the enumeration  facet. The attribute \nvalue must be one of the listed salutation styl es. Note that the enumeration values specified \nfor a particular type must be unique. \nThe content of a <complexType>  is defined as follows (see also Figure 6-6): \n1. Optional <annotation>  (schema comments, which serve as inline documentation) \n2. This must be accompanied by one of the following:", "source": "Page 364", "chapter": "6"}
{"id": "4131cd20122e-0", "text": "Chapter 6 \uf0b7 XML and Data Representation 351\na. <simpleContent>  (which is analogous to the <simpleType>  element\u2014used \nto modify some other \u201csimple\u201d data type, restricting or extending it in some \nparticular way\u2014see example in Listing 6-11 above) \nb. <complexContent>  (which is analogous to the <complexType>  element\u2014\nused to create a compound element) \nc. In sequence, the following: \ni. Zero or one from the following grouping terms: \n1. <group>  \u2014 Commonly used to declare a collection of elements that are \nreferenced from more than one place within the same schema of by other \nschemas (hence, this is a global  declaration). The personAddressType  \ntype in Listing 6-7 could have been done this way \n2. <sequence>  \u2014 All the named elements must appear in the order listed \n3. <choice>  \u2014 One, and only one, of the elements listed must appear \n4. <all>  \u2014 All the named elements must appear, but order is not important \nii. Followed by any number of either \n1. <attribute>   \n2. <attributeGroup>   \niii. Then zero or one <anyAttribute>  (enables attributes from a given", "source": "Page 365", "chapter": "6"}
{"id": "4131cd20122e-1", "text": "iii. Then zero or one <anyAttribute>  (enables attributes from a given \nnamespace to appear in the element) \n type name can be given by attribute name\nxsd:complexType\nxsd:anyAttributexsd:anyAttributexsd:complexContentxsd:simpleContentxsd:notation?\nxsd:allxsd:choicexsd:sequencexsd:groupxsd:group\nxsd:attribute\nxsd:attributeGroup\uf02a?\n?\nFigure 6-6: Structure of the <complexType>  schema element. Symbols follow the notation\nintroduced in Figure 6-5.", "source": "Page 365", "chapter": "6"}
{"id": "efb99b4965d6-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  352 \n In the example, Listing 6-7, we used both inlined element declaration  with anonymous type as \nwell as named type, which was then used to declare an element. An element declaration can have \na type  attribute, or a complexType  child element, but it cannot have both a type  attribute \nand a complexType  child element. The following table shows the two alternatives: \nElement A references  the complexType  \nfoo: Element A has the complexType  definition \ninlined  in the element declaration: \n<xsd:element name=\"A\" type=\"foo\"/> \n<xsd:complexType name=\"foo\"> \n   <xsd:sequence>       <xsd:element name=\"B\" .../>       <xsd:element name=\"C\" .../>    </xsd:sequence> \n</xsd:complexType> <xsd:element name=\"A\"> \n   <xsd:complexType> \n      <xsd:sequence>          <xsd:element name=\"B\" .../>         <xsd:element name=\"C\" .../>      </xsd:sequence> \n   </xsd:complexType> \n</xsd:element> \n \n6.2.4 Reuse \nWe can roughly split up reuse mechanisms into two kinds: basic and advanced. The basic  reuse", "source": "Page 366", "chapter": "6"}
{"id": "efb99b4965d6-1", "text": "mechanisms address the problem of modifying th e existing assets to serve the needs that are \nperhaps different from what they were originally  designed for. The basic reuse mechanisms in \nXML Schema are: \n\uf0b7 Element references \n\uf0b7 Content model groups \n\uf0b7 Attribute groups \n\uf0b7 Schema includes \n\uf0b7 Schema imports \n \n \n \n6.2.5 RELAX NG Schema Language \nWhat we reviewed above is the World Wide Web Consortium\u2019s standard XML Schema. There \nare several other alternative schema languages proposed for XML. One of them is RELAX NG. \nIts home page ( http://www.relaxng.org/ ) states that RELAX NG is a sc hema language for XML. The \nclaims are that RELAX NG: \n    * is simple \n    * is easy to learn \n    * has both an XML syntax and a compact non-XML syntax     * does not change the information set of an XML document", "source": "Page 366", "chapter": "6"}
{"id": "af22ddc75146-0", "text": "Chapter 6 \uf0b7 XML and Data Representation 353\n    * supports XML namespaces \n    * treats attributes uniformly with elements so far as possible \n    * has unrestricted support for unordered content \n    * has unrestricted support for mixed content     * has a solid theoretical basis \n    * can partner with a separate datatypi ng language (such W3C XML Schema Datatypes) \n You could write your schema in RELAX NG and use Trang  (Multi-format schema converter \nbased on RELAX NG) to convert it to XML Schema. See online at: \nhttp://www.thaiopensource .com/relaxng/trang.html   \n \n6.3 Indexing and Linking \n \nLinks in HTML documents are tagged with <A HREF=\"http://...\"> , where the value of \nthe HREF  attribute refers to a target document. \n6.3.1 XPointer and Xpath \nXML Pointer Language (XPointer) is based on the XML Path Language (XPath), which supports \naddressing into the internal structures of XM L documents. XPointer allows references to \nelements, attributes, character strings, and othe r parts of XML documents. XPointer referencing \nworks regardless of whether the referenced object s bear an explicit ID attribute (an attribute", "source": "Page 367", "chapter": "6"}
{"id": "af22ddc75146-1", "text": "works regardless of whether the referenced object s bear an explicit ID attribute (an attribute \nnamed id, such as id=\"section4\" ). It allows for traversals of a document tree and choice of \nits internal parts based on various properties, such  as element types, attribute values, character \ncontent, and relative position. \nXPointers operate on the tree defined by the elem ents and other markup constructs of an XML \ndocument. An XPointer consists of a series of location terms , each of which specifies a location, \nusually relative to the location specified by the prior location term. Here are some examples of \nlocation paths: \n\uf0b7 child::para  selects the para  element children of the context node \n\uf0b7 child::*  selects all element children of the context node \n\uf0b7 child::text()  selects all text node children of the context node \n\uf0b7 child::node()  selects all the children of the context node, whatever their node type \n\uf0b7 attribute::name    selects the name attribute of the context node \n\uf0b7 attribute::*  selects all the attributes of the context node", "source": "Page 367", "chapter": "6"}
{"id": "e57e4e5bed72-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  354 \n \uf0b7 para   matches any para  element \n\uf0b7 *   matches any element \n\uf0b7 chapter|appendix       matches any chapter  element and any appendix  element \n\uf0b7 olist/item  matches any item element with an olist  parent \n\uf0b7 appendix//para    matches any para  element with an appendix ancestor element \n\uf0b7 /   matches the root node \n\uf0b7 text()   matches any text node \n\uf0b7 items/item[position()>1]    matches any item element that has a items parent \nand that is not the first item child of its parent \n\uf0b7 item[position() mod 2 = 1]    would be true for any item element that is an \nodd-numbered item child of its parent \n\uf0b7 @class                matches any class attribute (not any element that has a class attribute) \n\uf0b7 div[@class=\"appendix\"]//p    matches any p element with a div ancestor \nelement that has a class attribute with value appendix \nThe following example is a combination of a URL a nd an XPointer and refers to the seventh child \nof the fourth section under the root element: \n    http://www.foo.com/bar.html#root().child(4,SECTION).child(7) \n6.3.2 XLink", "source": "Page 368", "chapter": "6"}
{"id": "e57e4e5bed72-1", "text": "6.3.2 XLink \nA link is an explicit relationship between two or mo re data objects or parts of data objects. A \nlinking element  is used to assert link existence and describe link characteristics. \nXML Linking Language (XLink) allows elements to  be inserted into XML documents in order to \ncreate and describe links between resources. In HTML, a link is unidirectional from one resource \nto another and has no special meaning, except it brings up the referred document when clicked in \na browser. XLink uses XML syntax to create structures that can describe the simple unidirectional hyperlinks of today\u2019s HTML as we ll as more sophisticated multidirectional and \ntyped links. With XLink, a document author can do the following, among others: \n\uf0b7 Associate semantics to a link by giving a \u201crole\u201d to the link. \n\uf0b7 Define a link that connects more than two resources. \n\uf0b7 Define a bidirectional link. \nA link is an explicit relationship between two or more data objects or portions of data objects. A \nlinking element  is used to assert link existence and descr ibe link characteristics. Linking elements \nare recognized based on the use of a designated attribute named xml:link . Possible values are \n\u201csimple \u201d and \u201cextended \u201d (as well as \u201c locator \u201d, \u201cgroup \u201d, and \u201cdocument \u201d, which", "source": "Page 368", "chapter": "6"}
{"id": "e57e4e5bed72-2", "text": "identify other related types of elements). An el ement that includes such an attribute should be \ntreated as a linking element of the indicated type . The following is an example similar to the \nHTML A link:", "source": "Page 368", "chapter": "6"}
{"id": "f4f9083da318-0", "text": "Chapter 6 \uf0b7 XML and Data Representation 355\n<A xml:link=\"simple\" href=\"http://www.w3.org/XML/XLink/0.9\"> \nThe XLink<A> \nAn example of an extended link is: \n \n<xlink:extended xmlns:xlink=\"http://www.w3.org/XML/XLink/0.9\" \n                       role=\"resources\" \n                       title=\"Web Resources\" \n                       showdefault=\"replace\" \n                       actuatedefault=\"user\"> \n  <xlink:locator href=\"http://www.xml.com\" \n                        role=\"resource\" \n                        title=\"XML.com\"/> \n  <xlink:locator href=\"http://www.mcp.com\" \n                        role=\"resource\" \n                        title=\"Macmillan\"/> \n  <xlink:locator href=\"http://www.netscape.com\" \n                        role=\"resource\" \n                        title=\"Netscape Communications\"/> \n  <xlink:locator href=\"http://www.abcnews.com\" \n                        role=\"resource\" \n                        title=\"ABC News\"/> \n \nLink Behavior \nXLink provides behavior policies that allow link au thors to signal certain intentions as to the \ntiming and effects of link traversal. These include:", "source": "Page 369", "chapter": "6"}
{"id": "f4f9083da318-1", "text": "timing and effects of link traversal. These include: \n\uf0b7 Show : The show attribute is used to express a po licy as to the context in which a resource \nthat is traversed to should be displayed or  processed. It may take one of three values: \nembed, replace, new. \n\uf0b7 Actuate : The actuate attribute is used to expr ess a policy as to when traversal of a link \nshould occur. It may take one of two values: auto, user. \n\uf0b7 Behavior : The behavior  attribute is used to provide detailed behavioral instructions. \n \n6.4 Document Transformation and XSL \n \n\u201cIf at first you don't succeed, transform your data.\u201d \n\u2014The law of computability applied to social sciences \nAs explained above, XML is not a fixed tag set (like HTML) so the tags do not carry a fixed, \napplication-specific meaning. A generic XML processor has no idea what is \u201cmeant\u201d by the \nXML. Because of this, a number of other standards to process the XML files are developed. \nExtensible Stylesheet Language (XSL) is one such standard. XML markup usually does not \ninclude formatting information. The information in  an XML document may not be in the form in", "source": "Page 369", "chapter": "6"}
{"id": "6906dd0a78fb-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  356 \n which it is desired to be presented. There must  be something in addition to the XML document \nthat provides information on how to present or otherwise process the XML. XSL transforms and \ntranslates XML data from one XML format into anot her. It is designed to help browsers and other \napplications display XML. Stated simply, a style sheet contains instructions that tell a processor \n(such as a Web browser, print composition engine, or document reader) how to translate the \nlogical structure of a source document into a presentational structure. \nThe XML/XSL relationship is reminiscent of th e Model-View-Controller design pattern [Gamma \net al ., 1995], which separates the core data from the way it gets visualized. Likewise, XSL \nenables us to separate the view from the actual data represented in XML. This has following \nadvantages: \nReuse of data: When the data is separate you do no t need to transform the actual data to represent \nit in some other form. We can just use a different view of the data. \nMultiple output formats: When view is separat e from the data we can have multiple output \nformats for the same data e.g. the same XML file can be viewed using XSL as VRML, HTML, \nXML (of some other form)", "source": "Page 370", "chapter": "6"}
{"id": "6906dd0a78fb-1", "text": "XML (of some other form) \nReader\u2019s preferences: The view of the same XML file can be customized with the preferences of \nthe user. \nStandardized styles: Within one application domain  there can be certain standard styles which are \ncommon throughout the developer community. \nFreedom from content authors: A person not so go od at presentation can just write the data and \nhave a good presenter to decide on how to present the data. \nDifferent ways of displaying an XML files are shown in Figure 6-7.  \nXSL can act as a translator, because XSL can tran slate XML documents that comply with two \ndifferent XML schemas. XSL is an unfortunate name, since you may think it deals only with stylesheets. That is not true, it is much more general and as I said, XSL can translate any XML \ndocument to any other XML document.", "source": "Page 370", "chapter": "6"}
{"id": "4d7f03c132e3-0", "text": "Chapter 6 \uf0b7 XML and Data Representation 357\nXSL Example \nThe following example shows an original XML document transformed to an HTML document. \n \nListing 6-12: Example XSL document. \nOriginal XML source: \n 1  <?xml version='1.0'?> \n 2  <para>This is a <emphasis>test</emphasis>.</para> \n \nXSL stylesheet: \n 1  <?xml version='1.0'?> \n 2  <xsl:stylesheet \n 3      xmlns:xsl=\"http://www.w3.org/1999/XSL/Format\" version=\"1.0\"> \n 4 \n 5      <xsl:template match=\"para\"> \n 6          <p><xsl:apply-templates/></p> \n 7      </xsl:template> \n 8 \n 9      <xsl:template match=\"emphasis\"> \n10          <i><xsl:apply-templates/></i> \n11      </xsl:template> \n12 \n13  </xsl:stylesheet> \n \nResultant HTML source: \n 1 <?xml version=\"1.0\" encoding=\"utf-8\"?> \n 2 <p>This is a <i>test</i>.</p>", "source": "Page 371", "chapter": "6"}
{"id": "4d7f03c132e3-1", "text": "2 <p>This is a <i>test</i>.</p> \n XGMML (eXtensible Graph Markup and Modeling Language) 1.0 Draft  \nhttp://www.cs.rpi.edu/~punin j/XGMML/draft-xgmml.html XMLXSL\nHTML /\ntext /\nXMLTransformation Engine\n(XSL Processor)General form of a template rule:\n<xsl:template match=\"pattern\">\n... action ...\n</xsl:template>\n \nFigure 6-7. How XSL transformation works.", "source": "Page 371", "chapter": "6"}
{"id": "50158a190fac-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  358 \n  \n \n\"Mark Pilgrim returns with his latest Dive into XML column, \"XML on the Web Has Failed,\" \nclaiming that XML on the Web has failed miserably,  utterly, and completely. Is Mark right or \nwrong? You be the judge.\" \nhttp://www.xml.com/pub/a/2004/07/21/dive.html \n  \n6.5 Summary and Bibliographical Notes \n As a historical footnote, XML is derived from SGML (Standard Generaliz ed Markup Language), \nwhich is a federal (FIPS 152) and international (ISO 8879) standard for identifying the structure \nand content of documents. \n \nI have no intention of providing a complete covera ge of XML since that would require more than \na single book and would get us lost in the mind numbing number of details. My main focus is on \nthe basic concepts and providing enough details to support meaningful discussion. I do not expect \nthat anybody would use this text as an XML refere nce. The reader interested in further details \nshould consult the following and other sources. \nXML is defined by the W3C in a number of  related specifications available here: \nhttp://www.w3.org/TR/ . A great source of information on XML is http://www.xml.com/ .", "source": "Page 372", "chapter": "6"}
{"id": "50158a190fac-1", "text": "The standard information about HTTP is available here: http://www.w3.org/Protocols/   \nHTML standard information is available here: http://www.w3.org/MarkUp/   \nXML Tutorial online at: http://www.w3schools.com/xml/default.asp   \n \nReference [Lee & Chu, 2000] reviews seve ral alternative XML schema languages. \nA book by Eric van der Vlist, RELAX NG , O\u2019Reilly & Associates, is available online at: \nhttp://books.xmlschemata. org/relaxng/page1.html  .", "source": "Page 372", "chapter": "6"}
{"id": "34d66f883b99-0", "text": "Chapter 6 \uf0b7 XML and Data Representation 359\nProblems \n \nProblem 6.1 \n \n \nProblem 6.2 \nWrite the XML Schema that defines the productio n rules for the instance document shown in \nListing 6-13 below. The parameters are specified as follows. \nPossible values for the attribute student status  are \u201cfull time\u201d and \u201cpart time\u201d and it is required \nthat this attribute appears. \nThe student identification number  must be exactly 9 digits long and its 4th and 5th digits must \nalways be a zero (  \u05b7\u25cc  \u05b7\u25cc  \u05b7\u25cc 00  \u05b7\u25cc  \u05b7\u25cc  \u05b7\u25cc  \u05b7\u25cc ). (According to the US Soci al Security Administration, a \nnumber with a zero in the 4th and 5th digits w ill never be assigned as a person\u2019s SSN. Hence, you \ncan easily distinguish the difference between the student id and the SSN by scanning the 4th and \n5th digits.) \nThe school number  must be a two-digit number (including numbers with the first digit equal to \nzero). \nThe graduation class  field should allow only Gregorian calendar years.", "source": "Page 373", "chapter": "6"}
{"id": "34d66f883b99-1", "text": "zero). \nThe graduation class  field should allow only Gregorian calendar years. \nThe curriculum number  must be a three-digit number between 100 and 999. \nThe student grade  field is optional , but when present it can contain only one of the following \nvalues: \u201cA,\u201d \u201cB+,\u201d \u201cB,\u201d \u201cC+,\u201d \u201cC,\u201d \u201cD,\u201d and \u201cF.\u201d \nAll elements are required, unless stated otherwise. As for the non-specified parameters, make \nyour own (reasonable) assumptions. Write down any assumptions you make. \nListing 6-13: Instance XML document containing a class roster. \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n10 \n11 \n12 \n13 \n14 \n15 \n16 \n17 <?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<!-- ***** associate here your schema with this document ***** --> \n<class-roster> \n  <class-name> Introduction to Software Engineering </class-name> \n  <index> 61202 </index> \n  <semester> Spring 2006 </semester> \n  <enrollment> 58 </enrollment> \n  <student status=\"full-time\">", "source": "Page 373", "chapter": "6"}
{"id": "34d66f883b99-2", "text": "<student status=\"full-time\"> \n    <student-id> 201000324 </student-id> \n    <name> \n      <first-name> Jane </first-name> \n      <last-name> Doe </last-name> \n    </name> \n    <school-number> 14 </school-number> \n    <graduation-class> 2006 </graduation-class> \n    <curriculum> 332 </curriculum> \n    <grade> A </grade>", "source": "Page 373", "chapter": "6"}
{"id": "92fd2c6fa816-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  360 \n 18 \n19 \n20 \n21 \n22   </student> \n  <student status=\"part-time\"> \n      ... \n  </student> \n</class-roster> \n \n \nProblem 6.3", "source": "Page 374", "chapter": "6"}
{"id": "966789b21090-0", "text": "361 Contents \n7.1 Components, Ports, and Events \n7.1.1   \n7.1.2   7.1.3   \n7.1.4   \n7.1.5   7.1.6   \n7.2 JavaBeans: Interaction with Components \n7.2.1 Property Access  7.2.2 Event Firing \n7.2.3 Custom Methods \n7.2.4  \n7.3 Computational Reflection \n7.3.1 Run-Time Type Identification 7.3.2 Reification  7.3.3 Automatic Component Binding \n7.3.4  \n7.2.3  \n7.4 State Persistence for Transport \n7.4.1  7.4.2  \n7.4.3  \n7.4.4 \n \n7.5 A Component Framework \n7.5.1 Port Interconnections \n7.5.2  7.5.3  \n7.5.4  \n7.6  \n7.6.1  7.6.2  \n7.6.3 \n \n7.7 Summary and Bibliographical Notes \nProblems  \nChapter 7  \nSoftware Components \n \n \n\u201cThe Organism Principle : When a system evolves to become", "source": "Page 375", "chapter": "7"}
{"id": "966789b21090-1", "text": "\u201cThe Organism Principle : When a system evolves to become \nmore complex, this always invo lves a compromise: if its parts \nbecome too separate, then the system\u2019s abilities will be \nlimited\u2014but if there are too many  interconnections, then each \nchange in one part will disrupt many others.\u201d \n\u2014Marvin Minsky, The Emotion Machine  \nSoftware engineers have always  envied hardware engineers \nfor their successful standardization of hardware design and the \npower of integration and reusability achieved by the abstraction of VLSI chips. There have been many attempts in \nthe past to bring such standardization to software design. \nRecently, these seem to be achieving some success, most probably because the level of knowledge in software \nengineering has achieved the needed threshold. \nThere is currently a strong so ftware industry trend towards \nstandardizing software development through software \ncomponents. Components  are reusable pieces of software. \nComponents can be GUI widgets , non-visual functions and \nservices, applets or large-scale applications. Each component \ncan be built by different developers at separate times. \nComponents enable rapid development using third party software: independent components are used without \nmodifications as building blocks to form composite \napplications. Components can be composed into: \n\uf0b7 Composite components", "source": "Page 375", "chapter": "7"}
{"id": "966789b21090-2", "text": "applications. Components can be composed into: \n\uf0b7 Composite components \n\uf0b7 Applets (small client-side applications) \n\uf0b7 Applications \n\uf0b7 Servlets (small server-side applications) \nAlthough a single class may not be a useful unit of reuse, a component that packages a number of \nservices can be. Components enable medium-grained reuse. \nThe composition can be done in visual development tools, since the components expose their \nfeatures to a builder tool. A builder tool that lets you:", "source": "Page 375", "chapter": "7"}
{"id": "0678180cc924-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  362 \n \uf0b7 Graphically assemble the components into more complex components or applications \n\uf0b7 Edit the properties of components \n\uf0b7 Specify how information in a component is to be propagated to other components \nThe component developer has to follow specific naming conventions (design pattern), which help \nstandardize the interaction with the component. In  this way the builder tool can automatically \ndetect the component\u2019s inputs and outputs and presen t them visually. If we visualize a bean as an \nintegrated circuit or a chip, the interaction me thods can be visualized as the pins on the chip. \nTwo major component architectures are JavaBeans from Sun [Sun Microsystems, JavBeans] and \nActiveX controls from Microsoft [Denning, 1997]. Here I first review the JavaBeans component \nmodel, which is a part of the Java Development Kit version 1.1 or higher. JavaBeans component model is a specification standard, not an implem entation in a programming language. There is not \na class or interface in Java called Bean. Basica lly, any class can be a bean\u2014the bean developer \njust has to follow a set of design patterns , which are essentially guidelines for naming the \nmethods to interact with the bean. \nSoftware components, as any other software  creation, comprise state and behavior.", "source": "Page 376", "chapter": "7"}
{"id": "0678180cc924-1", "text": "Software components, as any other software  creation, comprise state and behavior. \nTwo key issues in component development are \n\uf0b7 How to interact with a component \n\uf0b7 How to transfer a component\u2019s state from one machine to another \nProgramming business logic of reusable component s is the same as with any other software \nobjects and thus it is not of concern in a component standard. \n \n7.1 Components, Ports, and Events \n \n\u201cBefore software can be reusable it first has to be usable.\u201d \n\u2014Ralph Johnson \nThe hardware-software component analogy is illu strated in Figure 7-1. Component communicates \nwith the rest of the world only via its ports  using events . This simplification and uniformity of the \ncomponent model is promoted as the main reason for introducing components as opposed to \nsoftware objects. Objects succeeded in encapsulation of state and behavior (see Section 1.4), but \nhave not had much success on the issue of reuse. It is claimed that the main reason for this is that \nobject interconnections are often concealed and di fficult to identify. We can easily determine the \n\u201centry points\u201d of objects, i.e., the points through which other objects invoke the given object, \nwhich are its methods for well-designed objects. However, it is difficult to pinpoint the \u201cexit", "source": "Page 376", "chapter": "7"}
{"id": "0678180cc924-2", "text": "points\u201d of objects\u2014the points through which the object invokes the other objects\u2014without \ncarefully examining the source code. Cons ider the following example (in Java): \n \nclass MyClass { \n    ...", "source": "Page 376", "chapter": "7"}
{"id": "b5acf13ba247-0", "text": "Chapter 7 \uf0b7 Software Components 363\n    public void doSomething(AnotherClass obj1) { \n        ... \n        obj1.getObj2().callMethod(args); \n        ... \n    } \n} \nHere, the method getObj2()  returns an object of a different class, which we would not know \nthat is being involved without careful code examination. Hence the importance of enforcing \nuniform style for getting into and out of components, i.e., via their ports. \n \n7.2 JavaBeans: Interaction with Components \n The simplest thing to do with a so ftware component is to retrieve its state or alter it by explicitly \nsetting the new state or invoking a behavior of the component. \nReusable software components ar e usually shipped around in a compiled code, rather than in \nsource code. Given a compiled component (bytecode or  binary code), the goal is to uncover its \npublic methods in order to be able to interact w ith it. The process of discovering the features of a \nclass is known as introspection . The bean developer can help the introspection process in two \nways: \n\uf0b7 Implicitly, by adhering to certain conventions  (design patterns) in writing the code for a \nJava bean \n\uf0b7 Explicitly, by specifying explicit add itional information about the bean ComponentPort14", "source": "Page 377", "chapter": "7"}
{"id": "b5acf13ba247-1", "text": "\uf0b7 Explicitly, by specifying explicit add itional information about the bean ComponentPort14\n113 12 10 11 9 8\n2 3 4 5 6 714\n113 12 10 11 9 8\n2 3 4 5 6 7\n(a) (b) (c)18\n27\n36\n45\nOUT-\nPUTINV\nINPUTNON-\nINV\nINPUTVCC\u2013VCC+OUT-\nPUTINV\nINPUTNON-\nINV\nINPUTAMPLIFIER NO. 2\nAMPLIFIER NO. 118\n27\n36\n45\nOUT-\nPUTINV\nINPUTNON-\nINV\nINPUTVCC\u2013VCC+OUT-\nPUTINV\nINPUTNON-\nINV\nINPUTAMPLIFIER NO. 2\nAMPLIFIER NO. 1\nFigure 7-1. Hardware analogy for software comp onent abstraction. (a) Software component\ncorresponds to a hardware chip. (b) A componen t has attached ports (pins), each with a\ndistinctive label. (c) Events or \u201csignals\u201d a rriving at the ports are processed within the\ncomponent and the results may be output on different ports.", "source": "Page 377", "chapter": "7"}
{"id": "88645186e284-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  364 \n The second way should be used in case bean cont ains interaction methods that do not follow the \ndesign patterns. \nRelated to introspection is reflection , the support Java provides for examining type information at \nrun time. Given an object or class name, you can use the class Class  to discover: \n\uf0b7 The fields of the class \n\uf0b7 Constructors \n\uf0b7 Methods \n\uf0b7 Other properties (class name, isPrimitive , etc.) \nThe reader may wonder why anyone would want to  write a program that does this; why not look \nup the needed information when the program is wr itten? Why wait until run time? The answer is \nthat this capability allows the other applications to  discover the way to interact with a bean that \nwas developed by a third party. Reflection is used  to gain information about components, but the \ncomponent developer is allowed to specify more  information to help with characterizing the \ncomponent. \n7.2.1 Property Access \nProperties define the bean\u2019s appearance and behavi or characteristics. For properties that need to \nbe exposed, the developer must provide: \n\uf0b7 Setter method   void set<PropertyName>(Type newvalue)  // write-\nonly property, e.g ., password, or", "source": "Page 378", "chapter": "7"}
{"id": "88645186e284-1", "text": "only property, e.g ., password, or \n\uf0b7 Getter method   Type get<PropertyName>()  // read-only property, or \n\uf0b7 Both setter and getter // read-write property. \nIn addition to naming the accessor methods accord ing to these conventions, the developer may \nalso provide property editors  for certain properties. For example, to a property may determine the \nbean\u2019s background color. The user may enter the value for this property as a hexadecimal number \n\u201c1b8fc0 ,\u201d but it is difficult or impossible for the user to visualize how this color15 looks. \nInstead, the developer may supply a graphical color chooser for the property editor, which is \nmuch more convenient for the user. \n7.2.2 Event Firing \nThe delegation-based event model  was introduced with the JavaBeans framework [Sun-\nJavaBeans]. In this model, there is no central  dispatcher of events ; every component that \ngenerates events dispatches its own events as th ey happen. The model is a derivative of the \nPublisher-Subscriber pattern. Events are identified by  their class instead of their ID and are either \npropagated or delegated from an \u201cev ent source\u201d to an \u201cevent listener.\u201d \n                                                      \n15 In case you are looking at a black -and-white print, the background color around the text is magenta.", "source": "Page 378", "chapter": "7"}
{"id": "5132d7104e88-0", "text": "Chapter 7 \uf0b7 Software Components 365\nAccording to the delegation model, whenever an  event for which an object declared itself as a \nsource gets generated, the event is multicast to a ll the registered event listeners. The source object \ndelegates of \u201cfires\u201d the events to the set of listeners by invoking a me thod on the listeners and \npassing the corresponding event object. Only objects inte rested in a particular event need to deal \nwith the event and no super-event handler is required. This is also a better way of passing events \nto distributed objects. \nEventSource  \u2014 Any object can declare itself as a source of certain types of events. An event \nsource has to either follow standard beans design patterns when giving names to the methods or \nuse the BeanInfo  class to declare itself as a source of certa in events. When the source wishes to \ndelegate a specific event type, it must first defi ne a set of methods that enable listener(s) to \nregister with the source. These methods take the form of set<EventType>Listener  for \nunicast and/or add<EventType>Listener  for multicast delegation. [The source must also \nprovide the methods for th e listeners de-register.] \nEventListener  \u2014 An object can register itself as a listener of a specific type of events \noriginating from an event source. A listener object should implement the", "source": "Page 379", "chapter": "7"}
{"id": "5132d7104e88-1", "text": "originating from an event source. A listener object should implement the \n<EventType>Listener  interface for that event type, which inherits from the generic \njava.util.EventListener  interface. The \u201cListener\u201d interface is typically defined only by \nfew methods, which makes it easy to implement the interface. \n7.2.3 Custom Methods \nIn addition to the information a builder tool can  discover from the bean\u2019s class definition through \nreflection, the bean developer can provide it with  explicit additional information. A bean can be \ncustomized for a specific application either programmatically, through Java code, or visually, \nthrough GUI interfaces hosted by application builder  tools. In the former case, the developer \nspecifies additional information by providing a BeanInfo  object. In the latter case, the \ndeveloper can provide customized dialog boxes and editing tools with sophisticated controls. \nThese customization tools are called property editors  and customizers, and they are packaged as \npart of the bean, by providing the  PropertyEditor  and Customizer  classes. \nThe BeanInfo  class should be named as <BeanName>BeanInfo , for example, for the Foo \nbean the BeanInfo  class should be named FooBeanInfo . \nclass FooBeanInfo extends SimpleBeanInfo { \n    :     : \nwith methods:", "source": "Page 379", "chapter": "7"}
{"id": "5132d7104e88-2", "text": ":     : \nwith methods: \n    getBeanDescriptor()      // has class and customizer     getIcon()                // for displaying the bean in the palette \n    getMethodDescriptors()   // for providing more information than \n    getPropertyDescriptors() // can be gained through reflection alone \nA property descriptor can provide a PropertyEditor, in case the developer does not want to use the \nstandard property editor for that propert y type (or there is not one available). \nIn addition, the developer can provide a Customizer  in the bean descriptor. Customizers are used \nto customize the entire bean, not just a prope rty and they are not limited to customizing", "source": "Page 379", "chapter": "7"}
{"id": "45daeedfc9b7-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  366 \n properties. There is no \u201cdesign pattern\u201d for Customizers. You must use the BeanInfo  to use a \ncustomizer and you need to use the BeanDescriptor  constructor to specify the customizer \nclass. More information about bean custom ization is available in [Johnson, 1997]. \n \n7.3 Computational Reflection \n Computational reflection is a technique that allows  a system to maintain information about itself \n(meta-information) and use this information to ch ange its behavior (adapt ). As shown in Figure \n7-2, computational reflection refers to the capability to introspect  and represent meta-level \ninformation about data or programs, to analyze and potentially modify  the meta-level \nrepresentation of the data, and finally to reify such changes in the metada ta so that the original \ndata or programs behave di fferently. It should be noted that the notion of data is universal in that \nit includes data structures in a program used in the source code. \nThis is achieved by processing in two well-defi ned levels: functional le vel (also known as base \nlevel or application level) and management (o r meta) level. Aspects of the base level are \nrepresented as objects in the meta-level, in a process known as reification  (see below). Meta-level", "source": "Page 380", "chapter": "7"}
{"id": "45daeedfc9b7-1", "text": "architectures are discussed in Section 2.2 (??) and reflective languages in Section 2.3. Finally, \nSection 2.4 shows the use of computational refl ection in the structuring and implementation of \nsystem-oriented mechanisms. \nhttp://cliki.tunes.org/Reflection \n Metadata\nDataIntrospection\nReification\n \nFigure 7-2: Computational reflection consists of two phases: ( i) an introspection  phase,\nwhere data is analyzed to produce suitable metadata, and ( ii) a reification  phase, where\nchanges in the metadata alter the origin al behavior of the data it represents.", "source": "Page 380", "chapter": "7"}
{"id": "21e3a2780031-0", "text": "Chapter 7 \uf0b7 Software Components 367\n7.3.1 Run-Time Type Identification \nIf two processes communicate externally to send an d receive data, what happens when the data \nbeing sent is not just a primitive or an object whose type is known by the receiving process? In other words, what happens if we receive an object but do not know anything about it\u2014what \ninstance variables and methods it has, etc. Anothe r way to pose the question: What can we find \nout about the type of an object at run-time? \nA simple way to solve this problem is  to check for all possible objects using instanceof , the \noperator that lets you test at run-time, whether or not an object is of a given type. A more \nadvanced way is supported by the java.lang.reflect  package, which lets you find out \nalmost anything you want to know about an object\u2019s class at run-time. \nAn important class for reflection is the class Class , which at first may sound confusing. Each \ninstance of the class Class  encapsulates the information about a particular class or interface. \nThere is one such object for each clas s or interface loaded into the JVM. \nThere are two ways to get an instance of class Class  from within a running program: \n1. Ask for it by name using the static method forName ():", "source": "Page 381", "chapter": "7"}
{"id": "21e3a2780031-1", "text": "1. Ask for it by name using the static method forName (): \n    Class fooClass = Class.forName(\"Foo\"); \nThis method will return the Class object that describes the class Foo \n2. Ask an instance of any Object for its class:  \n    Foo f = new Foo(); \n    Class fooClass = f.getClass(); \nAs a side note, this construct is legal: \n    Class classClass = Class.forName(\"Class\"); \nIt returns back the instance of Class  that describes the class Class . \nOnce you have a Class  object, you can call methods on it to find out information about the \nclass. None of the methods are mutators, so you cannot change the class at run-time. However, \nyou can use it to create new instance of a class, and to call methods on any instance. Some of the \nmethods available in class Class  are: \nConstructor getConstructor(Class[] paramTypes); \nConstructor[] getConstructors();  Field getField(String name); \nField[] getFields(); \n Method getMethod(String name, Class[] paramTypes); Method[] getMethods();  \nboolean isInstance(Object obj); \nboolean isPrimitive();  String getName();", "source": "Page 381", "chapter": "7"}
{"id": "6534961fc86d-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  368 \n String toString(); \nThe return types Constructor , Field , and Method  are defined in the package \njava.lang.reflect . \n \n7.3.2 Reification \nFor the meta-level to be able to reflect on sever al objects, especially if they are instances of \ndifferent classes, it must be given information regarding the internal structure of objects. This \nmeta-level object must be able to find out what  are the methods implemented by an object, as \nwell as the fields (attributes) defined by this  object. Such base-level representation, that is \navailable for the meta-level, is called structural meta-information. The representation, in form of \nobjects, of abstract language concepts, such as classes and methods, is called reification. \nBase-level behavior, however, cannot be completely  modeled by reifying only structural aspects \nof objects. Interactions between objects must also be materialized as objects, so that meta-level \nobjects can inspect and possibly alter them. This is  achieved by intercepting base-level operations \nsuch as method invocations, field value inquiries or assignments, creating operation objects that \nrepresent them, and transferring control to the meta level, as shown in Figure 7-3. In addition to", "source": "Page 382", "chapter": "7"}
{"id": "6534961fc86d-1", "text": "receiving reified base-level operations from the re flective kernel, meta-level objects should also \nbe able to create operation objects, and this shoul d be reflected in the base level as the execution \nof such operations. \nA reflective kernel is responsible for implem enting an interception mechanism. The method \ninvocation is reified as an operation object and pass ed for the callee\u2019s meta-object to reflect upon \n(handle). Eventually, the meta-object requests the kernel to deliver the operation to the callee\u2019s \nreplication object, by returning control (as in th e diagram) or performing some special meta-level \naction. Finally, the result of the operation is reified and presented to the meta-object. \n  caller  kernel  op : Operation res : Result  \nhandle(op): MetaObject\nmethod(arg)obj : Object  \nmethod(arg) \nresult create(obj, method, arg)\nop\nresult\ncreate(op, result)\nres\nhandle(res)\n \nFigure 7-3. Reifying an operation. See text for explanation.", "source": "Page 382", "chapter": "7"}
{"id": "f48b7afeeeb7-0", "text": "Chapter 7 \uf0b7 Software Components 369\nShow example of reflection usi ng DISCIPLE Commands in Manifold \nReflection enables dynamic (run-time) evolution of programming systems, transforming \nprograms statically (at compile-time) to add and manage such features as concurrency, \ndistribution, persistence, or object systems, or allowing expert systems to reason about and adapt \ntheir own behavior. In a reflective application, the base level implements the main functionality \nof an application, while the meta level is usua lly reserved for the implementation of management \nrequirements, such as persistence [28,34], locati on transparency [26], replication [8,18], fault \ntolerance [1,2,9,10] and atomic actions [35,37]. Re flection has also been shown to be useful in the \ndevelopment of distributed systems [6,20,36,40,41] and for simplifying library protocols [38]. \nhttp://www.dcc.unicamp.br/~oliva/guarana/do cs/design-html/node6.html#transparency \n \nA recent small project in Squeak by Henrik Ge denryd to develop a \"Universal Composition\" \nsystem for programs. It essentially involves a graph of meta-objects describing source-composition operations which can be eagerly or l azily (statically or dynamically) driven, resulting", "source": "Page 383", "chapter": "7"}
{"id": "f48b7afeeeb7-1", "text": "in partial evaluation or forms of dynamic co mposition such as Aspect-Oriented Programming \n(AOP). \n7.3.3 Automatic Component Binding \nComponents can be seen as pieces of a jigsaw puzzl e, like molecular binding\u2014certain molecule \ncan bind only a molecule of a corresponding type. \n \n7.4 State Persistence for Transport \n A class is defined by the Java bytecode and this  is all that is necessary to create a fresh new \ninstance of the class. As the new instance (object) interacts with their objects, its state changes. \nThe variables assume certain values. If we want a ne w instance resume from this state rather than \nfrom the fresh (initial) state, we  need a mechanism to extract th e object state. The mechanism is \nknown as object serialization  or in the CORBA jargon it is called object externalization  [OMG-\nCORBA-Services]. \nObject serialization process transforms the object gr aph structure into a linear sequence of bytes, \nessentially a byte array. The array can be stored on a physical support or sent over the network. \nThe object that can be serialized should implement the interface java.io.Serializable . \nThe object essentially implements the methods writeObject()  and readObject() . These \nmethods define how to convert the component  attributes, which represented by programmer-", "source": "Page 383", "chapter": "7"}
{"id": "f48b7afeeeb7-2", "text": "methods define how to convert the component  attributes, which represented by programmer-\ndefined data types, to a one-dimensional bytestream. \n \nWhen restoring the object, we need to have its class (bytecode) because class definition is not \nstored in the serialized state. If the receiving pr ocess does not know the object's class, it will", "source": "Page 383", "chapter": "7"}
{"id": "bf014b23a8ed-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  370 \n throw the java.io.SerializationError  exception. This may be a problem if we are \nsending the object to a server which is running a ll the time and cannot load new classes, so its \nclass loader cannot know about the newly define d class. The solution is to use the method: \n \n    byte[] getBytes(); \nwhich is available on every java.lang.Object  object, i.e., on every Java object. The method \nreturns a byte array\u2014a primitive data type, which can be used by the server to reconstruct the \nobject there. \nJAR file contains: \n\uf0b7 Manifest file \n\uf0b7 Classes (next to the class name, there is a Boolean variable \u201cbean\u201d which can be true  or \nfalse  \n\uf0b7 Bean customizers \nBeans provide for a form of state migration  since the bean state can be \u201ccanned\u201d (serialized) and \nrestored on a remote machine (unlike an applet wh ich always starts in an initial state after landing \non a remote machine). However, this is not object migration  since the execution state (program \ncounters for all threads) would need to be suspe nded and resumed. Persistency is more meant to \npreserve the state that resulted from external entiti es interacting with the bean, rather than the", "source": "Page 384", "chapter": "7"}
{"id": "bf014b23a8ed-1", "text": "preserve the state that resulted from external entiti es interacting with the bean, rather than the \nstate of the execution, which would be possible to resume on another machine. \n \n7.5 A Component Framework \n \n\u201cAll parts should go together without forcing. You must remember that the parts you are reassembling \nwere disassembled by you. Therefore, if you can\u2019t get them together again, there must be a reason. By all \nmeans, do not use a hammer.\u201d \n\u2014IBM maintenance manual, 1925 \nHere I present a component framework that I desi gned, which is inspired by several component \nframeworks existing in research laboratories. Compared to JavaBeans, this framework is more \nradical in enforcing the component encapsula tion and uniformity of communication with it. \n7.5.1 Port Interconnections \nOptions for component wiring are illustrated in Fi gure 7-4. The ports of different components can \nbe connected directly, one-on-one. In the simplest case, output port  of a component directly \nconnects to an input port  of another component. Another useful analogy is wire, which is a \nbroadcast medium to which multiple ports can be connected. Similar effect could be achieved by \nthe Publisher-Subscriber  pattern (see Section 4.1 above), but the Wire abstraction appears to be", "source": "Page 384", "chapter": "7"}
{"id": "bf014b23a8ed-2", "text": "more elegant in the context of components and ports. \nIn the spirit of object-oriented encapsulation, components as defined here share nothing\u2014they \nhave no shared state variables. The communication is entirely via messages. Of course,", "source": "Page 384", "chapter": "7"}
{"id": "e43fb34655d6-0", "text": "Chapter 7 \uf0b7 Software Components 371\ncommunication via ports is limited to the in ter-component communication. Components contain \none or more objects, which mutually communicate via regular method calls. Similarly, \ncomponents make calls to the runtime environm ent and vice versa, via method calls. The only \nrequirement that is enforced is that components communicate with each other via ports only . \nComponents can be composed into more complex, composite components , as in Figure 7-1(c), \nwhere each operational amplifier within the ch ip could be a separate \u201ccomponent.\u201d Composing \ncomponents is illustrated in Figure 7-4(c), where component H contains component I. Notice that \none of the output ports of component G connects to an input port of component H which is \ndirectly connected to an input port of component I. Regular input port cannot be connected to \nanother input port. Similar is true  for output ports. To support formi ng chains of ports of the same \ntype, we introduce a prefix  port sub-type, shown in Figure 7-4(c). \nTypical event communication and processing in a si ngle-threaded system is illustrated in the \nsequence diagram in Figure 7-5. In this example, component A receives Event 1 on the input port", "source": "Page 385", "chapter": "7"}
{"id": "e43fb34655d6-1", "text": "a1, processes it and generates event 2 on the output port a2. This event is received and processed \nby component B. The dashed lines at the bottom of the fi gure indicate how the thread returns after \nthis sequential processing is completed. \nAll components and ports are named and addressable using a Unix-type path. For example, full \npath format for a port on a nested component is as: \n\uf0e1container_component_name \uf0f1/\uf0e1inner_component_name \uf0f1@\uf0e1port_name \uf0f1 \nComponent names are separated by forward slashes  (/) and the port name is preceded by \u201cat\u201d sign \n(@). Thus, the components and their ports form a tree structure. \nDesign Issues \nIt was debated whether to strictly enforce th e Port model for communicating with Components. \nCurrently, actions that require computation go via Ports. Conversely, access to state variables \n(component properties) is via setProperty() /getProperty()  methods. So, if component \nhas a handle/reference to another component (whi ch normally should not happen!), it can invoke \nthese methods. Of course, the state access could also go over the Ports, but convenience was A B\nCA B\nC\n(a) (b) (c)HIG\nPrefix\nportsComposite\ncomponentHIG\nPrefix\nportsComposite\ncomponentD E\nF", "source": "Page 385", "chapter": "7"}
{"id": "e43fb34655d6-2", "text": "Prefix\nportsComposite\ncomponentHIG\nPrefix\nportsComposite\ncomponentD E\nF\nWireD E\nF\nWire\nFigure 7-4. Options for wiring the ports. (a ) Component ports can be directly \u201csoldered\u201d\none-on-one. (b) The abstraction of wire provides a broadcast medium where the event from\nany output connected to the wire appears on a ll input ports connected to the same wire. (c)\nPrefix ports are used in wi ring composite components.", "source": "Page 385", "chapter": "7"}
{"id": "09baa7f6b4c5-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  372 \n preferred over compliance. Further deliberation ma y be warranted to evaluate the merits and \nhazards of the current solution. \nAnother issue is, what if, in Figure 7-5, component A needs some return value from component \nB? This could probably be  achieved by connecting B\u2019s output port to A\u2019s another input port, but is \nthis the most elegant/efficient solution? \n  \n \n7.5.2 Levels of Abstraction \nA key question with components is the right \u201csi ze\u201d, the level of abstraction. Low level of \nspecialization provides high generality and reusabilit y, but also low functionality thus resulting in \nproductivity gain. \nCf. Lego blocks: Although it is possible to build an ything using the simplest rectangular blocks, \nLego nevertheless provides specialized pre-made pieces for certain purposes. The point is not whether anything can be built with universal components; the point is whether it is cost effective  \nto do so. \n \nRecall Example 3.1 (??) about the simplified domain model of the virtual biology lab (described \nat the book website, given in Preface). We compared the solution presented in Problem 2.12 that \nuses abstract objects modeled after the physical  objects against a simplified solution that uses", "source": "Page 386", "chapter": "7"}
{"id": "09baa7f6b4c5-1", "text": "uses abstract objects modeled after the physical  objects against a simplified solution that uses \nonly abstract geometric figures (lines, circles, pol ygons, etc.). True, the simplified model is not \nadequate because classes Cell or Nucleus have re latively strong semantic meaning, whereas class \nCircle can stand for both of these and many ot her things. However, one may wonder whether we \nneed to represent every detail in the problem dom ain by a different class. Consider human bodies \ncomposed of cells\u2014there are only 255 or so speci alized sorts of cell [Alberts, et al., 1989]. For \ncomparison, Java libraries have thousands different classes. Of course, each cell has many complex elements. One may wonder whether it is possi ble to have a similar, biologically inspired, \nhierarchical abstraction and composition of functions. UML packages contain classes, but they process(Event1)a1 : PortIn A : Component\nreceive(Event1)a2 : PortOut\nsend(Event2)\nprocess(Event2)b1 : PortIn B : Component\nreceive(Event2)\n \nFigure 7-5. Typical event communication a nd processing in a single-threaded system.", "source": "Page 386", "chapter": "7"}
{"id": "e881b826e930-0", "text": "Chapter 7 \uf0b7 Software Components 373\nare not functional abstraction. Work on softwa re architectures is in early stages and may \neventually offer the path for component abstraction. \n \n \n7.6 Summary and Bibliographical Notes \n Cite a book on Java Beans.  \nComputational reflection was introduced in [Smith , 1982]. A review is available in [Maes, 1987]. \nThe component design presented in Section 7.5 is  derived from the current literature, mostly the \nreferences [Allan et al., 2002; Bramley et al., 2000; Chen & Szymanski, 2001; Hou et al., 2005; \nSzymanski & Chen, 2002; Tyan et al ., 2005]. Additional informa tion is available from the \nCommon Component Architecture (CCA) Forum at http://www.cca-forum.org/ . \n \nProblems", "source": "Page 387", "chapter": "7"}
{"id": "50fd27e3742c-0", "text": "374 Contents \n8.1 Service Oriented Architecture \n8.1.1   \n8.1.2   8.1.3   \n8.1.4   \n8.1.5   8.1.6   \n8.1.7   \n8.2 SOAP Communication Protocol \n8.2.1 The SOAP Message Format 8.2.2 The SOAP Section 5 Encoding \n8.2.3 SOAP Communication Styles 8.2.4 Binding SOAP to a Transport Protocol \n8.3 WSDL for Web Service Description \n8.3.1 The WSDL 2.0 Building Blocks  8.3.2 Defining a Web Service\u2019s Abstract \nInterface \n8.3.3 Binding a Web Service Implementation 8.3.4 Using WSDL to Generate SOAP Binding \n8.3.5 Non-functional Descriptions and Beyond \nWSDL \n8.4 UDDI for Service Discovery and Integration \n8.4.1   8.4.2   8.4.3   \n8.4.4 \n  \n8.5 Developing Web Services with Axis \n8.5.1 Server-side Development with Axis  \n8.5.2 Client-side Development with Axis 8.5.3  \n8.5.4  \n8.6 OMG Reusable Asset Specification", "source": "Page 388", "chapter": "8"}
{"id": "50fd27e3742c-1", "text": "8.5.4  \n8.6 OMG Reusable Asset Specification \n8.6.1   8.6.2   \n8.6.3 \n  \n8.7 Summary and Bibliographical Notes \nProblems  \nChapter 8  \nWeb Services \n \n \nA Web service is a software function or resource offered as a \nservice; remotely accessed over the \u201cweb\u201d; and, has programmatic access using standard protocols. A Web service \nis an interface that describes a collection of operations that are \nnetwork accessible through standardized XML messaging. Web services fulfill a specific task or a set of tasks. A Web \nservice is described using a standard, formal XML notion, \ncalled its service description  that provides all the details \nnecessary to interact with the service including message \nformats, transport protocols and location. \nWhile there are several definitions available it can be broadly \nagreed that a Web service is a platform and implementation \nindependent software component that can be, \n\uf0b7 Described using a service description language \n\uf0b7 Published to a registry of services \n\uf0b7 Discovered through a standard mechanism \n\uf0b7 Invoked through a declared API, usually over a \nnetwork \n\uf0b7 Composed with other services \nWeb services are characterized as loose coupling of \napplications\u2014clients and service providers need not be known", "source": "Page 388", "chapter": "8"}
{"id": "50fd27e3742c-2", "text": "applications\u2014clients and service providers need not be known \na priori. The underlying mechanism that enables this is: \npublish-find-bind, or sometimes called find-bind-execute. The application can be developed without having to code or \ncompile in what services you need . Similarly, when service \nprovider deploys a service, it does not need to know its clients. In summary, (1) Service publishes  its description; (2) Client \nfinds  service based on description; and, (3) Client binds  itself \nto the service.", "source": "Page 388", "chapter": "8"}
{"id": "91199a871f0a-0", "text": "Chapter 8 \uf0b7 Web Services 375\nThe only common thing across Web services is the data format  (ontology). There is no API\u2019s \ninvolved, no remote service invocation. Each \u201cmethod\u201d is a different service; invocation is \ngoverned by the \u201cservice contract.\u201d A web site (portal) provides a collection of Web services. \n Tom Gruber, What is an Ontology? Online at: http://www-ksl.stanford.edu/kst/what-is-an-\nontology.html \nA closer look at Microsoft's new Web services platform, \"Indigo,\" from the same source. http://www.eweek.com/artic le2/0,1759,1763 162,00.asp \n \nWeb services essentially mean using SOAP Remote Procedure Call. Web services function in the \ninformation \u201cpull\u201d mode. The reason for this is firewalls, which allow only pulling of the \ninformation with Web services. Although HTTP 1.1 allows keeping state on the server, it is still a \n\u201cpull\u201d mode of communication. \nThe \u201cpull\u201d mode is not appropriate for distributin g real-time information; for this we need the \n\u201cpush\u201d mode. If we want to use Web services in the \u201cpush\u201d mode, we have two options: \n1. Use tricks \n2. Web services pushing unsolicited notification", "source": "Page 389", "chapter": "8"}
{"id": "91199a871f0a-1", "text": "1. Use tricks \n2. Web services pushing unsolicited notification \nIn the first case, we have an independent brok er to which the clients that are to receive \nnotifications should connect. The broker is in the trusted part of the network and it helps to push \ninformation to the client of the Web service. \nIn the second case, the Web service standard needs to be modified to allow pushing information \nfrom the server. An important issue that needs to be considered is whether this capability can lead \nto denial-of-service attacks. \nPeer-to-peer communication is also an issue because of firewalls. \nSo, What the Heck Are Web Services? http://www.businessweek.com/technology/c ontent/feb2005/tc20 05028_8000_tc203.htm \nA \"Milestone\" for Web Services \nhttp://www.businessweek.com/technology/c ontent/feb2005/tc20 05028_4104_tc203.htm \nGENERAL: \nhttp://www.businessweek.com/technology/index.html \nWeb Services Leaders Submit Key Messaging Spec: A group of leading Web services \nproponents, including Microsoft and Sun Microsystems, on Tuesday announced the joint \nsubmission of a key Web services specification to the World Wide Web Consortium (W3C).", "source": "Page 389", "chapter": "8"}
{"id": "91199a871f0a-2", "text": "submission of a key Web services specification to the World Wide Web Consortium (W3C). \nhttp://www.eweek.com/artic le2/0,1759,1634 158,00.asp \nRead how this could signal a turning point in the battle over Web services specifications \nintellectual property rights.", "source": "Page 389", "chapter": "8"}
{"id": "c65d9ea4e715-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  376 \n 8.1 Service Oriented Architecture \n \nService Oriented Architecture  (SOA) is an architectural style whose goal is to achieve loose \ncoupling among interacting software agents. Typi cally, service oriented architecture contains \nthree components (see Figure 8-1): a service provi der, a service customer, and a service registry. \nA service  is a unit of work done by a service provider to achieve desired end results for a service \ncustomer. Both provider and customer are roles played by software agents on behalf of their \nusers. SOA is a simple but powerful concept whic h can be applied to describe a wide variety of \nWeb service implementations. \nA service provider creates a service description, pu blishes that service description to one or more \nservice registries and receives Web service invocation requests from one or more service \nconsumers. It is important to note that the service provider publishes the description of how the \nservice behaves and not the service code. This se rvice description informs the service customer \neverything it needs to know in order to properly understand and invoke the Web service. More \ninformation on service description is available in Section 8.3 below. A service customer finds \nservice descriptions published to one or more service registries and use service descriptions to", "source": "Page 390", "chapter": "8"}
{"id": "c65d9ea4e715-1", "text": "service descriptions published to one or more service registries and use service descriptions to \nbind or to invoke Web services hosted by service providers. \n \n  \n 3.  Bind/Use2.  Find/Search1.  Publish/Register\nDiscovery Agency /\nRegistry\nService ProviderService CustomerService\nDescription\n \nFigure 8-1: Service Oriented Architecture\u2014components and relationships.", "source": "Page 390", "chapter": "8"}
{"id": "c81977409a59-0", "text": "Chapter 8 \uf0b7 Web Services 377\n8.2 SOAP Communication Protocol \n \nSOAP (Simple Object Access Protocol or Service Oriented Architecture Protocol) is the \ncommunication protocol for Web services. It is intended for exchanging structured information \n(based on XML) and is relatively simple (lightweight). Most commonly it runs over HTTP (Appendix C), but it can run over a variety of unde rlying protocols. It has been designed to be \nindependent of any particular programming mode l and other implementation-specific semantics. \nA key advantage of SOAP is that, because it is XML based, it is programming-language, platform, and hardware independent. \nSOAP, as any other communication protocol, gove rns how communication happens and how data \nis represented on the wire. The SOAP framework  is an implementation of the Broker design \npattern (Section 5.4) and there are many sim ilarities between SOAP and Java RMI (or CORBA). \nThis section describes SOAP version 1.2, which is  the current SOAP specification. The older \nSOAP version 1.1 is somewhat different. \nSOAP defines the following pieces of inform ation, which we will look at in turn: \n\uf0b7 The way the XML message is structured \n\uf0b7 The conventions representing a remote procedure call in that XML message get\nrecommendation\ninvokeDelphi method facilitator", "source": "Page 391", "chapter": "8"}
{"id": "c81977409a59-1", "text": "recommendation\ninvokeDelphi method facilitator\n: Service Requestor\n: SOAP Runtime\ninitializestock forecast expert\n: Service Providerdata tracking\nand machine learning\n: Backend\nhttp\n: Transporthttp\n: Transport\nforecaster description\n: WSDLdiscovery agency\n: UDDI, WSIL\n: SOAP Runtime\ncreate\nobtain\npublish\nfind\ndo\nforecast\nFigure 8-2: Web services dynamic interactions.", "source": "Page 391", "chapter": "8"}
{"id": "58a4bde8327d-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  378 \n \uf0b7 A binding to HTTP, to ensure that th e XML message is transported correctly \n\uf0b7 The conventions for conveying an error in message processing back to the sender \n8.2.1 The SOAP Message Format \nA unit of communication in SOAP is a message . A SOAP message is an ordinary XML document \ncontaining the following elements (Figure 8-3): \n\uf0b7 A required Envelope  element that identifies the XML document as a SOAP message \n\uf0b7 An optional Header  element that contains the message header information; can include \nany number of header blocks  (simply referred to as headers ); used to pass additional \nprocessing or control information (e.g., authen tication, information related to transaction \ncontrol, quality of service, and service billing and accounting-related data) \n\uf0b7 A required Body  element that contains the remote method call or response information; \nall immediate children of the Body  element are body blocks  (typically referred to simply \nas bodies ) \n\uf0b7 An optional Fault  element that provides information about errors that occurred while \nprocessing the message \nSOAP messages are encoded using XML and must not contain DTD references or XML \nprocessing instructions. Figure 8-4 illustrates th e detailed schema for SOAP messages using the", "source": "Page 392", "chapter": "8"}
{"id": "58a4bde8327d-1", "text": "processing instructions. Figure 8-4 illustrates th e detailed schema for SOAP messages using the \nnotation introduced in Figure 6-5. If a header is  present in the message, it must be the first \nimmediate child of the Envelope  element. The Body  element either directly follows the \nHeader  element or must be the first immediate child of the Envelope  element if no header is \npresent. \nBecause the root element Envelope  is uniquely identified by its namespace, it allows \nprocessing tools to immediately determine whether a given XML document is a SOAP message. \nThe main information the sender wants to transm it to the receiver should be in the body of the \nmessage. Any additional information needed fo r intermediate processing or added-value services \n(e.g., authentication, security, transaction control,  or tracing and auditing) goes into the header. \nThis is the common approach for communication prot ocols. The header contains information that SOAP envelope\nSOAP header\nSOAP body\nbody blockbody blockheader blockheader block\nattachment blockattachment blockActual message content\n(required)Processing instructions \nContext information (optional)Identifies message as\na SOAP message \n(required)\nArbitrary content \n(optional)<Envelope>\n</Envelope><Body>\n</Body><Header>\n</Header>header blocks\nbody blocks\nattachment blocks<Envelope>\n</Envelope><Body>", "source": "Page 392", "chapter": "8"}
{"id": "58a4bde8327d-2", "text": "body blocks\nattachment blocks<Envelope>\n</Envelope><Body>\n</Body><Header>\n</Header>header blocks\nbody blocks\nattachment blocks\nFigure 8-3: Schematic representation of a SOAP message. Highlighted are the required\nelements.", "source": "Page 392", "chapter": "8"}
{"id": "fc8a2f80f6e8-0", "text": "Chapter 8 \uf0b7 Web Services 379\ncan be used by intermediate nod es along the SOAP message path. The payload  or body is the \nactual message being conveyed. This is th e reason why the header is optional. \nEach of the SOAP elements Envelope , Header , or Body  can include arbitrary number of \n<any>  elements. Recall that the <any>  element enables us to extend the XML document with \nelements not specified by the schema. Its namespace is indicated as ##other , which implies \nelements from any namespace that is not the namespace of the parent element, that is, soap-\nenv. \nAn example SOAP message containing a SOAP header block and a SOAP body is given as: \n \nListing 8-1: Example of a SOAP message. \n 1 <soap-env:Envelope  \n 2   xmlns:soap-env=\"http://www.w3.org/2003/05/soap-envelope\" \n 3   xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" \n 4   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> \n 5   <soap-env:Header> \n 6     <ac:alertcontrol xmlns:ac=\"http://example.org/alertcontrol\" \n 7       soap-env:mustUnderstand =\"1\">", "source": "Page 393", "chapter": "8"}
{"id": "fc8a2f80f6e8-1", "text": "7       soap-env:mustUnderstand =\"1\"> \n 8       <ac:priority>high</ac:priority> \n 9       <ac:expires>2006-22-00T14:00:00-05:00</ac:expires> \n10     </ac:alertcontrol> \n11   </soap-env:Header> \n12   <soap-env:Body> \n13     <a:notify xmlns:a=\"http://example.org/alert\"> \n14       <a:note xsi:type=\"xsd:string\"> Global attributes:Envelope\n?\nsoap-env: Envelope soap-env: Header\nsoap-env: Body\n?##other: anyEnvelope\n?\nsoap-env: Envelope soap-env: Envelope soap-env: Header\nsoap-env: Body\n?##other: anyHeader\nsoap-env: Header?\n##other: any\n##other: anyAttribute?Header\nsoap-env: Header?\n##other: any\n##other: anyAttribute?\nBody\nsoap-env: Body?\n##other: any\n##other: anyAttribute?Body\nsoap-env: Body?\n##other: any\n##other: anyAttribute?\nsoap-env: rolesoap-env: mustUnderstand\nsoap-env: encodingStyle\nsoap-env: relaysoap-env: rolesoap-env: mustUnderstand\nsoap-env: encodingStyle\nsoap-env: relayFault", "source": "Page 393", "chapter": "8"}
{"id": "fc8a2f80f6e8-2", "text": "soap-env: encodingStyle\nsoap-env: relayFault\nsoap-env: Fault Code\nReason\nNode\nRole\nDetail?\n?\n?Fault\nsoap-env: Fault Code\nReason\nNode\nRole\nDetail?\n?\n?\nFigure 8-4: The XML schema for SOAP messages. The graphical notation is given in Figure \n6-5. (SOAP version 1.2 schema definition available at: http://www.w3.org/2003 /05/soap-envelope ).", "source": "Page 393", "chapter": "8"}
{"id": "9d3041d78f65-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  380 \n SenderService Requestor\nIntermediary Intermediary ReceiverService Provider15         Reminder: meeting today at 11AM in Rm.601 \n16       </a:note> \n17     </a:notify> \n18   </soap-env:Body> \n19 </soap-env:Envelope>  \n \nThe above SOAP message is a request for alert to  a Web service. The request contains a text note \n(in the Body ) and is marked (in the Header ) to indicate that the mess age is high priority, but \nwill become obsolete after the given time. The details are as follows: \nLines 1\u20132: Prefix soap-env , declared in Line 2, identifi es SOAP-defined elements, namely \nEnvelope , Header , and Body , as well as the attribute mustUnderstand  (appears in \nLine 7). \nLine 3: Prefix xsd refers to XML Schema elements, in particular the built-in type string  \n(appears in Line 14). \nLine 4: Prefix xsi refers to XML Schema instance type  attribute, asserting the type of the \nnote  as an XML Schema string  (appears in Line 14). \nLine 7: The mustUnderstand  attribute value \"1\" tells the Web service provider that it", "source": "Page 394", "chapter": "8"}
{"id": "9d3041d78f65-1", "text": "must understand the semantics of the header bl ock and that it must process the header. The \nWeb service requestor demands express service delivery. \nLines 12\u201318: The Body  element encapsulates the service method invocation information, \nnamely the method name notify , the method parameter note , its associated data type and \nits value. \nSOAP message body blocks carry the information n eeded for the end recipient of a message. The \nrecipient must understand the semantics of all bo dy blocks and must process them all. SOAP does \nnot define the schema for body blocks since they  are application specific. There is only one \nSOAP-defined body block\u2014the Fault  element shown in Figure 8-4\u2014which is described below. \nA SOAP message can pass through multiple nodes on its path. This includes the initial SOAP \nsender, zero or more SOAP intermediaries , and an ultimate SOAP receiver. SOAP intermediaries \nare applications that can process parts \nof a SOAP message as it travels from the sender to the receiver. \nIntermediaries can both accept and forward (or re lay, or route) SOAP messages. Three key use-\ncases define the need for SOAP intermediaries: crossing trust domains, ensuring scalability, and \nproviding value-added services along the SOAP message path. Crossing trust domains is a \ncommon issue faced when implementing security in distributed systems. Corporate firewalls and", "source": "Page 394", "chapter": "8"}
{"id": "9d3041d78f65-2", "text": "common issue faced when implementing security in distributed systems. Corporate firewalls and \nvirtual private network (VPN) gateways let so me requests cross the trust domain boundary and \ndeny access to others. \nSimilarly, ensuring scalability is an important require ment in distributed systems. We rarely have \na simplistic scenario where the sender and receiver are directly connected by a dedicated link. In \nreality, there will be several network nodes on th e communication path that will be crossed by \nmany other concurrent communication flows. Due to the limited computing resources, the \nperformance of these nodes may not scale well with  the increasing traffic load. To ensure \nscalability, the intermediate nodes need to provide  flexible buffering of messages and routing", "source": "Page 394", "chapter": "8"}
{"id": "5c4a8405983c-0", "text": "Chapter 8 \uf0b7 Web Services 381\nbased not only on message parameters, such as orig in, destination, and priority, but also on the \nstate of the network measured by parameters such  as the availability and load of its nodes as well \nas network traffic information. \nLastly, we need intermediaries to provide valu e-added services in a distributed system. Example \nservices include authentication and authorization,  security encryption, transaction management, \nmessage tracing and auditing, as well as billing and payment processing. \nSOAP Message Global Attributes \nSOAP defines three global attributes that are inte nded to be usable via qualified attribute names \non any complex type referencing them. The attr ibutes are as follows (more details on each are \nprovided below): \n\uf0b7 The mustUnderstand  attribute specifies whether it is mandatory or optional that a \nmessage receiver understands and processes th e content of a SOAP header block. The \nmessage receiver to which this attribute refers to is named by the role  attribute. \n\uf0b7 The role  attribute is exclusively related to head er blocks. It names the application that \nshould process the given header block. \n\uf0b7 The encodingStyle  attribute indicates the encoding rules used to serialize parts of a \nSOAP message. Although the SOAP specificati on allows this attribute to appear on any", "source": "Page 395", "chapter": "8"}
{"id": "5c4a8405983c-1", "text": "SOAP message. Although the SOAP specificati on allows this attribute to appear on any \nelement of the message (including header bl ocks), it mostly app lies to body blocks. \n\uf0b7 The relay  attribute is used to indicate whether a SOAP header block targeted at a SOAP \nreceiver must be relayed if not processed. \nThe mustUnderstand  attribute can have values '1' or '0' (or, 'true'  or 'false' ). \nValue '1' indicates that the target role of this SO AP message must understand the semantics of \nthe header block and process it. If this attribute is missing, this is equivalent to having value '0'. \nThis value indicates that the target role may, but does not have to, process the header block. \nThe role  attribute carries an URI value that names th e recipient of a header block. This can be \nthe ultimate receiver or an intermediary node th at should provide a value-added service to this \nmessage. The SOAP specifi cation defines three roles: none , next, and ultimateReceiver . An \nattribute value of http://www.w3.org/2003/05/soap-envelope/role/next  \nidentifies the next SOAP application on the mess age path as the role for the header block. A \nheader without a role  attribute is intended for the ul timate recipient of this message.", "source": "Page 395", "chapter": "8"}
{"id": "5c4a8405983c-2", "text": "header without a role  attribute is intended for the ul timate recipient of this message. \nThe encodingStyle  attribute declares the mapping from an application-specific data \nrepresentation to the wire format. An encoding  generally defines a data type and data mapping \nbetween two parties that have different data  representation. The decoding converts the wire \nrepresentation of the data back to the applicati on-specific data format. The translation step from \none data representation to a nother, and back to the original format, is called serialization  and \ndeserialization . The terms marshalling  and unmarshalling  may be used as alternatives. The scope \nof the encodingStyle  attribute is that of its owner element and that element\u2019s descendants, \nexcluding the scope of the encodingStyle  attribute on a nested element. More about SOAP \nencoding is given in Section 8.2.2 below.", "source": "Page 395", "chapter": "8"}
{"id": "0e832fe7a3a4-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  382 \n The relay  attribute indicates whether a header bl ock should be relayed in the forwarded \nmessage if the header block is targeted at a role played by the SOAP intermediary, but not \notherwise processed by the intermediary. This attr ibute type is Boolean and, if omitted, it is \nequivalent as if included with a value of \u201cfalse.\u201d \nError Handling in SOAP:  The Fault  Body Block \nIf a network node encounters problems while processing a SOAP message, it generates a fault \nmessage and sends it back to the message sender, i.e., in the direction opposite to the original \nmessage flow. The fault message contains a Fault  element which identifies the source and \ncause of the error and allows error-diagnostic info rmation to be exchanged between participants \nin an interaction. Fault  is optional and can appear at most once within the Body  element. The \nfault message originator can be an end host or an intermediary network node which was supposed \nto relay the original message. The content of the  Fault  element is slightly different in these two \ncases, as will be seen below. \nA Fault  element consists of the following n ested elements (shown in Figure 8-4): \n\uf0b7 The Code  element specifies the failure type. Fault codes are identified via namespace-", "source": "Page 396", "chapter": "8"}
{"id": "0e832fe7a3a4-1", "text": "\uf0b7 The Code  element specifies the failure type. Fault codes are identified via namespace-\nqualified names. SOAP predefines several gene ric fault codes and allows custom-defined \nfault codes, as described below. \n\uf0b7 The Reason  element carries a human-readable e xplanation of the message-processing \nfailure. It is a plain text of type string  along with the attribute specifying the language the \ntext is written in. \n\uf0b7 The Node  element names the SOAP node (end host or  intermediary) on the SOAP message \npath that caused the fault to happen. This node  is the originator of the fault message. \n\uf0b7 The Role  element identifies the role the originatin g node was operating in at the point the \nfault occurred. Similar to the role  attribute (described above), but instead of identifying the \nrole of the recipient of a header block, it gives the role of the fault originator. \n\uf0b7 The Detail  element carries application-specific error information related to the Body  \nelement and its sub-elements. \nAs mentioned, SOAP predefines several generic fault codes. They must be namespace qualified \nand appear in a Code  element. These are: \nFault Code Explanation \nVersionMismatch The SOAP node received a message whose version is not supported, \nwhich is determined by the Envelope  namespace. For example, the", "source": "Page 396", "chapter": "8"}
{"id": "0e832fe7a3a4-2", "text": "which is determined by the Envelope  namespace. For example, the \nnode supports SOAP version 1.2, but the namespace qualification of \nthe SOAP message Envelope  element is not identical to \nhttp://www.w3.org/2003/05/soap-envelope  . \nDataEncodingUnknown A SOAP node to which a SOAP header block or SOAP body child \nelement information item was target ed was targeted does not support \nthe data encoding indicated by the encodingStyle  attribute. \nMustUnderstand A SOAP node to which a header block was targeted could not", "source": "Page 396", "chapter": "8"}
{"id": "40458bd8b60e-0", "text": "Chapter 8 \uf0b7 Web Services 383\nprocess the header block, and the block contained a \nmustUnderstand  attribute value \"true\" . \nSender A SOAP message was not appropriately  formed or did not contain all \nrequired information. For example, the message could lack the proper \nauthentication or payment information. Resending this identical \nmessage will again cause a failure. \nReceiver A SOAP message could not be processed due to reasons not related \nto the message format or content. For example, processing could \ninclude communicating with an upstream SOAP node, which did not \nrespond. Resending this identical message might succeed at some later point in time. \nSOAP allows custom extensions of fault codes th rough dot separators so that the right side of a \ndot separator refines the more general informa tion given on the left side. For example, the Code  \nelement conveying a sender auth entication error would contain Sender.Authentication . \nSOAP does not require any further structure within  the content placed in header or body blocks. \nNonetheless, there are two aspects that influen ce how the header and body of a SOAP message \nare constructed: communication style  and encoding rules . These are described next. \n8.2.2 The SOAP Section 5 Encoding Rules \nEncoding rules define how a particular entity or data structure is represented in XML. Connecting", "source": "Page 397", "chapter": "8"}
{"id": "40458bd8b60e-1", "text": "Encoding rules define how a particular entity or data structure is represented in XML. Connecting \ndifferent applications typically introduces the probl em of interoperability: the data representation \nof one application is different from that of the other application. The reader may recall the example in Figure 6-1 that shows two different ways of representing a postal address. The \napplications may even be written in different pr ogramming languages. In order for the client and \nserver to interoperate, it is essential that they ag ree on how the contents of a SOAP message are \nencoded. SOAP 1.2 defines a part icular form of encoding called SOAP encoding .\n2 This defines \nhow data structures in the application\u2019s local me mory, including basic types such as integers and \nstrings as well as complex types such as arrays a nd structures, can be serialized into XML. The \nserialized representation allows transfer of data  represented in application-specific data types \nfrom one application to another. \nThe encoding rules employed in a partic ular SOAP message are specified by the \nencodingStyle  attribute, as discussed above. There is  no notion of default encoding in a \nSOAP message. Encoding style must be explic itly specified if the receiving application is \nexpected to validate the message. \nSOAP does not enforce any special form of codi ng\u2014other encodings may be used as well. In", "source": "Page 397", "chapter": "8"}
{"id": "40458bd8b60e-2", "text": "other words, applications are free to ignore S OAP encoding and choose a different one instead. \nFor instance, two applications can simply agr ee upon an XML Schema representation of a data \nstructure as the serialization format for that da ta structure. This is commonly referred to as literal \nencoding  (see also Section 8.2.3 below). \n                                                      \n2 There is no \u201cofficial\u201d name for SOAP encoding, but it is often referred to as SOAP Section 5 encoding , \nbecause the rules are presented in S ection 5 of the SOAP specification.", "source": "Page 397", "chapter": "8"}
{"id": "34cbb58cd15b-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  384 \n A typical programming language data model cons ists of simple types and compound types. \nCompound types are based on simple types or ot her compound types. Dealing with simple data \ntypes would be easy, since all these types have direct representation in XML Schema (some are \nshown in Table 6-1 above). However, the story w ith complex types, such as arrays and arbitrary \nsoftware objects, is more complicated. XML Schema defines complex types, but these are very \ngeneral, and some degree of specialization, e.g ., for arrays, could make job easier for the Web \nservices developer. \nSOAP does not define an independent data ty pe system. Rather, it relies on the XML Schema \ntype system. It adopts all XML Schema built-in  primitive types and adds few extensions for \ncompound types. The SOAP version 1.2 types extending the XML Schema types are defined in a separate namespace, namely http://www.w3.org/2003/05/soap-encoding . \nXML elements representing encode d values may hold the XML Schema type  attribute for \nasserting the type of a value. For example, the sender of the SOAP encoded message in Listing \n8-1 above in Line 14 explicitly asserts the type of the note  element content to be a string :", "source": "Page 398", "chapter": "8"}
{"id": "34cbb58cd15b-1", "text": "14   <a:note xsi:type=\"xsd:string\"> \n15     Reminder: meeting at 11AM in Rm.601 \n16   </a:note> \nThe XML elements representing encoded values may also be untyped, i.e., not contain the type  \nattribute: \n <a:note> Reminder: meeting at 11AM in Rm.601 </a:note>  \nIn this case, a receiver deserializing a value must be  able to determine its type just by means of \nthe element name <a:note> . If a sender and a receiver share the same data model, and both \nknow that a note  labeled value in an application-specific data graph is a string  type, they are \nable to map the note  element content to the appropriate da ta type without explicitly asserting the \ntype through the XML Schema type  attribute. However, in this case we cannot rely on XML \nSchema to explicitly validate the content of the message. \nSOAP Compound Data Types \nSOAP Section 5 encoding assumes that any applica tion-specific data is represented as a directed \ngraph. Consider the class diagram for an online auction site shown in Figure 2-44, Problem 2.31 \nin Chapter 2, which is simplified here in Figure 8-5. Suppose that the sender sends an instance of", "source": "Page 398", "chapter": "8"}
{"id": "34cbb58cd15b-2", "text": "ItemInfo called item  to the receiver in a SOAP message. \nA compound data type can be either a struct  or an array . A struct  is an element that contains \ndifferent child elements. The SellerInfo in Figure 8-5 is an example of a struct . An array  is a \ncompound type that contains elements of the same  name. The BidList in Figure 8-5 is an example \nof an array  since it contains a group of individual Bid entries. \nWhen serialized to XML, the object graph of item  in Figure 8-5 will be represented as follows: \n \nListing 8-2: Example of SOAP encoding for the object graph in Figure 8-5. \n<soap-env:Envelope \n   xmlns:soap-env=\"http://www.w3.org/2003/05/soap-envelope\" \n   xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"", "source": "Page 398", "chapter": "8"}
{"id": "dde0c2e8f1db-0", "text": "Chapter 8 \uf0b7 Web Services 385\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n   xmlns:soap-enc=\"http://www.w3.org/2003/05/soap-encoding\" \n   xmlns:ns0=\"http://www.auctions.org/ns\" \n   soap-env:encodingStyle=\"http://www.w3.org/2003/05/soap-encoding\"> \n  <soap-env:Body> \n    <ns0:item> \n      <ns0:name xsi:type=\"xsd:string\"> old watch </ns0:name> \n      <ns0:startPrice xsi:type=\"xsd:float\"> 34.99 </ns0:startPrice> \n      <ns0:reserved xsi:type=\"xsd:boolean\"> false </ns0:reserved> \n      <ns0:seller> \n        <ns0:name xsi:type=\"xsd:string\"> John Doe </ns0:name> \n        <ns0:address xsi:type=\"xsd:string\"> \n          13 Takeoff Lane, Talkeetna, AK 99676 \n        </ns0:address> \n        <ns0:bids xsi:type=\"soap-enc:array\" soap-enc:arraySize=\"*\"> \n          <ns0:entry>", "source": "Page 399", "chapter": "8"}
{"id": "dde0c2e8f1db-1", "text": "<ns0:entry> \n            <ns0:amount xsi:type=\"xsd:float\"> 35.01 </ns0:amount> \n            <ns0:bidder>  . . .  </ns0:bidder> \n          </ns0:entry> \n          <ns0:entry> \n            <ns0:amount xsi:type=\"xsd:float\"> 34.50 </ns0:amount> \n            <ns0:bidder>  . . .  </ns0:bidder> \n          </ns0:entry> \n           . . . \n        </ns0:bids> \n      </ns0:seller> \n    </ns0:item> \n  </soap-env:Body> \n</soap-env:Envelope> \n ItemInfo\nname : String\nstartPrice : floatreserved : boolean\nSellerInfo\nname : String\naddress : String11bids\nseller\nBid\namount : floatBidsList\n*\n1bidderBuyerInfo\nname : String\naddress : String entryitemItemInfo\nname : String\nstartPrice : floatreserved : booleanItemInfo\nname : String\nstartPrice : floatreserved : boolean\nSellerInfo\nname : String\naddress : StringSellerInfo\nname : String\naddress : String11bids\nseller\nBid\namount : floatBid", "source": "Page 399", "chapter": "8"}
{"id": "dde0c2e8f1db-2", "text": "name : String\naddress : String11bids\nseller\nBid\namount : floatBid\namount : floatBidsListBidsList\n*\n1bidderBuyerInfo\nname : String\naddress : StringBuyerInfo\nname : String\naddress : String entryitem\nSender Receiver\n(Web service)\nSOAP messageitemSender Receiver\n(Web service)\nSOAP messageitem\n \nFigure 8-5: Example class diagram, extracted from Figure 2-44 (Chapter 2).", "source": "Page 399", "chapter": "8"}
{"id": "ad6dd627ac25-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  386 \n Array attributes. Needed to give the type and dime nsions of an array\u2019s cont ents, and the offset for \npartially-transmitted arrays. Used as the type of the arraySize  attribute. Restricts asterisk ( * ) \nto first list item only. Instances must contain at  least an asterisk ( * ) or a nonNegativeInteger. \nMay contain other nonNegativeIntegers as subseque nt list items. Valid instances include: *, 1, * \n2, 2 2, * 2 0. \n8.2.3 SOAP Communication Styles \nGenerally, SOAP applications can communicate in two styles: document style  and RPC style  \n(Remote Procedure Call style). In document-style communication , the two applications agree \nupon the structure of documents exchanged between  them. SOAP messages are used to transport \nthese documents from one application to the othe r. The structure of both request and response \nmessages is the same, as illustrated in Figure 8-6, an d there are absolutely no  restrictions as to the \ninformation that can be stored in their bodies. In  short, any XML document can be included in the \nSOAP message. The document style is often referred to also as message-oriented style . \nIn RPC-style communication , one SOAP message encapsulates the request while another", "source": "Page 400", "chapter": "8"}
{"id": "ad6dd627ac25-1", "text": "In RPC-style communication , one SOAP message encapsulates the request while another \nmessage encapsulates the response, just as in  document-style communication. However, the \ndifference is in the way these messages are construc ted. As shown in Figure 8-7, the body of the \nrequest message contains the actual operation call.  This includes the name of the operation being \ninvoked and its input parameters. Thus, the two communicating applications have to agree upon \nthe RPC operation signature as opposed to the docum ent structure (in the case of document-style \ncommunication). The task of translating the operati on signature in SOAP is typically hidden by \nthe SOAP middleware. \nSelecting the communication style is independent  from selecting whether or not the message \nshould be encoded (Section 8.2.2 above). The term literal  is commonly used to refer to non-\nencoded messages. Therefore, four different combinations are possible: \n\uf0b7 document/literal : A document-style message which is not encoded. \n\uf0b7 document/encoded : A document-style message which is encoded. \n\uf0b7 rpc/literal : An RPC-style message which is not encoded. \n\uf0b7 rpc/encoded : An RPC-style message which is encoded. <Envelope>\n<Body>\n</Envelope></Body><Header>\n</Header>header blocks\narbitrary XML document<Envelope>\n<Body>", "source": "Page 400", "chapter": "8"}
{"id": "ad6dd627ac25-2", "text": "</Header>header blocks\narbitrary XML document<Envelope>\n<Body>\n</Envelope></Body><Header>\n</Header>header blocks\narbitrary XML documentSOAP Message\n(same for Request or Response )\n \nFigure 8-6: Structure of a document-style SOAP message.", "source": "Page 400", "chapter": "8"}
{"id": "4efa5bba49ff-0", "text": "Chapter 8 \uf0b7 Web Services 387\nThe document/encoded combination is rarely enc ountered in practice, but the other three are \ncommonly in use. Document-style messages are particularly useful to support cases in which \nRPCs result in interfaces that are too fine grained and, therefore, brittle. \nThe RPC-style SOAP Communication \nIn the language of the SOAP encoding, the actual RPC invocation is modeled as a struct  type \n(Section 8.2.2 above). The name of the struct  (that is, the name of the first element inside the \nSOAP body) is identical to the name of the method/ operation. Every in or in-out parameter of the \nRPC is modeled as an accessor with a name identic al to the name of the RPC parameter and the \ntype identical to the type of the RPC parame ter mapped to XML according to the rules of the \nactive encoding style. The accessors appear in the same order as do the parameters in the \noperation signature. \nAll parameters are passed by value. SOAP has no notion of passing values by reference, which is \nunlike most of the programming languages. For Web services, the notion of in-out and out \nparameters does not involve passing objects by refe rence and letting the target application modify", "source": "Page 401", "chapter": "8"}
{"id": "4efa5bba49ff-1", "text": "parameters does not involve passing objects by refe rence and letting the target application modify \ntheir state. Instead, copies of the data are excha nged. It is the up to the service client code to \ncreate the perception that the actual state of the object  that has been passed in to the client method \nhas been modified. \n \nListing 8-3: An example of a SOAP 1.2 RPC-style request/response via HTTP: \n<?xml version=\"1.0\"?> <Envelope>\n</Envelope><Body>\n</Body><Header>\n</Header>header blocks\n<operationName>\n</operationName><inputParameter_1> </inputParameter_1> value 1\n<inputParameter_2> </inputParameter_2> value 2\n<inputParameter_n> </inputParameter_n> value n<Envelope>\n</Envelope><Body>\n</Body><Header>\n</Header>header blocks\n<operationName>\n</operationName><inputParameter_1> </inputParameter_1> value 1 <inputParameter_1> </inputParameter_1> value 1\n<inputParameter_2> </inputParameter_2> value 2 <inputParameter_2> </inputParameter_2> value 2\n<inputParameter_n> </inputParameter_n> value n <inputParameter_n> </inputParameter_n> value nRemote Procedure Call", "source": "Page 401", "chapter": "8"}
{"id": "4efa5bba49ff-2", "text": "<Envelope>\n<Body><Header>\n</Header>header blocks\n<operationNameReturn>\n<return> </return> return value\n</Envelope></Body></operationNameReturn><outputParameter_2> </outputParameter_2> value 2\n<outputParameter_n> </outputParameter_n> value n<outputParameter_1> </outputParameter_1> value 1<Envelope>\n<Body><Header>\n</Header>header blocks\n<operationNameReturn>\n<return> </return> return value <return> </return> return value\n</Envelope></Body></operationNameReturn><outputParameter_2> </outputParameter_2> value 2 <outputParameter_2> </outputParameter_2> value 2\n<outputParameter_n> </outputParameter_n> value n <outputParameter_n> </outputParameter_n> value n<outputParameter_1> </outputParameter_1> value 1 <outputParameter_1> </outputParameter_1> value 1Remote Procedure Call Response(Request message)\n(Response message)\nFigure 8-7: Structure of a SOAP RPC-style request and its associated response message.", "source": "Page 401", "chapter": "8"}
{"id": "ba0e597ef14d-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  388 \n <description name=\"StockQuote\" \ntargetNamespace=\"http://example.com/stockquote.wsdl\"           xmlns:tns=\"http://example.com/stockquote.wsdl\" \n          xmlns:xsd1=\"http://example.com/stockquote.xsd\" \n          xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"           xmlns=\"http://www.w3.org/ns/wsdl\">      <types> \n       <schema targetNamespace=\"http://example.com/stockquote.xsd\" \n              xmlns=\"http://www.w3.org/2001/XMLSchema\">            <element name=\"TradePriceRequest\">               <complexType>                   <all> \n                      <element name=\"tickerSymbol\" type=\"string\"/> \n                  </all>               </complexType>            </element>            <element name=\"TradePrice\"> \n              <complexType> \n                  <all>                       <element name=\"price\" type=\"float\"/>                   </all>               </complexType> \n           </element> \n       </schema>     </types>      <message name=\"GetLastTradePriceInput\"> \n        <part name=\"body\" element=\"xsd1:TradePriceRequest\"/>", "source": "Page 402", "chapter": "8"}
{"id": "ba0e597ef14d-1", "text": "<part name=\"body\" element=\"xsd1:TradePriceRequest\"/> \n    </message>     <message name=\"GetLastTradePriceOutput\">         <part name=\"body\" element=\"xsd1:TradePrice\"/>     </message> \n \n    <portType name=\"StockQuotePortType\">         <operation name=\"GetLastTradePrice\">            <input message=\"tns:GetLastTradePriceInput\"/>            <output message=\"tns:GetLastTradePriceOutput\"/> \n        </operation> \n    </portType>      <binding name=\"StockQuoteSoapBinding\" type=\"tns:StockQuotePortType\"> \n        <soap:binding style=\"document\" \ntransport=\"http://schemas.xmlsoap.org/soap/http\"/>         <operation name=\"GetLastTradePrice\">            <soap:operation soapAction=\"http://example.com/GetLastTradePrice\"/>            <input> \n               <soap:body use=\"literal\"/> \n           </input>            <output>                <soap:body use=\"literal\"/>            </output> \n        </operation> \n    </binding>", "source": "Page 402", "chapter": "8"}
{"id": "01e075d0a416-0", "text": "Chapter 8 \uf0b7 Web Services 389\n    <service name=\"StockQuoteService\"> \n        <documentation>My first service</documentation> \n        <port name=\"StockQuotePort\" binding=\"tns:StockQuoteBinding\">            <soap:address location=\"http://example.com/stockquote\"/>         </port>     </service> \n<description> \n \n8.2.4 Binding SOAP to a Transport Protocol \nThe key issue in deciding how to bind SOAP to a particular transport protocol is about \ndetermining how the requirements for a Web ser vice (communication style, such as RPC vs. \ndocument, synchronous vs. asynchronous, etc.) ma p to the capabilities of the transport protocol. \nIn particular, we need to determine how much of the overall contextual information needed to \nsuccessfully execute the Web servi ce needs to go in the SOAP mes sage versus in the message of \nthe transport protocol. \nFigure 8-8 illustrates this issue on an HTTP exampl e. In HTTP, context information is passed via \nthe target URI and the SOAPAction  header. In the case of SOAP, context information is passed \nin the SOAP header. \nAs a communication protocol, SOAP is stateless and one-way. Although it is possible to \nimplement statefull SOAP interactions so that the Web service maintains a session, this is not the", "source": "Page 403", "chapter": "8"}
{"id": "01e075d0a416-1", "text": "implement statefull SOAP interactions so that the Web service maintains a session, this is not the \nmost common scenario. HTTP Message\nSOAP Message\nSOAP bodyHTTP Message\nSOAP Message\nSOAP bodyPOST/ alertcontrol HTTP 1.1\nContent-Type: text/xml; charset=\"utf-8\"\nContent-Length: 581\nHost: www.example.orgSOAPAction: notify\n......Connection: Keep-Alive\n<soap-env: Envelope\nxmlns:soap-env=\"http://www.w3.org/2003/05/soap-envelope\"\nxmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n<soap-env:Header>\n......\n</soap-env:Header>\n......\n<soap-env: Body>\n<a:notify xmlns:a=\"http://example.org/alert\">\n<a:note xsi:type=\"xsd:string\">\nReminder: meeting today at 11AM in Rm.601\n</a:note>\n</a:notify>\n</soap-env: Body>Physical (Communication Protocol) Message\nOut-of-message context (target URI)\nOut-of-message context (SOAPAction)\nLogical SOAP Message\nIn-message context (header blocks)\nSOAP Body\nFigure 8-8: SOAP message binding to the HT TP protocol for the SOAP message example\nfrom Listing 8-1 above.", "source": "Page 403", "chapter": "8"}
{"id": "8b5340198bb9-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  390 \n When using HTTP for SOAP messages, the developer must decide which HTTP method \n(Appendix C) is appropriate to use in HTTP re quest messages that are exchanged between the \nservice consumer and the Web service. Usually the choice is between GET and POST . In the \ncontext of the Web as a whole (not specific to Web services), the W3C Technical Architecture \nGroup (TAG) has addressed the question of when it is appropriate to use GET, versus when to use \nPOST , in [Jacobs, 2004]. Their finding is that GET is more appropriate fo r safe operations such as \nsimple queries. POST  is appropriate for other types of applications where a user request has the \npotential to change the state of the resource (or of related resources). Figure 8-8 shows the HTTP \nrequest using the POST  method, which is most often used in the context of Web services. \n \nI. Jacobs (Editor), \u201cURIs, addressability, and the use of HTTP GET and POST,\u201d World Wide \nWeb Consortium, 21 March 2004. Available a t: http://www.w3.org/2001/tag/doc/whenToUseGet \n \n8.3 WSDL for Web Service Description \n A Web service publishes the description of the service not the actual service code. The service", "source": "Page 404", "chapter": "8"}
{"id": "8b5340198bb9-1", "text": "A Web service publishes the description of the service not the actual service code. The service \ncustomer uses the aspects of the service descrip tion to look or find a Web service. The service \ncustomer uses this description since it can exactly de tail what is required by the client to bind to \nthe Web service. Service description can be partitioned into: \n\uf0b7 Parts used to describe individual Web services. \n\uf0b7 Parts used to describe relationships between sets of Web services. \nOur main focus will be on the first group, describing individual Web services. The second group \nwhich describes relationships between sets of Web services will be briefly reviewed in Section \n8.3.5 below. \nThe most important language for describing individual Web services currently is the Web \nServices Definition Language  (WSDL). WSDL has a dual purpose of specifying: (a) the Web \nservice interface  (operation names and their signatures, u sed in the service invocation), and (b) \nthe Web service implementation  (network location and access mech anism for a particular instance \nof the Web service). The interface specifies what goes in and what comes out, regardless of where \nthe service is located or what are its performan ce characteristics. This is why the Web service \ninterface is usually referred to as the abstract part  of the service specification. Conversely, the", "source": "Page 404", "chapter": "8"}
{"id": "8b5340198bb9-2", "text": "interface is usually referred to as the abstract part  of the service specification. Conversely, the \nimplementation specifies the service\u2019s network lo cation and its non-functional characteristics, \nsuch as performance, reliability, and security. This is why the Web service implementation is \nusually referred to as the concrete part  of the service specification. This section describes how \nWSDL is used for describing the service interface and implementation. \nWSDL grammar (schema) is defined using XML Schema. The WSDL service description is an \nXML document conformant to the WSDL schema definition. WSDL provides the raw technical description of the service\u2019s interface including what a service does, how it is accessed and where", "source": "Page 404", "chapter": "8"}
{"id": "be77137174ed-0", "text": "Chapter 8 \uf0b7 Web Services 391\na service is located (Figure 8-9). Since the Web ser vice can be located anywhere in the network, \nthe minimum information needed to invoke a service method is: \n1. What is the service interface, that is, what are its methods (operations), method \nsignatures, and return values? \n2. Where in the network (host address and port number) is the service located? \n3. What communication protocol does the service understand? \n8.3.1 The WSDL 2.0 Building Blocks \nAs seen Figure 8-9, WSDL 2.0 enables the developer to separate the description of a Web \nservice\u2019s abstract functionality from the concrete details of how and where that functionality is \noffered. This separation facilitates different levels  of reusability and distribution of work in the \nlifecycle of a Web service and the WSDL document that describes it. \nDifferent implementations of the same Web ser vice can be made accessible using different \ncommunication protocols. (Recall also that SOAP supports binding to different transport \nprotocols, Section 8.2.4 above.) \nThe description of the endpoint\u2019s functional capab ilities is the abstract interface specification \nrepresented in WSDL by the interface  element. An abstract interface can support any number", "source": "Page 405", "chapter": "8"}
{"id": "be77137174ed-1", "text": "represented in WSDL by the interface  element. An abstract interface can support any number \nof operations. An operation  is defined by the set of messages that define its interface pattern. \nRecall that invoking an object method involves a request message  passing a set of parameters (or \narguments) as well as receiving a response message  that carries the result returned by the method. \n(The reader should recall the discussion of the RPC-style SOAP communication in Section 8.2.3 \nabove.) Also, some of the method parameters may be  used to pass back the output results; these \nare known as in-out  or out parameters . Since the operation is invoked over the network, we must WSDL description\nService implementation definitionService interface definition\ntypes\ninterfaceAbstract part:\nConcrete part:What types of messages \n(names + data types) are \ncommunicated with the service?\nHow are the methods invoked on the service?\nHow will the service be used on \nthe network for a protocol? \nSOAP-specific details are here.\nWhere is the service located in the network? \u2013 endpoint host(s) serviceoperation1\noperation2\nbinding\noperation1\noperation2\n \nFigure 8-9: The WSDL 2.0 building blocks.", "source": "Page 405", "chapter": "8"}
{"id": "c84440a62892-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  392 \n specify how the forward message carries the i nput parameters, as well as how the feedback \nmessage carries the result and the output para meters, or error message in case of failure. \nFor the abstract concepts of messages and opera tions, concrete counterparts are specified in the \nbinding  element. A binding mechanism represented in  WSDL by a binding element is used to \nmap the abstract definition of the Web service to a specific implementation using a particular \nmessaging protocol, data encoding model and underlying communication protocol. When the \nbinding is combined with an address where th e implementation can be accessed, the abstract \nendpoint becomes the concrete endpoint that service customers can invoke. \nThe WSDL 2.0 schema defines the following high -level or major elements in the language \n(Figure 8-10, using the notation introduced in Figure 6-5): \ndescription  \u2013 Every WSDL 2.0 document has a description  element as its top-most \nelement. This merely acts as a container for the rest of the WSDL document, \nand is used to declare namespaces that will be used throughout the document. \ntypes  \u2013 Defines the collection of message typ es that can be sent to the Web service or \nreceived from it. Each message type is defined by the message name and the", "source": "Page 406", "chapter": "8"}
{"id": "c84440a62892-1", "text": "received from it. Each message type is defined by the message name and the \ndata types used in the message. \ninterface  \u2013 The abstract interface of a Web service defined as a set of abstract operations. \nEach child operation  element defines a simple interaction between the \nclient and the service. The interaction is defined by specifying the messages \n(defined in the types  element) that can be sent or received in the course of a \nservice method invocation. \nbinding  \u2013 Contains details of how the elements in an abstract interface  are \nconverted into concrete representation in  a particular combination of data \nformats and transmission protocols. Must supply such details for every \noperation and fault in the interface . \nservice  \u2013 Specifies which interface  the service implements, and a list of endpoint \nlocations where this service can be accessed. wsdl:DescriptionType\n\uf02a\nwsdl:description\ntargetNamespacewsdl:import\nwsdl:include\nwsdl:types\nwsdl:interface\nwsdl:binding\nwsdl:service!!\n!wsdl:DescriptionType\n\uf02a\nwsdl:description\ntargetNamespacetargetNamespacewsdl:import wsdl:import\nwsdl:include wsdl:include\nwsdl:types wsdl:types\nwsdl:interface wsdl:interface\nwsdl:binding wsdl:binding", "source": "Page 406", "chapter": "8"}
{"id": "c84440a62892-2", "text": "wsdl:interface wsdl:interface\nwsdl:binding wsdl:binding\nwsdl:service wsdl:service!!\n!\n \nFigure 8-10: The XML schema for WSDL 2.0. Continued in Figure 8-12 and Figure 8-14.\n(WSDL version 2.0 schema definition available at: http://www.w3.org/ns/wsdl ).", "source": "Page 406", "chapter": "8"}
{"id": "39c9756c9287-0", "text": "Chapter 8 \uf0b7 Web Services 393\nAs Figure 8-10 shows, WSDL 2.0 also offers impor t or interface inheritance mechanisms that are \ndescribed below. Briefly, an import  statement brings in other namespaces into the current \nnamespace. An include  statement brings in other element declarations that are part of the same \n(current) namespace. In other words, the key di fference is whether the imported components are \nfrom the same or different namespace. \nAlthough the WSDL 2.0 schema does not indicate the required ordering of elements, the WSDL \n2.0 specification ( WSDL 2.0 Part 1 Core Language ) clearly states a set of constraints about how \nthe child elements of the description element shoul d be ordered. The required ordering is just as \nvisualized in Figure 8-10, although multiple elemen ts of the same type can be clustered together. \nDocumenting a Web Service Description \nA WSDL document is inherently only a partial description of a service. Although it captures the \nbasic mechanics of interacting with the servi ce\u2014the message types, transmission protocols, \nservice location, etc.\u2014in general, additional documentation will need to explain other \napplication-level requirements for its use. For example, such documentation should explain the", "source": "Page 407", "chapter": "8"}
{"id": "39c9756c9287-1", "text": "application-level requirements for its use. For example, such documentation should explain the \npurpose and use of the service, the meanings of all messages, constraints on their use, and the \nsequence in which operati ons should be invoked. \nThe documentation  element (Figure 8-11) allows the WSDL author to include some human-\nreadable documentation inside a WSDL document. It is also a convenient place to reference any \nadditional external documentation that a client de veloper may need in order to use the service. \nThe documentation  element is optional and can appear as a sub-element of any WSDL \nelement, not only at the beginning of a WSDL document, since all WSDL elements are derived \nfrom wsdl:ExtensibleDocumentedType , which is a complex type containing zero or \nmore documentation  elements. This fact is omitted, for simplicity, in the Schema diagrams in \nthis section. \nImport and Include for Reuse of WSDL 2.0 Descriptions \nThe include  element (Figure 8-10) helps to modulari ze the Web service descriptions so that \nseparation of various service definition component s from the same target  namespace are allowed \nto exist in other WSDL documents which can be  used or shared across Web service descriptions. \nThis allows us to assemble a WSDL namespace from several WSDL documents that define", "source": "Page 407", "chapter": "8"}
{"id": "39c9756c9287-2", "text": "This allows us to assemble a WSDL namespace from several WSDL documents that define \ncomponents for that namespace. Some elements w ill be defined in the given document (locally) \nand others will be defined in the docum ents that are included in it via the include  element. The \neffect of the include  element is cumulative so that if document A includes document B which wsdl:documentationwsdl:DocumentationType\n?\n##other: any\n##other: anyAttributewsdl:documentationwsdl:DocumentationType\n?\n##other: any\n##other: anyAttribute\n \nFigure 8-11: The XML schema for WSDL 2.0 documentation  element.", "source": "Page 407", "chapter": "8"}
{"id": "fef7f3eee7e3-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  394 \n in turn includes document C, then the components defined by document A comprise all those \ndefined in A, B, and C. \nIn contrast, the import  element does not define any components. Instead, the import  element \ndeclares that the components defined in this document refer to components that belong to a \ndifferent namespace. No file is being imported; just a namespace is imported from one schema to \nanother. If a WSDL document contains definitions  of components that refer to other namespaces, \nthen those namespaces must be declared via an import  element. The import  element also has \nan optional location  attribute that is a hint to the processor where the definitions of the \nimported namespace can be found. However, th e processor may find the definitions by other \nmeans, for example, by using a catalog. \nAfter processing any include  elements and locating the components that belong to any \nimport ed namespaces, the WSDL component mode l for a WSDL document will contain a set \nof components that belong to this document\u2019s namespace and any imported namespaces. These \ncomponents will refer to each other, usually via QName  references. A WSDL document is invalid \nif any component reference cannot be resolved, wh ether or not the referenced component belongs \nto the same or a different namespace.", "source": "Page 408", "chapter": "8"}
{"id": "fef7f3eee7e3-1", "text": "to the same or a different namespace. \nThe topic of importing is a bit more complex since two types of import  statements exist: XML \nSchema imports  and WDSL imports . Their respective behaviors are not quite identical and the \ninterested reader should consult WSDL 2.0 specifications for details. \n8.3.2 Defining a Web Service\u2019s Abstract Interface \nEach operation specifies the types  of messages that the service can send or receive as part of \nthat operation. Each operation al so specifies a message exchange pattern  that indicates the \nsequence in which the associated messages are to be transmitted between the parties. For \nexample, the in-out  pattern (described below) indicates that if the client sends a message in to the \nservice, the service will either send a reply message back out to the client (in the normal case) or \nit will send a fault message back to th e client (in the case of an error). \nFigure 8-12 shows the XML syntax summary of the interface  element, simplified by \nomitting optional <documentation>  elements. The interface  element has two optional \nattributes: styleDefault  and extends . The styleDefault  attribute can be used to \ndefine a default value for the style  attributes of all operation  sub-elements under this \ninterface . Interfaces are referred to by QName  in other components such as bindings.", "source": "Page 408", "chapter": "8"}
{"id": "fef7f3eee7e3-2", "text": "interface . Interfaces are referred to by QName  in other components such as bindings. \nThe optional extends  attribute allows an interface to exte nd or inherit from one or more other \ninterfaces. In such cases, the in terface contains the operations of the interfaces it extends, along \nwith any operations it defines directly. Two things about extending interfaces deserve some \nattention. First, an inheritance loop (or infinite r ecursion) is prohibited: the interfaces that a given \ninterface extends must not themselves extend that interface either directly or indirectly. \nSecond, we must explain what happens when operations from two different interfaces have the \nsame target namespace and operation name. There ar e two cases: either the component models of \nthe operations are the same, or they are different . If the component models are the same (per the \ncomponent comparison algorithm defined in WSDL 2.0 Part 1 Core Language ) then they are \nconsidered to be the same operation, i.e., they are collapsed into a single operation, and the fact", "source": "Page 408", "chapter": "8"}
{"id": "c83c29604b48-0", "text": "Chapter 8 \uf0b7 Web Services 395\nthat they were included more than once is not considered an error. (For operations, component \nequivalence basically means that the two opera tions have the same set of attributes and \ndescendants.) In the second case, if two operations ha ve the same name in the same WSDL target \nnamespace but are not equivalent, then it is an e rror. For the above reason, it is considered good \npractice to ensure that all operations within  the same target namespace are named uniquely. \nFinally, since faults can also  be defined as children of the interface  element (as described in \nthe following sections), the same name-co llision rules apply to those constructs. \nThe interface operation  element has a required name  attribute, while pattern , safe , and \nstyle  are optional attributes. \nWSDL Message Exchange Patterns \nMessage exchange patterns (MEPs) define the se quence and cardinality of messages within an \noperation. Eight types of message patterns are de fined in the WSDL 2.0 specifications, but this \nlist is not meant to be exhaustive and more patte rns can be defined for particular application \nneeds. Depending on how the first message in th e MEP is initiated, the eight MEPs may be", "source": "Page 409", "chapter": "8"}
{"id": "c83c29604b48-1", "text": "grouped into two groups: in-bound MEPs , for which the service receiv es the first message in the \nexchange, and out-bound MEPs , for which the service sends out the first message in the \nexchange. A service may use out-bound MEPs to adver tise to potential clients that some new data \nwill be made available by the service at run time. \nWSDL message exchange patterns use fault genera tion rules to indicate the occurrence of faults. \nMessage exchange may be terminated if fault gene ration happens, regardless of  standard rule sets. \nThe following standard rule set outlines the behavior of fault generation: wsdl:InterfaceOperationType wsdl:InterfaceType\noutfaultinfaultoutputinput\n\uf02a\npatternname\n?\n?safe\nstyle?operation\nwsdl:interface\uf02a\nfault\n##other: any\nextendsname\n?\nstyleDefault?\n##other: any!!wsdl:InterfaceOperationType wsdl:InterfaceType\noutfaultinfaultoutputinput\n\uf02a\npatternname\n?\n?safe\nstyle?operation\nwsdl:interface wsdl:interface\uf02a\nfault\n##other: any\nextendsname\n?\nstyleDefault?\n##other: any!!\nFigure 8-12: The XML schema for WSDL 2.0 interface  element.", "source": "Page 409", "chapter": "8"}
{"id": "aa279c06bc03-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  396 \n \uf0b7 Fault Replaces Message\u2014any message after the first in the pattern may be replaced with a \nfault message, which must  have identical direction and be delivered to the same target node \nas the message it replaces \n\uf0b7 Message Triggers Fault\u2014any message, including the first in the pattern, may trigger a fault \nmessage, which must  have opposite direction and be deliv ered to the originator of the \ntriggering message \n\uf0b7 No Faults\u2014faults must not be propagated \npattern=\"http://www.w3.org/ns/wsdl/in-out\"   This  line specifies that this operation will use the \nin-out pattern as described above. WSDL 2.0 uses URIs to identify message exchange patterns in \norder to ensure that the identifiers are globa lly unambiguous, while also permitting future new \npatterns to be defined by anyone. (However, just because someone defines a new pattern and \ncreates a URI to identify it, that  does not mean that other WSDL 2.0 processors will automatically \nrecognize or understand this pattern. As with an y other extension, it can only be used among \nprocessors that do recognize and understand it.) \n8.3.3 Binding a Web Service Implementation", "source": "Page 410", "chapter": "8"}
{"id": "aa279c06bc03-1", "text": "8.3.3 Binding a Web Service Implementation \nSeveral service providers may implement the same abstract interface. Client Service<input>\nIn-Only (no faults)Client Service<input>\nRobust In-Only (message triggers fault)\nClient Service\n<output>\nOut-Only (no faults)Client Service\n<output>\nRobust Out-Only (message triggers fault)\nClient Service<output>\n<input>\nOut-In (fault replaces message)Client Service<output>\nOut-Optional-In (message triggers fault)\nClient Service<input>\n<output>\nIn-Out (fault replaces message)Client Service<input>\nIn-Optional-Out (message triggers fault)A one-way operation:\nA request-response operation:A notification operation:\nA solicit-response operation:\n<output>opt<input>opt\uf081\n\uf082\uf081\n\uf081\uf081\n\uf081\uf081\n\uf081\uf081\uf082\n\uf082\uf082\nFigure 8-13: WSDL Message Exchange Patterns (MEPs) with their fault propagation rules.", "source": "Page 410", "chapter": "8"}
{"id": "36b6575558f8-0", "text": "Chapter 8 \uf0b7 Web Services 397\nFigure 8-14 \nService \nEach endpoint must also reference a previously defined binding  to indicate what protocols and \ntransmission formats are to be used at that e ndpoint. A service is only permitted to have one \ninterface . \nFigure 8-15 port describes how a binding is de ployed at a particular network endpoint \n \n8.3.4 Using WSDL to Generate SOAP Binding \nDevelopers can implement Web services logic w ithin their applications by incorporating \navailable Web services without having to build new applications from scratch. The mechanism \nthat makes this possible is the Proxy design pattern , which is described in Section 5.2.2 above and \nalready employed for distributed computing in S ection 5.4. Proxy classes enable developers to \nreference remote Web services and use their functiona lity within a local application as if the data \nthe services return was generated in the local memory space. \nFigure 8-16 illustrates how WSDL is used to generate WSDL Web service description from the \nWeb-service\u2019s interface class. Given the WSDL document, both client- and server side use it to wsdl:BindingOperationType\noutfaultinfaultoutputinput\n\uf02a\nref##other: anywsdl:BindingType\noperation\nwsdl:binding wsdl:binding\uf02a", "source": "Page 411", "chapter": "8"}
{"id": "36b6575558f8-1", "text": "operation\nwsdl:binding wsdl:binding\uf02a\nfault\n##other: any\ntypename\n?\ninterface\nFigure 8-14: The XML schema for WSDL 2.0 binding  element. \nwsdl:EndpointType\n\uf02awsdl:ServiceType\nwsdl:service wsdl:service+\n##other: any\ninterfacename\n?endpoint!\n##other: any ##other: any ##other: any\nbindingname\naddress\nFigure 8-15: The XML schema for WSDL 2.0 service  element.", "source": "Page 411", "chapter": "8"}
{"id": "2d8f664e94d6-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  398 \n generate the stub and skeleton proxies, respectiv ely. These proxies interact with the SOAP-based \nmiddleware. \nWSDL code generator tools (one of which is re viewed in Section 8.5 below) allow automatic \ngeneration of Web services, automatic generati on of WSDL documents, and invocation of Web \nservices. \n \n8.3.5 Non-functional Descriptions and Beyond WSDL \nWDSL only describes functional characteristics  of a particular Web service how to invoke it. But \nthis is only part of the picture and will be suffici ent only for standalone Web services that will be \nused individually. In some cases, non-functional characteristics  (such as performance, security, \nreliability) may be important, as well. In a gene ral case, the service consumer needs to know: \n\uf0b7 How to invoke the service? (supported by WSDL, described above) \n\uf0b7 What are the characteristics of the service? (not supported by WSDL) \n- Is a service more secure than the others are? \n- Does a particular provider guarantee a faster response or a more scalable and \nreliable/available service? \n- If there is a fee for the service, how does billing and payment processing work? Service requestor Service providerWSDL document\nof service provider", "source": "Page 412", "chapter": "8"}
{"id": "2d8f664e94d6-1", "text": "of service provider\nApplication object \n(client)\nSOAP-based \nmiddlewareStubApplication object \n(Web service)\nSOAP-based \nmiddlewareSkeleton1\n3 2\nWSDL compiler\n(client side)WSDL compiler\n(server side)WSDL \ngenerator\nFigure 8-16: From a Programming Interfa ce to WSDL and back to the Program:  \nStep \uf08c: generate WSDL documents from interface classes or APIs.  \nStep \uf08d: generate server-side stub from the WSDL document.  \nStep \uf08e: generate client-side stub from the WSDL document.", "source": "Page 412", "chapter": "8"}
{"id": "f7b726cbec42-0", "text": "Chapter 8 \uf0b7 Web Services 399\n\uf0b7 In what order should related Web services and their operations be invoked?  (not \nsupported by WSDL) \n- How can services be composed to create a macr o service (often referred to as service \norchestration)? \nThe diagram in Figure 8-17 lists the different asp ects of Web service description. WSDL focuses \non describing individual Web services, and interface  and implementation descriptions  are the \ncentral elements of describing individual services. Policy  and presentation  are two concepts that \nare not in the scope of the core WSDL specificati on since more standardization work needs to be \ndone here. \nWhen considering service relationships, or ser vice interactions, programmatic approaches \n(composition ) vs. configuration-oriented agreements ( orchestration ) have to be distinguished. \nOrchestration is a synonym for choreography. An emerging specification is the Business Process \nExecution Language for Web Services (BPEL4WS). \nFigure 8-17 lists also service  and business level agreements , both not yet defined in detail. \nSome Web services are so simple that they do not need the complete description as shown in \nFigure 8-17. A service consumer invoking a standal one service is probably not interested in how", "source": "Page 413", "chapter": "8"}
{"id": "f7b726cbec42-1", "text": "the service is orchestrated with other services. Sometimes the consumer does not care about non-\nfunctional characteristics, such as performance or reliability. In ad dition, non-functional \ncharacteristics may be irrelevant if onl y one provider exists for a service. \n \n8.4 UDDI for Service Discovery and \nIntegration \n \nThe discovery agency level connection is a publis h/find mechanism (Figure 8-1), either used at \nbuild-time or runtime. Universal Description, Discovery, and Integration  (UDDI) is an Business level agreements\nService level agreements\nComposition\nOrchestration\nPresentation\nPolicy\nImplementation description\nInterface description\nXML SchemaService\nDescriptionService Broker\nUDDI RegistryService Broker\nUDDI Registry\nService\nProviderService\nProviderService\nCustomerService\nCustomer3.  Bind/Use2.  Find/Search\n1.  Publish/RegisterService\nDescription\nIndividual service\ndescriptionService\nrelationships\nFigure 8-17: Web service description stack.", "source": "Page 413", "chapter": "8"}
{"id": "10f56c7f3942-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  400 \n implementation of the discovery agency. The UDDI registry offers a common repository to which \nservice providers publish service information, and which service requestors inquire to find service \ninformation. UDDI defines a structure for the re gistry, together with a publishing and inquiry \nApplication Programming Interface (API) for accessing the registry. If a service repository is used at runtime, we refer to this mode as dynamic  Web services. \n \n  \n8.5 Developing Web Services with Axis \n As the brief review above illustrates, the t echnology behind Web services is quite complex. \nLuckily, most Web services developers will not have  to deal with this infrastructure directly. \nThere are a number of Web services development toolkits to assist with developing and using Web services. There are currently many tools that  automate the process of generating WSDL and \nmapping it to programming languages (Figure 8-16). One of the most popular such tools is Axis. \nApache Axis ( Apache EXtensible Interaction System, online at: http://ws.apac he.org/axis/ ) is \nessentially a SOAP engine \u2014a framework for constructing SOAP processors such as clients, \nservers, gateways, etc. The current version of Ax is is written in Java, but a C++ implementation", "source": "Page 414", "chapter": "8"}
{"id": "10f56c7f3942-1", "text": "of the client side of Axis is be ing developed. Axis includes a serve r that plugs into servlet engines \nsuch as Apache Tomcat, extensive support for WS DL, and tools that generate Java classes from \nWSDL. \nAxis provides automatic serialization/deserializ ation of Java Beans, including customizable \nmapping of fields to XML elements/attribut es, as well as automatic two-way conversions \nbetween Java Collections and SOAP Arrays. \nAxis also provides automatic WSDL generation from deployed services using Java2WSDL tool \nfor building WSDL from Java classes. The generated WSDL document is used by client \ndevelopers who can use WSDL2Java tool for building Java proxies and skeletons from WSDL \ndocuments. \nAxis also supports session-oriented services, vi a HTTP cookies or transport-independent SOAP \nheaders. \nThe basic steps for using Apach e Axis follow the process described in Section 8.3.4 above \n(illustrated in Figure 8-16). The reader may also wish to compare it to the procedure for using \nJava RMI, described in Section 5.4.2 above. The goal is to establish the interconnections shown \nin Figure 8-2. \n8.5.1 Server-side Development with Axis \nAt the server side (or the Web servi ce side), the steps are as follows:", "source": "Page 414", "chapter": "8"}
{"id": "ccead09513de-0", "text": "Chapter 8 \uf0b7 Web Services 401\n1. Define Java interface of the Web service  (and a class that implements this interface) \n2. Generate the WDSL document  from the service\u2019s Java interface (Java \uf0ae WSDL) \n3. Generate the skeleton  Java class (server-side proxy) from the WSDL document \n(WSDL\uf020\uf0ae\uf020Java) \n4. Modify the skeleton proxy to interact with  the Java class that implements the Java \ninterface (both created in Step 1 above) \nGoing back to the project for Web-based Stock Forecasters  (Section 1.5.2), I will now show how \nto establish the interconnections shown in Figure 8-2,  so that a client could remotely connect to \nthe Web service and request a price forecast for st ocks of interest. The details for each of the \nabove steps for this particular example are as follows. \nStep 1: Define the server object interface \nThere are three key Java classes (from the point  of view of Web services) responsible for \nproviding a stock price forecast and tr ading recommendation (Figure 8-18(b)): \nForecastServer.java , its implementation ( ForecastServerImpl.java ) and \nParamsBean.java , a simple container object used to transfer information to and from the", "source": "Page 415", "chapter": "8"}
{"id": "ccead09513de-1", "text": "ParamsBean.java , a simple container object used to transfer information to and from the \nWeb service. The structure of other packages in Figure 8-18(a) is not important at this point, since \nall we care about is the Web service interface defi nition, which will be seen by entities that want \nto access this Web service. \nThe Java interface  ForecastServer.java  is given as: \n \nListing 8-4: Java interface of the forecasting Web service. \n 1   package stock_analyst.interact; \n 2 \n 3   import java.rmi.RemoteException; \n 4 \n 5   public interface ForecastServer { \n 6 \n 7     public void getPriceForecast( ParamsBean args )  \n 8       throws RemoteException; \n 9 \n10     public void getRecommendation( ParamsBean args )  \n11       throws RemoteException; \n12   }", "source": "Page 415", "chapter": "8"}
{"id": "6e2ce2f20f0f-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  402 \n The code description is as follows: \nLine 1: Java package where the interface class is located. \nLine 2: Exception RemoteException  may be thrown by the Web service methods. \nLines 7\u20138: Method getPriceForecast()  takes one input argument, which is a Java \nBean used to transport information to and fro m the Web service. The method return type is \nvoid , which implies that any result values will be returned in the args  parameter. \nLines 10\u201311: Method getRecommendation()  signature, defined similarly as for the \nmethod getPriceForecast() . \n Web interactionGathering\nstock information\nPattern learning\n& recognition\n(e.g., neural network)stock_analyst\ninteract\nInternetdatabase(a)\nanalyzecollect\nInternet(b)\nWeb service\nproxies (stub/skeleton)interact\nParamsBean\n\u2013 parameters_ : HashMap<String, Object>\n+  addParam(String, Object)\n+  getParam(String) : Object+  getParams( ) : <String, Object>wsGenerated by Axis\nWSDL2Java\nForecastServer\n+  getPriceForecast(args : ParamsBean)\n+  getRecommendation(args : ParamsBean) \nForecastServerImpl\n#  numOfTrials_ : long\n#  maxNumOfTrials_ : long", "source": "Page 416", "chapter": "8"}
{"id": "6e2ce2f20f0f-1", "text": "#  numOfTrials_ : long\n#  maxNumOfTrials_ : long\n+  getPriceForecast(args : ParamsBean)\n+  getRecommendation(args : ParamsBean) Internet(b)\nWeb service\nproxies (stub/skeleton)interact\nParamsBean\n\u2013 parameters_ : HashMap<String, Object>\n+  addParam(String, Object)\n+  getParam(String) : Object+  getParams( ) : <String, Object>ParamsBean\n\u2013 parameters_ : HashMap<String, Object>\n+  addParam(String, Object)\n+  getParam(String) : Object+  getParams( ) : <String, Object>wsGenerated by Axis\nWSDL2Java\nForecastServer\n+  getPriceForecast(args : ParamsBean)\n+  getRecommendation(args : ParamsBean) ForecastServer\n+  getPriceForecast(args : ParamsBean)\n+  getRecommendation(args : ParamsBean) \nForecastServerImpl\n#  numOfTrials_ : long\n#  maxNumOfTrials_ : long\n+  getPriceForecast(args : ParamsBean)\n+  getRecommendation(args : ParamsBean) ForecastServerImpl\n#  numOfTrials_ : long\n#  maxNumOfTrials_ : long\n+  getPriceForecast(args : ParamsBean)\n+  getRecommendation(args : ParamsBean)", "source": "Page 416", "chapter": "8"}
{"id": "6e2ce2f20f0f-2", "text": "+  getRecommendation(args : ParamsBean) \nFigure 8-18: (a) UML package diagram for the example application. (b) Web-service\nrelated classes.", "source": "Page 416", "chapter": "8"}
{"id": "0e95601eb088-0", "text": "Chapter 8 \uf0b7 Web Services 403\nStep 2: Java2WSDL \u2013 Generate a WSDL document from the \ngiven stock-forecasting Java interface \nNow that we defined the Java interface for the st ock-forecasting service, it is time to generate a \nWSDL (Web Service Definition Language) file, which will describe our web service in a \nstandard XML format. For this, we will use an Apache Axis command line tool Java2WSDL. A \ndetailed documentation on Java2WSDL, its usage and parameters can be found at the Axis \nwebsite. \n% java org.apache.axis.wsdl.Java2WSDL  \n     -o wsdl/interact.wsdl       -l \"http://localhost:8080/axis/services/interact\"       -n \"urn:interact\"       -p \"stock_analyst.interact\" \"urn:interact\"  \n     stock_analyst.interact.ForecastServer \nJava2WSDL tool will generate a standard WSDL f ile, which is an XML representation of a given \ninterface (ForecastServer.java  in our case). We tell the program the information that it \nneeds to know as it builds the file, such as: \n\uf0b7 Name and location of output WSDL file ( -o wsdl/interact.wsdl  )", "source": "Page 417", "chapter": "8"}
{"id": "0e95601eb088-1", "text": "\uf0b7 Location URL of the Web service  \n( -l http://localhost:8080/axis/services/interact  ) \n\uf0b7 Target namespace for the WSDL ( -n urn:interact  ) \n\uf0b7 Map Java package to namespace ( stock_analyst.interact  \uf0ae urn:interact  ) get\nprice forecast\ngetPriceForecast()Delphi method facilitator\n: Service Requestor\n: FcastSoapBindingImpl\ninitializeanalyst\n: ForecastServerImpldata tracking\nand machine learning\n: Backend\nhttp\n: Transporthttp\n: Transport\nwsdl/interact.wsdl\n: WSDL: FcastSoapBindingStub\ncreate\nobtain\npublish\nfind\ndo\nforecast2\n3discovery agency\n: UDDI, WSIL\ngetPriceForecast()41\nFigure 8-19: The steps in Apache Axis for establishing the interconnections of a Web\nservice, overlaid on Figure 8-2. (Note that th e discovery agency/UDDI is not implemented.)", "source": "Page 417", "chapter": "8"}
{"id": "9818b2d57538-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  404 \n \uf0b7 The fully qualified Java interface of the Web service itself  \n( stock_analyst.interact.ForecastServer  ) \n \nStep 3: WSDL2Java \u2013 Generate server-side wrapper code \n(This step generates code for both ser ver and client side, as seen below.) \nOur next step is to take the WSDL, synthesized in  step 2, and generate all of the glue code for \ndeploying the service. The WSDL2Java Axis tool comes to our aid here. Complete \ndocumentation on this tool can be found at the Axis website. \njava org.apache.axis.wsdl.WSDL2Java  \n     -o src/       -d Session  \n     -s  \n     -p stock_analyst.interact.ws       wsdl/interact.wsdl \nOnce again, we need to tell our tool some information for it to proceed: \n\uf0b7 Base output directory ( -o src/  ) \n\uf0b7 Scope of deployment ( Application , Request , or Session  ) \n\uf0b7 Turn on server-side generation ( -s ) \u2014 we would not do this if we were accessing an \nexternal Web service, as we would then just need the client stub \n\uf0b7 Package to place code ( -p stock_analyst.interact.ws  )", "source": "Page 418", "chapter": "8"}
{"id": "9818b2d57538-1", "text": "\uf0b7 Package to place code ( -p stock_analyst.interact.ws  ) \n\uf0b7 Name of WSDL file used to generate all this code ( wsdl/interact.wsdl  ) \nFor separating the automatically generated code from the original code, we store it a new Web \nservice package \u201c stock_analyst.interact.ws \u201d, shown in Figure 8-18(b). After running \nthe WSDL2Java code generator, we get the following files under \nsrc/stock_analyst/interact/ws : \n\uf0b7 FcastSoapBindingImpl.java   \nThis is the implementation code for our web ser vice. We will need to edit it, to connect it \nto our existing ForecastServerImpl  (see Step 4 below). \n\uf0b7 ForecastServer.java   \nThis is a remote interface to the stock fo recasting system (extends Remote, and methods \nfrom the original ForecastServer.j ava throw RemoteExceptions).  \n\uf0b7 ForecastServerService.java   \nService interface of the Web services. \n\uf0b7 ForecastServerServiceLocator.java   \nA helper factory for retrieving a handle to the service. \n\uf0b7 FcastSoapBindingStub.java   \nClient-side stub code that encapsulates client access.", "source": "Page 418", "chapter": "8"}
{"id": "1d846e7c8a53-0", "text": "Chapter 8 \uf0b7 Web Services 405\n\uf0b7 ParamsBean.java   \nA copy of our bean used to transfer data. \n\uf0b7 deploy.wsdd   \nDeployment descriptor that we pass to Ax is system to deploy these Web services. \n\uf0b7 undeploy.wsdd   \nDeployment descriptor that will un-deploy the Web services from the Axis system. \nAs seen above, some of these files belong to the client side and will be used in Section 8.5.2 \nbelow. \nStep 4: Tune-up \u2013 Modify FcastSoapBindingImpl.java  to call \nserver implementation code \nWe need to tweak one of the output source files to tie the web service to our implementation code \n(ForecastServerImpl.java ). Since we passed a mere interface to the Java2WSDL tool, \nthe generated code has left out the implementation.  We need to fill out the methods to delegate \nthe work to our implementation object ForecastServerImpl. \nFcastSoapBindingImpl.java  is waiting for us to add the stuff into the methods that it \ncreated. The lines that should be added ar e highlighted in boldf ace in Listing 8-5: \n \nListing 8-5: FcastSoapBindingImpl.java \u2013 Java  code automatically generated by Axis, \nwith the manually added modifications highlighted in boldface.", "source": "Page 419", "chapter": "8"}
{"id": "1d846e7c8a53-1", "text": "with the manually added modifications highlighted in boldface. \n 1  package stock_analyst.interact.ws; \n 2 \n 3  import stock_analyst.interact.ForecastServerImpl; \n 4 \n 5  public class FcastSoapBindingImpl implements \n 5a     stock_analyst.interact.ForecastServer { \n 6 \n 7    ForecastServerImpl analyst;  \n 8 \n 9    public FcastSoapBindingImpl() throws java.rmi.RemoteException {  \n10      analyst = new ForecastServerImpl();  \n11    } \n12 \n13    public void getPriceForecast( \n14        stock_analyst.interact.ParamsBean inout0 \n15      ) throws java.rmi.RemoteException { \n16        return analyst.getPriceForecast( inout0 );  \n17    } \n18 \n19    public void getRecommendation( \n20        stock_analyst.interact.ParamsBean inout0 \n21      ) throws java.rmi.RemoteException { \n22        return analyst.getRecommendation( inout0 );  \n23    } \n24  }", "source": "Page 419", "chapter": "8"}
{"id": "55792d472231-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  406 \n Step 5: Compile and deploy \nWe first need to compile and compress our ne wly generated Web service, including both the \noriginal code and the automatica lly generated Web service code: \n    javac -d bin src/stock_analyst.interact.ws/*.java \n \n    cd bin  \n    jar -cvf ../stock_analyst.jar * \n \n    cd  .. \nFinally, we copy the JAR file into Tomcat library path visible by Axis and deploy it: \n    cp stock_analyst.jar $TOMCAT_HOME/webapps/axis/WEB-INF/lib/  \n          --reply=yes \n \n    java org.apache.axis.client.AdminClient  \n          -l \"http://localhost:8080/axis/services/AdminService\" \n          src/stock_analyst/interact/ws/deploy.wsdd \nAdmin client is yet another command line tool provided by Apache Axis, which we can use to do \ntasks such as deployment, un-deployment, and listing the current deployments. We pass the \ndeployment descriptor to this program so it can do its work. \nNow our Stock Forecasting Web Service is up and running on the server. \n8.5.2 Client-side Development with Axis", "source": "Page 420", "chapter": "8"}
{"id": "55792d472231-1", "text": "8.5.2 Client-side Development with Axis \nAt the client side (or the service cons umer side), the steps are as follows: \n1. Generate the stub Java class (server-side SOAP proxy) from the WSDL document \n2. Modify the client code to invoke the stub (created in Step 1 above) \n \nStep 1: WSDL2Java \u2013 Gene rate client-side stub \nThe Step 1 is the same as Step 3 for the serve r side, except that this time we omit the option -s \non the command line. We have seen above that WS DL2Java generated the client-side stub code \nFcastSoapBindingStub.java  that encapsulates client access. \nStep 2: Modify the client code to invoke the stub \nNormally, a client program would not instantiate a stub directly. It would instead instantiate a \nservice locator and call a get method which returns a stub. Recall that \nForecastServerServiceLocator.java  was generated in Step 3 of the server side. This \nlocator is derived from the service  element in the WSDL document. WSDL2Java generates \ntwo objects from each service  element. \nThe service interface defines a get method for each endpoint  listed in the service  element \nof the WSDL document. The locator is the implemen tation of this service interface. It implements", "source": "Page 420", "chapter": "8"}
{"id": "55792d472231-2", "text": "these get methods. It serves as a locator for obtain ing Stub instances. The Service class will", "source": "Page 420", "chapter": "8"}
{"id": "5b29ee0e4959-0", "text": "Chapter 8 \uf0b7 Web Services 407\ngenerate, by default, a Stub that points to th e endpoint URL described in the WSDL document, \nbut you may also specify a different URL when you ask for the endpoint . \nA typical usage of the stub classes would be as follows Listing 8-6: \n \nListing 8-6: Example of the Delphi method facilitator client for the project Web-based \nStock Forecasters  (Section 1.5.2). \n 1  package facilitator.client; \n 2 \n 3  import stock_analyst.interact.ws.ForecastServerService; \n 4  import stock_analyst.interact.ws.ForecastServerServiceLocator; \n 5 \n 6  public class Facilitator { \n 7    public static void main(String [] args) throws Exception { \n 8      // Make a service \n 9      ForecastServerService service1 = \n 9a       new ForecastServerServiceLocator(); \n10 \n11      // Now use the service to get a stub which implements the SDI. \n12      ForecastServer endpoint1 = service1.getForecastServer(); \n13 \n14      // Prepare the calling parameters \n15      ParamsBean args = new ParamsBean(); \n16      args.addParam(\"...\", \"...\"); // 1st parameter", "source": "Page 421", "chapter": "8"}
{"id": "5b29ee0e4959-1", "text": "16      args.addParam(\"...\", \"...\"); // 1st parameter \n17      ... etc.  ...                // 2nd parameter \n18 \n19      // Make the actual call \n20      try { \n21        endpoint1.getRecommendation(args); \n22        args.getParam(\"result\", ...); // retrieve the recommendation \n23        // ... do something with it ... \n24      } catch (RemoteException ex) { \n25        // handle the exception here \n26      } \n27      ... call endpoint2 (i.e. another forecaster web service) \n28    } \n29  } \n \nThe above example shows how the facilitator woul d invoke a single Web service. As described in \nSection 1.5.2, the facilitator would try to cons ult several forecasters (Web services) for their \nprognosis and then integrate their answers into a single recommendation for the user. \n \n8.6 OMG Reusable Asset Specification \n \nhttp://www.rational.com/ras/index.jsp  http://www.sdtimes.com/news/092/story4.htm  \nhttp://www.eweek.com/artic le2/0,4149,1356550,00.asp", "source": "Page 421", "chapter": "8"}
{"id": "3cb5430fe3cd-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  408 \n http://www.cutter.com/res earch/2002/edge020212.html  \nhttp://www.computerworld.co.nz/ news.nsf/0/B289F477F155A539C C256DDE00631AF8 ?OpenDocument   \n \n  \n8.7 Summary and Bibliographical Notes \n SOAP is an XML-based communication protocol  and encoding format for inter-application \ncommunication. SOAP provides technology for distributed object communication. Given the \nsignature of a remote method (Web service) and the rules for invoking the method, SOAP allows for representing the remote method call in XML. SOAP supports loose-coupling of distributed \napplications that interact by exchanging one -way asynchronous messages among each other. \nSOAP is not aware of the semantics of the messages being exchanged through it. Any communication pattern, including request-response, h as to be implemented by the applications \nthat use SOAP for communication. The body of  the SOAP message can contain any arbitrary \nXML content as the message payload. SOAP is  widely viewed as the backbone to a new \ngeneration of cross-platform cross-language di stributed computing applications, termed Web \nservices. \nService description plays a key role in a service- oriented architecture (SOA) in maintaining the \nloose coupling between the service customers and th e service providers. Service description is a", "source": "Page 422", "chapter": "8"}
{"id": "3cb5430fe3cd-1", "text": "loose coupling between the service customers and th e service providers. Service description is a \nformal mechanism to unambiguously describe a Web service for the service customers. A Service \ndescription is involved in each of the three operati ons of SOA: publish, fi nd and bind. In this \nchapter I reviewed the WSDL version 2.0 standard  for describing Web services and how it is used \nto provide functional description of the Web services SOA model. There are other standards such \nas Web Services Flow Language (WSDL) and WS EL (Web Services Endpoint Language) which \nare used to describe the non functional aspects of  Web services. The reader interested in these \nshould consult the relevant Web sources. \nWSDL 2.0 is the current standard at the time of this writing. It is somewhat different from the \nprevious version WSDL 1.1, and the interested reader may wish to consult [Dhesiaseelan, 2004] \nfor details. Although WSDL 1.1 is currently  more widely supported in web service \nimplementations, I chose to present WSDL 2.0 because it is simpler and more recent. Briefly, a \nreader familiar with WSDL 1.1 will notice that WSDL 2.0 does not have message  elements.", "source": "Page 422", "chapter": "8"}
{"id": "3cb5430fe3cd-2", "text": "These are specified using the XML Schema type system in the types  element. Also, \nportType  element is renamed to interface  and port  is renamed to endpoint . \nWeb Services Inspection Language  (WSIL)is a lightweight alternative to UDDI. \n \nThe W3C website and recommendation documents for SOAP are at: http://www.w3.org/TR/soap/ . \nThe latest is SOAP version 1.2 specification. This document has been produced by the XML \nProtocol Working Group, which is part of the Web Services Activity.", "source": "Page 422", "chapter": "8"}
{"id": "05e46dee4962-0", "text": "Chapter 8 \uf0b7 Web Services 409\nhttp://soapuser.com/ \n \nWSDL at: http://www.w3.org/TR/wsdl20   \n \n[Armstrong et al., 2005] \nA. Dhesiaseelan, \u201cWhat\u2019s new in WSDL 2.0,\u201d published on XML.com, May 20, 2004. Available \nat: http://webservices.xml .com/lpt/a/ws/2004 /05/19/wsdl2.html   \n \n \nProblems \n \nSection 8.3 \n7.1 WSDL, although flexible, is rather complex and verbose. Suppose you will develop a set of \nWeb services for a particular domain, e.g., tr avel arrangements. Define your own service \nlanguage and then use XSLT to generate the WSDL. \n 7.2 Tbd", "source": "Page 423", "chapter": "8"}
{"id": "6a2ea322993e-0", "text": "410 Contents \n9.1 Aspect-Oriented Programming \n9.1.1   \n9.1.2   9.1.3   \n9.1.4   \n9.1.5   9.1.6   \n9.1.7   \n9.1.8   \n9.2 OMG MDA \n9.2.1   9.2.2   9.2.3   \n9.2.4  \n9.3 Autonomic Computing \n9.3.1   9.3.2   \n9.3.3   9.3.4   \n9.2.3   \n9.4 Software-as-a-Service (SaaS) \n9.4.1   \n9.4.2   9.4.3   9.4.4 \n  \n9.5 End User Software Development \n9.5.1   \n9.5.2   \n9.5.3   9.5.4 \n \n9.6 The Business of Software \n9.6.1   \n9.6.2   \n9.6.3   \n9.7 Summary and Bibliographical Notes \n  \nChapter 9  \nFuture Trends \n \n \n\u201cMost people are drawn into extrapolating from current trends", "source": "Page 424", "chapter": "9"}
{"id": "6a2ea322993e-1", "text": "\u201cMost people are drawn into extrapolating from current trends \nand are thus surprised when things change.\u201d \n\u2014Buttonwood ( The Economist , January 3rd 2009) \nIt is widely recognized that software engineering is not a \nmature discipline, unlike other branches of engineering. However, this does not imply that great feats cannot be \naccomplished with the current methods and techniques. For \nexample, the art of building such elaborate structures as cathedrals was perfected during the so called \u201cdark ages,\u201d \nbefore the invention of calculus, which is a most basic tool of \ncivil engineering. What the di scipline of civil engineering \nenabled is the wide-scale, mass-market building of complex \nstructures, with much smalle r budgets and over much shorter \ntime-spans. \nHence, it is to be expected that successful software products \ncan be developed with little or none application of software \nengineering principles and techniques. What one hopes is that the application of these princi ples will contribute to reduced \ncosts and improved quality. \n  \n \nMeta-programming is the term for the art of developing \nmethods and programs to read, ma nipulate, and/or write other \nprograms. When what is developed are programs that can deal \nwith themselves, we talk about reflective programming.", "source": "Page 424", "chapter": "9"}
{"id": "6a2ea322993e-2", "text": "with themselves, we talk about reflective programming. \nhttp://cliki.tunes.org/Metaprogramming \nhttp://fare.tunes.org/articles/ll99/index.en.html", "source": "Page 424", "chapter": "9"}
{"id": "e38dffd84bce-0", "text": "Chapter 9 \uf0b7 Some Future Trends 411\n9.1 Aspect-Oriented Programming \n \n[ See also Section 3.4. ] \nThere has been recently recognition of limitations  of the object-orientation idea. We are now \nseeing that many requirements do not decompose neatly into behavior centered on a single locus. \nObject technology has difficulty localizing con cerns involving global constraints and pandemic \nbehaviors, appropriately segregating concerns, and applying domain-specific knowledge. Post-\nobject programming (POP) mechanisms, the space of programmatic mechanisms for expressing \ncrosscutting concerns. \nAspect-oriented programming (AOP) is a new evolution of the concept for the separation of \nconcerns, or aspects, of a system. This approach is meant to provide more modular, cohesive, and \nwell-defined interfaces or coupling in the design of  a system. Central to AOP is the notion of \nconcerns  that cross cut, which means that the methods  related to the concerns intersect. Dominant \nconcerns for object activities, their primary functio n, but often we need to consider crosscutting \nconcerns. For example, an employee is an accountant, or programmer, but also every employee \nneeds to punch the timesheet daily, plus watch se curity of individual activities or overall building", "source": "Page 425", "chapter": "9"}
{"id": "e38dffd84bce-1", "text": "security, etc. It is believed that in OO progra mming these cross-cutting concerns are spread across \nthe system. Aspect-oriented programming would modularize the implementation of these cross-\ncutting concerns into a cohesive single unit. \n \nThe term for a means of meta-programming wher e a programming language is separated into a \ncore language and various domai n-specific languages which express (ideally) orthogonal aspects \nof program behavior. One of the main benefits of this means of expression is that the aspect \nprograms for a given system are often applicable across a wide range of elements of the system, \nin a crosscutting manner. That is, the aspects pervas ively effect the way that  the system must be \nimplemented while not addressing any of the core  domain concerns of the application.  \nOne of the drawbacks to this approach, beyond those of basic meta-programming, is that the \naspect domains are often only statically choosable  per language. However, the benefits are that \nseparate specification is possible, and that these systems combine to form valid programs in the \noriginal (non-core) programming language after w eave-time, the part of compilation where the \naspect programs are combined with the core language program. \nhttp://cliki.tunes.org/Aspect-Oriented%20Programming", "source": "Page 425", "chapter": "9"}
{"id": "e38dffd84bce-2", "text": "http://cliki.tunes.org/Aspect-Oriented%20Programming \n \nhttp://www.eclipse.org/aspectj/ Crosscutting concerns: \n...a system that clocks employees in and out of work. \n...and businesses everywhere use machines to iden tify employees as they check in and out of \nwork.", "source": "Page 425", "chapter": "9"}
{"id": "9f6aa1cadce3-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  412 \n 9.2 OMG MDA \n \n \n9.3 Autonomic Computing \n \nGilb\u2019s laws of computer unreliability: \n\u2022 Computers are unreliable, but humans are even more unreliable. \n\u2022 Self-checking systems tend to have an inherent lack of reliability of the system in which they are used. \n\u2022 The error-detection and correction capabilities of an y system will serve the key to understanding the type \nof error which they can not handle. \n\u2022 Undetectable errors are infinite in variety, in contra st to detectable errors, which by definition are limited. \nWith the mass-market involvement of developers with a wide spectrum of skills and expertise in \nsoftware development, one can expect that th e quality of software products will widely vary. \nMost of the products will not be well engineered and reliable. Hence it becomes an imperative to \ndevelop techniques that can combine imperfect  components to produce reliable products. Well-\nknown techniques from fault-tolerance can teach us a great deal in this endeavor. \nUnfortunately, our ability to build dependable systems is lagging significantly compared to our \nability to build feature-rich and high-performance systems. Examples of significant system \nfailures abound, ranging from the frequent failures of Internet services [cite Patterson and Gray -", "source": "Page 426", "chapter": "9"}
{"id": "9f6aa1cadce3-1", "text": "failures abound, ranging from the frequent failures of Internet services [cite Patterson and Gray - \nThu.] As we build ever more complex and in terconnected computing systems, making them \ndependable will become a critical challenge that must be addressed. \n \nIBM: Computer heal thyself http://www.cnn.com/2002/TECH/biztech/10/21/ibm.healing.reut/index.html \nGPS, see Marvin Minsky\u2019s comments @EDGE website \n You may also find useful the overview of GPS in AI and Natural Man  by M. Boden, pp 354-356. \nhttp://www.j-paine.org/students/tutorials/gps/gps.html \n The importance of abstract planning in real-world  tasks. Since the real world does not stand still \n(so that one can find to one\u2019s surprise that the e nvironment state is \u201cunfamiliar\u201d), it is not usually \nsensible to try to formulate a detailed plan be forehand. Rather, one should sketch the broad \noutlines of the plan at an abstract level and then  wait and see what adjustments need to be made \nin execution. The execution-monitor program can p ass real-world information to the planner at \nthe time of carrying out the plan, and tactical deta ils can be filled in accord ingly. Some alternative", "source": "Page 426", "chapter": "9"}
{"id": "9f6aa1cadce3-2", "text": "possibilities can sensibly be allowed for in the high level plan (a case of \u201ccontingency planning\u201d), \nbut the notion that one should specifically foresee all possible contingencies is absurd. Use of a", "source": "Page 426", "chapter": "9"}
{"id": "7244e16c4624-0", "text": "Chapter 9 \uf0b7 Some Future Trends 413\nhierarchy of abstraction spaces for planning can th us usefully mask the uncertainties inherent in \nreal-world action. \n \nThe problem may not be so much in bugs with  individual components\u2014those are relatively \nconfined and can be uncovered by methodical tes ting of each individually. A greater problem is \nwhen they each work independently but not as a co mbination, i.e., combination of rights yields \nwrong [see Boden: AI]. \n \n9.4 Software-as-a-Service (SaaS) \n Offline access is a concern with many SaaS (Software as a Service) models. SaaS highlights the \nidea of the-network-as-a-computer, an idea a long time coming. \nSoftware as a Service (SaaS): http://en.wi kipedia.org/wiki/Software_as_a_Service \nSoftware as a Service: A Major Challenge for the Software Engineering:  \nhttp://www.service-oriented.com/ \nA field guide to software as a service | InfoWorld | Analysis:  \nhttp://www.infoworld.com/article/05/04/18/16FEsasdirect_1.html \nIBM Software as Services: http://www-304.ibm.com/jct09002c/isv/marketing/saas/", "source": "Page 427", "chapter": "9"}
{"id": "7244e16c4624-1", "text": "Myths and Realities of Software-as-a-Service (SaaS): http://www.bitpipe.com/tlist/Software-as-a-\nService.html \n \n9.5 End User Software Development \n The impetus for the current hype: Web 2.0, that  second-generation wave of Net services that let \npeople create content and exchange information online. \nFor an eloquent discussion of the concept of end user computing see:  \nJames Martin, Application Development Without Programmers , Prentice Hall, Englewood Cliffs, \nNJ, 1982.  [  QA76.6.M3613  ] \n \nResearchers seek simpler software debugging/programming \nhttp://www.cnn.com/2004/TECH/ptech/07/27/debugging.ap/index.html Whyline -- short for Workspace for Helping You Link Instructions to Numbers and Events // \nBrad Myers, a Carnegie Mellon Univ ersity computer science professor", "source": "Page 427", "chapter": "9"}
{"id": "b119d460b7e1-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  414 \n  \n[Kelleher & Pausch, 2005] \nLieberman, Henry; Patern\u00f2, Fabio; Wulf, Volker (Editors), End-User Development , Springer \nSeries: Human-Computer Interaction Series, Vol.  9, 2005, Approx. 495 p., Hardcover, ISBN: 1-\n4020-4220-5 (2006. 2nd printing edition) \nHenry Lieberman, Your Wish Is My Command: Programming by Example , (Interactive \nTechnologies), Morgan Kaufmann; 1st edition (February 27, 2001) \nAllen Cypher (Editor), Watch What I Do: Programming by Demonstration , The MIT Press (May \n4, 1993) \n[Maeda, 2004]  \nIs it possible to bring the benefits of rigorous software engineering methodologies to end-users? \nProject called End Users Shaping Effective Soft ware, or EUSES -- to make computers friendlier \nfor everyday users by changing everything from how they look to how they act. \nMargaret Burnett, a computer science professor at Oregon State University and director of \nEUSES. http://eecs.oregonstate.edu/EUSES/", "source": "Page 428", "chapter": "9"}
{"id": "b119d460b7e1-1", "text": "EUSES. http://eecs.oregonstate.edu/EUSES/ \n \nSee discussion of levels of abstraction in th e book Wicked Problems; notice that the assembly \nprogramming is still alive and well for low-end mobile pho ne developers. \n \nMaking Good Use of Wikis \nSure, it sounds like a child's toy. But a special ty pe of wiki, from JotSpot, can actually take the \nplace of a database application. I spent some time with it recently, and it felt like seeing the first \nversion of dBase all over again. It's rough--but you can create some nifty little applications with \ne-mail integration pretty quickly. Check out \nhttp://www.pcmag.com/article2/0,1759,1743602,00.asp \nour story about JotSpot, and see if maybe it'll help you overcome your systems backlog. \nSee also: Business Week, October 18, 2004, pag es 120-121: \u201cHate Your Software? Write Your \nOwn\u201d \nhttp://www.businessweek.com/magazine /content/04_42/b3 904104_mz063.htm \nTools to ease Web collaboration: JotSpot competi ng against Socialtext a nd a handful of others \nlike Five Across and iUpload in the fledgling market", "source": "Page 428", "chapter": "9"}
{"id": "b119d460b7e1-2", "text": "like Five Across and iUpload in the fledgling market \nhttp://www.cnn.com/2005/TECH/internet/02/ 16/web.collaboration.ap/index.html \n Wikis, one of the latest fads in \u201cmaking progr amming accessible to the masses\u201d is a programming \nequivalent of Home Depot\u2014\u201cfix it yourself\u201d tools.  Sure, it was about time to have a Home Depot", "source": "Page 428", "chapter": "9"}
{"id": "8df6898f1ee4-0", "text": "Chapter 9 \uf0b7 Some Future Trends 415\nof software. However, I am not aware that the a rrival of Home Depot spelled the end of the civil \nengineering profession, as some commentators see it for professional software developers. As \nwith Home Depot, it works only for little things; after all, how many  of us dare to replace kitchen \ncabinets, lest to mention building a skyscraper! \n \nWeb services BPEL and programming workflows on a click \n 4GL and the demise of programming: \u201cWhat happene d to CASE and 4GL? My suspicion is that \nwe still use them to this day, but the terms them selves have fallen into such disregard that we \nrarely see them. And certainly, the hyped benefits were never achieved.\u201d \n \nThe Future of Programming on the iSeries, Part 2 \nby Alex Woodie and Timothy Prickett Morgan http://www.itjungle.com/tfh/tfh042803-story01.html \n \nWhy assembler? by A. F. Kornelis http://www.bixoft.nl/english/why.htm \n \nThe Future of the Programmer; InformationWeek's Dec. 6 issue \nhttp://blog.informationweek.com/001855.html \n \nApplication Development Trends Articles (5/2/ 2006): End-user programming in five minutes or", "source": "Page 429", "chapter": "9"}
{"id": "8df6898f1ee4-1", "text": "less ---- By John K. Waters \nRod Smith, IBM's VP of Internet emerging technologies, chuckles at the phrase \"end-user \nprogramming,\" a term he says has been overhyp ed and overpromised. And yet, IBM's new PHP-\nbased QEDWiki project (\"quick and easily done wiki\") is focused on that very concept. \nQEDWiki is an IDE and framework designed to allow non-technical end users to develop so-\ncalled situational apps in less than five mi nutes. http://www.adtmag.com /article.aspx?id=18460 \nWeb 2.0: The New Guy at Work -- Do-it-yourself trend \n http://www.businessweek.com/prem ium/content/06_25/b3989072.htm \nONLINE EXTRA: How to Harness the Power of Web 2.0  \nhttp://www.businessweek.com/premiu m/content/06_25/b3989074.htm", "source": "Page 429", "chapter": "9"}
{"id": "62542d284679-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  416 \n 9.6 The Business of Software \n \n\u201cThose who want information to be free as a matter of principle should create some information and make \nit free.\u201d \n\u2014Nicholas Petreley \n\u201cLinux is only free if your time is worthless.\u201d \n\u2014Jeremy F. Hummond \nTraditionally, software companies mostly made profits by product sales and license fees. \nRecently, there is a dramatic shift to services, such as annual maintenance payments that entitle \nusers to patches, minor upgrades, and often tec hnical support. This shift has been especially \npronounced among enterprise-software vendors.  There are some exceptions. Product sales \ncontinue to account for most of game-softw are revenues, although online-gaming service \nrevenues are growing fast. Also, the revenues of platform companies such as Microsoft are still \ndominated by product revenues. \nA possible explanation for that the observed chang es is that this is simply result of life-cycle \ndynamics, which is to say that the industry is  in between platform transitions such as from \ndesktop to the Web platform, or from office-bound to mobile platforms. It may be also that a \ntemporary plateau is reached and the industry is awaiting a major innovation to boost the product", "source": "Page 430", "chapter": "9"}
{"id": "62542d284679-1", "text": "temporary plateau is reached and the industry is awaiting a major innovation to boost the product \nrevenue growth. If a major innovation occurs, th e individuals and enterprises will start again \nbuying new products, both hardware and software, in large numbers. \nAnother explanation is that the shift is part of a long-term trend and it is permanent for the \nforeseeable future. The argument fo r this option is that much software now is commoditized, just \nlike hardware, and prices will fall to zero or near zero for any kind of standardized product. In \nthis scenario, the future is really free software, inexpensive software-as-a-service (SaaS), or \u201cfree, \nbut not free\u201d software, with some kind of indirect  pricing model, like advertising\u2014a Google-type \nof model. \nAn interested reader should see [Cusumano, 2008] for a detailed study of trends in software \nbusiness. \n[Watson, et al., 2008] about the business of open source software \nThe advantages of open source software include a free product and community support. However, \nthere are disadvantages as well. Communities do not usually respond as quickly to help requests, \nand they do not offer inexperienced users one-on-one instruction. \n \n9.7 Summary and Bibliographical Notes", "source": "Page 430", "chapter": "9"}
{"id": "a349500720e2-0", "text": "417  \nAppendix A  \nJava Programming \n \nThis appendix offers a very brief introduction to  Java programming; I hope that most of my \nreaders will not need this refresher. References to  literature to find more details are given at the \nend of this appendix. \n \nA.1 Introduction to Java Programming \n This review is designed to give the beginner th e basics quickly. The reader interested in better \nunderstanding of Java programming should consult the following sources. \nA key characteristic of object-oriented approaches is encapsulation , which means hiding the \nobject state, so that it can be observed or affected only via object\u2019s methods. Class state is defined \nby class variables, usually declared first in a class definition. (Althouogh class variables can be \ndeclared anywhere, it is a good practice to declare th em first, all at one place, to improve code \nreadability.) In Java, encapsulation is achieved by  prefixing a class variable declaration with a \nkeyword private  or protected . Even some methods may be encapsulated, because they \nalter the class variables in a manner that should not be available indiscriminately to all other \nclasses. \nA.2 Bibliographical Notes \n \nThis is intended as a very brief introduction to Java and the interested reader should consult many", "source": "Page 431", "chapter": "9"}
{"id": "a349500720e2-1", "text": "This is intended as a very brief introduction to Java and the interested reader should consult many \nexcellent sources on Java. For example, [Eckel, 2003] is available online at \nhttp://www.mindview.net/Books . Another great source is [Sun Microsystems, 2005], online at \nhttp://java.sun.com/docs/bo oks/tutorial/index.html . More useful information on Java programming is \navailable at http://www.developer.com/  (Gamelan) and http://www.javaworld.com/  (JavaWorld  \nmagazine).", "source": "Page 431", "chapter": "9"}
{"id": "22c1f4f2ea30-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  418", "source": "Page 432", "chapter": "9"}
{"id": "6e4520e8cdee-0", "text": "419  \nAppendix B  \nNetwork Programming \n \nIn network programming, we establish a conn ection between two programs, which may be \nrunning on two different machines. The client/server model  simplifies the development of \nnetwork software by dividing the design process in to client issues and server issues. We can draw \na telephone connection analogy, where a networ k connection is analogous to a case of two \npersons talking to each other. A caller can dial a callee only if it knows the callee\u2019s phone \nnumber. This should be advertised somewhere, say in a local telephone directory. Once the caller dials the \u201cwell-known\u201d number it can start talking if the callee is listening on this number. In the \nclient/server terminology, the program which lis tens for the incoming connections is called a \nserver  and the program which attempts the \u201cdia ling\u201d a well-known \u201cphone number\u201d is called a \nclient . A server is a process that is waiting to be contacted by a client process so that it can do \nsomething for the client. \n \nB.1 Socket APIs \n Network programming is done by invoking socket APIs  (Application Programming Interfaces). \nThese socket API syntax is common across operating systems, although there are slight but \nimportant variations. The key abstrac tion of the socket interface is the socket , which can be", "source": "Page 433", "chapter": "9"}
{"id": "6e4520e8cdee-1", "text": "thought of as a point where a local application process attaches to the network. The socket \ninterface defines operations for creating a sock et, attaching the socket to the network, \nsending/receiving messages through the socket, and cl osing the socket. Sockets are mainly used \nover the transport layer protocols, such as TC P and UDP; this overview is limited to TCP. \nA socket is defined by a pair of parameters: the host machine\u2019s IP address  and the application\u2019s \nport number . A port number distinguishes the programs running on the same host. It is like an \nextension number for persons sharing the same phone number. Internet addresses for the Internet \nProtocol version 4 (IPv4) are four-byte (32 b its) unsigned numbers. They are usually written as \ndotted quad strings, for example, 128.6.68.10 , which corresponds to the binary representation \n10000000 00000110 01000100 00001010 . The port numbers are 16-bit unsigned \nintegers, which can take values in the ra nge 0 \u2013 65535. Port numbers 0 \u2013 1024 are reserved  and \ncan be assigned to a process only by a superuser process. For example, port number 21 is \nreserved for the FTP server and port number 80 is reserved for the Web server. Thus, a pair", "source": "Page 433", "chapter": "9"}
{"id": "f2b67f07072b-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  420 \n(128.6.68.10 , 80) defines the socket of a Web server application running on the host machine \nwith the given IP address. \nAlphanumeric names are usually assigned to m achines to make IP addresses human-friendly. \nThese names are of variable length (potentially ra ther long) and may not follow a strict format. \nFor example, the above IP address quad 128.6.68.10  corresponds to the host name \neden.rutgers.edu . The Domain Name System (DNS) is an abstract framework for \nassigning names to Internet hosts. DNS is implemented via name servers , which are special \nInternet hosts dedicated for performing name-to-address mappings. When a client desires to \nresolve a host name, it sends a query to a name se rver which, if the name is valid, and returns \nback the host\u2019s IP address1. Here, I will use only the dotted decimal addresses. \nIn Java we can deal directly with string host  names, whereas in C we must perform name \nresolution by calling the function gethostbyname() . In C, even a dotted quad string must be \nexplicitly converted to the 32-bit binary IP address.  The relevant data structures are defined in the \nheader file netinet/in.h  as follows:", "source": "Page 434", "chapter": "9"}
{"id": "f2b67f07072b-1", "text": "header file netinet/in.h  as follows: \nC socket address structures (defined in netinet/in.h ) \nstruct in_addr { \n    unsigned long s_addr;  /* Internet address (32 bits) */ \n}; \n \nstruct sockaddr_in { \n        sa_family_t    sin_family; /* Internet protocol (AF_INET) */ \n        in_port_t      sin_port; /* Address port (16 bits) */ \n        struct in_addr sin_addr; /* Internet address (32 bits) */ \n        char           sin_zero[8]; /* Not used */ \n}; \nTo convert a dotted decimal string to the binary value, we use the function inet_addr() : \n    struct sockaddr_in host_addr; \n    host_addr.sin_addr.s_addr = inet_addr (\"128.6.68.10\"); \n                                                      \n1 The name resolution process is rather complex, because the contacted name server may not have the given \nhost name in its table, and the interested reader should consult a computer networking book for further \ndetails.", "source": "Page 434", "chapter": "9"}
{"id": "50dadce9e249-0", "text": "Appendix B \uf0b7 Network Programming 421\nFigure B-1 summarizes the socket functions in Java for a basic client-server application. \nSimilarly, Figure B-2 summarizes the socket functions in C. Although this figure may appear \nsimpler than that for Java, this  is deceptive because the Java cons tructs incorporate much more \nthan necessary for this simple example. \nThe first step is to create a socket, for which in C there is only one function: socket() . Java \ndistinguishes two types of sockets that are implemented over the TCP protocol: server sockets  \nfrom client sockets . The former are represented by the class java.net.ServerSocket  and \nthe latter by the class java.net.Socket . In addition, there is \njava.net.DatagramSocket  for sockets implemented over the UDP protocol. The \nfollowing example summarizes the Java and C acti ons for opening a (TCP-based) server socket: \nOpening a TCP SERVER  socket in Java vs. C (\u201cPassive Open\u201d) \nimport java.net.ServerSocket;\nimport java.net.Socket; #include <arpa/inet.h> \n#include <sys/socket.h> \npublic static final int \n  PORT_NUM = 4999; #define PORT_NUM 4999 \nServerSocket rv_sock = \n  new ServerSocket (PORT_NUM);int rv_sock, s_sock, cli_addr_len;", "source": "Page 435", "chapter": "9"}
{"id": "50dadce9e249-1", "text": "struct sockaddr_in serv_addr, cli_addr; \nrv_sock = socket( \n    PF_INET, SOCK_STREAM, IPPROTO_TCP); \nserv_addr.sin_family = AF_INET; \nserv_addr.sin_addr.s_addr = \n    htonl(INADDR_ANY); \nserv_addr.sin_port = htons(PORT_NUM); \nbind(rv_sock, \nTimeClient\nStep 2 :\nRun theclientSocket c_sock =\nnew Socket (host_name, port);\nBufferedReader in = new BufferedReader(\nnew InputStreamReader(\nc_sock.getInputStream()\n));\nPrintWriter out = new PrintWriter(\nnew OutputStreamWriter(\nc_sock.getOutputStream()\n));\nString rqst_msg = ... ;\nout.println(rqst_msg);\nString rslt_msg = in. readLine ();\nc_sock.close();Step 3 :\nSend a\nrequest\nmessage\nStep 7 :\nReceive\nresultServerSocket rv_sock =\nnew ServerSocket (port);\nSockets_sock =\nrv_sock. accept();\nBufferedReader in = new BufferedReader(\nnew InputStreamReader(\ns_sock.getInputStream()\n));\nPrintWriter out = new PrintWriter(\nnew OutputStreamWriter(\ns_sock.getOutputStream()\n));\nString rqst_msg = in. readLine ();\nString rslt_msg = ... ;\nout.println(rslt_msg);\ns_sock.close();Server\nStep 1 :\nRun the server\nStep 4 :", "source": "Page 435", "chapter": "9"}
{"id": "50dadce9e249-2", "text": "s_sock.close();Server\nStep 1 :\nRun the server\nStep 4 :\nReceive request\nStep 5 :\nDo processing\nStep 6 :\nSend the resultmessageServer\nblocked\nFigure B-1: Summary of network programming in the Java programming language.", "source": "Page 435", "chapter": "9"}
{"id": "d77dae0affd6-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  422 \n    &serv_addr, sizeof(serv_addr)); \nlisten(rv_sock, 5); \nSocket s_sock = \n  rv_sock. accept(); cli_addr_len = sizeof(cli_addr); \ns_sock = accept(rv_sock, \n    &cli_addr, &cli_addr_len); \nThe above code is simplified, as will be seen in the example below, but it conveys the key points. \nNotice that in both languages we deal with two di fferent socket descriptors . One is the so-called \nwell-known  or rendezvous  socket, denoted by the variable rv_sock . This is where the server \nlistens, blocked and inactive in the operation accept() , waiting for clients to connect. The \nother socket, s_sock , will be described later. In Java, you simply instantiate a new \nServerSocket  object and call the method accept()  on it. There are several different \nconstructors for ServerSocket , and the reader should check the reference manual for details. \nIn C, things are a bit more complex. \nThe operation socket()  takes three arguments, as follows. The first, domain , specifies the \nprotocol family  that will be used. In the above example, I use PF_INET , which is what you", "source": "Page 436", "chapter": "9"}
{"id": "d77dae0affd6-1", "text": "would use in most scenarios2. The second argument, type, indicates the semantics of the \ncommunication. Above, SOCK_STREAM  is used to denote a byte stream. An alternative is \nSOCK_DGRAM  which stands for a message-oriented service, such as that provided by UDP. The \nlast argument, protocol , names the specific protocol that will be used. Above, I state \nIPPROTO_TCP  but I could have used UNSPEC , for \u201cunspecified,\u201d because the combination of \nPF_INET  and SOCK_STREAM  implies TCP. The return value is a handle  or descriptor  for the \n                                                      \n2 Note that PF_INET  and AF_INET  are often confused, but luckily both have the same numeric value (2). TimeClient\nStep 2 :\nRun the client int c_sock = socket(\ndomain, type, protocol);\nconnect(c_sock, addr, addr_len);\nchar *rqst_msg = ...;\nsend(c_sock, rqst_msg,\nmsg_len, flags);\nchar *buffer = malloc(buf_len);\nrecv(c_sock,\nbuffer, buf_len, flags);\nclose(c_sock);Step 3 :\nSend a request\nmessage\nStep 7 :\nReceive resultServer\nint rv_sock = socket(\ndomain, type, protocol);\nbind(rv_sock, addr, addr_len);\nlisten(rv_sock, bcklog);", "source": "Page 436", "chapter": "9"}
{"id": "d77dae0affd6-2", "text": "bind(rv_sock, addr, addr_len);\nlisten(rv_sock, bcklog);\nint s_sock = accept(\nrv_sock, addr, addr_len);\nchar *buffer = malloc(buf_len);\nrecv(s_sock,\nbuffer, buf_len, flags);\nchar *rslt_msg = ...;\nsend(s_sock, rslt_msg,\nmsg_len, flags);\nclose(s_sock);Step 1 :\nRun the server\nStep 4 :\nReceive request\nStep 5 :\nDo processing\nStep 6 :\nSend the result\nmessageServer\nblocked\nFigure B-2: Summary of network progra mming in the C programming language.", "source": "Page 436", "chapter": "9"}
{"id": "a1ab670c1aff-0", "text": "Appendix B \uf0b7 Network Programming 423\nnewly created socket. This is an identifier by whic h we can refer to the socket in the future. As \ncan be seen, it is given as an argument to subsequent operations on this socket. \nOn a server machine, the a pplication process performs a passive open \u2014the server says that it is \nprepared to accept connections, but it does not actually establish a connection. The server\u2019s address and port number should be known in advance and, when the server program is run, it will \nask the operating system to associate an (address, port number) pair with it, which is \naccomplished by the operation bind() . This resembles a \u201cserver person\u201d requesting a phone \ncompany to assign to him/her a particular phone number. The phone company would either \ncomply or deny if the number is already taken. The operation listen()  then sets the capacity \nof the queue holding new connection attempts that are waiting to establish a connection. The \nserver completes passive open by calling accept() , which blocks and waits for client calls. \nWhen a client connects, accept()  returns a new socket descriptor, s_sock . This is the actual \nsocket that is used in client/ser ver exchanges. The well-known socket, rv_sock , is reserved as a", "source": "Page 437", "chapter": "9"}
{"id": "a1ab670c1aff-1", "text": "meeting place for associating server with clients. Notice that accept()  also gives back the \nclients\u2019 address in struct sockaddr_in cli_addr . This is useful if server wants to \ndecide whether or not it wants to talk to this c lient (for security reasons). This is optional and you \ncan pass NULL  for the last two arguments (see the server C code below). \nThe reader should also notice that in C data ty pes may be represented using different byte order \n(most-significant-byte-first, vs. least-significant-byte-first) on different computer architectures \n(e.g., UNIX vs. Windows). Therefore the auxiliary routines htons() /ntohs()  and \nhtonl() /ntohl()  should be used to convert 16- and 32-bit quantities, respectively, between \nnetwork byte order and host byte  order. Because Java is platform-independent, it performs these \nfunctions automatically. \nClient application process, which is r unning on the client machine, performs an active open \u2014it \nproactively establishes connection to the server by invoking the connect()  operation: \nOpening a TCP CLIENT  socket in Java vs. C (\u201cActive Open\u201d) \nimport java.net.Socket; #include <arpa/inet.h> \n#include <sys/socket.h> \n#include <netdb.h> \npublic static final String HOST =", "source": "Page 437", "chapter": "9"}
{"id": "a1ab670c1aff-2", "text": "#include <netdb.h> \npublic static final String HOST = \n\"eden.rutgers.edu\"; \npublic static final int PORT_NUM = \n4999; #define HOST \"eden.rutgers.edu\" \n#define PORT_NUM 4999 \nSocket c_sock = \n  new Socket (HOST, PORT_NUM); int c_sock; \nstruct hostent *serverIP; \nstruct sockaddr_in serv_addr; \nserverIP = \n    gethostbyname (HOST); \nserv_addr.sin_family = AF_INET; \nserv_addr.sin_addr.s_addr = \n// ... copy from : serverIP->h_addr ... \nserv_addr.sin_port = \n    htons(port_num); \nc_sock = connect(c_sock, \n    (struct sockaddr  *) &serv_addr, \n    sizeof(serv_addr));", "source": "Page 437", "chapter": "9"}
{"id": "b36a76af66bf-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  424 \nNotice that, whereas a server listens for clients on a well-known port, a client typically does not \ncare which port it uses for itself. Recall that , when you call a friend, you should know his/her \nphone number to dial it, but you need not know your number. \n \nB.2 Example Java Client/Server Application \n The following client/server application uses TCP protocol for communication. It accepts a single \nline of text input at the client side and transmits it to the server, which prints it at the output. It is a \nsingle-shot connection , so the server closes the connection af ter every message. To deliver a new \nmessage, the client must be run anew. Notice that this is a sequential server , which serves clients \none-by-one. When a particular client is served, any other client attempti ng to connect will be \nplaced in a waiting queue. To implement a concurrent server , which can serve multiple clients in \nparallel, you should use threads (see Section 4.3). The reader should consult Figure B-1 as a roadmap to the following code. \n \nListing B-1: A basic SERVER  application in Java \n1 \n2 \n3 \n4 \n5 \n6 \n7 \n8 \n9 \n10 \n11", "source": "Page 438", "chapter": "9"}
{"id": "b36a76af66bf-1", "text": "6 \n7 \n8 \n9 \n10 \n11 \n12 \n13 \n14 \n15 \n16 \n17 \n18 \n19 \n20 \n21 \n22 \n23 \n24 \n25 \n26 \n27 \n28 \n29 \n30 \n31 import java.io.BufferedReader; \nimport java.io.IOException; \nimport java.io.InputStreamReader; \nimport java.io.OutputStreamWriter; \nimport java.io.PrintWriter; \nimport java.net.ServerSocket; \nimport java.net.Socket; \n \npublic class BasicServer { \n  public static void main(String[] args) { \n    if (args.length != 1) { // Test for correct num. of arguments \n        System.err.println( \"ERROR server port number not given\"); \n        System.exit(1); \n    } \n    int port_num = Integer.parseInt(args[0]); \n    ServerSocket rv_sock = null; \n    try { \n        new ServerSocket (port_num); \n    } catch (IOException ex) { ex.printStackTrace(); } \n \n    while (true) { // run forever, waiting for clients to connect \n        System.out.println(\"\\nWaiting for client to connect...\"); \n        try { \n            Socket s_sock = rv_sock. accept();", "source": "Page 438", "chapter": "9"}
{"id": "b36a76af66bf-2", "text": "try { \n            Socket s_sock = rv_sock. accept(); \n            BufferedReader  in = new BufferedReader( \n                new InputStreamReader(s_sock.getInputStream()) \n            ); \n            PrintWriter  out = new PrintWriter( \n                new OutputStreamWriter(s_sock.getOutputStream()), \n                true); \n            System.out.println(", "source": "Page 438", "chapter": "9"}
{"id": "6b10e52ac214-0", "text": "Appendix B \uf0b7 Network Programming 425\n32 \n33 \n34 \n35 \n36 \n37 \n39                 \"Client's message: \" + in. readLine()); \n            out. println(\"I got your message\"); \n            s_sock. close(); \n        } catch (IOException ex) { ex.printStackTrace(); } \n    } \n  } \n} \n \nThe code description is as follows: \nLines 1\u20137: make available the relevant class files. \nLines 9\u201314: define the server class with only one method, main() . The program accepts a \nsingle argument, the server\u2019s port number (1024 \u2013 65535, for non-reserved ports). \nLine 15: convert the port number, input as a string, to an integer number. \nLines 16\u201319: create the well-known server socket. According to the javadoc  of \nServerSocket , the default value for the backlog queue length for incoming connections is \nset to 50. There is a constructor which allows you to set different backlog size. \nLine 24: the server blocks and waits indefin itely until a client makes connection at which \ntime a Socket  object is returned. \nLines 25\u201327: set up the input stream for reading client\u2019s requests. The actual TCP stream,", "source": "Page 439", "chapter": "9"}
{"id": "6b10e52ac214-1", "text": "obtained from the Socket  object by calling getInputStream()  generates a stream of \nbinary data from the socket. This can be d ecoded and displayed in a GUI interface. Because \nour simple application deals exclusively with text data, we wrap a BufferedReader  \nobject around the input stream, in order to obtain buffered, character-oriented output. \nLines 28\u201330: set up the output stream for writing server\u2019s responses. Similar to the input \nstream, we wrap a PrintWriter  object around the binary stream object returned by \ngetOutputStream() . Supplying the PrintWriter  constructor with a second \nargument of true  causes the output buffer to be flushed for every println()  call, to \nexpedite the response delivery to the client. \nLines 31\u201332: receive the client\u2019s message by calling readLine()  on the input stream. \nLine 33: sends acknowledgement to the client by calling println()  on the output stream. \nLine 34: closes the connection after a single exchange of messages. Notice that the well-\nknown server socket rv_sock  remains open , waiting for new clients to connect. \nThe following is the client code, which se nds a single message to the server and dies. \n \nListing B-2: A basic CLIENT  application in Java \n1 \n2 \n3 \n4 \n5", "source": "Page 439", "chapter": "9"}
{"id": "6b10e52ac214-2", "text": "1 \n2 \n3 \n4 \n5 \n6 \n7 \n8 import java.io.BufferedReader; \nimport java.io.IOException; \nimport java.io.InputStreamReader; \nimport java.io.OutputStreamWriter; \nimport java.io.PrintWriter; \nimport java.net.Socket; \n \npublic class BasicClient {", "source": "Page 439", "chapter": "9"}
{"id": "956eafe6eeef-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  426 \n9 \n10 \n11 \n12 \n13 \n14 \n15 \n16 \n17 \n18 \n19 \n20 \n21 \n22 \n23 \n24 \n25 \n26 \n27 \n28 \n29 \n30 \n31 \n32 \n33 \n34 \n35   public static void main(String[] args) { \n    if (args.length != 2) { // Test for correct num. of arguments \n        System.err.println( \n            \"ERROR server host name AND port number not given\"); \n        System.exit(1); \n    } \n    int port_num = Integer.parseInt(args[1]); \n \n    try { \n        Socket c_sock = new Socket (args[0], port_num); \n        BufferedReader  in = new BufferedReader( \n            new InputStreamReader(c_sock.getInputStream()) \n        ); \n        PrintWriter  out = new PrintWriter( \n            new OutputStreamWriter(c_sock.getOutputStream()), \n            true); \n        BufferedReader userEntry = new BufferedReader( \n            new InputStreamReader(System.in) \n        ); \n        System.out.print(\"User, enter your message: \"); \n        out. println(userEntry.readLine());", "source": "Page 440", "chapter": "9"}
{"id": "956eafe6eeef-1", "text": "out. println(userEntry.readLine()); \n        System.out.println(\"Server says: \" + in. readLine ()); \n        c_sock. close(); \n    } catch (IOException ex) { ex.printStackTrace(); } \n    System.exit(0); \n  } \n} \n \nThe code description is as follows: \nLines 1\u20136: make available the relevant class files. \nLines 9\u201314: accept two arguments, the ser ver host name and its port number. \nLine 15: convert the port number, input as a string, to an integer number. Line 18: simultaneously opens the client\u2019s socket and connects  it to the server. \nLines 19\u201321: create a character-oriented input so cket stream to read server\u2019s responses. \nEquivalent to the server\u2019s code lines 25\u201327. \nLines 22\u201324: create a character-oriented output socket stream to write request messages. \nEquivalent to the server\u2019s code lines 28\u201330. \nLines 25\u201327: create a character-oriented input stre am to read user\u2019s keyboard input from the \nstandard input stream System.in . \nLine 29: sends request messag e to the server by calling println()  on the output stream.", "source": "Page 440", "chapter": "9"}
{"id": "956eafe6eeef-2", "text": "Line 30: receives and displays the server\u2019s response by readLine()  on the input stream. \nLine 31: closes the connection after a single exchange of messages. \nLine 33: client program dies.", "source": "Page 440", "chapter": "9"}
{"id": "76b7af7a1d61-0", "text": "Appendix B \uf0b7 Network Programming 427\nB.3 Example Client/Server Application in C \n \nHere I present the above Java application, now re -written in C. Recall that the TCP protocol is \nused for communication; a UDP-based applicatio n would look differently. The reader should \nconsult Figure B-2 as a roadmap to the following code. \n \nListing B-3: A basic SERVER  application in C on Unix/Linux \n1 \n2 \n3 \n4 \n5 \n6 \n7 \n8 \n9 \n10 \n11 \n12 \n13 \n14 \n15 \n16 \n17 \n18 \n19 \n20 \n21 \n22 \n23 \n24 \n25 \n26 \n27 \n28 \n29 \n30 \n31 \n32 \n33 \n34 \n35 \n36 \n37 \n38 \n39 \n40 \n41 \n42 \n43 \n44 \n45 #include <stdio.h>      /* perror(), fprintf(), sprintf() */ \n#include <stdlib.h>     /* for atoi() */ \n#include <string.h>     /* for memset() */ \n#include <sys/socket.h> /* socket(), bind(), listen(), accept(),", "source": "Page 441", "chapter": "9"}
{"id": "76b7af7a1d61-1", "text": "#include <sys/socket.h> /* socket(), bind(), listen(), accept(), \n                           recv(), send(), htonl(), htons() */ \n#include <arpa/inet.h>  /* for sockaddr_in */ \n#include <unistd.h>     /* for close() */ \n \n#define MAXPENDING 5    /* Max outstanding connection requests */ \n#define RCVBUFSIZE 256  /* Size of receive buffer */ \n#define ERR_EXIT(msg) { perror(msg); exit(1); } \n \nint main(int argc, char *argv[]) { \n    int rv_sock, s_sock, port_num, msg_len; \n    char buffer[RCVBUFSIZE]; \n    struct sockaddr_in  serv_addr; \n \n    if (argc != 2) {  /* Test for correct number of arguments */ \n        char msg[64];  memset((char *) &msg, 0, 64); \n        sprintf(msg, \"Usage: %s server_port\\n\", argv[0]); \n        ERR_EXIT(msg); \n    } \n \n    rv_sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP); \n    if (rv_sock < 0) ERR_EXIT(\"ERROR opening socket\"); \n    memset((char *) &serv_addr, 0, sizeof(serv_addr));", "source": "Page 441", "chapter": "9"}
{"id": "76b7af7a1d61-2", "text": "memset((char *) &serv_addr, 0, sizeof(serv_addr)); \n    port_num = atoi(argv[1]);  /* First arg: server port num. */ \n    serv_addr.sin_family = AF_INET; \n    serv_addr.sin_addr.s_addr = htonl(INADDR_ANY); \n    serv_addr.sin_port = htons(port_num); \n    if ( bind(rv_sock, \n        (struct sockaddr  *) &serv_addr, sizeof(serv_addr)) < 0)  \n        ERR_EXIT(\"ERROR on binding\"); \n    if ( listen(rv_sock, MAXPENDING) < 0)  \n        ERR_EXIT(\"ERROR on listen\"); \n \n    while ( 1 ) {                      /* Server runs forever */ \n        fprintf(stdout, \"\\nWaiting for client to connect...\\n\"); \n        s_sock = accept(rv_sock, NULL, NULL); \n        if (s_sock < 0) ERR_EXIT(\"ERROR on accept new client\"); \n        memset(buffer, 0, RCVBUFSIZE); \n        msg_len = recv(s_sock, buffer, RCVBUFSIZE - 1, 0); \n        if (msg_len < 0) \n            ERR_EXIT(\"ERROR reading from socket\"); \n        fprintf(stdout, \"Client's message: %s\\n\", buffer);", "source": "Page 441", "chapter": "9"}
{"id": "ffc0c8c7d81c-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  428 \n46 \n47 \n48 \n49 \n50 \n51         msg_len = send(s_sock, \"I got your message\", 18, 0); \n        if (msg_len < 0) ERR_EXIT(\"ERROR writing to socket\"); \n        close(s_sock); \n    } \n    /* NOT REACHED, because the server runs forever */  \n} \n \nThe code description is as follows: \nLines 1\u20137: import the relevant header files. \nLines 9\u201310: define the relevant constants. \nLine 11: defines an inline function to print error messages and exit the program. Line 13: start of the program. \nLine 14: declares the variables for tw o socket descriptors, well-known ( rv_sock ) and \nclient-specific ( s_sock ), as well as server\u2019s port number ( port_num ) and message length, \nin bytes (msg_len ) that will be used below. \nLine 15:  \nLine 39: accepts new client connections and returns the socket to be used for message \nexchanges with the client. Notice that NULL  is passed for the last two arguments, because this \nserver is not interested in the client\u2019s address.", "source": "Page 442", "chapter": "9"}
{"id": "ffc0c8c7d81c-1", "text": "server is not interested in the client\u2019s address. \nLine 42: receive up to the buffer size (minus 1 to leave space for a null terminator) bytes from \nthe sender. The input parameters are: the activ e socket descriptor, a char buffer to hold the \nreceived message, the size of the receive buffer (in bytes), and any flags to use. If no data has \narrived, recv()  blocks and waits until some arrives.  If more data has arrived than the \nreceive buffer can hold, recv()  removes only as much as fits into the buffer.   \nNOTE : This simplified implementation may not be adequate for general cases, because \nrecv()  may return a partial message. Remember  that TCP connection provides an illusion \nof a virtually infinite stream of bytes, which is randomly sliced into packets and transmitted. \nThe TCP receiver may call the application immediately upon receiving a packet.  \nSuppose a sender sends M bytes using send( \uf0d7 , \uf0d7 , M, \uf0d7 ) and a receiver calls \nrecv( \uf0d7 , \uf0d7 , N, \uf0d7 ), where M \uf0a3 N. Then, the actual number of bytes K returned by \nrecv()  may be less than the number sent, i.e., K \uf0a3 M.", "source": "Page 442", "chapter": "9"}
{"id": "ffc0c8c7d81c-2", "text": "A simple solution for getting complete messag es is for sender to preface all messages with a \n\u201cheader\u201d indicating the message length. Then, th e receiver finds the message length from the \nheader and may need to call recv()  repeatedly, while keeping a tally of received fragments, \nuntil the complete message is read. \nLine 46: sends acknowledgement back to the c lient. The return value indicates the number of \nbytes successfully sent. A return value of \uf02d1 indicates locally detected errors only (not \nnetwork ones). \nLine 48: closes the connection after a single exchange of messages. Notice that the well-\nknown server socket rv_sock  remains open , waiting for new clients to connect. \nNotice that this is a sequential server , which serves clients one-by-one. When a particular client is \nserved, any other client attempting to connect w ill be placed in a waiting queue. The capacity of", "source": "Page 442", "chapter": "9"}
{"id": "8820e445e065-0", "text": "Appendix B \uf0b7 Network Programming 429\nthe queue is limited by MAXPENDING  and declared by invoking listen() . To implement a \nconcurrent server , which can serve multiple clients in parallel, you should use threads (see \nSection 4.3).  \nListing B-4: A basic CLIENT  application in C on Unix/Linux \n1 \n2 \n3 \n4 \n5 \n6 \n7 \n8 \n9 \n10 \n11 \n12 \n13 \n14 \n15 \n16 \n17 \n18 \n19 \n20 \n21 \n22 \n23 \n24 \n25 \n26 \n27 \n28 \n29 \n30 \n31 \n32 \n33 \n34 \n35 \n36 \n37 \n38 \n39 \n40 \n41 \n42 \n43 \n44 \n45 \n46 \n47 \n48 \n50 \n51 #include <stdio.h>      /* for perror(), fprintf(), sprintf() */ \n#include <stdlib.h>     /* for atoi() */ \n#include <string.h>     /* for memset(), memcpy(), strlen() */ \n#include <sys/socket.h> /* for sockaddr, socket(), connect(), \n                           recv(), send(), htonl(), htons() */", "source": "Page 443", "chapter": "9"}
{"id": "8820e445e065-1", "text": "recv(), send(), htonl(), htons() */ \n#include <arpa/inet.h>  /* for sockaddr_in */ \n#include <netdb.h>      /* for hostent, gethostbyname() */ \n#include <unistd.h>     /* for close() */ \n \n#define RCVBUFSIZE 256 /* Size of receive buffer */ \n#define ERR_EXIT(msg) { perror(msg); exit(1); } \n \nint main(int argc, char *argv[]) { \n    int c_sock, port_num, msg_len; \n    struct sockaddr_in  serv_addr; \n    struct hostent *serverIP; \n    char buffer[RCVBUFSIZE]; \n \n    if (argc != 3) {   /* Test for correct number of arguments */ \n        char msg[64];  memset((char *) &msg, 0, 64);  /* erase */ \n        sprintf(msg, \"Usage: %s serv_name serv_port\\n\", argv[0]); \n        ERR_EXIT(msg); \n    } \n \n    serverIP = gethostbyname (argv[1]); /* 1st arg: server name */ \n    if (serverIP == NULL) \n        ERR_EXIT(\"ERROR, server host name unknown\"); \n    port_num = atoi(argv[2]);  /* Second arg: server port num. */", "source": "Page 443", "chapter": "9"}
{"id": "8820e445e065-2", "text": "c_sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP); \n    if (c_sock < 0)  ERR_EXIT(\"ERROR opening socket\"); \n    memset((char *) &serv_addr, 0, sizeof(serv_addr)); \n    serv_addr.sin_family = AF_INET; \n    memcpy((char *) &serv_addr.sin_addr.s_addr, \n        (char *) &(serverIP->h_addr), serverIP->h_length); \n    serv_addr.sin_port = htons(port_num); \n    if ( connect(c_sock, \n        (struct sockaddr  *) &serv_addr, sizeof(serv_addr)) < 0) \n        ERR_EXIT(\"ERROR connecting\"); \n \n    fprintf(stdout, \"User, enter your message: \"); \n    memset(buffer, 0, RECVBUFSIZE);  /* erase */ \n    fgets(buffer, RECVBUFSIZE, stdin); /* read input */ \n    msg_len = send(c_sock, buffer, strlen(buffer), 0); \n    if (msg_len < 0) ERR_EXIT(\"ERROR writing to socket\"); \n    memset(buffer, 0, RECVBUFSIZE); \n    msg_len = recv(c_sock, buffer, RECVBUFSIZE - 1, 0); \n    if (msg_len < 0) ERR_EXIT(\"ERROR reading from socket\");", "source": "Page 443", "chapter": "9"}
{"id": "8820e445e065-3", "text": "if (msg_len < 0) ERR_EXIT(\"ERROR reading from socket\"); \n    fprintf(stdout, \"Server says: %s\\n\", buffer); \n    close(c_sock); \n    exit(0);", "source": "Page 443", "chapter": "9"}
{"id": "b4f431a89937-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  430 \n52 } \n \nThe code description is as follows: \nLines 1\u20138: import the relevant header files. Line 43: writes the user\u2019s message to the so cket; equivalent to line 46 of server code. \nLine 46: reads the server\u2019s response from the so cket; equivalent to line 42 of server code. \n I tested the above programs on Linux 2.6.14-1.1 637_FC4 (Fedora Core 4) with GNU C compiler \ngcc version 4.0.1 (Red Hat 4.0.1-5), as follows: \nStep 1 : Compile the server using the following command line: \n    % gcc -o server server.c \nOn Sun Microsystems\u2019s Solaris, I had to use: \n    % gcc -g -I/usr/include/ -lsocket -o server server.c \nStep 2 : Compile the client using the following command line: \n    % gcc -o client client.c \nOn Sun Microsystems\u2019s Solaris, I had to use: \n    % gcc -g -I/usr/include/ -lsocket -lnsl -o client client.c \nStep 3 : Run the server on the machine called caipclassic.rutgers.edu , with server port 5100:", "source": "Page 444", "chapter": "9"}
{"id": "b4f431a89937-1", "text": "% ./server 5100 \nStep 4 : Run the client \n    % ./client caipclassic.rutgers.edu 5100 \nThe server is silently running, while the client w ill prompt you for a message to type in. Once you \nhit the Enter  key, the message will be sent to the ser ver, the server will acknowledge the receipt, \nand the client will print the acknowledgment and die.  Notice that the server will continue running, \nwaiting for new clients to connect. Kill the server process by pressing simultaneously the keys \nCtrl and c. \n \nB.4 Windows Socket Programming \n Finally, I include also the server version for Microsoft Windows: \n \nListing B-5: A basic SERVER  application in C on Microsoft Windows \n1 \n2 \n3 \n4 \n5 \n6 #include <stdio.h> \n#include <winsock2.h>     /* for all WinSock functions */ \n \n#define MAXPENDING 5    /* Max outstanding connection requests */ \n#define RCVBUFSIZE 256  /* Size of receive buffer */ \n#define ERR_EXIT { \\", "source": "Page 444", "chapter": "9"}
{"id": "4b4cd1ec75db-0", "text": "Appendix B \uf0b7 Network Programming 431\n7 \n8 \n9 \n10 \n11 \n12 \n13 \n14 \n15 \n16 \n17 \n18 \n19 \n20 \n21 \n22 \n23 \n24 \n25 \n26 \n27 \n28 \n29 \n30 \n31 \n32 \n33 \n34 \n35 \n36 \n37 \n38 \n39 \n40 \n41 \n42 \n43 \n44 \n45 \n46 \n47 \n48 \n49 \n50 \n51 \n52 \n53 \n54     fprintf(stderr, \"ERROR: %ld\\n\", WSAGetLastError()); \\ \n    WSACleanup();  return 0; } \n \nint main(int argc, char *argv[]) { \n    WSADATA wsaData; \n    SOCKET rv_sock, s_sock;  \n    int port_num, msg_len; \n    char buffer[RCVBUFSIZE]; \n    struct sockaddr_in  serv_addr; \n \n    if (argc != 2) {  /* Test for correct number of arguments */ \n        fprintf(stdout, \"Usage: %s server_port\\n\", argv[0]); \n        return 0; \n    }", "source": "Page 445", "chapter": "9"}
{"id": "4b4cd1ec75db-1", "text": "return 0; \n    } \n    WSAStartup(MAKEWORD(2,2), &wsaData);/* Initialize Winsock */ \n \n    rv_sock = WSASocket (PF_INET, SOCK_STREAM, IPPROTO_TCP, \n        NULL, 0, WSA_FLAG_OVERLAPPED); \n    if (rv_sock == INVALID_SOCKET) ERR_EXIT; \n    memset((char *) &serv_addr, 0, sizeof(serv_addr)); \n    port_num = atoi(argv[1]);  /* First arg: server port num. */ \n    serv_addr.sin_family = AF_INET; \n    serv_addr.sin_addr.s_addr = inet_addr (\"127.0.0.1\"); \n    serv_addr.sin_port = htons(port_num); \n    if ( bind(rv_sock, ( SOCKADDR *) &serv_addr,  \n        sizeof(serv_addr)) == SOCKET_ERROR) { \n        closesocket (rv_sock); \n        ERR_EXIT; \n    } \n    if ( listen(rv_sock, MAXPENDING) == SOCKET_ERROR) { \n        closesocket (rv_sock); \n        ERR_EXIT; \n    } \n \n    while ( 1 ) {                      /* Server runs forever */ \n        fprintf(stdout, \"\\nWaiting for client to connect...\\n\");", "source": "Page 445", "chapter": "9"}
{"id": "4b4cd1ec75db-2", "text": "fprintf(stdout, \"\\nWaiting for client to connect...\\n\"); \n        if (s_sock = accept(rv_sock, NULL, NULL) \n            == INVALID_SOCKET) ERR_EXIT; \n        memset(buffer, 0, RCVBUFSIZE); \n        msg_len = recv(s_sock, buffer, RCVBUFSIZE - 1, 0); \n        if (msg_len == SOCKET_ERROR) ERR_EXIT; \n        fprintf(stdout, \"Client's message: %s\\n\", buffer); \n        msg_len = send(s_sock, \"I got your message\", 18, 0); \n        if (msg_len == SOCKET_ERROR) ERR_EXIT; \n        closesocket (s_sock); \n    } \n    return 0; \n} \n \nThe reader should seek further details on Windows sockets here:  \nhttp://msdn.microsoft.com /library/en-us/winso ck/winsock/windows_so ckets_start_page_2.asp .", "source": "Page 445", "chapter": "9"}
{"id": "36d659ebd15d-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  432 \nB.5 Bibliographical Notes \n \n[Stevens et al ., 2004] remains the most authoritative guide to network programming. A good \nquick guides are [Donahoo & Calvert, 2001] for network programming in the C programming \nlanguage and [Calvert & Dona hoo, 2002] for network programming in the Java programming \nlanguage. \nThere are available many online tutorials fo r socket programming. Java tutorials include \n\uf0b7 Sun Microsystems, Inc., http://java.sun.com/docs/ books/tutorial/network ing/sockets/index.html   \n\uf0b7 Qusay H. Mahmoud, \u201cSockets programming in Java: A tutorial,\u201d  \nhttp://www.javaworld.com/jw- 12-1996/jw-12-sockets.html   \nand C tutorials include \n\uf0b7 Sockets Tutorial, http://www.cs.rpi.edu/course s/sysprog/sockets/sock.html   \n\uf0b7 Peter Burden, \u201cSockets Programming,\u201d http://www.scit.wlv.ac.uk/~jphb/comms/sockets.html   \n\uf0b7 Beej\u2019s Guide to Network Programming \u2013 Using Internet Sockets, http://beej.us/guide/bgnet/  \nalso at http://mia.ece.uic.edu/~papers/WWW/s ocketsProgramming /html/index.html", "source": "Page 446", "chapter": "9"}
{"id": "36d659ebd15d-1", "text": "\uf0b7 Microsoft Windows Sockets \u201cGetting Started With Winsock,\u201d  \nhttp://msdn.microsoft.com /library/en-us/winsock/ winsock/getting_start ed_with_winsock.asp   \nDavin Milun maintains a collection of UNIX programming links at \nhttp://www.cse.buffa lo.edu/~milun/unix .programming.html . UNIX sockets library manuals can be found \nat many websites, for example here: http://www.opengroup .org/onlinepubs/009 695399/mindex.html . \nInformation about Windows Sockets for Microsoft Windows can be found here:  \nhttp://msdn.microsoft.com /library/en-us/winso ck/winsock/windows_so ckets_start_page_2.asp .", "source": "Page 446", "chapter": "9"}
{"id": "a3ec02ca514e-0", "text": "433  \nAppendix C  \nHTTP Overview \n \nThe Hypertext Transfer Protocol (HTTP) is an application-level protocol underlying the World \nWide Web. HTTP is implemented using a very si mple RPC-style interface, in which all messages \nare represented as human-readable ASCII strings , although often containing encoded or even \nencrypted information. It is a request/response protocol  in that a client sends a request  to the \nserver and the server replies with a response  as follows (see Figure C-1): \nClient Request Server Response \nA request method Protocol version \nURI (Uniform Resource Identifier) A success or error code \nProtocol version A MIME-like message containing server \ninformation, entity meta-information, and possibly entity-body content \n A MIME-like message containing request modifiers, client information, and possibly body content \nTo quickly get an idea of what is involved here, I suggest you perform the following experiment. \nOn a command line of a UNIX/Linux shell or a Windows Command Prompt, type in as follows: \n    % telnet www.wired.com 80 \nThe Telnet  protocol will connect you to the Wired  magazine\u2019s web server, which reports: \n    Trying 209.202.230.60... \nTimeClientServer\nGET /index.html HTTP 1.1\nAccept: image/gif, image/x-xbitmap, image/", "source": "Page 447", "chapter": "9"}
{"id": "a3ec02ca514e-1", "text": "Accept: image/gif, image/x-xbitmap, image/\njpeg, image pjpeg, */*\nAccept-Language: en-us\nAccept-Encoding: gzip, deflate\nUser-Agent: Mozilla/4.0 (compatible, MSIE\n5.01; Windows NT)\nHost: caip.rutgers.eduConnection: Keep-Alive\nHTTP/1.1 200 OK\nDate: Thu, 23 Feb 2006 21:03:56 GMT\nServer: Apache/2.0.48 (Unix) DAV/2 PHP/4.3.9\nLast-Modified: Thu, 18 Nov 2004 16:40:02 GMT\nETag: \"1689-10a0-aab5c80\"\nAccept-Ranges: bytes\nContent-Length: 4256\nConnection: closeContent-Type: text/html; charset=ISO-8859-1\n<HTML>\n<HEAD>\n<TITLE>CAIP Center-Rutgers University</TITLE>\n</HEAD>Client Request Message\nServer Response Message\nFigure C-1: Exam ple HTTP re quest/res ponse transaction.", "source": "Page 447", "chapter": "9"}
{"id": "1430cb286aa1-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  434 \n    Connected to www.wired.com. \n    Escape character is '^]'. \nThen type in the HTTP method to download their web page: \n    GET / HTTP/1.0 \nHit the Enter  key (carriage return + line feed) twice  and you will get back the HTML document \nof the Wired  home page. You can also try the same with the method HEAD  instead of GET, as \nwell as with other methods introduced later, in cluding their header fields\u2014just remember to \nterminate the request with a blank line. \nEarly versions of HTTP dealt with URLs, but recently the concept of URI (see RFC 2396 \nhttp://www.ietf.org/rfc/rfc2396.txt )\u2014a combination of URL and URN ( Unified Resource Name )\u2014has \nbecome popular to express the idea that the URL may be a locator but may also be the name of an \napplication providing a service, indicating the fo rm of abstract \u201cresource\u201d that can be accessed \nover the Web. A resource  is anything that has a URI. A URI begins with a specification of the \nscheme  used to access the item. The scheme is usually named after the transfer protocol used in", "source": "Page 448", "chapter": "9"}
{"id": "1430cb286aa1-1", "text": "accessing the resource, but the reader should ch eck details in RFC 2396). The format of the \nremainder of the URI depends on the scheme. For example, a URI that follows the http scheme  \nhas the following format: \nhttp: // hostname [: port] / path [; parameters] [? query] \nwhere italic signifies an item to be supplied,  and brackets denote an optional item. The hostname  \nstring is a domain name of a network host, or its IPv4 address as a set of four decimal digit \ngroups separated by dots. The optional :port  is the network port number for the server, which \nneeds to be specified only if server does not use the well-known port (80). The /path  string \nidentifies single particular resource (document) on the server. The optional ;parameters  string \nspecifies the input arguments if the resource is an application, and similar for ?query . Ordinary \nURLs, which is what you will most frequently see, contain only hostname  and path. \nAn entity  is the information transferred as the payload of a request or response. It consists of \nmeta-information in the form of entity-header  fields and optional content in the form of an entity-\nbody . For example, an entity-body is the content of the HTML document that the server returns", "source": "Page 448", "chapter": "9"}
{"id": "1430cb286aa1-2", "text": "upon client\u2019s request, as in Figure C-1. \n \nC.1 HTTP Messages \n HTTP messages are either requests  from client to server or responses  from server to client. Both \nmessage types consist of \n\uf0b7 A start line, Request-Line  or Status-Line  \n\uf0b7 One or more header fields, including \n- General header, request header, respon se header, and entity header fields", "source": "Page 448", "chapter": "9"}
{"id": "342787f63dff-0", "text": "Appendix C \uf0b7 HTTP Overview 435\nEach header field consists of a name (case insensitive), followed by a colon (:) and the \nfield value \n\uf0b7 An empty line indicating the end of the header fields. The end-of-header is defined as the \nsequence CR-LF-CR-LF  (double newline, written in C/C++/Java as \"\\r\\n\\r\\n\" ) \n\uf0b7 An optional message body, used to carry the entity body (a document) associated with a \nrequest or response. \nEncoding mechanisms can be applied to the entity  to reduce consumption of scarce resources. For \nexample, large files may be compressed to reduce transmission time over slow network \nconnections. Encoding mechanisms that are defined are gzip  (or x-gzip ), compress  (or \nx-compress ), and deflate  (the method found in PKWARE products). \nHTTP operates over a TCP connection. Original HTTP was stateless , meaning that a separate \nTCP connection had to be opened for each request  performed on the server. This resulted in \nvarious inefficiencies, and the new design can keep connection open for multiple requests. In \nnormal use, the client sends a series of requests over a single connection and receives a series of \nresponses back from the server, leaving the connec tion open for a while, just in case it is needed", "source": "Page 449", "chapter": "9"}
{"id": "342787f63dff-1", "text": "again. HTTP also permits a server to return a se quence of responses with the intent of supporting \nthe equivalent of news-feed or a stock ticker. \nThis section reviews the request and response mess ages. Message headers ar e considered in more \ndetail in Section C.2. \nHTTP Requests \nAn HTTP request consists of (see Figure C-2): \n\uf0b7 A request line containing the HTTP method to be  applied to the resource, the URI of the \nresource, and the protocol version in use \n\uf0b7 A general header \n\uf0b7 A request header \n\uf0b7 An entity header \n\uf0b7 An empty line (to indicate the end of the header) \n\uf0b7 A message body carrying the entity body (a document)", "source": "Page 449", "chapter": "9"}
{"id": "1f6001c33ed9-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  436 \nAs seen in Figure C-2 and Figure C-3, different headers can be interleaved and the order of the \nheader fields is not important. The following is the table of HTTP methods : \nMethod Description \nGET Retrieves a resource on the server identified by the URI. This resource could be the \ncontents of a static file or i nvoke a program that generates data. \nHEAD Retrieves only the meta-information about  a document, not the document itself. \nTypically used to test a hypertext link for validity or to obtain accessibility and \nmodification information about a document. \nPUT Requests that the server store the encl osed entity, which represents a new or \nreplacement document. \nPOST Requests that the server accept the enclo sed entity. Used to perform a database \nquery or another complex operation, see below. \nDELETE Requests that the server removes the resource identified by the URI. \nTRACE Asks the application-layer proxies to decl are themselves in the message headers, so \nthe client can learn the path that the document took. \nOPTIONS Used by a client to learn about other methods that can be applied to the specified \ndocument. \nCONNECT Used when a client needs to talk to a server through a proxy server.", "source": "Page 450", "chapter": "9"}
{"id": "1f6001c33ed9-1", "text": "CONNECT Used when a client needs to talk to a server through a proxy server. \nThere are several more HTTP methods, such as LINK, UNLINK, and PATCH, but they are less \nclearly defined. GET /index.html HTTP 1.1\nAccept: image/gif, image/x-xbitmap, image/\njpeg, image pjpeg, */*\nAccept-Language : en-us\nAccept-Encoding : gzip, deflate\nUser-Agent : Mozilla/5.0 (compatible, MSIE\n5.01; Windows NT)\nHost: caip.rutgers.edu\nConnection : Keep-AliveRequest method Resource URI Protocol version\nRequest\nheader fieldsRequest line\nEmpty line(indicatesend-of-header)\nEntity\nheader field\nFigure C-2: HTTP Request message format.", "source": "Page 450", "chapter": "9"}
{"id": "931f155b7f85-0", "text": "Appendix C \uf0b7 HTTP Overview 437\nThe GET method  is used to retrieve a document from a Web server. There are some special \ncases in which GET behaves differently. First, a server may construct a new HTML document for \neach request. These are handled by specifying a URI that identifies a program in a special area on \nthe Web server known as the cgi-bin area . The URI also includes arguments to the program in the \npath name suffix. Many fill-form requests associated  with Web pages use this approach instead of \na POST method, which is somewhat more complex. A second special case arises if a document has moved. In this case, the GET method can send ba ck a redirection error code that includes the \nURI of the new location. \nThe POST method  is used for annotating existing res ources\u2014the client posts a note to the \nresource. Examples include posting of a conventiona l message to an e-mail destination, bulleting \nboard, mailing list, or chat session; providing a bl ock of data obtained through a fill-form; or \nextending a database or file through an append operation. \nHTTP Responses \nAn HTTP response consists of (see Figure C-3) \n\uf0b7 A status line containing the protocol version and a success or error code \n\uf0b7 A general header \n\uf0b7 A response header \n\uf0b7 An entity header", "source": "Page 451", "chapter": "9"}
{"id": "931f155b7f85-1", "text": "\uf0b7 A response header \n\uf0b7 An entity header \n\uf0b7 An empty line (to indicate the end of the header) \n\uf0b7 A message body carrying the entity body (a document) \n Among these only the status-line is required. Th e reader should consult the standard for the \ninterpretation of the numeric status codes. The response header fields will be described later. \n HTTP 1.1 200 OK\nDate: Thu, 23 Feb 2006 21:03:56 GMT\nServer: Apache/2.0.48 (Unix) DAV/2 PHP/4.3.9\nLast-Modified : Thu, 18 Nov 2004 16:40:02 GMT\nETag: \"1689-10a0-aab5c80\"\nAccept-Ranges : bytes\nContent-Length : 4256\nConnection : close\nContent-Type : text/html; charset=ISO-8859-1\n<HTML>\n<HEAD><TITLE>CAIP Center-Rutgers University</TITLE></HEAD>\n...Status code (success or error) Protocol version\nStatus line\nEmpty line\n(indicates\nend-of-header)\nEntity\nbodyResponse\nheader fieldsGeneral\nheader fields\nEntity\nheader fields\nFigure C-3: HTTP Response message format.", "source": "Page 451", "chapter": "9"}
{"id": "fa07010df85a-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  438 \nC.2 HTTP Message Headers \n \nHTTP transactions do not need to use all the headers.  In fact, in HTTP 1.0, only the request line is \nrequired and it is possible to perform some request s without supplying header information at all. \nFor example, in the simplest case, a request of GET /index.html HTTP/1.0  without any \nheaders would suffice for most web servers to understand the client. In HTTP 1.1, a Host  \nrequest header field is the minimal header  information required for a request message. \nGeneral Headers \nGeneral-header fields apply to both request and response messages. They indicate general \ninformation such as the current time or the path through the network that the client and server are \nusing. This information applies only to the message being transmitted and not to the entity \ncontained in the message. General headers  are as follows: \nHeader Description \nCache-Control Specifies desired behavior from a cachi ng system, as used in proxy servers. \nDirectives such as whether or not to cache, how long, etc. \nConnection Specifies whether a particular connection is persistent or automatically \nclosed after a transaction. \nDate Contains the date and time at which the message was originated.", "source": "Page 452", "chapter": "9"}
{"id": "fa07010df85a-1", "text": "Date Contains the date and time at which the message was originated. \nPragma Specifies directives for proxy and gateway systems; used only in HTTP 1.0 \nand maintained in HTTP 1.1 for backwards compatibility. \nTrailer Specifies the headers in the trailer af ter a chunked message; not used if no \ntrailers are present. \nTransfer-\nEncoding Indicates what, if any, type of transformation has been applied to the \nmessage, e.g., chunked . (This is not the same as content-encoding.) \nUpgrade Lists what additional communication prot ocols a client supports, and that it \nwould prefer to talk to the server with an alternate protocol. \nVia Updated by gateways and proxy serve rs to indicate the intermediate \nprotocols and hostname. This informat ion is useful for debugging process. \nWarning Carries additional information about th e status or transformation of a \nmessage which might not be reflected in the message, for use by caching \nproxies. \n \nRequest Headers \nThe request-header fields allow the client to pass additional information about the request, and \nabout the client itself, to the server. These fiel ds act as request modifiers, with semantics \nequivalent to the parameters/arguments of a programming language method invocation. Request \nheaders  are listed in this table: \nHeader Description", "source": "Page 452", "chapter": "9"}
{"id": "fa07010df85a-2", "text": "headers  are listed in this table: \nHeader Description \nAccept Specifies content encodings of the r esponse that the client prefers.  \nAccept-Charset Specifies the character sets that the client prefers. If this header is not \nspecified, the server assumes the default of US-ASCII and ISO-8859-1. \nAccept-Encoding Specifies content encoding algorithms that the client understands. If this", "source": "Page 452", "chapter": "9"}
{"id": "d26efb23446a-0", "text": "Appendix C \uf0b7 HTTP Overview 439\nheader is omitted, the server will se nd the requested entity-body as-is, \nwithout any additional encoding. \nAccept-Language Specifies human language(s) that the client prefers. Languages are \nrepresented by their two-letter abbreviations, such as en for English, \nfr for French, etc. \nAuthorization Provides the user agent\u2019s credentials to  access data at the URI. Sent in \nreaction to WWW-Authenticate  in a previous response message. \nExpect Indicates what specific server behaviors are required by the client. If the \nserver is incapable of the expectation, it returns an error status code. \nTransfer-\nEncoding Indicates what, if any, type of tran sformation has been applied to the \nmessage. \nFrom Contains an Internet e-mail address for the user executing the client. For \nthe sake of privacy, this should not be sent without the user\u2019s consent. \nHost Specifies the Internet hostname and port number of the server contacted \nby the client. Allows multihomed servers to use a single IP address. \nIf-Match A conditional requesting the entity only if it matches the given entity \ntag (see the ETag  entity header). \nIf-Modified-\nSince Specifies that the Request-URI data is to be returned only if ith has \nbeen modified since the supplied date and time (used by GET method).", "source": "Page 453", "chapter": "9"}
{"id": "d26efb23446a-1", "text": "been modified since the supplied date and time (used by GET method). \nIf-None-Match Contains the condition to be used by an HTTP method. \nIf-Range A conditional requesting only a missing portion of the entity, if it has \nnot been changed, and the entire entity if it has (used by GET method). \nIf-Unmodified-\nSince A conditional requesting the entity only if it has been modified since a \ngiven date and time. \nMax-Forwards Limits the number of proxies or gateways that can forward the request. \nProxy-\nAuthorization Allows the client to identify itself to a proxy requiring authentication. \nRange Requests a partial range from the en tity body, specified in bytes. \nReferer Gives the URI of the resource from which the Request-URI was \nobtained. \nTE Indicates what extension transfer-e ncodings the client is willing to \naccept in the response and whether or not it is willing to accept trailer fields in a chunked transfer-coding. \nUser-Agent Contains info about the client application originating the request. \nA user agent is a browser, editor, or other end-user/client tool. \nResponse Headers \nThe response-header fields are used only in ser ver response messages. Th ey describe the server\u2019s \nconfiguration and information a bout the requested URI resource. Response headers  are as \nfollows:", "source": "Page 453", "chapter": "9"}
{"id": "d26efb23446a-2", "text": "follows: \nHeader Description \nAccept-Ranges Indicates the server\u2019s acceptance of range requests for a resource, \nspecifying either the range unit (e.g., bytes ) or none  if no range requests \nare accepted. \nAge Contains an estimate of the amount of  time, in seconds, since the response \nwas generated at the origin server. \nETag Provides the current value of the entity tag  for the requested variant of the \ngiven document for the purpose of cache management (see below).", "source": "Page 453", "chapter": "9"}
{"id": "0bf6b394ada6-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  440 \nLocation Specifies the new location of a document; u sed to redirect the recipient to a \nlocation other than the Request-URI for completion of the request or identification of a new resource. \nProxy-\nAuthenticate Indicates the authentication scheme and pa rameters applicable to the proxy \nfor this Request-URI and the current connection. \nRetry-After Indicates how long the service is expected to be unavailable to the \nrequesting client. Given in seconds or as a date and time when a new \nrequest should be placed. \nServer Contains information about the software used by the origin server to \nhandle the request\u2014name and version number. \nSet-Cookie Contains a (name, value) pair of info rmation to retain for this URI; for \nbrowsers supporting cookies. \nVary Signals that the response entity has multiple sources and may therefore \nvary; the response copy was selecte d using server-driven negotiation. \nWWW-\nAuthenticate Indicates the authentication scheme and pa rameters applicable to the URI. \nEntity tags are unique identifiers of  different versions of the docume nt that can be associated with \nall copies of the document. By checking the ETag  header, the client can determine whether it \nalready has a copy of the document in its local cache. If the document is modified, its entity tag", "source": "Page 454", "chapter": "9"}
{"id": "0bf6b394ada6-1", "text": "changes, so it is more efficient to check for the entity tag than Last-Modified  date. \nEntity Headers \nEntity-header fields define metainformation abou t the entity-body or, if no body is present, about \nthe resource identified by the request. They speci fy information about the entity, such as length, \ntype, origin, and encoding schemes. Although en tity headers are most commonly used by the \nserver when returning a requested document, they  are also used by clients when using the POST \nor PUT methods. Entity headers  are as follows: \nHeader Description \nAllow Lists HTTP methods that are allowed at a specified URL, such as GET, \nPOST, etc. \nContent-\nEncoding Indicates what additional content encodings have been applied to the \nentity body, such as gzip  or compress . \nContent-\nLanguage Specifies the human language(s) of the intended audience for the entity \nbody. Languages are represented by their two-letter abbreviations, such as \nen for English, fr for French, etc. \nContent-Length Indicates the size, in bytes, of the entity-body transferred in the message. \nContent-\nLocation Supplies the URL for the entity, in  cases where a document has multiple \nentities with separately accessible locations. \nContent-MD5 Contains an MD5 digest of the entity body, for checking the integrity of", "source": "Page 454", "chapter": "9"}
{"id": "0bf6b394ada6-2", "text": "the message upon receipt. \nContent-Range Sent with a partial entity body to specify where the partial body should be \ninserted in the full entity body. \nContent-Type Indicates the media type and subtype of  the entity body. It uses the same \nvalues as the client\u2019s Accept  header. Example: text/html  \nExpires Specifies the date and time after which this response is considered stale. \nLast-Modified Contains the date and time at which the origin server believes the resource \nwas last modified.", "source": "Page 454", "chapter": "9"}
{"id": "33a6117dfaca-0", "text": "Appendix C \uf0b7 HTTP Overview 441\n \nC.3 HTTPS\u2014Secure HTTP \n \nHTTPS (Hypertext Transfer Protocol over Secure  Socket Layer, or HTTP over SSL) is a Web \nprotocol developed by Netscape and built into its browser that encrypts and decrypts user page \nrequests as well as the pages that are returned  by the Web server. Technically, HTTPS sends \nnormal HTTP messages through a SSL sublayer. SSL is a generic technology that can be used to encrypt many different protocols; hence HTTPS is  merely the application of SSL to the HTTP \nprotocol. HTTPS server listens by default on th e TCP port 443 while HTTP uses the TCP port 80. \nSSL key size is usually either 40 or 128 bits for the RC4 stream encryption algorithm, which is considered an adequate degree of encryption for commercial exchange. \nWhen the URI schema of the resource you pointed to starts with https://  and you click \n\u201cSend,\u201d your browser\u2019s HTTPS layer will encryp t the request message.  The response message \nyou receive from the server will also travel in encrypted form, arrive with an https://  URI, \nand be decrypted for you by your browser\u2019s HTTPS sublayer. \n \nC.4 Bibliographical Notes \n Above I provide only a brief summary of HTTP, and the interested reader should seek details", "source": "Page 455", "chapter": "9"}
{"id": "33a6117dfaca-1", "text": "Above I provide only a brief summary of HTTP, and the interested reader should seek details \nonline at http://www.w3.org/Protocols/ . A comprehensive and highly r eadable coverage of HTTP is \ngiven in [Krishnamurthy & Rexford, 2001]. \nThe interested reader should check IETF RFC 2660:  \u201cThe Secure HyperText Transfer Protocol\u201d \nat http://www.ietf.org /rfc/rfc2660.txt , and the related RFC 2246: \u201cT he TLS Protocol Version 1.0,\u201d \nwhich is updated in RFC 3546.", "source": "Page 455", "chapter": "9"}
{"id": "1bba55db197c-0", "text": "442  \nAppendix D  \nDatabase-Driven Web Applications \n \nA typical web application is a web-base d user interface on a relational database. \n \nConsider the following example: Our task is to develop a Web-based system th at will support the following functions. After the \nuser points the browser to our website, the user is  shown the entire list of persons in the database \nthat we created earlier. Only names should be s hown, not their home addresses. The user is asked \nto select any one name from the list and press the button \u201cShow Home Address.\u201d (The user \nshould not be allowed to select more than a singl e name at a time.) Upon receiving the request, \nthe system should retrieve the address of the selected person from the database and show the \nperson\u2019s name and home address in the browser. Af ter viewing this information, the user can \nclick the hyperlink \u201cStart Again,\u201d which will bring the user to the starting website, where the user \ncan again select one name and repeat the process. \nNote: Do not develop a login and authentication functiona lity, i.e., this website should be publicly \navailable. \nWe start by downloading a free relational database management system, such as MySQL \n(http://www.mysql.com/ ) or PostgreSQL ( http://www.postgresql.org/ ). Next, we create a simple table so", "source": "Page 456", "chapter": "9"}
{"id": "1bba55db197c-1", "text": "that each record contains person\u2019s name and home address. Enter several records, e.g., about 10 \nor so, manually into the database. \n \nBibliographical Notes \nT. Coatta, \u201cFixated on statelessness,\u201d ACM Queue , May 15, 2006. Online at: \nhttp://www.acmqueue.com/ modules.php?name=News&f ile=article&sid=361   \nP. Barry, \u201cA database-driven Web a pplication in 18 lines of code,\u201d Linux Journal , no. 131, pp. \n54-61, March 2005, Online at: http://www.linuxjournal.com/article/7937", "source": "Page 456", "chapter": "9"}
{"id": "aa5eedeb0c52-0", "text": "443  \nAppendix E  \nDocument Object Model (DOM) \n \nThe purpose of Document Object Model  (DOM) is to allow programs and scripts running in a \nweb client (browser) to access and manipulate the structure and content of markup documents. \nDOM also allows the creation of new documen ts programmatically, in the working memory. \nDOM assumes a hierarchical, tree data-structure of documents and it provides platform-neutral \nand language-neutral APIs to navigate  and modify the tree data-structure. \nIf documents are becoming applications, we need to  manage a set of user-interactions with a body \nof information. The document thus becomes a user-interface to information that can change the \ninformation and the interface itself. \nWhen the XML processor parses an XML docum ent, in general it produces as a result a \nrepresentation that is maintained in the pro cessor\u2019s working memory. This representation is \nusually a tree data structure, but not necessarily  so. DOM is an \u201cabstraction,\u201d or a conceptual \nmodel of how documents are represented and manipulated in the products that support the DOM interfaces. Therefore, in general, the DOM inte rfaces merely \u201cmake it look\u201d as if the document \nrepresentation is a tree data structure. Remember  that DOM specifies only the interfaces without \nimplying a particular implementation. The actua l internal data structures and operations are", "source": "Page 457", "chapter": "9"}
{"id": "aa5eedeb0c52-1", "text": "implying a particular implementation. The actua l internal data structures and operations are \nhidden behind the DOM interfaces and could be potentially proprietary. \nThe object model in the DOM is a programming object model that comes from object-oriented \ndesign (OOD). It refers to the fact that the inte rfaces are defined in terms of objects. The name \n\u201cDocument Object Model\u201d was chosen because it is an \u201cobject model\u201d in the traditional OOD \nsense: documents are modeled using objects, a nd the model encompasses the structure as well as \nthe behavior of a document and the objects of which it is composed. As an object model, the \nDOM identifies: \n\uf0b7 The interfaces and objects used to represent and manipulate a document \n\uf0b7 The semantics of these interfaces and object s, including both behavior and attributes \n\uf0b7 The relationships and collaborations  among these interfaces and objects. \n \nE.1 Core DOM Interfaces", "source": "Page 457", "chapter": "9"}
{"id": "573ea599a7f3-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  444 \nModels are structures. The DOM closely resembl es the structure of the documents it models. In \nthe DOM, documents have a logical structure which is very much like a tree.  \nCore object interfaces are sufficient to represen t a document instance (the objects that occur \nwithin the document itself). The \u201cdocument\u201d can  be HTML or XML documents. The main types \nof objects that an application program will encounter when using DOM include: \nNode \nThe document structure model defines an object hierarchy made up of a number of nodes. \nThe Node object is a single node on the document structure model and the Document object is the \nroot node of the document structure model and provides the primary access to the document's \ndata. The Document object provides access to th e Document Type Definition (DTD) (and hence \nto the structure), if it is an XML document. It al so provides access to the root level element of the \ndocument. For an HTML document, that is the <HTML>  element, and in an XML document, it is \nthe top-level element. It also contains the fact ory methods needed to create all the objects defined \nin an HTML or XML document. \nEach node of the document tree may have any numbe r of child nodes. A child will always have", "source": "Page 458", "chapter": "9"}
{"id": "573ea599a7f3-1", "text": "an ancestor and can have siblings or descendant s. All nodes, except the root node, will have a \nparent node. A leaf node has no children. Each node  is ordered (enumerated) and can be named. \nThe DOM establishes two basic types of relationships: \n   1. Navigation: The ability to traverse the node hierarchy, and    2. Reference: The ability to access a collection of nodes by name. \n \nNAVIGATION The structure of the document determines the inheritance of element attributes. Thus, it is \nimportant to be able to naviga te among the node objects representing parent and child elements. \nGiven a node, you can find out where it is located in the document structure model and you can refer to the parent, child as well as siblings of this node. A script can manipulate, for example, \nheading levels of a document, by using these references to traverse up or down the document \nstructure model. This might be done using th e NodeList object, which represents an ordered \ncollection of nodes. \nREFERENCE \nSuppose, for example, there is a showcase consistin g of galleries filled with individual images. \nThen, the image itself is a class, and each instan ce of that class can be referenced. (We can assign \na unique name to each image using the NAME attribute.) Thus, it is possible to create an index of", "source": "Page 458", "chapter": "9"}
{"id": "573ea599a7f3-2", "text": "image titles by iterating over a list of nodes. A scrip t can use this relationship, for example, to \nreference an image by an absolute or relative positio n, or it might insert or remove an image. This \nmight be done using the NamedNodeMap object, which represents (unordered) collection of \nnodes that can be accessed by name.", "source": "Page 458", "chapter": "9"}
{"id": "ae594031e4dc-0", "text": "Appendix E \uf0b7 Document Object Model (DOM) 445\nElement \nElement represents the elements in a document. (R ecall that XML elements are defined in Section \n6.1.1.) It contains, as child nodes, all the content between the start tag and the end tag of an \nelement. Additionally, it has a list of Attribute  objects, which are either  explicitly specified or \ndefined in the DTD with default values. \nDocument \nDocument represents the root node of a standalone document. \n \n \nE.2 Bibliographical Notes \nDocument Object Model (DOM) Level 1 Specification, Version 1.0, W3C Recommendation 1 \nOctober, 1998. Online at: http://www.w3.org/TR /REC-DOM-Level-1/   \nDOM description can be found here: http://www.irt.org/articles/js143/index.htm", "source": "Page 459", "chapter": "9"}
{"id": "6207a64f9e7c-0", "text": "446  \nAppendix F  \nUser Interface Programming \n \n \nUser interface design should focus on the human rather than on the system side. The designer \nmust understand human fallibilities and anticipate them in the design. Understanding human \npsychology helps understand what it is that makes the user interface easier to understand, \nnavigate, and use. Because proper treatment of these subjects would require a book on their own, \nI will provide only a summary of key points. \nModel/View/Controller design pattern is the key so ftware paradigm to facilitate the construction \nof user interface software and is reviewed first. \n \nF.1 Model/View/Controller Design Pattern \n MVC pattern  \nF.2 UI Design Recommendations \n Some of the common recommendations about interfaces include: \n\uf0b7 Visibility : Every available operation/feature shoul d be perceptible, either by being \ncurrently displayed or was recently shown so th at it has not faded from user\u2019s short-term \nmemory. Visible system features are called affordances ; \n\uf0b7 Transparency : Expose the system state at every moment. For example, when using \ndifferent tools in manipulation, it is common to  change the cursor shape to make the user \naware of the current manipulation mode (rotation, scaling, or such); \n\uf0b7 Consistency : Whenever possible, comparable operations should be activated in the same", "source": "Page 460", "chapter": "9"}
{"id": "6207a64f9e7c-1", "text": "\uf0b7 Consistency : Whenever possible, comparable operations should be activated in the same \nway (although, see [ Error! Reference source not found. ] for some cautionary remarks). \nOr, stated equivalently, any interface objects that look the same are the same;", "source": "Page 460", "chapter": "9"}
{"id": "be823da88195-0", "text": "Appendix F \uf0b7 User Interface Programming 447\n\uf0b7 Reversibility : Include mechanisms to recover a prior state in case of user or system errors \n(for example, undo/redo mechanism). Related to  this, user action should be interruptible, \nin case the user at any point changes their mind, and allowed to be redone; \n\uf0b7 Intuitiveness : Design system behavior to minimize the amount of surprise experienced by \nthe target user (here is where metaphors and analogies in the user interface can help); \n\uf0b7 Guidance : Provide meaningful feedback when e rrors occur so the user will know what \nfollow-up action to perform; also provide context-sensitive user help facilities. \nObviously, the software engineer should not adopt  certain design just because it is convenient to \nimplement. The human aspect of the interface must be foremost. \nExperience has shown that, although users tend at first to express preference for good looks, they \neventually come around to value experience. The interface designer should, therefore, be more \ninterested in how the interface fe els, than in its aesthetics. What something looks like should \ncome after a very detailed conve rsation about what it will do. There are different ways that \ninterface developers quantify the feel of an inte rface, such as GOMS keystroke model, Fitt\u2019s Law,", "source": "Page 461", "chapter": "9"}
{"id": "be823da88195-1", "text": "Hick\u2019s Law, etc. [Raskin, 2000]. \n \nF.3 Bibliographical Notes \n \n[Raskin, 2000], is mostly about interface design, little on software engineering, but articulates \nmany sound design ideas for user interfaces. \nSome websites of interest (last checked August 2005): \n\uf0b7 http://www.useit.com/ [useit.com: Jakob Nielsen on Usability and Web Design] \n\uf0b7 http://www.jnd.org/ [Don Norman\u2019s jnd website] \n\uf0b7 http://www.asktog.com/ [AskTog: Interaction Design Solutions for the Real World] \n\uf0b7 http://www.pixelcentric.net/x-shame/ [Pix elcentric Interface Hall of Shame] \n\uf0b7 http://citeseer.ist.psu.edu/context/16132/0 \n\uf0b7 http://www.sensomatic.com/chz/gui/Alternative2.html \n\uf0b7 http://www.derbay.org/userinterfaces.html \n\uf0b7 http://www.pcd-innovations.com/infosite/tre nds99.htm [Trends in Interface Designs \n(1999 and earlier)] \n\uf0b7 http://www.devarticles.com/c/a/Java/Graphical-User-Interface/", "source": "Page 461", "chapter": "9"}
{"id": "be823da88195-2", "text": "\uf0b7 http://www.chemcomp.com/Journal_of_CCG/Features/guitkit.htm", "source": "Page 461", "chapter": "9"}
{"id": "256a5d09dd86-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  448", "source": "Page 462", "chapter": "9"}
{"id": "9dd4a8a116d7-0", "text": "449  \nAppendix G  \nExample Project: Tic-Tac-Toe Game \n \nThis appendix illustrates a worked example of a fu ll software engineering project. The problem is \ndeveloping a distributed game of tic-tac-toe. Ou r development team is three strong and counts as \nmembers Me, Myself & Irene. We go under the nom de  guerre Gang of Three - in team, or simply \nGoT-it. Me Go hails from Hunan and Irene is fr om Ukraine. Our strengths include: Me likes \ncoding and prefers doing it all alone; he thinks that everything other than code is fluff. Me \nbelieves that the most successful way to solve a pr oblem is to tackle it as a whole because you get \nthe work done and finish it faster, instead of getting bogged down in mi nor details. Irene would \nlike to manage the project. As for Myself, pr ogramming is not my forte; I lean towards my \ncreative and critical thinking skills\u2014I like sk etching user interfaces and other impressions. \n \nNot everyone had the same experience at the beginning of the project and not every team member \nhad the same aptitude for learning. We hoped that the size of scope of the assignment, however,", "source": "Page 463", "chapter": "9"}
{"id": "fa45ce55cec5-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  450 \nwould allow everyone to find a niche and work on different parts of the project. We figured out, \nwith our complementary skills we are well equippe d to tackle any challenges of teamwork on a \nlarge-scale project. \nME MYSELF IRENE  \n \nG.1 Customer Statement of Work \n \nThis section describes the initial \u201cvision statement\u201d  that we received from our customer. It only \nroughly describes the system-to-be and the deta ils will need to be discovered during the \nrequirements engineering phase of our project (Sections G.2 and G.3). \nG.1.1 Problem Statement \nThe GoT-it team is charged with building software that will allow players to play the game of tic-\ntac-toe from different computers. Tic-tac-toe is a game in which players alternate placing pieces \n(typically Xs for the player who goes first and Os for the second) on a 3\u00d73 board. The first player \nto get three pieces in a line (vertically, horizontally , or diagonally) is the winner. The game may \nend in a \u201cdraw\u201d or \u201ctie\u201d, so that neither of two players wins.", "source": "Page 464", "chapter": "9"}
{"id": "32311b015f4d-0", "text": "Appendix F \uf0b7 User Interface Programming 451\nMotivation:  Tic-tac-toe is a simple game that is fu n to play. A quick search of the Web reveals \nthat all free implementations allow the user to  play against the computer. We will make it \npossible to play against other users and w ill support different versions of the game. \nVision:  In addition to the default standard version, th e players will be able to play two variants of \nthe game: \n\uf0b7 \u201crevenge\u201d tic-tac-toe \n\uf0b7 nine-board tic-tac-toe \nOur business plan is to offer the game fre e and support the operations from commercial \nadvertisement proceeds. Other versions are planne d for the future, if the game proves popular and \nthe budget allows it. \nEach player will be able to invite an opponent for a match, or may just wait to be invited by \nanother player. \nThe game will also show the leaderboard\u2014a score board displaying the names and current scores \nof the leading competitors. \n \nG.1.2 Glossary of Terms \n\u25cf Leaderboard  \u2014 a scoreboard displaying the names and current scores of the leading \ncompetitors.", "source": "Page 465", "chapter": "9"}
{"id": "32311b015f4d-1", "text": "competitors. \n\u25cf Nine-board tic-tac-toe  \u2014 nine tic-tac-toe boards are arranged in a 3\u00d73 grid to form a 9\u00d79 grid \n(Figure G-1). The first player\u2019s move may go on  any board; all subsequent moves are placed in \nthe empty cells on the board corresponding to the squa re of the previous move (that is, if a move \nwere in the lower-right square of a board, th e next move would take  place on the lower-right \nboard). If a player cannot move because the indicat ed board is full, the next move may go on any \nboard. Again, the first player to get three pieces in a line is the winner. First move in the lower-right square Next move here on the lower-right board\n \nFigure G-1: Nine-board tic-tac-toe. If a move is made to the lower-right-corner cell of the \nfirst board, then the next move must be on any empty cell of the lower-right-corner board.", "source": "Page 465", "chapter": "9"}
{"id": "b50bcc2ca918-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  452 \n\u25cf Game board  \u2014 the board with a 3\u00d73 grid in the standard tic-tac-toe, on which the players \nmove their pieces. \n\u25cf Game lobby  \u2014 the initial screen shown to th e user when he or she logs into the system or after \na match is finished and the game board is removed. \n\u25cf Gameroom  \u2014 the private session established between two players to play a match of tic-tac-\ntoe. After the match is finished, the gameroom is destroyed and the players are brought to the \ninitial screen. The rationale for this design  is explained later in Section G.3.4. \n\u25cf Player list  \u2014 the list of all players that are currently logged in the system and available to play \nthe game of tic-tac-toe. \n\u25cf \u201cRevenge\u201d tic-tac-toe  \u2014 the first player with 3-in-a-line wins, but loses if the opponent can \nmake 3-in-a-line on the next move. \n\u25cf Response time limit  \u2014 the interval within which the remo te player is expected to respond to \nlocal player\u2019s actions. If no response is received, it is assume that the remote player lost network connection or became disinterested in the game. Additional description provi ded in Section G.2.1.", "source": "Page 466", "chapter": "9"}
{"id": "b50bcc2ca918-1", "text": "Additional information from Wikipedia: http://en.wikipedia.org/wiki/Tic-tac-toe   \n \nG.2 System Requirements Engineering \n \nThe key lesson of this section that the reader should learn is that we are not just writing down the \nsystem specification based on the customer  statement of work. Instead, we are discovering  the \nrequirements. The customer statement of work c ontains only a small part of knowledge that we \nwill need to develop the system-to-be. Most of the knowledge remains to  be discovered through \ncareful analysis and discussion with the customer . We will discover issues that need to be \nresolved and make decisions about business polic ies that will be implemented by the system-to-\nbe. \nG.2.1 Enumerated Functional Requirements \nWe start by deriving the functional requirements from the statement of work (Section G.1.1). In our case, most functional requirements are distilled directly from the statement of work. \nHowever, some requirements will emerge from the requirements analysis. In addition, all \nrequirements should be analyzed for their clarity, precision, and how realistic they are given the project resources and schedule. \nWe also need to consider if we need any no n-functional requirements, which are usually less \nconspicuous in the statement of work. We reali ze that the players are remote, which raises the", "source": "Page 466", "chapter": "9"}
{"id": "b50bcc2ca918-2", "text": "issue of latency and generally of poor awarene ss about each other\u2019s activities. We do not specify \nany latency requirements, because it is not criti cal that the other player immediately sees each \nmove. The players are allowed time to contempl ate their next move, so any network latency \ncannot be distinguished from a thinking pause. However, to avoid awkward situations where", "source": "Page 466", "chapter": "9"}
{"id": "d0e42cf04abf-0", "text": "Appendix F \uf0b7 User Interface Programming 453\nplayers have to wait for the other\u2019s response for annoyingly long intervals (e.g., a player quits in \nthe middle of a game), we introduce a RESPONSE TIME POLICY : \nTTT-BP01:  each player is required to respond within a limited interval or lose the match \nThis policy is not really a non-functional requireme nt and will not be stated as such. It may be \nrefined in the future, so that players can request  to suspend a match for a specified interval, or \ninstead of automatically penalizing an unresponsive player, the system may first send alerts to \nthis player. \nEnumerated requirements for the system-to-be are as follows: \nTable G-1: Enumerated functional requirements for the distributed game of tic-tac-toe. \nIdentifier Requirement PW\nREQ1 The system shall allow any pair of players to play from different computers 5 \nREQ2 The system shall allow users to challenge opponents to play the game 4 \nREQ3 The system shall allow users to negotiate the game version to play 3 \nREQ4 The system shall allow users to play th e standard tic-tac-toe or any of the two \nvariants, as selected by the users 4 \nREQ5 The system should show a leaderboard of leading competitors and their ranking 2", "source": "Page 467", "chapter": "9"}
{"id": "d0e42cf04abf-1", "text": "REQ5 The system should show a leaderboard of leading competitors and their ranking 2 \nREQ6 The system shall allow users to  register with unique identifiers 1 \nREQ7 The system shall allow users to set thei r status, such as \u201cavailable,\u201d \u201cengaged,\u201d \nor \u201cinvisible\u201d 2 \nOur customer explained the priority weights (PW) as follows. Obviously, the key objective for \nthis system is to allow playing a distributed game of tic-tac-toe. So, REQ1 has the highest \npriority. It is desirable that the players can cha llenge other players (REQ2), but this is not a top \npriority in case it proves difficult to implement and a simple solution can be found, such as \ncommunicating by other means (e.g., telephone) and connecting only two players at a time. Thus, \nREQ2 has a lower priority. REQ3 has an even lo wer priority. REQ4 says that the system should \nsupport different variants, but they may not be negotiable using our system (REQ3). Instead, the \nplayers may use different means to negotiate the version (e.g., telephone) and the start our \nsystem. The last three requirements (REQ5\u2013REQ7) are desirable, but may be dropped if time and \nresources become exhausted.", "source": "Page 467", "chapter": "9"}
{"id": "d0e42cf04abf-2", "text": "resources become exhausted. \nThe requirement REQ2 does not specify if any player can invite any other player or only the \nplayers who are not already playing. We may in troduce an option that the system informs the \ninviter that they must wait until the invitee complete s the ongoing game first. This issue is related \nto REQ7 and will be discussed below and in Section G.3.3. \nThe requirement REQ4 is compounded because it dema nds the ability to play a game variant, as \nwell as the ability to select among different varian ts. To facilitate acceptance testing of this \nrequirement, it is helpful to split it into two simpler requirements: \nREQ4a: The system shall allow users to play a variant of tic-tac-toe (sta ndard, revenge, and nine-\nboard) \nREQ4b: The system shall allow users to select which variant of tic-tac-toe to play", "source": "Page 467", "chapter": "9"}
{"id": "ffb3071e5aaa-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  454 \nThe last requirement (REQ7) originally was not  requested by the customer, but the developer \nmay suggest it as useful and introduce it with customer\u2019s approval. However, adding this \nrequirement is not as simple as it may appear at first. What is meant by \u201cavailable\u201d or \u201cengaged\u201d? \nDoes \u201cavailable\u201d mean that this player is generally open to invitations to play the game, or it has \na more narrow meaning representing a currently idle player? If former, what the system should do \nif an \u201cavailable\u201d player receives an invitation while he or she is playing the game? Should the \nsystem pop up (possibly annoying) dialog box and ask whether he or she accepts the invitation? \nThese issues are also related to REQ2. In the latter case where the status represents the status in \nthe current instant, will the player explicitly mana ge his or her status, or will the system do it \nautomatically. That is, when a player finishes a ma tch, his or her status will automatically change \nto \u201cavailable.\u201d If the system will support different st atuses, instead only idle versus playing, then \nplayers will need explicitly to indicate their availab ility to other players. Allowing players to play \nmultiple matches at the same time would further complicate the player stat us issue. The reader", "source": "Page 468", "chapter": "9"}
{"id": "ffb3071e5aaa-1", "text": "multiple matches at the same time would further complicate the player stat us issue. The reader \nmust be aware that such issues mu st be resolved at some point. Because of this difficulty, we will \nleave requirement REQ7 out of further consideration. \nThe NOT List\u2014What This Project is Not About:  Additional requirements may be conceived, \nsuch as allowing users to search for opponents by na me or some other query parameter, invite \ntheir social network friends to play the game, organize tournaments, etc. In such cases, invitations \ncan be sent not only to currently logged-in idle pl ayers, but also to any person possibly outside of \nour system. The system could save the state of the matches at each turn so that players may play \nat their own pace. The system could maintain th e history of all matches for all users, and each \nuser would be able to view his or her statisti cs: the history of matches, scores, and the past \nopponents. Playing against a computer opponent may also be supported. The system could also \nallow players to chat with each other. These ex tensions were not asked for in the problem \nstatement, so they will not be considered. \nNote that we may need to provide more details for some requirements. Some things in the listed", "source": "Page 468", "chapter": "9"}
{"id": "ffb3071e5aaa-2", "text": "Note that we may need to provide more details for some requirements. Some things in the listed \nrequirements may be tacitly assumed by one person, but may not be self-evident, so it is safer to \nbe specific about them and avoid issues down th e road. Here are some examples of additional \ndetails for some of the requirements: \nTable G-2: Extending the list of functional requirements from Table G-1. \nIdentifier Requirement \nREQ2a (as REQ2 in Table G-1) \nREQ2b The system shall allow the invited user to accept or decline the challenge \nREQ2c The system shall allow the user to challenge only one opponent at a time\u2014no \nsimultaneous pending invitations are allowed \nREQ3a (as REQ3 in Table G-1) \nREQ3b The system shall not allow the players to change the game version during an ongoing \nmatch \n(REQ4a, REQ4b listed above) \nREQ4c The system shall allow each player to play no more than one match at a time \nREQ4d The system shall allow a player to forfeit an ongoing match \nREQ4e The system will end every match in either a win or a draw and adjust players\u2019", "source": "Page 468", "chapter": "9"}
{"id": "255ac27f3f39-0", "text": "Appendix F \uf0b7 User Interface Programming 455\nrankings accordingly \n(REQ5, REQ6 remain same as in Table G-1; REQ7 is rejected) \nREQ2c in Table G-2 is intended to keep the system  simple, so that the program does not need to \nkeep track of pending invitations and resolve mu ltiple acceptances. The r eader should recognize \nthat this is a BUSINESS POLICY , which may have different solutions: \n\uf0b7 Option 1: Allow no more than one pending invitation per player \n\uf0b7 Option 2: Allow no additional invitations for players already engaged in a match \n\uf0b7 Option 3: Allow unlimited pending invitations at any time \nWe select the first option for simplicity, but a real-world implementation may provide the \nadvanced options. \nTTT-BP02:  no more than one pending invitation per player are allowed \nThis policy does not necessarily imply that the user  can play only one match at a time. However, \nsuch a more restrictive version will be introduced  in Section G.3.4, when we will introduce an \noperational model for our system-to-be to keep the project manageable. \nFurther analysis would reveal more details, in ad dition to those shown in Table G-2. For example,", "source": "Page 469", "chapter": "9"}
{"id": "255ac27f3f39-1", "text": "perhaps as part of REQ4 the system should also allow the players to agree on a \u201cdraw\u201d before the \nwinner becomes obvious? Because tic-tac-toe is a simple, short and inconsequential game, we \nwill stop here: \nREQ1 REQ2\nREQ2a\nREQ2bREQ2cREQ3\nREQ3a REQ3bREQ4 REQ5 REQ6\nREQ4a\nREQ4bREQ4c\nREQ4dREQ4e\n \nThe above details should not be lis ted as requirements on their own in the table of requirements, \nbecause such fragmentation of functional requi rements would complicate the understanding of \nthe system\u2019s purpose. Their appropriate role  is as details of the main requirements. \nREQ3 appears to complicate the setup process and one may look for alternate solutions. Instead \nof players having to negotiate the game versi on, it may be more convenient to have each user \nspecify in the challenge which game version they  want to play. Then, the player who accepts the \nchallenge also agrees to play the proposed game  version and the match is started immediately. \nSimilarly, players could indicate their preferred ga me version as part of their availability status. \nThen, each player could search the player list for players interested in playing a certain version \nand challenge one of them.", "source": "Page 469", "chapter": "9"}
{"id": "255ac27f3f39-2", "text": "and challenge one of them. \nThis solution has its issues as well,  because the challenged player may never receive an invitation \nfor the game version that he wishes to play. Of  course, he may send his own invitations for the \ndesired game version, but then needs to keep sending to different players on the \u201cavailable\u201d list \nuntil one accepts. However, there is a more important reason that we should not choose this \nsolution\u2014because it makes the developer\u2019s task easier , while at the same time making the user\u2019s \ntask harder. Each user would always be required to choose the version they wish to play, when in", "source": "Page 469", "chapter": "9"}
{"id": "7195d0cbaf34-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  456 \nreality most users might be happy to play th e standard version. Solutions that make the \ndeveloper\u2019s work easier while making the user\u2019s wo rk harder should be avoided, unless there is a \ngood reason, such as constraints on the product de velopment time or resources. The customer \nmust always be involved in making such compromi ses. At this point, we do not know how much \nmore complex the user-friendly solution is than the developer-friendly solution, so for now we \nproceed with the user-friendly solution as orig inally formulated in REQ3. However, see \nSidebar G.1 for additional issues. \n \n SIDEBAR G.1: Playing Multiple Matches at a Time  \n  \n\uf0a8 Requirement REQ2c in Table G-2 and busin ess policy TTT-BP02 allow the user to have at \nmost one pending invitation. The user must wait for the opponent to accept a challenge. The \nchallenger cannot do anything until the opponent responds or response timeout expires. Later \non, in Section G.3.4 we will make an even mo re restrictive choice to allow the user to \nparticipate in no more than one match at a time. \nThe reader who is also an avid game player will know that many existing games, such as", "source": "Page 470", "chapter": "9"}
{"id": "7195d0cbaf34-1", "text": "The reader who is also an avid game player will know that many existing games, such as \nScrabble, Words With Friends, Draw Something, all allow users to engage in multiple matches \nat the same time. Why not make our Tic-tac-toe to do the same? A user would challenge an opponent, automatically enter a gameroom for this match, and then return to the game lobby to \nplay in other matches while he or she waits for the opponent. This method would also allow \nusers to challenge players who are currently not logged into the system. A logged-off user would simply receive a challenge notification when he or she logs in. \nBy adopting the multiple-simultaneous-oppone nts version, we would drop the policy \nTTT-BP02. However, should we drop the respon se time policy TTT-BP01? On one hand, users \nmay find it annoying to have many unresolved ma tches at a time. It may be helpful if the \nsystem provided some indication of the underlying cause, such as network outage, or logged-\nout opponent. On the other hand, one may argue that such scenarios will be rare and most of \nthe matches will be played within a short inte rval, without interruptions. We may introduce a \npolicy that the gamerooms which have seen no ac tivity for several days will be automatically \nterminated.", "source": "Page 470", "chapter": "9"}
{"id": "7195d0cbaf34-2", "text": "terminated. \nAlthough the multiplayer version of distributed tic-tac-toe appears to remove some complexity \nrelated to game setup, we still need to decide how the players would select the game version to \nplay. At this stage, we decide not to adopt this  version as the target version of our system-to-be \nout of concern that it may be too complex to implement. User convenience must always take \npriority over developer\u2019s convenience, unless it is impossible to achieve with the given resources and time constraints. However, we will consider the merits of the multiplayer option \nas we go and may even adopt it as the target version for the system-to-be if its merits are \ndeemed high and the costs acceptable. \nThe reader should particularly observe that inst ead of simply cataloguing the system requirements \nby reading the customer statement of work, we started the discovery process  of learning the \ndetails of what exactly we are expected to develop. In other words, we started requirements \nanalysis . Based on the analysis we detected issues that could be solved in different ways and \nmade choices of business policies , such as the response time limit, and rejected some \nrequirements (REQ7). We also uncove red additional details that need to be stated explicitly in the", "source": "Page 470", "chapter": "9"}
{"id": "de2e2d106221-0", "text": "Appendix F \uf0b7 User Interface Programming 457\nrequirements. Requirements analysis for this syst em will be continued in Section G.3.4, during \nthe detailed use case analysis. \nG.2.2 Enumerated Nonfunctional Requirements \nAs stated in Section G.2.1, we do not specify an y latency requirements, because it is not critical \nthat the other player immediately sees each move. \nG.2.3 On-Screen Appearance Requirements \nREQ8 Figure G-2 shows a customer-provided initia l sketch of the user interface appearance. \nThe screen real estate is divided into three main areas. The area on the left will show the \nlist of currently available players. The central  area will be empty when the user is in the \ngame lobby, while waiting to be invited or  inviting an opponent. The central area will \nshow the game board once the players agree the play the game. The area one the right \nwill show the current leaderboard. Notice also that two parts on the bottom of left and \nright areas are provisioned to show sponsor a dvertisements. The customer requested that \nthe advertisements should be sub tle rather than distractive. \nG.2.4 Acceptance Tests \nAcceptance tests that the customer will run to check  that the system meets the requirements are as", "source": "Page 471", "chapter": "9"}
{"id": "de2e2d106221-1", "text": "follows. Note, however, that these test cases provide only a coarse description of how a \nrequirement will be tested. It is insufficient to specify only input data and expected outcomes for \ntesting functions that involve multi-step interac tion. Use case acceptance tests in Section G.3.5 \nwill provide step-by-step description of acceptance tests. \nAcceptance test cases for REQ1:  \nFigure G-2: On-Screen Appearance Requirements: Customer\u2019s sketch of the user interface.", "source": "Page 471", "chapter": "9"}
{"id": "330b964b7595-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  458 \nATC1.01 Ensure a working network connection be tween two computers, run the game program \non both computers (pass: each user is sh own as \u201cavailable\u201d on the other user\u2019s screen) \nATC1.02 Ensure a working network connection between more than two computers, run the \ngame program on computers at random times (pass: the displayed list of \u201cavailable\u201d \nusers is updated correctly on all computers) \nNote that REQ1 states that any pair of player s will be able to play from different computers; \nhowever, the acceptance tests do not specifically t est this capability. Th e acceptance tests check \nwhether the users can see each other as availabl e, assuming that they successfully joined the \ngame. I leave it to the reader to formulat e more comprehensive test cases for REQ1. \nAcceptance test cases for REQ2: \nATC2.01 Challenge a user who is logged in and accepting invitations (pass) \nATC2.02 Challenge a user who is currently not logged in (fail) \nATC2.03 Challenge a user who is logged in but not accepting invitations (fail) ATC2.04 Challenge another user accepting inv itations after a declined invitation (pass) \nATC2.05 Challenge another user immediately after one user accepted the challenge (fail)", "source": "Page 472", "chapter": "9"}
{"id": "330b964b7595-1", "text": "ATC2.05 Challenge another user immediately after one user accepted the challenge (fail) \nATC2.06 Challenge another user during an ongoing match (fail) \nATC2.07 Challenge another user after a finished match (pass) \nNote that ATC2.02 may not be possible to run dir ectly from the user interface if the user interface \nis designed to force the user to select from the set  of available players. In addition, ATC2.05 and \nATC2.06 appear to test the same scenario and one of them may be redundant. Finally, we may \nwish to add one more test case (ATC2.08), to cha llenge the local user after a finished match. This \ncase is reciprocal to ATC2.07, which allows the local user to challenge another (remote) user. \nAcceptance test cases for REQ3: \nATC3.01 During a match in progress, select a di fferent game variant from the one currently \nplayed (fail) \nHow exactly this test case will be executed depends  on how the user interface is implemented and \nwhether it allows the user to perform such actions in different contexts. \nAcceptance test cases for REQ4a: \nTest cases for this requirement are difficult to fo rmulate in a simple, one-sentence version as for", "source": "Page 472", "chapter": "9"}
{"id": "330b964b7595-2", "text": "other use cases. We may test that a player can move a piece to any empty cell, or in case of nine-\nboard tic-tac-toe the player moves to an empty ce lls on the board corresponding to the square of \nthe previous move, but this does not cover the whol e REQ4a. We also need to test that the match \nis correctly refereed and that players\u2019 high scores are correctly updated. \nThis is why the acceptance test formulation for th is requirement is defe rred to Section G.3.5. \nAcceptance test cases for REQ4b: \nATC4.01 In a resting state, select the revenge tic-tac-toe game (pass: th e opponent is asked to \naccept the selection or counteroffer a different selection; if accepted, the revenge", "source": "Page 472", "chapter": "9"}
{"id": "041681bf2114-0", "text": "Appendix F \uf0b7 User Interface Programming 459\nversion is shown on both players\u2019 screens; else, the first player is asked to accepts the \ncounteroffer selection or make another counteroffer) \nATC4.02 In a resting state, select the nine- board tic-tac-toe game (pass: similar as for the \nrevenge case) \nATC4.03 In an ongoing match, select to change the game variant (fail) \nNote that this test case formulation is inelegan t and will be better represented with a test case for \nthe corresponding use case (see Section G.3.5). \nAcceptance test cases for REQ5: \nATC5.01 A visitor user not logged in requests to see the leaderboard (pass) \nAcceptance test cases for REQ6: \nATC6.01 A visitor not logged in fills out the regi stration form using an unused identifier (pass) \nATC6.02 A visitor not logged in fills out the re gistration form using a taken identifier (fail) \n \nHow We Did It & Plan of Work \nAfter reading the customer statement of work, Me said he will start coding right away, while", "source": "Page 473", "chapter": "9"}
{"id": "041681bf2114-1", "text": "After reading the customer statement of work, Me said he will start coding right away, while \nIrene and Myself find out what needs to be done. It turned out real bad. Irene and Myself met several times, discussed the statement of work and came up with a paper-based prototype of the \ngame. We realized we were miss ing Me\u2019s technical skills but he  just hunkered down in his lair \nand made himself unreachable. Then finally, we a ll met the night before the deadline. It turns out \nthat Me wrote his codes in a foreign language\u2014t he program crashed even  before it rendered the \nwelcome screen. But Me kept saying that the softwa re is done and we just needed to get it to \nwork. We realized we needed to work as the Gang of Three - in team, instead of three Gangs of \nOne. We ordered pizza and coke, a nd went on burning the midnight oil all night long to derive the \nsystem requirements, as described above. Requirement  analysis helped us greatly as it allowed us \nto enumerate the requirements and pool all of th e ideas of all the team members together in an \norderly manner. GoT-it! \nThen we faced the problem of how to split our future work. Me volunteered to do the use cases", "source": "Page 473", "chapter": "9"}
{"id": "041681bf2114-2", "text": "and Myself jumped on the opportunity to do some in terface design; we suggested that Irene does \nthe domain analysis. Me quickly drew a sketch that shows how we will organize our teamwork: \nRequirements\nIRENEDomain Analysis Use Cases\nME MYSELFUser Interface\n \nHowever, Irene, being the project manager, pointed out that the problem with working with a \nteam on a project of this scale is that a member may or may not get their job done, which affects the team as a whole. She suggested that we might face issues where one person\u2019s part was", "source": "Page 473", "chapter": "9"}
{"id": "c6b94b30756e-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  460 \nrequired in order to continue th e flow of work; which, resulted in roadblocks during the process. \nSome parts of the program cannot be worked on  without first finishing other functions. Irene \npointed out that, for example, she would not be able to do anything before receiving the elaborated use cases and the interface design fro m Me and Myself. Instead, she proposed that we \ndo work in parallel (Figure G-3), so that each team member takes ownership of several system \nrequirements and derives the corresponding use cases. Although Figure G-3 shows that our team \nwill meet only once at the end of this developmen t stage, clearly we will need to meet often, \nreconcile any issues with our use cases,  and jointly decide on next steps. \nMe and Myself agreed that this is a great idea because it minimized mutual dependency of team \nmembers on each other\u2019s progress. From this, we learned better time management and \ncooperation with others. \nWe also agreed that everyone will be responsible for writing the part of the project report \ndescribing his or her component. At the end, Irene will collect all report contributions and \nintegrate them into a uniform whole. Everyone fe lt Irene was the one who pa id attention to detail", "source": "Page 474", "chapter": "9"}
{"id": "c6b94b30756e-1", "text": "most for things such as naming conventions and re port format so she wore the additional hat of \neditor-in-chief, making sure everyone\u2019s work ma de sense before we submitted our reports. For \nthese reasons, when it came to deciding w ho would work on what, Irene was on the \nbusiness/report side. \n Req-1UC-1\nUC-2\nReq-6UC-M\nUC-NRequirements Use Cases\nReq-2\nReq-3\nReq-4\nReq-5ME\nMYSELFIRENEMeet & \nReconcileTEAM\n \nFigure G-3: Ownership diagram for splitting up the teamwork in parallel  instead of series ,\nto avoid roadblocks to successful teamwork. (Continued in Figure G-7.)", "source": "Page 474", "chapter": "9"}
{"id": "0c046f943396-0", "text": "Appendix F \uf0b7 User Interface Programming 461\nG.3 Functional Requirements Specification \n \nAlthough this section is entitled \u201cRequirements Specification,\u201d we will see that we \nare still discovering  the functional system requirements for the system-to-be, as \nwell as specifying  the discovered requirements. \ne start by selecting an architectural style for our system, because the user \nexperience will depend on the choice of architectural style and because \nsome use case scenarios would not be possible to specify in detail without \nknowing the architectural style. \nARCHITECTURAL STYLE : CENTRAL REPOSITORY  \u2013 The problem statement (Section G.1.1) does \nnot mention that the system should be Web-based , so we will assume that programs will run on \ndifferent computers without a dedicated server application, but all users will connect to a \ncommon database server, such as MySQL. This me ans that all \u201cclients\u201d will store their game-\nrelated data to the database. To enable co mmunication between \u201cclients\u201d, each client will \nperiodically check the database when it expects a message. After the sender stores its message in \nthe database, the receiver will pick it up in the next round of checking. More sophisticated architectural styles may be considered in a future version of this system. \nG.3.1 Stakeholders", "source": "Page 475", "chapter": "9"}
{"id": "0c046f943396-1", "text": "G.3.1 Stakeholders \nIdentify anyone and everyone who has interest in this system (users, mana gers, sponsors, etc.). \nStakeholders should be huma ns or human organizations. \nG.3.2 Actors and Goals \nWe identify four types of actors: \n1. Player \u2013 a registered user \n2. Opponent \u2013 a special case of Player actor, defi ned relative to the Player who initiated the \ngiven use case; this actor can do everything as Pl ayer, but we need to distinguish them to \nbe able to describe the sequence of  interactions in use case scenarios \n3. Visitor \u2013 any unregistered user \n4. Database \u2013 records the Players\u2019 performance \n \nTo implement the RESPONSE TIME POLICY  defined in Section G.2.1, we will need a timeout timer \nto measure the reaction time of each player. Because this timer will be part of a use case \nexecution, but will not initiate full use cases, there is no  need to consider it an actor. \nG.3.3 Use Cases Casual Description \nThe summary use cases are as follows: \nUC-1: PlayGame \u2014 Allows the Player to play the standard tic-tac-toe game (default option). \nExtension point: the Player has an option to cha llenge an Opponent, or just wait to be challenged W", "source": "Page 475", "chapter": "9"}
{"id": "9b158c99ddce-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  462 \nby an Opponent. Extension point: the Player h as an option to suggest another game variant. \nDerived from requirement REQ1 \u2013 REQ4. \nNote that UC-1 mentions only the Player actor so, by  implication, it is available only to registered \nplayers who are logged in into the system. \nUC-2: Challenge \u2014 Allows the Player to challe nge an Opponent to play a match (optional sub \nuse case, \u00abextend\u00bb UC-1: PlayGame).  \nDerived from requirement REQ2. \nUC-3: SelectGameVariant \u2014 Allows the Player an d Opponent to negotiate a variant that they \nwill play, different from the default standard tic -tac-toe (optional sub use case, \u00abextend\u00bb UC-1: \nPlayGame). Derived from requirements REQ3 and REQ4. \nUC-4: Register \u2014 Allows a Visitor to fill out th e registration form and become a member of the \ngame. (For simplicity, we omit the use case that allows the user to modify his or her profile.) Derived from requirement REQ6. \nUC-5: Login \u2014 Allows the Player to join the game and have the system track his or her \nperformance on the leaderboard (mandatory sub use case, \u00abinclude\u00bb from UC-1: PlayGame).", "source": "Page 476", "chapter": "9"}
{"id": "9b158c99ddce-1", "text": "Derived from requirement REQ6. \nUC-6: ViewLeaderboard \u2014 Allows a Visitor to vi ew the leaderboard of player rankings without \nbeing logged in the system. Players will always be able to run this use case. Another option that \nmay be considered is to have the leaderboard displayed in any scr een that the player visits. At this \npoint, we decide that the player will explicitly ru n UC-6 to avoid screen clutter. A more detailed \nanalysis in the future may sway the deve loper to switch to the always-shown option. \nDerived from requirement REQ5. \nSome alternative use cases may be considered. For example, instead of the use cases to challenge \nan opponent (UC-2) and negotiate the game vers ion (UC-3), one may propose a single use case \nwhere the player will challenge an opponent to pl ay a specific version of tic-tac-toe. I have not \ncarefully considered the merits of this alterna tive solution, so for now we go with two separate \nuse cases. \nThe last use case (UC-6) allows any visitor to vi ew the leaderboard, which is not strictly implied \nby REQ5. We provide it anyway to allow visitors to  view the current state of the game, perhaps to \nattract them to become active members.", "source": "Page 476", "chapter": "9"}
{"id": "9b158c99ddce-2", "text": "attract them to become active members. \nIf the player passively waits to be invited by an other player, this is not a use case, because this \nplayer does not initiate any interaction with the system to  achieve his or her goal. This player will \nplay a participating actor role when another player initiates UC-2. \nIt is important to choose the right level of gr anularity for use cases. Introducing a Make-Move use \ncase to place a piece on the board is too fine granularity and does not confer any benefit. \nTherefore, making a move should be considered  a step in use case UC-1: PlayGame. Similar \nargument applies against having Start-New-Matc h as a use case. Another example is Record-\nResult, which is a step in successful completion of UC-1, and not a standalone use case initiated \nby Database. Yet another example is View-Pe nding-Invitations to check for invitations and \naccept or decline, which should also be cons idered a step in UC-1. And so forth.", "source": "Page 476", "chapter": "9"}
{"id": "ac3d6b3686fc-0", "text": "Appendix F \uf0b7 User Interface Programming 463\nNote that options to play different game va riants (standard, reve nge, or nine-board) are not shown \nas extension use cases. The reason for this choice is  that it is difficult to specify different game \nrules in use cases notation. On the other hand, ther e is no value in indicating three more use cases \nfor the three variants if those use cases will ha ve identical specification. Tic-tac-toe game \ninvolves a single type of interaction for all game variants: placing a piece on the board. In case of \ngames with many or more sophisticated interacti on types, it may be appropriate to consider sub-\nuse cases for different game variants. Therefore, we leave the game variant specification for the \nnext stage of development lifecycle: domain analysis (Section G.5). \nUse Case Diagram \nThe use case diagram is shown in Figure H-1. Th e diagram indicates the \u00abinclude\u00bb and \u00abextend\u00bb \nsub-use-case relationships. Also indicated is that Opponent is a specialization of Player. Both \nplayers must \u00abinitiate\u00bb the game before they can play. Each player has an option of waiting to be \ninvited, or inviting an opponent. When the player s connect, they are shown the default version of \nthe game, and they may select a different variant. \nTraceability Matrix", "source": "Page 477", "chapter": "9"}
{"id": "ac3d6b3686fc-1", "text": "the game, and they may select a different variant. \nTraceability Matrix \nThe traceability matrix in Figure G-5 shows how our system requirements map to our use cases. \nWe calculated the priority weights of the use cases, and we can order our use cases by priority: \nUC1 \uf03e UC3 \uf03e UC2 \uf03e UC6 \uf03e UC4, UC5 \nWe select the three use cases with the highest prio rity to be elaborated and implemented for the \nfirst demonstration of our system. \u00abparticipate\u00bb\u00abinitiate\u00bb\n\u00abinitiate\u00bbSystem:  Tic-tac-toe Game\n\u00abextend\u00bb\u00abinitiate\u00bb\u00abinclude\u00bb\n\u00abextend\u00bbDatabase\nOpponentPlayerVisitor\nUC5: Login\nUC2: Challenge UC3: Select Game VariantUC4: Register\nUC6: View Leaderboard\n\u00abextend\u00bb\nUC1: Play Game\nExtension points:       \n- challenge opponent\n- select game variant\n- view leaderboardUC1: Play Game\nExtension points:       \n- challenge opponent\n- select game variant\n- view leaderboard\nFigure G-4: Use case diagram for the distributed game of tic-tac-toe.", "source": "Page 477", "chapter": "9"}
{"id": "da983a1c77bc-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  464 \nG.3.4 Use Cases Fully-Dressed Description \nWe start deriving the detailed (\u201cfully-dressed\u201d) specification of use cases by sketching usage \nscenarios. \nStart with UC-2: Challenge, which allows the Play er to challenge an Opponent to play a match, \nbecause this is the first logical step in the game. A possible scenario may look something like \nthis: \n1. Player sends an invitation to an Opponent to play a match \n2. Opponent accepts or declines \n3. Players are brought to the main use case (UC-1) to play a match \nHowever, we realize that we must be more  specific in Step 1 about how the Player selects  an \nOpponent, and what if this Opponent is already pl aying with another player. Would an \u201cengaged\u201d \nplayer be interested in accepting new invites? We  already discussed this i ssue in Section G.2.1, \nwhen analyzing the feasibility of the require ment REQ7. We choose the following simple \nsolution. Every player will be shown a list of currently available players. To avoid annoying \ninvitations while the player is already engaged in a game, the system will automatically remove \nthis player from the list of available play ers. The players follow a simple invitation protocol ,", "source": "Page 478", "chapter": "9"}
{"id": "da983a1c77bc-1", "text": "this player from the list of available play ers. The players follow a simple invitation protocol , \nwhich is a BUSINESS POLICY , specified as a sequence of interactions between the players (i.e., \n\u201cprotocol\u201d) shown in Figure G-6. \nTTT-BP03:  The invitation protocol allows a player  to challenge only the \u201cavailable\u201d opponents. \n(Note that the first two business rules were iden tified in Section G.2.1.) The opponent accepts or \ndeclines and these two players are brought into a \u201cg ame room\u201d to play only a single match. After \nthe match is finished, the players are brought back  to the main screen and they must again send \nmatch invitations. (The players will remain logged in.) \nThere may be other ways to operationalize this ga me. For example, a user may start a new match \nby selecting a game variant and then challenge an opponent to play this match. In other words, \nthe game variant would not be negotiable. In addition, given the concept of a \u201cgameroom\u201d we may now simplify the problem of determining pl ayer availability. We may operationalize the UC1   UC2   UC3   UC4   UC5   UC6\nREQ1\nREQ2\nREQ3\nREQ4\nREQ5\nREQ654\n3\n4\n2\n1Req\u2019t PW", "source": "Page 478", "chapter": "9"}
{"id": "da983a1c77bc-2", "text": "REQ4\nREQ5\nREQ654\n3\n4\n2\n1Req\u2019t PW\n5         4         4        1         1        2 Max PW\n16        4         7        1         1        2 Total PWXX\nX\nXX\nX\nXXXX\n \nFigure G-5: Traceability matrix  mapping the system requireme nts to use cases. Priority\nweight (PW) given in Table G-1. (Traceability continued in Figure G-13.)", "source": "Page 478", "chapter": "9"}
{"id": "b75764203f1c-0", "text": "Appendix F \uf0b7 User Interface Programming 465\ngame so that once two players enter a gameroom , they can play as many matches as desired. \nWhen one player leaves the gameroom, both player s will become available for invitations. This \noperational model is left to the reader as an  exercise and will not be considered here. \nThe requirements state that play ers takes turns, so that the Xs-player goes first and the Os-player \ngoes second, but it is not specified how Xs and Os are assigned, so we decide that before each \nmatch the system randomly designates and informs the players. See Section G.5.3 for the \nreasoning behind this choice. \n \nUse Case UC-1: Play Game  \nRelated Requirements: REQ1 \u2013 REQ4 \nInitiating Actor: Player \nActor\u2019s Goal: To play the game of tic-tac-toe \nParticipating Actors: Opponent, Database  \nPreconditions: \u2022 Player is a registered user \nSuccess End Condition: \nFailed End Condition: \u2022 If completed \uf0b31 matches, Player\u2019s score is updated in Database \n\u2022 Forfeited matches counted as losses in Database \nExtension Points:  Challenge  (UC-2) in step 1; Select Game Variant  (UC-3) in step 3;", "source": "Page 479", "chapter": "9"}
{"id": "b75764203f1c-1", "text": "View Leaderboard  (UC-6) in any step \nFlow of Events for Main Success Scenario:  \n include:: Login  (UC-5) \n\uf0ac 1. System  displays the list of remote players that are available to play the game; the \ndisplay is continuously updated and any incoming invitations are shown \n\uf0ae 2. Player  accepts an incoming invitation \n\uf0ac 3. System  (a) brings both Player  and Opponent  into a gameroom, (b) displays the \ndefault standard tic-tac-toe, (c) randomly assigns Xs or Os to the Player  and \nOpponent  and displays their designations  \n\uf0ae 4. The Xs-player is prompted to make the first move anywhere on the board, then Os-PlayersAcquire Opponent\nNegotiate Game Variant\nLoginView available \nopponents\nChallenge\nAcceptSuggest\ngame variantAgree Play match\nLogin Play match\nFigure G-6: Operational model for the distributed game of tic-tac-toe.", "source": "Page 479", "chapter": "9"}
{"id": "dac50692bb84-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  466 \nplayer is prompted to make a move [for each move, a timer is started to limit the \nresponse time]  \n Players repeat Step 4 until System declares a winn er or detects that the board is filled to end \nin a draw \n\uf0ac 5. System  (a) signals the match end, (b) erases th e screen, (c) stores the updated scores \nfor both players in the Database , and (d) closes the gameroom and brings players back \nto the main screen (Step 1) \nFlow of Events for Extensions (Alternate Scenarios): \nany step: Player  requests to forfeit an ongoing match \n\uf0ac 1. System  (a) shows a message to the opponent and asks for an acknowledgement, \n(b) starts a timer for a fixed interval, say 10 seconds, (c) when the opponent acknowledges or timer expires, System goes to Step 5 of the main success scenario  \n4a. Player  tries to make an out-of-order move (e.g., the Os-player tries to go first, or any player \ntries to move during their opponent\u2019s turn) \n\uf0ac 1. System  signals an error to Player  and ignores the move \n4b. Player  tries to place a piece over an already placed piece", "source": "Page 480", "chapter": "9"}
{"id": "dac50692bb84-1", "text": "4b. Player  tries to place a piece over an already placed piece \n 1. System  signals an error to Player  and ignores the move \n4c. Player  fails to make the next move within the timeout interval  \n\uf0ac 1. System  applies TTT-BP01: RESPONSE TIME POLICY , declares a \u201cwin\u201d for the other \nPlayer and goes to Step 5 \nany step: network connection fails ( System  should continuously monitor the health of network \nconnections)  \n\uf0ac 1. System  detects network failure and (a) can cels the ongoing match and closes the \ngameroom, (b) signals the network failure to Player  and informs about a possibly \nforfeited match, (c) blocks use cases that require network connectivity and goes to \nStep 1 \nNote that alternate scenarios 4a and 4b could be combined into a single scenario: Player tries to \nmake an invalid  move (out-of-order or to a played cell). \nAlso, the alternate scenario 4c should be more  precisely stated: Player fails to make a valid move  \nwithin the timeout interval. We decide that in  alternate scenarios when the player makes an \ninvalid move (4a and 4b) no remote notificati ons are sent\u2014the response timer should time out", "source": "Page 480", "chapter": "9"}
{"id": "dac50692bb84-2", "text": "and the system should declare our player loser regardless of whether the player is unresponsive or \njust being silly. \nThe reader should note that handling the last alternative scenario of UC-1 involves another \nBUSINESS POLICY : \nTTT-BP04:  When the system detects network failu re, it cancels the ongoing match and closes \nthe gameroom, signals the network failure to Play er and informs about a possibly forfeited match, \nand blocks use cases that require network connectivity. \nThis policy may be formulated differently. One may object to forfeiting the match because of a \nlost network connection and propose instead sav ing the current board state and resuming the \nmatch when the connection is rees tablished. Note that the other player may still be connected and", "source": "Page 480", "chapter": "9"}
{"id": "741768ce4408-0", "text": "Appendix F \uf0b7 User Interface Programming 467\nwaiting for this player\u2019s response. Distinguish ing a lost connection from an unresponsive user \nwould introduce additional complexity into our system. Given that losing a tic-tac-toe match is \ninconsequential, we decide that the effort needed  to support policies that are more sophisticated is \nnot justified. \nThis use case is general for all three variants of  the game. As noted, specifics for the revenge and \nnine-board variants will be consider ed in domain analysis (Section G.5). \n \nn UC-2, we assume that the player is shown only the list of players that are currently available \nand no other players can be invited. As mentione d in Section G.2.1, possible future extensions \nare to allow users to search for opponents by name  or some other keyword, invite their social \nnetwork friends, etc. \nThe player can send only one invitation at a time. Acceptance tests listed in Section G.2.4 provide \nideas about preconditions and alternative scenarios. \n \nUse Case UC-2: Challenge  \nRelated Requirements: REQ2 \nInitiating Actor: Player \nActor\u2019s Goal: To challenge an opponent to play the game \nParticipating Actors: Opponent", "source": "Page 481", "chapter": "9"}
{"id": "741768ce4408-1", "text": "Participating Actors: Opponent  \nPreconditions: \u2022 The initiating Player is logged in and \u201cavailable\u201d ( not in gameroom) \n\u2022 Only \u201cavailable\u201d remote players are listed \nSuccess End Condition: \n \nFailed End Condition: \u2022 Opponent accepted; both players marked as \u201cengaged\u201d and removed \nfrom the \u201cavailable\u201d list \n\u2022 Opponent declined or failed to respond before timeout interval \nFlow of Events for Main Success Scenario:\n\uf0ae 1. Player  selects an opponent from the list of available remote players and sends \ninvitation for a match \n\uf0ac 2. System  (a) asks the Opponent  to accept the invitation and (b) starts a timer for a fixed \ninterval, say 1 minute \n\uf0ae 3. Opponent  indicates acceptance  \n\uf0ac 4. System  goes to Step 3 of UC-1 (Play Game)  \nFlow of Events for Extensions (Alternate Scenarios): \n2a. System  receives several simultaneous invitations for the same Opponent \n\uf0ac 1. System  (a) picks one challenger randomly, (b) notifies the remaining challengers that \nthe Opponent became engaged, and (c) go es to Step 2 of the main success scenario \n3a. Opponent  declines the invitation", "source": "Page 481", "chapter": "9"}
{"id": "741768ce4408-2", "text": "3a. Opponent  declines the invitation  \n\uf0ac 1. System  notifies Player  about a refusal and goes to Step 1 of UC-1 (Play Game) \n3b. Opponent  fails to respond within a timeout time  \n\uf0ac 1. System  (a) removes the pending invitation from Opponent \u2019s screen, (b) notifies I", "source": "Page 481", "chapter": "9"}
{"id": "65e81ced81d0-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  468 \nPlayer  about a refusal and goes to Step 1 of UC-1 (Play Game) \nPlayer  receives invitation(s) while waiting for an Opponent \u2019s answer to own invitation \n 1. System  intercepts such invitations and no tifies their senders about the failure  \nAfter step 1, Player  quits (logs out) without waiting for Opponent  to answer \n\uf0ac 1. On Opponent\u2019s terminal, System  notifies Opponent  about the desertion and goes to \nStep 1 of UC-1 (Play Game) for the Opponent \nA precondition for UC-2 is that the initiating actor is \u201cavailable.\u201d In the fu ture, we may need to \nconsider an option of allowing the initiating actor to cancel the current engagement without  \nplaying a match. The engagement is automatica lly cancelled after a match is finished and the \nplayer must challenge another oppo nent before the next match. \nNote that the first extension deals with poten tial simultaneous received invitations. In Section \nG.2.1, we decided that a player could not send a new invitation before a pending invitation is answered. Here, the reader should note another \nBUSINESS POLICY : \nTTT-BP05:  in case of simultaneously received i nvitations, one is selected randomly", "source": "Page 482", "chapter": "9"}
{"id": "65e81ced81d0-1", "text": "This policy may be decided differently. For exam ple, the system may select one invitation based \non the inviter\u2019s leaderboard ranking or friendshi p connections. It is important to make such \nchoices explicit, so that the customer can par ticipate in the decision-making and change the \npolicy in the future. \nThe reader familiar with network security issues may detect a more serious problem with the \npolicy TTT-BP05. This policy makes our system su sceptible to the so-called denial-of-service \nattacks ( http://en.wikipedia.org/wiki/Denial-of-service_attack ). An adversary who is familiar with our \nsystem may saturate our central database server with match invitations, such that it cannot \nrespond to legitimate traffic and rendering it eff ectively unavailable. The legitimate challengers \nwould wonder why their invitations always go unanswered and the challenged players would find \nthat their opponents are fake. A potential solution to this problem is to show the user all \ninvitations and let the user select. This solution is  more complex and it is not clear that the user \nwill always have sufficient information to  discern fake from legitimate invitations. \nThe decision to intercept and discard the invitations  received while the player waits for an answer \nto a pending invitation is another BUSINESS POLICY  that may be decided differently.", "source": "Page 482", "chapter": "9"}
{"id": "65e81ced81d0-2", "text": "to a pending invitation is another BUSINESS POLICY  that may be decided differently. \nTTT-BP06:  intercept and discard the invitations r eceived during an outst anding invitation \n \nWe start the analysis of UC-3 by sketching a possible scenario, like so: \n1. Player suggests a version of tic-tac-toe to play \n2. Opponent disagrees and counteroffers a different version \n3. Player disagrees and counteroffers a different version \n4. and so forth\u2026 \nWe realize that this cycle can go on foreve r, so we need to specify the negotiation protocol . This \nis another BUSINESS POLICY : \nTTT-BP07:  the negotiation protocol is specified as a sequence of interactions between the \nplayers (i.e., \u201cprotocol\u201d). We adopt a simple pr otocol where one player suggests the variant to", "source": "Page 482", "chapter": "9"}
{"id": "d5a033bfe3ba-0", "text": "Appendix F \uf0b7 User Interface Programming 469\nplay. The opponent either agrees or responds with a counteroffer. If the first player does not agree \nto the counteroffer, the match is cancelled before  it started and the gameroom is closed. Both \nplayers are brought back to the main screen a nd they enter the pool of \u201cavailable\u201d players. \nSimilarly, if a response is not received within a specified interval, match is cancelled before it \nstarted, and both players go to the pool of \u201cavaila ble\u201d players. One may conceive a more complex \nprotocol, for example, the system automatically initiates a chat where the two users can discuss \nhow to continue, but given that the game of tic-t ac-toe is quick and of no consequence, such \ncomplex features are unnecessary. \nIf the players agree on a game version, the newly agreed game version is loaded. The players\u2019 \nprevious designations remain unchanged when  the different game version is loaded: Xs-player \nremains Xs and Os-player remains Os. \nThe detailed use case UC-3 can then be specified as follows: \n \nUse Case UC-3: Select Game Variant  \nRelated Requirements: REQ3 \nInitiating Actor: Player \nActor\u2019s Goal: To negotiate the version of tic-tac-toe to play \nParticipating Actors: Opponent", "source": "Page 483", "chapter": "9"}
{"id": "d5a033bfe3ba-1", "text": "Participating Actors: Opponent  \nPreconditions: \u2022 Player and Opponent are already in a gameroom \n\u2022 The game is in the resting state (no match is in progress) \nSuccess End Condition: Failed End Condition: \u2022 Player and Opponent agreed on the game version \n\u2022 agreement not reached or Op ponent failed to respond; match \ncancelled and both players join the pool of \u201cavailable\u201d players \nFlow of Events for Main Success Scenario:  \n\uf0ae 1. Player  selects a choice from the list of available versions of tic-tac-toe \n\uf0ac 2. System  (a) asks the Opponent  to accept the choice or provide a counteroffer, and (b) \nstarts a timer for a fixed interval, say 1 minute \n\uf0ae 3. Opponent  indicates agreement  \n\uf0ac 4. System  goes to Step 3 the main succ ess scenario of UC-1 (Play Game)  \nFlow of Events for Extensions (Alternate Scenarios): \n3a. Opponent  provides a counteroffer \n\uf0ac 1. System  notifies Player  about counteroffer and goes to Step 1 of UC-1 (Play Game) \n3b. Opponent  fails to respond within a timeout time", "source": "Page 483", "chapter": "9"}
{"id": "d5a033bfe3ba-2", "text": "3b. Opponent  fails to respond within a timeout time  \n\uf0ac 1. System  (a) cancels the match, (b) notifies bot h players about a preempted match and \ngoes to Step 1 of UC-1 (Play Game) \nPlayer  receives version request that the Opponent  sent nearly simultaneously, before receiving \nthis player\u2019s version request  \n 1. System  intercepts such requests and discar d the most recent request silently \nAfter step 1, Player  quits (logs out) without waiting for Opponent  to answer", "source": "Page 483", "chapter": "9"}
{"id": "6253b1bf733d-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  470 \n\uf0ac 1. On Opponent\u2019s terminal, System  (a) cancels the match, (b) notifies Opponent  about \nthe desertion and goes to Step 1 of UC-1 (Play Game) for the Opponent \n \nThe remaining use cases are relatively simple and ar e left to the reader as exercise. However, I \nwant to use this occasion to emphasize an importa nt principle of agile development. My main \nreason for omitting the remaining use cases is that I did not have enough time. When faced with too much work to do and not enough time, the agile developer will cut the project scope. I \ndecided which use cases should be  ignored based on the priority weights from Table G-1 and the \ntraceability matrix in Figure G-5. \nNotes on the remaining use cases: \n\uf0b7 UC-6: ViewLeaderboard \u2014 one may wish to state as a precondition that at least one match has \nfinished; however, it is not clear why UC-6 must not be executed if no match was played, so we do not consider it a precondition. \nThe decision to intercept and discard a version requ est received while the player awaits an answer \nfrom the opponent is another \nBUSINESS POLICY  that may be decided differently.", "source": "Page 484", "chapter": "9"}
{"id": "6253b1bf733d-1", "text": "from the opponent is another \nBUSINESS POLICY  that may be decided differently. \nTTT-BP08:  intercept and discard version requests receive d while awaiting an answer to a version \noffer. \n \n SIDEBAR G.2: Playing Multiple Matches at a Time  \n  \n\uf0a8 Sidebar G.1 discussed the option of allowing th e user to play multiple matches at a time. \nThe reader should particularly observe the continuing knowledge discovery  about the system-to-\nbe (i.e., requirements analysis ). We have not just written down the detailed use cases (i.e., \nfunctional requirements specification). Instead, we needed to invent strategies for tackling the \nidentified ambiguities and constraints and anal yze their feasibility. The outcomes of this \nknowledge discovery process include the operationa l model that specifies the system-to-be and \ntwo business policies for invitation and negotiation pr otocols. It is critical properly to document \nthis discovery process and the choices that we made. \nG.3.5 Acceptance Tests for Use Cases \nThe acceptance test cases for the use cases are simi lar to acceptance test cases in Section G.2.4. \nAs mentioned, testing functions that involve mu lti-step interaction re quires more than just \nspecifying the input data and expected outcomes. We also need to specify the step-by-step how", "source": "Page 484", "chapter": "9"}
{"id": "6253b1bf733d-2", "text": "the user interacts with the system and what is th e system expected to do. Simple test cases listed \nin Section G.2.4 need not be repeated. Here we show only the test cases that were not already \nshown or needed a more structured presentation. \nAcceptance test cases for UC-1: Play Game include but are not limited to: \n \nTest-case Identifier: TC-1.01 \nUse Case Tested: UC-1: Play Game \u2013 main success scenario for standard  tic-tac-toe", "source": "Page 484", "chapter": "9"}
{"id": "65ba159d2734-0", "text": "Appendix F \uf0b7 User Interface Programming 471\nPass/Fail Criteria: If either user aligns three pieces in a line, he is declared the winner\nIf the board fills up with no winner, a draw is declared \nInput Data: Players\u2019 moves on the game board \nTest Procedure: Expected Result: \nSet Up: Two or more users log into the \nprogram and verify that each is given the \noption to challenge an opponent System displays the list of currently available \nplayers \nStep 1. Challenge an opponent as in test case TC-2.01 for UC-2 System displays a gameroom and informs each \nplayer that they are randomly assigned Xs or Os \nStep 2. Players alternate placing their pieces \non the game board \u25cf Valid moves accepted & consistently displayed \nfor both players (a small delay for remote player) \n\u25cf Invalid moves rejected with an error message \nStep 3. Loop back to Step 2 until the match is \nfinished \u25cf If either player aligned three pieces in a line, he \nor she is declared the winner; If the board filled \nup with no winner, a draw is declared \n\u25cf Both players are shown the outcome and taken \nout of the gameroom back to the main screen \n\u25cf The leaderboard is updated accordingly", "source": "Page 485", "chapter": "9"}
{"id": "65ba159d2734-1", "text": "\u25cf The leaderboard is updated accordingly \nIn addition to the above test procedure, the user must verify that the system correctly maintains \nthe scoreboard. The user would play a few matche s and keep a hand-drawn tally of scores. The \nuser would then compare the leaderboard to ve rify whether his number of matches played and \ntheir outcomes have been counted. \nTest case for UC-1: Play Game \u2013 main success scenario for revenge  tic-tac-toe is the same as \nTC-1.01, except that: \n\u25cf If either user aligns three pieces in a line, th e system gives the opponent one more move. If the \nopponent aligns three in a line with the next move, he or she wins; otherwise, the first player is \ndeclared the winner. \nSimilarly, test case for UC-1: Play Game \u2013 main success scenario for nine-board  tic-tac-toe is the \nsame as TC-1.01, except that: \n\u25cf After the first move, every subsequent move must be on the board corresponding to the cell of \nthe previous move. \nA player should have the opponent quit an ongoing ma tch and verify that the remaining player is \ndeclared as the winner. \n \nTest-case Identifier: TC-1.02", "source": "Page 485", "chapter": "9"}
{"id": "65ba159d2734-2", "text": "Test-case Identifier: TC-1.02 \nUse Case Tested: UC-1: Play Game \u2013 alternate scenario 4.c \nPass/Fail Criteria: The test passes if either player delays his response longer than the \nresponse time limit \nInput Data: Players\u2019 moves on the board & the time to wait before responding", "source": "Page 485", "chapter": "9"}
{"id": "6f9740ebeefa-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  472 \nTest Procedure: Expected Result: \nSet Up: Two or more users log into the \nprogram and verify that each is given the \noption to challenge an opponent System displays the list of currently available \nplayers \nStep 1. Challenge an opponent as in test case TC-2.01 for UC-2 System displays a gameroom and informs each \nplayer that they are randomly assigned Xs or Os \nStep 2. Players alternate placing their pieces \non the game board \u25cf Valid moves accepted & consistently displayed \nfor both players (a small delay for remote player) \n\u25cf Invalid moves rejected with an error message \nStep 3. Before the match end, one player \ndelays his response longer than the response \ntime limit \u25cf System applies the RESPONSE TIME POLICY  and \ndeclares the other player the winner \n\u25cf Both players are shown the outcome and taken \nout of the gameroom back to the main screen \n\u25cf The leaderboard is updated accordingly \nTest cases for UC-2: Challenge include but are not limited to: \n \nTest-case Identifier: TC-2.01 \nUse Case Tested: UC-2: Challenge \u2013 main success scenario \nPass/Fail Criteria: The test passes if the opponent accepts  the challenge within the response", "source": "Page 486", "chapter": "9"}
{"id": "6f9740ebeefa-1", "text": "Pass/Fail Criteria: The test passes if the opponent accepts  the challenge within the response \ntime limit; otherwise, the test fails \nInput Data: available Opponent\u2019s identifier \nTest Procedure: Expected Result: \nSet Up: Player logs in and sees the list of \navailable opponents (as part of UC-1)  \nStep 1. Player invites an opponent from the \nlist System conveys the invitation to the opponent \nStep 2. Opponent player indicates acceptance \nwithin the response time limit System informs both players about the success \nTest cases for UC-3: Select Game Variant include but are not limited to: \n \nTest-case Identifier: TC-3.01 \nUse Case Tested: UC-3: Select Game Variant \u2013 main success scenario \nPass/Fail Criteria: The test passes if both players agree to a version of the game after no \nmore than one counteroffer and w ithin the response time limit; \notherwise, it fails \nInput Data: offered game version a nd counter-offered version \nTest Procedure: Expected Result: \nSet Up: Two players are in a gameroom (as \npart of UC-1)", "source": "Page 486", "chapter": "9"}
{"id": "3a247b70083a-0", "text": "Appendix F \uf0b7 User Interface Programming 473\nStep 1. Player suggests a game version System displays the offer to the opponent \nStep 2. Opponent player suggests a \ncounteroffer within the response time limit System displays the counteroffer to the first \nplayer \nStep 3. Player accepts the counteroffer System informs both players about the success \nObviously, the above test cases do not provide coverage  of all alternate scenarios in our use \ncases. Because alternate scenarios are more comple x to implement (and, hence, more likely to \nhave implementation mistakes), it is critical to ensu re complete coverage of  all identified alternate \nscenarios. This task is left to the reader as an exercise. \nOf course, testing all alternate scenarios does not ensure the complete test coverage. For example, \nalternate scenarios may occur in many differe nt combinations (along with the main success \nscenario), and it is practically impossible to test all the combinations. \nG.3.6 System Sequence Diagrams \n______ TO BE COMPLETED ______ \n \nG.3.7 Risk Management \nA mitigation strategy for the denial-of-service att ack identified for use case UC-2: Challenge in \nSection G.3.4 is to use a design (Strategy pattern ) that allows easy change of the business policy \nTTT-BP05 if the problem is observed.", "source": "Page 487", "chapter": "9"}
{"id": "3a247b70083a-1", "text": "TTT-BP05 if the problem is observed. \n \nHow We Did It & Plan of Work \nWe found defining the use cases relatively easy and mo st useful. It helped to enumerate the exact \nfunctionality of our program before we started so  we knew how to tackle to construction of the \nsystem without losing focus and getting misdirected. One problem the group faced time and time \nagain was finding time when everyone could meet  up. We managed to meet together after \nindividually defining the summary use cases a nd jointly created the use case diagram.", "source": "Page 487", "chapter": "9"}
{"id": "9d0bc072a9fe-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  474 \nReq-1 UC-1\nUC-2\nReq-6UC-5\nUC-6Requirements Summary Use Cases\nReq-2\nReq-3\nReq-4\nReq-5ME\nMYSELFIRENEMeet & \nReconcile\nSummary \nuse \ncases & \nuse case \ndiagramTEAM\nUC-3\nUC-4\n \nAt this point, Me suggested Central Repository  as the architectural style for our system. We \ncontinued by deriving the detailed use cases. Fi gure G-7 shows what happened next. Me and \nIrene managed to work together on the first thr ee use cases, while Myself veered off and did not \nfinish his assignment. Me and Irene realized early on that they needed to coordinate their work \nbecause UC1, UC2, and UC3 are tightly coupled. \nIdeally, we would all pull even weight but as the stuff got more complex, the speed of individual \nefforts became a factor. Delegating important t asks to some of the weaker members would hurt \nthe team\u2019s performance and thus most of the task s were on the shoulders of few team members. \nIrene insisted that we must make everyone de vote equal effort, but Me would not surrender the", "source": "Page 488", "chapter": "9"}
{"id": "9d0bc072a9fe-1", "text": "ownership of the highest-priority use cases. He wa rned that the success of our project directly \ndepended on UC1: Play Game and he fe lt most qualified to own this use case. \nMe says : A major challenge we faced individuall y while working as part of a team was \ndetermining the overall direction of the project. In  this case, one may thin k that the issue would \nbe conflicting opinions about the features of the progr am. This was not the case at all. In fact, I \nfelt that it was quite the opposite. The group itself was too apathetic about the approach I put \nforth for the program and this lack of feedback turned out to hurt us la ter on. This was because \npeople accepted the ideas without really understanding what they were. When it came time to talk \nabout the project or write parts of the report I found that almost none of what people wrote or \ntalked about matched up with what we had ag reed on, or even with each other! And that \neventually led to me writing most of the re port myself since I was the one that had a good \nunderstanding of the idea behind the project since it was my idea after all.", "source": "Page 488", "chapter": "9"}
{"id": "74ea2a6d86b8-0", "text": "Appendix F \uf0b7 User Interface Programming 475\nMyself says : My biggest challenge from working in a gr oup is how shy I am. This is especially a \nproblem because of the competitive nature of this  project. This is because other team members \nseem to be very aggressive about doing the parts that are of higher priority to the customer. \nInitially, to be a good sport, I would tell others to take whatever component of the projects that \nthey liked and I would do the rest. This very quickly proved to be a huge mistake since I just \ncouldn\u2019t motivate myself to do the residue work. Meanwhile, I did not realize how much work the \nrest of the team was putting in while I wasn\u2019t pulling my weight. It really took a read through \ntheir detailed use cases for me to grasp how mu ch I had let my team down. Fortunately, this \nepiphany had a positive effect. I started to get into the project and did my best to contribute. I took on the responsibility to work on the user interface \nspecification (next section). \nIrene says : I have been an active part of different \norganizations since sophomore year in various leadership \nroles so I thought I was ready to be team leader. But \nleading a project like this is very different from any of the positions I had ever held. I compiled the final copy of", "source": "Page 489", "chapter": "9"}
{"id": "74ea2a6d86b8-1", "text": "the project report from everyone\u2019s contribution, \nadditionally formatting and editing the document. This \noften involved redoing the tabl es and diagrams to try and \nachieve continuity and solid aesthetics in the report. I \nlike to get my work done as soon as it is assigned so what ended up happening is that I\u2019d work on the first \nsections of a report without an y help and then weeks later \nwhen everyone else began to look at it I\u2019d have to explain what I did and tell them how to do their sections. Req-1 UC-1\nUC-2\nReq-6UC-5\nUC-6Requirements Summary Use Cases\nReq-2\nReq-3\nReq-4\nReq-5ME\nMYSELFIRENEMeet & \nReconcile\nSummary \nuse \ncases & \nuse case \ndiagramTEAM\nUC-3\nUC-4ME & IRENEDetailed Use Cases\nMeet & \nReconcileTEAM\nUC-1\nUC-2\nUC-3\nFigure G-7: How teamwork plan from Figure G-3 actually played out. (Continued in Figure G-8.)", "source": "Page 489", "chapter": "9"}
{"id": "3b58f36dd19f-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  476 \nUnfortunately, having the report due in sections did not help this much, I was still working on \nthings late on the night before the deadline because most team members didn\u2019t realize how much \ntime needed to be put into this project. Given th at the report turned out being many pages long, \nthis was a very significant amount of work. I spen t a good deal of time rewriting entire sections of \nthe report to reflect our customer\u2019s suggestions, for which other team members gave me no credit. \nThis was just extra stressful because I would star t doing my best work very early in the semester \nand my grade was really hurt by people who waited till the night before to start trying to figure out what to do. I have source documents, draft ite rations of the project report, and email traffic \nthat would demonstrate the above statements to be  true. In the future, we must ensure that the \nburden of compiling the final copy of the project report is equitably shared. \n \nt this point, we decided that the first three use cases are critical, but very complex and \ncannot be done by one or two team members.  We decided to leave out the supporting use \ncases for user registration and leaderboard disp lay (UC4\u2013UC6), and focus our resources to the", "source": "Page 490", "chapter": "9"}
{"id": "3b58f36dd19f-1", "text": "highest-priority work (Figure G-8). Myself obj ected for being pushed around and wanted to \ncontinue working on his original use cases. Irene  and Me convinced him that our team would be \nbetter off if he just got over it and took owners hip of the new components more vigorously than \nin the past. We have to adapt our plans on the go to achieve the maximum impact. He grudgingly \nconsented and thus we were off to the next phase. \n A Use Cases\nME\nMYSELFIRENEMeet & \nReconcileTEAM\nUC-2Concepts/Objects\nUC-3UC-1CO-1\nCO-2\nCO-S\nCO-T\n \nFigure G-8: Plan of work and ownership diagram for the next phase of the project: moving\non from use cases to domain analysis. (Continued in Figure G-7.)", "source": "Page 490", "chapter": "9"}
{"id": "9d68a30003cb-0", "text": "Appendix F \uf0b7 User Interface Programming 477\nG.4 User Interface Specification \n \nFigure G-2 shows an initial sketch provided by our customer, showing how the customer \nenvisioned the on-screen appearance of the User In terface (UI). Given that we learned about each \nusage scenario from detailed use cases, here we derive a preliminary user interface design. The \ndesigns presented in this section bear some r esemblance to the customer requirement (Figure \nG-2), but they also reflect the details of u se cases. They are still preliminary, because the \napplication logic, which they are interfacing, is not implemented. Many details of the interface \nmay and likely will change once we start coding. \nG.4.1 Preliminary UI Design \nFor a given use case, show step-by-step how th e user enters information and how the results \nappear on the screen. \nUse screen mock-ups and describe exactly what fi elds the user enters and buttons the user \npresses. Describe navigational paths that the user will follow. \nIn case you are developing a graphics-heavy applica tion, such as a video game, this is one of the \nmost important sections of your report. Tic-Tac-Toe: Lobby\nChallenge\nLog-out14 Wins  |  71 Losses\nRank: \u201cAverage\u201d", "source": "Page 491", "chapter": "9"}
{"id": "9d68a30003cb-1", "text": "Challenge\nLog-out14 Wins  |  71 Losses\nRank: \u201cAverage\u201d\nNext rank score: 100Jon Smith\nAnthony\nJane Doe\nJulie SmithNapoleon\nJosephineLEADERBOARDLEADERBOARD\n145 Wins  |  0 Losses\n82 Wins  |  9 Losses\n91 Wins  |  17 Losses\n64 Wins  |  35 Losses\n18 Wins  |  12 LossesAnthony\nJane Doe\nJulie SmithNapoleon\nJosephineLEADERBOARDLEADERBOARD\n145 Wins  |  0 Losses\n82 Wins  |  9 Losses\n91 Wins  |  17 Losses\n64 Wins  |  35 Losses\n18 Wins  |  12 Losses\nADVERT\nNetwork status: Connected0 Wins  |  13 Losses\n11 Wins  |  59 Losses\n18 Wins  |  12 Losses\n64 Wins  |  35 Losses91 Wins  |  17 LossesJoe Schmo\nJulie SmithHarry P.\nJosephine\nNapoleon\nFigure G-9: Preliminary user interface design. Compare to Figure G-2.", "source": "Page 491", "chapter": "9"}
{"id": "51905f58fb5d-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  478 \nBased on the detailed use cases (Section G.3.4) a nd operational model of the game (Figure G-6), \nwe decide to have two main screens for the game. One screen will support user activities in \npreparation for the match, which we call the \u201cg ame lobby\u201d (Figure G-9). The other screen will \nsupport user activities during the match, whic h we call the \u201cgameroom\u201d (Figure G-10). \nG.4.2 User Effort Estimation \nWhen estimating the user effort, we assume that  the user interface will be implemented as in \nFigure G-9 and Figure G-10. \nMatch Setup, in the Lobby \nMinimum effort (best-case scenario) needed to successfully set-up a match: \none click to select an opponent + one cl ick to send invitation = 2 mouse clicks \nMaximum effort (worst-case scenario) ne eded to successfully set-up a match: \none click to select an opponent + one click to se nd invitation + one click to suggest different \nversion + one click to accept a version counteroffer = 4 mouse clicks \nThis maximum effort is calculated assuming that the first selected opponent will accept the \nchallenge, then will reject the proposed version and submit a counteroffer, which will finally be", "source": "Page 492", "chapter": "9"}
{"id": "51905f58fb5d-1", "text": "challenge, then will reject the proposed version and submit a counteroffer, which will finally be \naccepted by the initiating user. A successful ma tch setup may be preceded by one or more \nunsuccessful attempts, for which the wors t-case effort is calculated as follows. Tic-Tac-Toe: Gameroom\nJulie Jon Log-outJoe Schmo\nHarry P.Josephine\nNapoleon\nJane Doe14 Wins  |  71 Losses\nRank: \u201cAverage\u201d\nNext rank score: 100\nAVAILABLEJon Smith Forfeit\n0 Wins  |  13 Losses\n11 Wins  |  59 Losses\n18 Wins  |  12 Losses\n64 Wins  |  35 Losses\n82 Wins  |  9 LossesAnthony\nJane Doe\nJulie SmithNapoleon\nJosephineLEADERBOARDLEADERBOARD\n145 Wins  |  0 Losses\n82 Wins  |  9 Losses\n91 Wins  |  17 Losses\n64 Wins  |  35 Losses\n18 Wins  |  12 LossesAnthony\nJane Doe\nJulie SmithNapoleon\nJosephineLEADERBOARDLEADERBOARD\n145 Wins  |  0 Losses\n82 Wins  |  9 Losses\n91 Wins  |  17 Losses\n64 Wins  |  35 Losses", "source": "Page 492", "chapter": "9"}
{"id": "51905f58fb5d-2", "text": "91 Wins  |  17 Losses\n64 Wins  |  35 Losses\n18 Wins  |  12 Losses\nADVERTTurn: Julie\u2019s turn\nBoard type: Standard/Classic Network status: Connected Graphical scheme: BasicBasic\nFigure G-10: Preliminary user interface design. Compare to Figure G-2.", "source": "Page 492", "chapter": "9"}
{"id": "7c5eb2d89952-0", "text": "Appendix F \uf0b7 User Interface Programming 479\nMaximum effort for every unsuccessful set-up attempt: \none click to select an opponent + one click to se nd invitation + one click to suggest different \nversion + one click to reject a ve rsion counteroffer = 4 mouse clicks \n \nMatch Playing, in a Gameroom \nEvery move requires just a single click. (Our system will not support undoing of user actions, as \nexplained in Section @@.) \n \nG.5 Domain Analysis \n \nG.5.1 Domain Model \nWe first derive the domain model concepts, starting from responsibilities mentioned in the \ndetailed use cases (Section G.3.4). Table G-3 lists  the responsibilities and the assigned concepts. \nThe reader should be able to identify the first 11 in the main scenario of UC-1. The next two \nresponsibilities are identified from the alternative scenarios of UC-1. We also realize from the \nfirst alternative scenario of UC-2 that we n eed a queue to line up potential simultaneous \ninvitations, which yields responsibilities R14 and R15. \nConcept definitions \nThe concepts and their responsibilities ar e discussed below (also see Figure G-11). \nTable G-3: Deriving concepts from respon sibilities identified in detailed use cases. \nResponsibility Type Concept", "source": "Page 493", "chapter": "9"}
{"id": "7c5eb2d89952-1", "text": "Responsibility Type Concept \nR1: Coordinate activity and delegate work originated from the local player in a \nway that is compliant with the game operational model (Figure G-6). D Controller \nR2: Display the game information for the player and dialog messages  Interface \nR3: Monitor network connection health and retrieve messages from opponent D Communicator \nR4: Keep the list of players that are ava ilable to play the game K Player List \nR5: Keep the status of the local player  and his/her scores K Player Profile \nR6: Information about the opponent invitations to play the game K Match Invitation \nR7: Gameroom information and the game board K Gameroom \nR8: Randomly assign Xs or Os to the players D Communicator \nR9: Prompt the player to make the next move D  Controller \nR10: Prevent invalid moves, detect th ree-in-a-line and declare a winner or \ndetect that the board is filled to end in a draw D Referee \nR11: Store the updated score of the local player in the database D Communicator \nR12: Time the player responses D Response Timer", "source": "Page 493", "chapter": "9"}
{"id": "fbcccaa3f3dd-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  480 \nR13: Apply the RESPONSE TIME POLICY  and declare the winner D Referee \nR14: Queue multiple (nearly simultaneous) invitations from other players K Invite Queue \nR15: Randomly select a challenger from the Invite Queue D Communicator \nR16: Manage interactions with the database  DB Connection \nR17: Match-in-progress information K Gameroom \nR18: Process actions in reaction to Response Timer timeouts D Communicator \nR19: Conclude the failed negotiations for selecting a version of the game D Communicator \nR20: A scoreboard with the current scores  of the leading competitors K Leaderboard \nWe realize that our system will receive two t ypes of requests: commands from the local player \nand messages from the remote opponent. To keep separate these unrelated responsibilities, we \nintroduce two \u00abcontrol\u00bb type objects: Controller  and Communicator . \nGiven the C ENTRAL REPOSITORY  architectural style adopted in Section G.3, we assume that each \nuser will run his or her application that will connect to the central database. The Communicator \nkeeps track of database updates by other player s that are relevant for the local user. The \nCommunicator also stores to the database informatio n from the local player that is relevant to the \nopponent or any other remote player.", "source": "Page 494", "chapter": "9"}
{"id": "fbcccaa3f3dd-1", "text": "opponent or any other remote player. \nThe Communicator uses DB Connection  interface to ensure separation of concerns: we want to \nseparate database-querying responsibilities from re sponsibilities of dispatching remote requests \nand monitoring the network connection health. \nResponsibility R8 (randomly assigning Xs and Os) is performed by the Communicator. However, \nevery client runs a Communicator, so which one  performs the random assignment or does this \nneed to be negotiated? A simple solution is ha ving the Communicator of the player who sent an \ninvitation to do the random assignment and send it  as part of the invitation. Or, the opponent\u2019s DatabaseDatabase\nPlayerPlayer\u00abentity\u00bb\nLeaderboard\u00abentity\u00bb\nLeaderboard\u00abboundary\u00bb\nMatch Invitation\u00abboundary\u00bb\nMatch Invitation\n\u00abentity\u00bb\nInvite Queue\u00abentity\u00bb\nInvite Queue\u00abentity\u00bb\nReferee\u00abentity\u00bb\nReferee\n\u00abentity\u00bb\nPlayer List\u00abentity\u00bb\nPlayer List\u00abboundary\u00bb\nInterface\u00abboundary\u00bb\nDB Connection\u00abentity\u00bb\nGameroom\u00abentity\u00bb\nGameroom\u00abentity\u00bb\nResponse Timer\n\u00abcontrol\u00bb\nController\u00abcontrol\u00bb\nController\u00abcontrol\u00bb\nCommunicator\u00abcontrol\u00bb\nCommunicator\n\u00abentity\u00bb\nPlayer Profile\u00abentity\u00bb\nPlayer Profile\nFigure G-11: Concepts of the domain model for the game of tic-tac-toe.", "source": "Page 494", "chapter": "9"}
{"id": "3e6481b7d274-0", "text": "Appendix F \uf0b7 User Interface Programming 481\nCommunicator could do the assignment. Alternatively, the client with the greater network address \nperforms the assignment. (In the last option, the database would need to store players\u2019 network \naddresses.) This is a design decision that may n eed to be changeable, but unlike business policies \nthat are decided by the customer, design decisions are made by the developer. \nThere are several other responsibilities assigned to the Communicator in Table G-3 and at some \npoint it may be necessary to introduce additio nal concepts to offload some responsibilities. \nPlayer List  is the list of currently available player s that is periodically retrieved from the \ndatabase by the Communicator. Player Profile  keeps the availability status of the local player, \nwhich is why it is marked as an \u00abentity\u00bb concep t. However, one may argue that it is also a \n\u00abboundary\u00bb concept when representing remote players in Player List. Match Invitation  is the \nmessage sent to an opponent or the message(s) received by opponents. \nThe Gameroom  conceptualizes the game session establishe d between two players (after a remote \nopponent accepts a challenge). We may consid er introducing a new concept Match to keep \ninformation about the current match (R17); however , we decide against it based on the following", "source": "Page 495", "chapter": "9"}
{"id": "3e6481b7d274-1", "text": "reasoning. Given the way we operationalized the game  of tic-tac-toe in Section G.3.4, the players \ncan play only a single match in the gameroom . Every new match must be initialized anew. \nTherefore, the distinction between the Gameroom and Match is apparent. We may also consider \nintroducing a concept GameBoard, but for now, we  decide against it because the board state can \nbe represented as an array data structure that, in turn, can be an attribute of the concept \nGameroom. \nWe decide that the Controller should not act as  the game referee (R10), because the Controller \nhas function-dispatching responsibilities and ga me refereeing is a complex and unrelated \nresponsibility. Instead, we in troduce the Referee concept. \nThe Referee  monitors players\u2019 moves in a match, san ctions valid moves, and determines if a \nmove is a winning move (three identical signs, e.g., Xs, in a line), or a finale condition (\u201cdraw\u201d). \nOf course, each Referee is refereeing only its lo cal player, i.e., the Referee verifies only whether \nthe local user\u2019s last move was valid. \nThe Referee may additionally check if it is im possible for either player to win (because the", "source": "Page 495", "chapter": "9"}
{"id": "3e6481b7d274-2", "text": "current board state is such that it is impossible to have a three-pieces- in-a-line) and terminates \nthe match (\u201cdraw\u201d outcome) without waiting that a ll cells on the game board become filled up. In \nthis scenario, one hopes that both Referees will pr oduce the same result, but given the network \nlatencies and communication via the central datab ase, there may be intermittent inconsistencies \nthat need to be considered. This  is particularly true when the RESPONSE TIME POLICY  needs to \ninvoked because the opponent has not responded within the time limit. \nIf the players are playing the revenge version, the Referee shall declare a match a win if the local \nuser has three pieces on the board and the next move cannot result in a win for the opponent. \nThe system shall ensure that if the 9-board version is being played, all but the first move are \nplaced in the empty spaces on the bard correspondi ng to the square of the previous move. \nWe will need three specialized Referee types to implement game rules for different variants. One \nmay wonder whether the game \u201crules\u201d should be ex plicitly formulated as an attribute or another \nconcept. For example, to recognize a winning c ondition, the Referee needs to apply simple", "source": "Page 495", "chapter": "9"}
{"id": "3e6481b7d274-3", "text": "pattern matching. Given the 3 \uf0b43 board array a[i,j], a player wins if any of the following is true:", "source": "Page 495", "chapter": "9"}
{"id": "4ab0e9737d77-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  482 \n Horizontal three-in-a-line: a[i,j] = a[i,j+1] = a[i,j+2],  for 0 \uf0a3 i \uf0a3 3 and j = 0 \n Vertical three-in-a-line: a[i,j] = a[i+1,j] = a[i+2,j],  for i = 0 and 0 \uf0a3 j \uf0a3 3 \n Diagonal three-in-a-line: a[i,j] = a[i+1,j+1] = a[i+2,j+2], for i = 0 and j = 0 \nThese rules apply for all three version of tic-tac-to e, with additional rules for revenge and nine-\nboard versions (with a small modification of the rul es for the nine-board). At this point, we decide \nthat no additional concepts are need ed. Note that this analysis is not for the purposes of solution \ndesign; rather, its purpose is to decide  whether we need additional concepts. \nWe assume that the Leaderboard  is only a data container (knowing responsibility), because it \ndoes not need to perform any computation. The database already keeps an up-to-date score of \neach player as part of the player\u2019s record. The rank-ordered list of player s can be retrieved and \nsorted by a database query.", "source": "Page 496", "chapter": "9"}
{"id": "4ab0e9737d77-1", "text": "sorted by a database query. \nAttribute definitions \nttributes of domain concepts are derived in Table G-4. The Controller needs to carry out the policy of not allowing the user to send more th an one invitation at a time, so it needs to \nknow if the user is awaiting an opponent\u2019s respons e. Therefore, the Controller has an attribute \nisAwaitingOpponentAnswer . The Controller also has an attribute isAwaitingOpponentMove  to \nprevent the local user from moving boa rd pieces before the opponent responds. \nThe Communicator also needs an attribute isAwaitingOpponentAnswer  to know if waiting \nopponent\u2019s answer discard requests from other users or requests from the opponent that were \ngenerated nearly simultaneously\u2014see the altern ative scenarios for UC-2: Challenge and UC-3: \nSelectGameVariant in Section G.3.4. The reader may find it redundant to keep duplicate \ninformation but, at this point, we are only identifying what is needed, not optimizing the solution \ndesign or implementation. \nThe Communicator also has an attribute connectionStatus , which indicates the network \nconnection health: connected or broken. When  the Communicator detects network failure, it \ninforms the Controller, which in turn can cels the ongoing match and closes the gameroom,", "source": "Page 496", "chapter": "9"}
{"id": "4ab0e9737d77-2", "text": "signals the network failure to player and inform s about a possibly forfeited match. The Controller \nalso blocks any actions that require network c onnectivity, which in our simple version of the \ngame means that the user cannot do anything (the  leaderboard state will be stale) except logout. \nThe Communicator will continue monitoring if the network connection becomes restored. \nIt is not clear why the Controller\u2019s attribute isInGameroom  would be necessary, because the \nsystem has other means to keep track if currently  the user in the gameroom\u2014for example, if the \nGameroom attribute matchStatus is \u201cpending.\u201d However, this attribute expresses a needed \nresponsibility and because, during analysis, design op timization is of low priority, we keep it. \nThis attribute\u2019s significance will become apparent in Section G.8.1. \nThe Controller\u2019s attribute isNetworkDown  is related to connectionStatus , but the former is used \nto block user\u2019s activity if network is down, wh ile the latter helps the Communicator to monitor \nthe network outage and recovery. \nThe Referee needs to keep track of  whether the local player should make the next move (attribute \nisLocalPlayerNext ). For the first move, the Referee needs to know if the local player is assigned A", "source": "Page 496", "chapter": "9"}
{"id": "c28af59447c6-0", "text": "Appendix F \uf0b7 User Interface Programming 483\nXs (attribute isLocalPlayerX ). The reader may conclude that these attributes make the \nController\u2019s attribute isAwaitingOpponentMove re dundant. We keep it to indicate the existence \nof a responsibility and avoid optimizing at this st age. The Referee also k eeps track if the local \nuser\u2019s last move was valid (attribute isLocalMoveValid ). Finally, after the Referee detects a \nmatch end, it notes the winner\u2019s identity, so that  if the local user won, it can request the \nCommunicator to update the user\u2019s score in the Database. \nAttribute boardMatrix  of the concept Gameroom stores the contents of each of the nine cells on \nthe game board. The allowed values of each cell are: empty, an X, or an O. The Gameroom also \nmaintains the current state of an ongoing matc h (values: pending, ongoing, or complete). \n \nTable G-4: Deriving the attributes of concepts in Table G-3 from responsibilities identified \nin detailed use cases (Section G.3.4). \nResponsibility Attribute Concept \nR21: Know if local user is  awaiting opponent\u2019s answer, \nto prevent actions except viewing leaderboard or logout isAwaitingOpponentAnswer", "source": "Page 497", "chapter": "9"}
{"id": "c28af59447c6-1", "text": "to prevent actions except viewing leaderboard or logout isAwaitingOpponentAnswer \nController R22: Know if local user is in the gameroom isInGameroom \nR23: Know if local user is awaiting opponent\u2019s move isAwaitingOpponentMove \nR24: Know if network connection broken to block actions isNetworkDown \nR25: Player\u2019s identity or name ID / name \nPlayer Profile R26: Player\u2019s cumulative score score \nR27: Player\u2019s status (idle, available, engaged, invisible) status \nR28: Identity of the invitation sender inviter \nMatch \nInvitation R29: Identity of the invitation recipient invitee \nR30: Invitation status (pendi ng, accepted, declined) status \nR31: Store the contents of the 9 cells on the game board boardMatrix Gameroom R32: Match present state: none, pending, ongoing, complete matchStatus \nR33: Indicate if the lo cal player is assigned Xs isLocalPlayerX \nReferee R34: Indicate if the local play er goes next isLocalPlayerNext \nR35: Indicate the validity of the local player\u2019s last move isLocalMoveValid \nR36: Identity of the match winner, none in case of a draw winnerID \nR37: Time to count down to zero duration Response Timer", "source": "Page 497", "chapter": "9"}
{"id": "c28af59447c6-2", "text": "R37: Time to count down to zero duration Response Timer \nR38: Identity of the current opponent opponentID \nCommunicator R39: Know if waiting opponent\u2019s answer discard requests \nfrom other users or requests from the opponent that were \ngenerated nearly simultaneously isAwaitingOpponentAnswer \nR40: Watch network connection for health or expected \nmessages connectionStatus \nR41: Rank-ordered list of currently top scoring players  playerRankList Leaderboard R42: When was the leaderboard last updated updateTime \nR43: Network address of the relational database dBnetworkAddress DB Connection", "source": "Page 497", "chapter": "9"}
{"id": "538e1ea7513c-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  484 \nAssociation definitions \nssociations of domain concepts are derived in Table G-5. The Communicator creates the \nGameroom after receiving challenge acceptan ce from an opponent. The Communicator also \nupdates the gameboard with opponent\u2019s moves. Note, however, that the Controller updates the \ngameboard with local player\u2019s moves. Because th e Controller is associated with the Referee and \nwill be the first to hear about a finished match,  the Controller will close the Gameroom when the \nmatch is over. \nWe do not show that the Controller has an asso ciation with Match I nvitation. Although the \nController will receive the local user\u2019s selection of  the opponent to challenge, we assume that the \nController will pass this request on to the Commun icator that, in turn, will generate the Match \nInvitation. The Communicator will inform the C ontroller about the network connection health. \nBecause this association between the Controller and the Communicator is complex and involves \ndifferent information exchanges, it is  not named and shown in Table G-5. A Controller\nisAwaitingOpponentAnswer\nisInGameroomisAwaitingOpponentMoveisNetworkDownconveys-moves\nupdatesupdates,\ncloses\nPlayerInterface\nPlayerInterfaceInterfaceReferee\nisLocalPlayerX", "source": "Page 498", "chapter": "9"}
{"id": "538e1ea7513c-1", "text": "closes\nPlayerInterface\nPlayerInterfaceInterfaceReferee\nisLocalPlayerX\nisLocalPlayerNextisLocalMoveValidwinnerIDDatabaseDatabase\nCommunicator\nopponentID\nisAwaitingOpponentAnswerconnectionStatus\nLeaderboard\nplayerRankList\nupdateTimeLeaderboard\nplayerRankList\nupdateTime\nMatch Invitation\ninviter\ninviteestatusMatch Invitation\ninviter\ninviteestatusPlayer Profile\nID / name\nscorestatusPlayer Profile\nID / name\nscorestatusPlayer ListPlayer List\nsends,receivesGameroom\nboardMatrix\nmatchStatusGameroom\nboardMatrix\nmatchStatusResponse Timer\ndurationResponse Timerduration\nupdatesupdates\ncontainscreates,\nupdates\nInvite QueueInvite QueueDB Connection\ndBnetworkAddressDB Connection\ndBnetworkAddress\nstores,\nretrieves\nupdates\ncontainsuses conveys-outcome\nFigure G-12: Domain model diagram for the distributed game of tic-tac-toe.", "source": "Page 498", "chapter": "9"}
{"id": "f67c37f1676e-0", "text": "Appendix F \uf0b7 User Interface Programming 485\nWe assume that only valid moves will be co mmunicated across the network to the opponent\u2019s \nsystem. The Referee conveys the move validity back to the Controller, which, in turn, asks to the \nCommunicator to send it remotely. Therefore, the Referee and the Communicator are not directly \nassociated. \nNote that the Controller is associat ed with Player\u001fProfile to update the local player\u2019s status. This \nassociation is because the Controller learns from the Referee when the match finished, so it closes \nthe Gameroom, which makes the local player ava ilable for the next opponent. The Controller may \nalso receive requests from the player to make him \u201cinvisible.\u201d \nWhen considering the associations for Response Ti mer, we realize that we have not specified \nwhether the timer times the local user\u2019s respon se or the opponent\u2019s response. If former, it would \nprobably best be associated with the Controller. In this case, if the local user does not respond or \nmove a piece on the board within the response ti me limit, the Controller would decide that the \nuser lost the match and ask the Communicator to record it the database. However, we realize that \nwe also have a policy that the user who loses the network connection also loses the match, see", "source": "Page 499", "chapter": "9"}
{"id": "f67c37f1676e-1", "text": "TTT-BP04 in Section G.3.4. This cannot be implem ented if the local user has no connection to \nthe database. Therefore, we decide that the timer will time the opponent. As a result, Response \nTimer is associated with the Communicator. If the Communicator does not receive the opponent\u2019s \nresponse before the timer expires, it will declare the local  user winner and update the user\u2019s score \nin the database. \nTable G-5: Deriving the associations  of concepts listed in Table G-3. \nConcept pair Association de scription Association name \nController \uf0ab Referee Controller conveys to Referee the local user\u2019s move and \nReferee conveys the evaluation outcomes to Controller conveys-move, \nconveys-outcome \nController \uf0ab Gameroom Controller updates gameboard with local player\u2019s moves updates, closes \nController \uf0ab \nPlayer\uf020Profile Controller updates Player \uf020Profile to reflect the local \nplayer\u2019s current status updates \nCommunicator \uf0ab \nDB Connection Communicator stores requests from the local user to \ndatabase (via DB Connection) and retrieves requests \nfrom opponents stores, retrieves \nCommunicator \uf0ab \nGameroom Communicator creates Gameroom and updates \ngameboard with opponent\u2019s moves creates, updates \nCommunicator \uf0ab", "source": "Page 499", "chapter": "9"}
{"id": "f67c37f1676e-2", "text": "gameboard with opponent\u2019s moves creates, updates \nCommunicator \uf0ab \nPlayer\uf020List Communicator updates Player List with currently \navailable opponents updates \nCommunicator \uf0ab \nMatch\uf020Invitation Communicator sends Match Invitation to a selected \nopponent and receives invita tions from other opponents sends, receives \nCommunicator \uf0ab \nInvite\uf020Queue Communicator updates Invite Queue with invitations \nreceived from other opponents updates \nCommunicator \uf0ab \nResponse Timer Communicator uses Response Timer to time opponent\u2019s \nresponse and implement RESPONSE TIME POLICY  uses \nReferee \uf0ab \nCommunicator Referee asks Communicator to update the local player\u2019s \nscore if he won a match update-score \nThe complete domain model diagram is show n in Figure G-12. The concept ornaments are \nomitted for clarity, and the reader should re fer to Figure G-11 for additional details.", "source": "Page 499", "chapter": "9"}
{"id": "22d997626c58-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  486 \nTraceability matrix \nFigure G-13 shows how the system use cases map to the domain concepts. This matrix is derived \nbased on the assignment of responsibilities to concep ts in Table G-3. The responsibilities, in turn, \noriginated from the use cases. \nG.5.2 System Operation Contracts \nShould be provided only for the operations of the fully-dressed use cases elaborated in Section \n3.c), for their system operations identified in Section 3.d). \nG.5.3 Mathematical Model \nAs with any strategy game, it helps to know some strategies to win the game of tic-tac-toe or at \nleast to force a draw. For example, the Os player must always respond to a corner opening with a \ncenter mark, and to a center opening with a corn er mark. Otherwise, the player who makes the \nfirst move (the Xs player) will always have an advant age. Here is an example match: \n1 2 3 4 5\n 16    16 16 16 1     4     16    16 16 4    16     2 Max PW", "source": "Page 500", "chapter": "9"}
{"id": "22d997626c58-1", "text": "31     31 31 20   1     4     27    23    27    4    31     2 Total PWUC1\nUC2\nUC3\nUC4\nUC5\nUC616\n4\n7\n1\n1\n2Use \nCasePW\nX\nXXX\nX XX\nX\nXX\nReferee\nResponse Timer\nInvite Queue\nDB Connec tion\nLeaderboardController\nPlayer List\nPlayer Profile\nMatch InvitationCommunicatorInterface\nGameroom\nXX X\nXXX\nXX\nXDomain Concepts\nXXXX\nX XX\nX\nXX\nXX\nXX\nXX\nXX\nX\n \nFigure G-13: Traceability matrix mapping th e use cases to domain concepts. (Continued\nfrom Figure G-5 and continues in Figure X.)", "source": "Page 500", "chapter": "9"}
{"id": "f1a5bd2ed2a2-0", "text": "Appendix F \uf0b7 User Interface Programming 487\nAfter the fifth move, the Xs player has sealed his victory. No matter where the Os player moves \nnext, the Xs player will win. Show that the Os player could have avoided this situation if his first \nmove was a corner mark. \nTherefore, the player going second is always on the defensive and may never get a chance to win \nwhen playing with a player that knows what he or she is doing. The Wikipedia page contains \nmore discussion on the game strategies ( http://en.wikipedia.org/wiki/Tic-tac-toe ). \nTo help make the game more fair, our system w ill always randomly designate the players to play \neither Xs or Os and the players will not be allowed to  choose their pieces (Section G.3.4). The \nreader may wish to relax this constraint under certain scenarios. For example, for non-standard \nversions of the game of tic-tac-toe, such as re venge or nine-board, or when both players achieve \ncertain expertise level (based on their standing on  the leaderboard), the system would allow the \nplayers to choose their pieces. \nHow We Did It & Plan of Work \nThe least important technique to our group, to our detriment, was effort estimation. This often caused significant logistic problems because very little time was left to effectively collaborate.", "source": "Page 501", "chapter": "9"}
{"id": "f1a5bd2ed2a2-1", "text": "There was always significant \u201cbottlenecking\u201d be tween stages of our project. In other words, \nportions that are dependent on others cannot  be completed until their dependencies are \nsufficiently completed. \nIrene says : My group habitually waited until the last minute to do their parts. I tried my best to \nget my portions done as early as I could but when I was restricted by a \u201cbottleneck\u201d stage and \nwould attempt to go ahead and finish, the member would get very upset because they were afraid \nof loosing ownership of their components. \nMe says : My prior experience was only small programs. Analyzing \nthe system provided much better understanding of the software we \nwere expected to implement. It is hard to implement a program \nwhen you don\u2019t fully understand it. I believe that not everyone in \nthe team understood the operational model that I came up with for \nthe game and just went with it without voicing their opinions. Then, when the time came to actually write the report on how it \nworked, almost everyone in the team had a different opinion on \nhow it worked. Thus, several parts of the report did not really match up at first. I had to revise a lot of parts to match what the \ninitial idea of the project represented, but I could not catch", "source": "Page 501", "chapter": "9"}
{"id": "f1a5bd2ed2a2-2", "text": "initial idea of the project represented, but I could not catch \neverything as the report was fairly extensive and I already had many responsibilities in the group as it was.  \nIrene says : This was due to miscommunication within our group \nsince a majority of our meetings were quick due to conflicts with \neach member\u2019s schedule. This issue led to a majority of individual \nwork until we have a meeting date to combine each individual \nmember\u2019s work. This harshly reduced individual member\u2019s work quality since they were doing it b ased on any concepts and idea of \nhow the system should work during our group meeting.", "source": "Page 501", "chapter": "9"}
{"id": "1358f4421515-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  488 \nMyself says : The biggest challenge of working with a team was communication and work \ndistribution. It was hard to stay in touch, whic h was mostly due to our individual busy schedules. \nThis made it hard to properly distribute the work . I wasn\u2019t always sure who was working on what, \nso occasionally some of us would have each done  the same part of the project. There were \ndefinitely (and unfortunately) weak  moments and bitterness that we had to face during situations \nwhen we could not reach to a clear consensus on an idea or where one would feel short up to \none\u2019s standards. \nWhile much of the content of the reports was help ful, I found a lot of it tedious. It detracted from \nthe more important aspects like improving the applic ation and marketing. The amount of planning \nthat had to go into the project felt like overkill for something of the tic-tac-toe game size, however it did expose us to a myriad of techniques. Among the techniques we learned were \ngathering and formulating a comprehensive set  of requirements, deriving use cases, and \ntranslating those into a domain model. \nMe is a very bright individual, but he\u2019s most  concerned with the programming aspect of things.", "source": "Page 502", "chapter": "9"}
{"id": "1358f4421515-1", "text": "He wasn\u2019t the slightest bit interested in writi ng up reports. However, for the first report, after \nIrene and I worked through what we had done and prepared it for submission, Me finally \nappeared a few hours before submission, after no t answering phone calls for days and pretty \nmuch redid most sections of the report with what he felt was better for the project. Obviously, this \nwas good for the report, but it caused quite a hassle for Irene and me because we had to prepare a \nfinal product to send you in a timely manner. Once we got our grade back, we realized that we \nlost a lot of points for things that Me was assigned to do and never even did (mostly pertaining to \nthe Domain Analysis section). I wasn\u2019t pleased, but I know the process isn\u2019t perfect, so I just \nsucked it up and knew I had to do better on the next reports. \n \nG.6 Design of Interaction Diagrams \n We know that software design cannot be gotten \u201cr ight\u201d first time around; we need iteratively to \nrefactor the design until it converges to a satisfactory quality or we run out of time. We start by deriving an initial design (\u201cfirst iteration\u201d). Th en we evaluate the initial design and introduce \nsome improvements. \nG.6.1 First Iteration of Design Sequence Diagrams", "source": "Page 502", "chapter": "9"}
{"id": "1358f4421515-2", "text": "some improvements. \nG.6.1 First Iteration of Design Sequence Diagrams \nFigure G-14 shows the main loop for the Communicator and Controller. The Controller \nperiodically accesses the central database to retrie ve any messages for the local user. By default, \nit needs to refresh the list of available players and the leaderboard. In addition, the local user \nmight have already challenged an opponent and is  awaiting an answer. Alternatively, the local \nplayer might have been challenged by a remote pl ayer. If the local player received a challenge but \ndoes not respond within the response time, the Communicator will automatically bring up the \ninitial screen.", "source": "Page 502", "chapter": "9"}
{"id": "c418fa90d4ea-0", "text": "Appendix F \uf0b7 User Interface Programming 489\nIn Figure G-14, the main loop breaks down the possi ble interactions well. The user can send out a \nchallenge, accept a challenge, or decline a challe nge. The \u201cforever\u201d loop allows the system to \nwait idle until the local or remote pl ayer decides to send an invitation. optaltaltloop: Controller : Communicator\nstartTimer(): DB Connection\n// for local player// for local player[ forever ] retrieveMessagesForLocalUser()\ninvited := isChallengeReceived()\n[ isAwaitingOpponentAnswer() == tr ue && answer == \"accepted\" ]\ndisplayshowChallenge(opponent : Player)\n[ answer == \"accepted\" ]\nresetTimer()\nrecordMessageForOpponent( \"accepted\" )// selects one if several received// selects one if several received: Leaderboard : Player List\nresponse( answer )\nref gameroom setup\n(see sequence fragment in Figure 2)Local user accepted the \nchallenge; system waiting \nfor Xs player to actLocal user accepted the \nchallenge; system waiting \nfor Xs player to act\n[else]// challenge rejected or response timeout// challenge rejected or response timeout\nresetDisplayToInitial()\nPlayerPlayerupdate()\n[ local player challenges an opponent ]\nchallenge\nref player challenges an opponent", "source": "Page 503", "chapter": "9"}
{"id": "c418fa90d4ea-1", "text": "[ local player challenges an opponent ]\nchallenge\nref player challenges an opponent\n(see sequence fragment in Figure 3)Local user challenged an \nopponent; system waiting \nfor opponent\u2019s response[ invited == true ]ref gameroom setup\n(see sequence fragment in Figure 2)Opponent accepted the \nchallenge; system waiting \nfor Xs player to act\nrecordMessageForOpponent( \"rejected\" ) displayupdate()\nFigure G-14: Sequence diagram for the main loop in the game of tic-tac-toe. See Figure G-15 and\nFigure G-16 for the [ref]  interaction fragments.", "source": "Page 503", "chapter": "9"}
{"id": "c4e4a59c21f6-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  490 \nFigure G-15 shows a fragment of the sequence di agram that executes when a challenged player \naccepts the invitation. (It may be that either  a remote opponent accepted the challenge by the \nlocal user, or the local user accepted the cha llenge from a remote player, see Figure G-14.) The \nCommunicator first calls the method setLocalPlayerX()  on the Referee. Recall from \nSection G.3.4 that the player assignment to Xs and Os is performed randomly by the \nCommunicator that sends a match invitation. If th e local user challenged a remote opponent, then \nthe local Communicator performed the assignment be fore sending the invitati on. Alternatively, if \nthe local user accepted a remote challenge, then the local player\u2019s designation was received in the \ninvitation. The Communicator creates a new Game room and asks the Controller to show it. \nThe Controller also resets the response timer for the opponent that might have been set when the \ninvitation was sent to an opponent (see Figure G-16). alt: Controller : Communicator\nsetAwaitingOpponentMove( true ): Gameroom\n\u00abcreate\u00bb: Referee\nsetLocalPlayerX( ... )\nshowGameroom( localPlaysXs )", "source": "Page 504", "chapter": "9"}
{"id": "c4e4a59c21f6-1", "text": "setLocalPlayerX( ... )\nshowGameroom( localPlaysXs )\n[ isLocalPlayerX == false ]// for opponent// for opponentstartTimer()[ isLocalPlayerX == false ] opt\n[else]startTimer()\n// for local player// for local player\nrefwait for local player\u2019s move\n(see sequence fragment in Figure 4)ref wait for opponent\u2019s move\n(see sequence fragment in Figure 5)\nRemote player\nresponded in time;\nnow it\u2019s local player\u2019s turnRemote player\nresponded in time;\nnow it\u2019s local player\u2019s turnLocal user responded\nin time with a valid move;\nnow it\u2019s opponent\u2019s turnLocal user responded\nin time with a valid move;\nnow it\u2019s opponent\u2019s turn// for opponent, because accepted challenge// for opponent, because accepted challengeresetTimer()display\nFigure G-15: Sequence diagram for the gameroom setup in the game of tic-tac-toe. See the\n[ref]  interaction fragments in Figure G-17 and Figure G-18.", "source": "Page 504", "chapter": "9"}
{"id": "dd32995e4f0b-0", "text": "Appendix F \uf0b7 User Interface Programming 491\nIf the local player is assigned Os, then the Controller starts the response timer for the opponent \nand the local player is allowed only the following actions: view leaderboard, logout, or forfeit the \njust started match. The remote player (in this case assigned Xs) can suggest a different version of \nthe tic-tac-toe game or move a piece on the board. \nFor the sake of simplicity, the initial design does not  show the case when the players negotiate a \ndifferent version for tic-tac-toe. We w ill add this case in subsequent iterations. \nIn Figure G-18, in the method opponentMove() , the Referee implementation will use a \nsystem timer to time the local player\u2019s response.  If the local player fails to respond within the \nresponse time limit, he loses the match, the (local) gameroom is cl osed and the player is brought \nto the initial screen. : Controller : Communicator : DB Connectioninvite :\nMatch Invitation\nchallenge\nPlayerPlayer\u00abcreate\u00bbchallenge(opponent : Player)\n// for opponent// for opponentstartTimer()\nrecordChallenge( invite )\nsetAwaitingOpponentAnswer( true )\nFigure G-16: Sequence diagram for the local player to challenge an opponent to play a", "source": "Page 505", "chapter": "9"}
{"id": "dd32995e4f0b-1", "text": "Figure G-16: Sequence diagram for the local player to challenge an opponent to play a\nmatch of the game of tic-tac-toe. This [ref]  interaction fragment is part of the main loop\nFigure G-14.", "source": "Page 505", "chapter": "9"}
{"id": "99ddb614d703-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  492 \n : Controller : Referee\nlocal move: Communicator\nref wait for opponent\u2019s move\n(see sequence fragment in Figure 5)ok := isValidMove(...)\nLocal user responded\nin time with a valid move;\nnow it\u2019s opponent\u2019s turnLocal user responded\nin time with a valid move;\nnow it\u2019s opponent\u2019s turnPlayer\n[isLocalMoveValid == true] opt\nresetTimer()\nshow \nresult\nsendMoveRemote( local-move ): Gameroom\nisOver := checkIfWins()updateBoardMatrix(...)\nopt\nmatchEnded(...)[isOver == true]\nupdateLocalPlayersScore(...)board := getBoardMatrix()\nopt [ok == true]// for local player// for local player\n// for remote player// for remote playerstartTimer()\nFigure G-17: Sequence diagram for local player\u2019s move in the game of tic-tac-toe. Compare\nto Figure G-18 that shows the [ref]  interaction fragment.", "source": "Page 506", "chapter": "9"}
{"id": "623e32268d71-0", "text": "Appendix F \uf0b7 User Interface Programming 493\n \nG.6.2 Evaluating and Improving the Design \nThis section evaluates the above initial design a nd introduces some improvements. A key task in \nthis section will be to compile the responsib ilities of classes from the initial design and look for \noverloaded classes or imbalances in responsibilit y allocation. Further improvements will be \nconsidered in Section G.9 by applying design patterns. \nTo better understand the system that we are d esigning, we draw this storyboard for the game. : Controller : Referee\nretrieve\nopponent move: Communicator\nrefwait for local player\u2019s move\n(see sequence fragment in Figure 4)Remote player\nresponded in time;\nnow it\u2019s local player\u2019s turnRemote player\nresponded in time;\nnow it\u2019s local player\u2019s turnDatabase\nstartTimer(): Gameroom\nisOver := checkIfWins()updateBoardMatrix(...)\nalt [isOver == true]\nmatchEnded(...)board := getBoardMatrix()\nopt if match is not overopponentMove(...)resetTimer()\n[else]\n// for local player// for local player// for remote player// for remote player\nFigure G-18: Sequence diagram for remote player\u2019s move in the game of tic-tac-toe.\nCompare to Figure G-17 that shows the [ref]  interaction fragment.", "source": "Page 507", "chapter": "9"}
{"id": "8d53a8ef5cdf-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  494 \nPlayer Remote\nPlayer\nGame BoardWanna play \ntic-tac-toe?\nYay!\nPlayer Remote\nPlayer\nGame BoardHow about I play \nXs and we play \nthe revenge?\nOK!\nPlayer Remote\nPlayer\nGame BoardRoger \nthat!I moved \u201cX\u201d\nto (x1, y1)Move \u201cX\u201d\nto (x1, y1)Move \u201cX\u201d\nto (x1, y1)\nPlayer Remote\nPlayer\nGame BoardMove \u201cO\u201d\nto (x2, y2)Move \u201cO\u201d\nto (x2, y2)\nGot it!I moved \u201cO\u201d\nto (x2, y2)\nPlayer Remote\nPlayer\nGame Board Game BoardNetworkCentral Database\nCommunicator CommunicatorController ControllerClient 1 Client 2\n \nOur system-to-be must implement the virtual ga meboard, and support players\u2019 interaction with \nthe gameboard and communication with one another.  We could have had a single Controller to \norchestrate the work of other objects, but that would make the Controller too complex because of \ntoo many responsibilities. Our initial design offl oads at least some responsibilities to the \nCommunicator. Here is what these to key objects are doing:", "source": "Page 508", "chapter": "9"}
{"id": "8d53a8ef5cdf-1", "text": "Communicator. Here is what these to key objects are doing: \nController: \uf0b7 Allowing the local player to interact with the local gameboard \n\uf0b7 Allowing the local player to interact with  the remote gameboard (via the Communicator) \n\uf0b7 Allowing the local player to communicate with the remote player (via the Communicator), such \nas challenge, negotiate version, etc. \n \nCommunicator: \uf0b7 Allowing the remote player to interact w ith the local gameboard (via the Communicator)", "source": "Page 508", "chapter": "9"}
{"id": "e1a2bf25c069-0", "text": "Appendix F \uf0b7 User Interface Programming 495\n\uf0b7 Allowing the remote player to communicate with the local player (via the Controller), such as \nchallenge, negotiate version, etc. \n\uf0b7 Conveying the local player\u2019s actions (received from the Controller) remotely \nThis allocation still gives many responsibilities to ea ch of these objects, but the question is how to \noffload these responsibilities to other objects without making the design even more complex. There are different ways to subdi vide the communication, such as \n\uf0b7 \u201clobby communication\u201d that takes place before a match starts (represented by the top row in the \nabove storyboard), and \n\uf0b7 \u201cin-game communication\u201d during the match  (represented by the middle row in the above \nstoryboard). \nHowever, it is not clear what structural improvement is gained by such division. For example, if Communicator were to be divided,  then there would be an overhead of multiple \nobjects communicating with each other to accomplish what is not accomplished by \nCommunicator alone. \nOn the other hand, we may consider splitting the Controller into the part that handles the local \nplayer\u2019s moves and the part that displays the re mote player\u2019s moves. This intervention is better \nmotivated as part of introducing the Model-View -Controller design pattern, as explained later.", "source": "Page 509", "chapter": "9"}
{"id": "e1a2bf25c069-1", "text": "One of the problematic aspects of the given d esign is it being based on the central-repository \narchitectural style. The Communication must periodically poll the database for updates relevant \nto the local player, which may be inefficient. In  addition, because of a finite interval between \npolls, messages may be delivered with a delay. To minimize the response latency, each client \nwould need to poll the database very frequently, say twice per second. If there are many users in \nthe system, this frequent polling will introduce hi gh load on the database server and will require a \npowerful computer to cope. Finally, polli ng when noting new happens wastes network \nbandwidth. Game \nServerClient\n1\nClient\n2\nClient\nNsend info\u00abPublisher\u00bb\nGame \nServerpublish info\npublish info\u00abSubscriber\u00bb\nClient 1\nClient 2\n\u00abSubscriber\u00bb\nClient N\nFigure G-19: Client-Server architectural style for the distributed game of tic-tac-toe, where\nthe clients (\u201cgame consoles\u201d) connect to the central server. When a client wishes to send\ninformation to other clients, it first sends it to the server (left figure), which publishes this\ninformation to appropriate clients (right figure).", "source": "Page 509", "chapter": "9"}
{"id": "3f039578eef1-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  496 \nAn alternative to central repository is to have the Client-Server architectural style, where the \nclients (\u201cgame consoles\u201d) connect to the server (Figure G-19). Every time a new player logs in \nthe system, the server would notify all players already logged in about the new player. Therefore, server \u201cpushes\u201d or \u201cpublishes\u201d the relevant informat ion instead of having the clients to \u201cpull\u201d or \n\u201cpoll\u201d the database for information. Similarly, ot her relevant information could be published to \nclients. This design can be considered a distributed  Publish-Subscribe. Different player groups (in \nthe case of tic-tac-toe it is player pairs) will be organized as different publishers and subscribers. \nThis architectural style avoids polling the database . However, now we need a game server that is \nalways running and awaiting new clients to connect . Another architectural style that the reader \nmight wish to consider is Peer-to-Peer, where the player clients directly communicate with each \nother, without server mediation. \nBased on design sequence diagrams from the first iteration (Section G.6.1), we can compile the \nlists of responsibilities for key objects in the sy stem. As shown in Figure G-20, Communicator \nhas large number of methods (doing responsibilities that let other objects tell it what to do) and", "source": "Page 510", "chapter": "9"}
{"id": "3f039578eef1-1", "text": "even large number of calling responsibilities, to  tell other objects what to do. The former \ncharacteristic may indicate low cohesion. The latter characteristic indicates high coupling. \nThe following table summarizes th e responsibilities of different objects in our preliminary design: Communicator\n#  opponentID : PlayerInfo\n#  isAwaitingOpponentAnswer : boolean\n#  connectionStatus : Object\n+  challenge(opponent : PlayerInfo)\n+  sendMoveRemote( ... )\n+  updateLocalPlayersScore(score : int)\n+  response(answer : string)\n\u00abcreate\u00bb MatchInvitation\n\u00abcreate\u00bb Gameroom\n\uf0aeDB_Connection.retrieveMessagesForLocalUser()\n\uf0aeDB_Connection.recordMessageForOpponent()\n\uf0aeDB_Connection.recordChallenge(invite : MatchInvite)\n\uf0aeController.showChallenge(opponent : PlayerInfo)\n\uf0aeController.resetDisplayToInitial()\n\uf0aeController.showGameroom(localPlaysXs : boolean)\n\uf0aeReferee.setLocalPlayerX( ... )\n\uf0aeReferee.opponentMove( ... )\n\uf0aePlayerList.update()\n\uf0aeLeaderboard.update()\nTTT-BP01: response time policy\nTTT-BP03: one match at a timeTTT-BP04: network failure equals forfeited match\nTTT-BP05: if \uf0b31 invitations, select one randomly", "source": "Page 510", "chapter": "9"}
{"id": "3f039578eef1-2", "text": "TTT-BP05: if \uf0b31 invitations, select one randomly\nTTT-BP06: discard invitations during match\nTTT-BP08: discard version request while awaiting answerknowing\ndoing\ncreation\ncalling\nbusiness\nrulesCommunicator list of responsibilities:\n \nFigure G-20: List of responsibilities for the Communicator class.", "source": "Page 510", "chapter": "9"}
{"id": "c94fded1699e-0", "text": "Appendix F \uf0b7 User Interface Programming 497\n \nResponsibility \ntype Controller Communicator  Referee GameroomDB \nConnection Player \nList Invite \nQueue Match \nInvitation Leader \nboard \nKnowing 4 3        \nDoing 6 4        \nCreation \u2013 2        \nCalling 3 10        \nBusiness policies 4 6        \nTOTAL 17 25        \nAs seen, Communicator is assigned dispropor tionally large number of responsibilities. \nSome smaller issues with the initial design include: \n\u25cf The Gameroom has the attribute matchStatus, but the Referee is given a method checkIfWins() \nwhich whether a move wins and returns a B oolean value isOver (see Figure G-17 and Figure \nG-18). It appears that the responsibility of compu ting and memorizing the ma tch status is spread \nacross two different objects (Gameroom and Refe ree), which indicates poor cohesion of these \nobjects. \n\u25cf The Communicator is assigned all functions rela ted to communicating with the remote player, \nexcept one, which is saving the score of the local  player after a match is finished. See Figure \nG-17 where the Referee calls updateLocalPlayersScore()  on Communicator. One may", "source": "Page 511", "chapter": "9"}
{"id": "c94fded1699e-1", "text": "argue that Communicator should take all respons ibilities for database access.  However, in this \ncase it is not clear that there is any advantage of passing this information through Communicator \ninstead of having the Referee directly call DB Connection. The advantage of the latter solution \nwould be that it increases Communicator\u2019s cohesion in the sense that it would then deal only with Controller\n#  isAwaitingOpponentAnswer : boolean\n#  isInGameroom : boolean\n#  isAwaitingOpponentMove : boolean\n#  isNetworkDown : boolean\n+  challenge(opponent : PlayerInfo)\n+  showChallenge(opponent : PlayerInfo)\n+  showGameroom(localPlaysXs : boolean)\n+  resetDisplayToInitial()\n+  localMove()\n+  matchEnded(...)\n\uf0aeCommunicator.response(answer : string)\n\uf0aeCommunicator.sendMoveRemote( ... )\n\uf0aeReferee.isValidMove(xCoord : int, yCoord : int)\nTTT-BP01:response time policy\nTTT-BP02: num. pending invitations \uf0a31\nTTT-BP03: one match at a time\nTTT-BP07: version negotiation protocolknowing\ndoing\ncreation \u2013 none\ncalling\nbusiness\nrulesController list of responsibilities:\n \nFigure G-21: List of responsibilities for the Controller class.", "source": "Page 511", "chapter": "9"}
{"id": "e670fe96ec05-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  498 \ncommunicating with the remote player. This is par ticularly important if in the future the system \nwill be extended with new features that would make the database interaction more complex. \n\u25cf In Figure G-17, when the local player moves a piece this action is immediately processed and, \nif valid, forwarded to the opponent. An alternative is to allow the player to \u201cpreview\u201d his or her \nplanned move. Only when the player confirms the move, e.g., by clicking the button \u201cApply\u201d \nwould the move be committed and sent to the opponent. \n  \nG.7 Class Diagram and Interface \nSpecification \n \n \n______ TO BE COMPLETED ______ \n \n \nHow We Did It & Plan of Work \nWe underestimated how long it would take to create the system designs. To add to the frustration, \nthe UML diagramming software used to generate  the figures in the report. was very unwieldy. \nWorking with a team has been a \nunique experience. We learned about \nweaknesses and strength of certain \nteam members and how to create an efficient distribution of work. The \nbenefits from working in a group \ninclude the ability to bounce ideas back and forth to create a larger, more \ncoherent idea and knowing there is", "source": "Page 512", "chapter": "9"}
{"id": "e670fe96ec05-1", "text": "coherent idea and knowing there is \nsomeone to help you when you don\u2019t know what to do or are stuck with a \npart of the project along with helping \nothers. \nMyself says : A technique that was \nuseless to our group was the concept of \nproject estimation, so we often failed to meet certain planned milestones. We \nsimply accomplished more in a short \nspan to compensate for failing to meet Working on a BDUF \u2026\nShould I be talking\nto my customer\ninstead?\nWorking on a BDUF \u2026\nShould I be talking\nto my customer\ninstead?Should I be talking\nto my customer\ninstead?", "source": "Page 512", "chapter": "9"}
{"id": "a6c9f930a6b0-0", "text": "Appendix F \uf0b7 User Interface Programming 499\na certain milestone at a date. However, I understand the use of milestones is very important in the \nworkplace as well as deadlines. Many products end up sacrificing quality when having to rush to \nmake up what they failed to accomplish within a certain time frame. \n \nG.8 Unit Tests and Coverage \n \nG.8.1 Deriving the Object States \nTo derive the object states, recall that an object state  is defined as constraints on the values of \nobject\u2019s attributes. From Figure G-11, we see that there are three objects with \u201cdoing\u201d responsibilities in our system: Controller, Communi cator, and Referee. We need to determine \ntheir states because objects with \u201cknowing\u201d responsibilities are essentially passive information \ncontainers. As such, they are unlikely to cont ain conditional logic statements; they will most \nlikely contain simple accessor methods for getting or setting attribute values. A possible \nexception is the Gameroom object, but we will not  consider it for now. Objects DB Connection \nand Interface are \u00abboundary\u00bb objects that interact wi th external actors and will need to be tested \nwhen the external actors will be availa ble, during design and implementation. \nConsider the attributes of the Controller, which ar e concerned with constraining the user\u2019s actions", "source": "Page 513", "chapter": "9"}
{"id": "a6c9f930a6b0-1", "text": "Consider the attributes of the Controller, which ar e concerned with constraining the user\u2019s actions \nwhile awaiting the opponent\u2019s r esponse. When awaiting the opponent\u2019s response, the system \nshould disallow all actions except viewing the leaderboard or logout. The Controller essentially \nneeds to implement the operational model shown in  Figure G-6. We define these states of the \nController: \nAllowing Unconstrained Activity \u2014 user can perfo rm any action allowed in the given context \nConstraining Activity \u2014 user\u2019s actions are constrained \nlogout /\nresponse-received,\nnetwork-restored,\nresponse-timeout /challenge, suggest-version,\nnetwork-outage,\nmove-a-piece /Coarse Controller state diagram:\nLogging out Allowing Unconstrained ActivityConstraining Activity\nlogout /view-leaderboard /\nview-leaderboard /logout /\nresponse-received,\nnetwork-restored,\nresponse-timeout /challenge, suggest-version,\nnetwork-outage,\nmove-a-piece /Coarse Controller state diagram:\nLogging out Allowing Unconstrained ActivityConstraining Activity\nlogout /view-leaderboard /\nview-leaderboard /  \nWe realize that it is difficult or impossible to define precisely the above coarse states by attribute \nconstraints. For example, how to know when th e setup is completed and show the game board?", "source": "Page 513", "chapter": "9"}
{"id": "a6c9f930a6b0-2", "text": "How to know that players do not wish to negotiate  a different game version from the default one?", "source": "Page 513", "chapter": "9"}
{"id": "70f39f005f94-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  500 \nGiven these difficulties, we decide that we need  a refined state diagram for the Controller. \nBecause the Controller attributes are all Boolean va riable, we can represent the states using this \nlogical circuit (also see Figure G-22): \n1: Challenge Enabled\n4: Board Move Enabled\n5: Board Move Disabled\n6: Match Finalizing\n7: Logging out2: Activity DisabledisAwaitingOpponentAnswer\nisAwaitingOpponentMoveisInGameroom\nisNetworkDown3: Version Counteroffer\n \nNote that we assume that if the user is not in the gameroom, he or she cannot be awaiting \nopponent\u2019s move, so we do not specify this attribute in such states. Similarly, if \nisAwaitingOpponentMove is true, then we do not n eed to ask if isInGameroom. As hinted in \nSection G.5.1, here we realize that the attribute isInGameroom is necessary and the different \nstages of the game setup could not be disti nguished without introducing this attribute. \nThe above logical circuit is somewhat insufficien t for representing the Controller states in the \nsense that state 7: Logging out  overlaps with several other states in  attribute values, such as states", "source": "Page 514", "chapter": "9"}
{"id": "70f39f005f94-1", "text": "1:\uf020Challenge Enabled  and 6: Match Finalizing . The difference is that while 7: Logging out  the \nlocal system is blocked for user input and will shut down after a needed \u201chousekeeping.\u201d \nThe Controller state machine diagram is show n in Figure G-22. Note the diamond-shaped choice \npseudostate  on the transition from state 2: Activity Disabled  for the \u201cresponse-received\u201d event. To \navoid clutter, we use the same pseudos tate for the transition from state 1: Challenge Enabled  \nupon receiving an invitation/challenge. This pse udostate is part of UML notation used to \nemphasize that a Boolean condition determines which transition is followed. In our case, the \nController transitions to state 4: Board Move Enabled  if the local player is assigned Xs; \notherwise, the local player is assigned Os and the Controller transitions to state 5: Board Move \nDisabled . The Controller states are defi ned in the following table:", "source": "Page 514", "chapter": "9"}
{"id": "fe10c53b234b-0", "text": "Appendix F \uf0b7 User Interface Programming 501\n \nState of Controller Definition \n1: Challenge \nEnabled NOT (isAwaitingOpponentAnswer OR isInGameroom OR \nisAwaitingOpponentMove OR isNetworkDown) \nDescription: This is the initial state: the user is allo wed only to challenge an opponent, view leaderboard, or \nlogout; the user may also passively wait to receive a challenge from a remote user \n2: Activity Disabled isAwaitingOpponentAnswer OR isNetworkDown \nDescription: During the gameroom setup, the user enters this state after challenging an opponent or after \nsuggesting a different game version \n3: Version \nCounteroffer isInGameroom AND isAwaitin gOpponentAnswer AND NOT \n(isAwaitingOpponentMove OR isNetworkDown) \nDescription: While awaiting an answer to a game vers ion offer, the local user receives a different version \ncounteroffer \n4: Board Move Enabled isInGameroom AND NOT (isAwaitingOpponentAnswer OR \nisAwaitingOpponentMove OR isNetworkDown) \nDescription: In the gameroom, the us er is allowed to move a pieces on the board or to su ggest a different \ngame version, provided that the guard condition is met (no move has been made and the board is still", "source": "Page 515", "chapter": "9"}
{"id": "fe10c53b234b-1", "text": "empty); once the match starts, the game version cannot be changed \n5: Board Move Disabled isInGameroom AND isAwaitingOpponentMove AND NOT \n(isAwaitingOpponentAnswer OR isNetworkDown) \nDescription: In the gameroom, the user has made a move and is awaiting the opponent\u2019s move. \n6: Match Finalizing NOT (isInGameroom OR isNetworkDown) \nresponse-received\nresponse-timeout,\ncounteroffer-rejected /challenge /\nlogout /network-outage /Controller state diagram:network-restored /any state except\nLogging-out\nsuggest-version\n[board-empty] /\nlogout /\n7: Logging out2: Activity Disabled\n1: Challenge Enabled\nmove-a-piece /\nmatch-end-detected,\nresponse-timeout,forfeit /opponent-moved /\nuser-acknowledged,\nresponse-timeout /match-end-detected,\nresponse-timeout,\nforfeit /\n5: Board Move Disabledlogout /6: Match Finalizing\nentry: start timerdo: countdownexit: final housekeeping[local-plays-Os] /challenge-accepted\n[local-plays-Xs] /counter-offered\n[isInGameroom] /response-timeout /3: Version Counteroffer\nentry: start timerdo: countdown3: Version Counteroffer\nentry: start timerdo: countdown", "source": "Page 515", "chapter": "9"}
{"id": "fe10c53b234b-2", "text": "entry: start timerdo: countdown\ncounteroffer  accepted4: Board Move Enabled\nentry: start timerdo: countdown4: Board Move Enabled\nentry: start timerdo: countdown\nFigure G-22: State machine diagram for the Controller class of the game of tic-tac-toe. Note\nthat transition actions are omitted, but at some point will need to be specified.", "source": "Page 515", "chapter": "9"}
{"id": "a47513e8cc7c-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  502 \nDescription: The system detected a match end (either \u201cwin\u201d or \u201cdraw\u201d) or one of the players forfeited the \nmatch; the system signals the match end and waits fo r player\u2019s acknowledgement, erases the screen, and \ncloses the gameroom and brings players back to the main screen; network connection is required to store the updated scores for both players in the database \n7: Logging out NOT isInGameroom \nDescription: Logout is simple because any scores from played matches would have been already stored \nIn Figure G-22, the event \u201cchallenge -accepted\u201d can occur in state 1: Challenge Enabled  if the \nlocal user accepts a challenge from a remote user, and in state 2: Activity Disabled  if a remote \nopponent accepts a challenge by the local user. Both  events transition the Controller to state 4 or \nstate 5, depending on whether the local user is assigned Xs or Os, respectively. This decision is \nindicated by the guard conditions emanati ng from the diamond-shaped choice pseudostate. \nIn state 3: Version Counteroffer  and state 4: Board Move Enabled , the system is timing the local \nuser for response, which may appear redundant  because the remote opponent\u2019s Communicator", "source": "Page 516", "chapter": "9"}
{"id": "a47513e8cc7c-1", "text": "user for response, which may appear redundant  because the remote opponent\u2019s Communicator \nwill also time our user\u2019s response. The reason fo r doing this is to know when the remote system \nwill detect response timeout and declare the opponent winner, so that the local system can \nautomatically close the gameroom and default to state 1: Challenge Enabled . On the other hand, \nthe response-timeout event in state 2: Activity Disabled  and state 5: Board Move Disabled  will be \ngenerated by the local Communicator, which is  timing the remote opponent\u2019s response. \nNote that only the Xs player can start game-version negotiation, because the transition labeled \n\u201csuggest-version [board-empty] /\u201d emanates from state 4: Board Move Enabled . We make this \nchoice to avoid further complexity in the system. For example, if we allowed the Os player to \nsuggest a version, the following scenario could o ccur. Assume that the local user is assigned Xs \nand he makes a move, but at the same time, the opponent (being assigned Os and awaiting a \nmove) suggests a different version. A version offer will arrive while the Xs player is awaiting the \nOs move and then we need to decide how to ha ndle such a scenario. Instead, we do not allow the", "source": "Page 516", "chapter": "9"}
{"id": "a47513e8cc7c-2", "text": "Os player to make version offer, but he can still make a counteroffer after receiving a version \nsuggestion. For this purpose, we need slightly to modify the business rule TTT-BP07 defined in \nSection G.3.4. \nAt this point, it becomes clear that the Controller is very complex and may need to be split into \nseveral objects. One may suspect that it is be cause of being assigned too many responsibilities, \nbut this was not apparent in Section G.5.1, wh en the responsibilities were assigned. For now, we \nleave this issue aside, but we keep in mind th at the Controller will need special attention. \n \nhe Communicator deals with communication with other players. It starts in the Monitoring \nstate, where is monitoring the network health  and retrieving other information of interest \nfrom the database, such as th e latest player availability list and the leaderboard. \nThe Communicator states are defined as follows (see Figure G-23): \n \nCommunicator State Definition \n1: Monitoring NOT isAwaitingOpponentAnswer \nDescription: The initial and default state of monitoring the network health and relevant database updates \n2: Waiting For Response isAwaitingOpponentAnswer AND NOT (connectionStatus = \"disconnected\") \nDescription: Waiting for response from the opponent; response timer counting down \nT", "source": "Page 516", "chapter": "9"}
{"id": "3a01756f1346-0", "text": "Appendix F \uf0b7 User Interface Programming 503\n3: No Response Received isAwaitingOpponentAnswer  AND NOT (connectionStatus = \"disconnected\") \nDescription: Response timer timed out before receiving the opponent \u2019s response; do the necessary \n\u201chousekeeping\u201d and upon completion transition to the default monitoring state \n4: Connection Lost connectionStatus = \"disconnected\" \nDescription: Logout is simple because any scores from played matches would have been already stored \nAlthough we assume that state 1: Monitoring  is the initial state, the network connection may be \nalready down at the time when the user logged in. In this case, the system will immediately \ntransition to state 4: Connection Lost . \nState 2: Waiting For Response  and state 3: No Response Received  are indistinguishable in terms \nof attribute values. The difference is that in state 2: Waiting For Response  there is also response \ntimer counting down. \nNote that one might consider introducing a state of Communicator for situations when it receives \na remote request and the local user is expected  to respond within a response timeout. However, \nbecause this is already responsibility of the opponent\u2019s Communicator, we decide against \nduplicating the responsibilities. Remote requests are shown explicitly as self-transitions on all", "source": "Page 517", "chapter": "9"}
{"id": "3a01756f1346-1", "text": "duplicating the responsibilities. Remote requests are shown explicitly as self-transitions on all \nstates in Figure G-23 (except for state 4: \uf020Connection Lost ), because there are actions associated \nwith these events that must be performed. We assume that the Communicator will not deal with \nlocal requests in state 4: \uf020Connection Lost  because the Controller will know that the network is \ndown and will not issue requests to the Communicator. \n The Referee essentially makes three types of decisions: \n\uf0b7 Is the local player next to move? \n\uf0b7 Is the local player\u2019s last move valid? Communicator state diagram:\nnetwork-outage /\nnetwork-restored /\nresponse-timeout /\nlocal-request /network-outage /\nresponse-received /network-outage /\n(completion transition)request-received /\n3: No Response Received\ndo: housekeeping\nrequest-received /1: Monitoring\ndo: periodic probes\nrequest-received /2: Waiting For Response\nentry: start timer\ndo: countdown4: Connection Lost\ndo: periodic probes\n \nFigure G-23: State diagram for the Communica tor class of the game of tic-tac-toe.", "source": "Page 517", "chapter": "9"}
{"id": "89e6276c0130-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  504 \n\uf0b7 Is the match finished because three- in-a-row or some policy invocation? \nThe turn decision is decided for the first move  based on whether the local player is assigned Xs or \nOs; for subsequent moves, the players alternate by turns. \nThe validity decision is based on the rules of the game of tic-tac-toe. If the move is invalid, the \nplayer is given another chance to move. \nWhen match end is detected, no additional moves are allowed (unless it is the revenge version of \ntic-tac-toe), and the system needs to do some  \u201chousekeeping\u201d activities before closing the \ngameroom. The Referee state diagram is show n in Figure G-24. The initial state is 1: Opponent\u2019s \nTurn , because the attribute isLocalPlayerX is by default initially set as FALSE . This attribute may \nbe set to TRUE  by random assignment of Xs or Os at the start of a match and does not change the \nvalue during a match; therefore, it is not considered  for defining the Referee sates. Recall that in \nSection G.5.1 we decided that responsibility R8 in Table G-3 (randomly assigning Xs and Os) is \nperformed by the Communicator, when an opponent is challenged.", "source": "Page 518", "chapter": "9"}
{"id": "89e6276c0130-1", "text": "performed by the Communicator, when an opponent is challenged. \nThe Referee states are defined as follows (see Figure G-24): \n \nState of Referee Definition \n1: Opponent\u2019s Turn NOT isLocalPlayerNext \nDescription: The opponent is allowed to move a piece on the board; the local user is blocked \n2: Local User\u2019s Turn NOT isLocalPlayerNext \nDescription: The local user is allowed to move a piece on the board; the opponen t is presumably blocked \n3: Match Ended gameroom reference equals nil \nDescription: Terminal state of a match; the gamer oom is closed and Referee is waiting for a new match \nNote that Referee\u2019s state 3: Match Ended  (Figure G-24) is linked to Controller\u2019s state 6: Match \nFinalizing  (Figure G-22), and in most cases the Referee will cause the event that will make the \nController transition into its state 6. \nremote-move /Referee state diagram:\nlocal-move [three-in-a-row],\nforfeit, response-timeout\nnetwork-outage / final-housekeeping\n2: Local Users Turn\n1: Opponents Turnlocal-move /invalid-move /\nlocal-move /remote-move [three-in-a-row],\nforfeit, response-timeout", "source": "Page 518", "chapter": "9"}
{"id": "89e6276c0130-2", "text": "local-move /remote-move [three-in-a-row],\nforfeit, response-timeout\nnetwork-outage / final-housekeepingset-local-plays-Xs /3: Match Ended\n \nFigure G-24: State diagram for the Referee class of the game of tic-tac-toe.", "source": "Page 518", "chapter": "9"}
{"id": "42bb63b0a611-0", "text": "Appendix F \uf0b7 User Interface Programming 505\nG.8.2 Events and State Transitions \nThe events and legal transitions between the stat es of several objects are shown in Figure G-22 to \nFigure G-24. By reading these figures, one can see that only certain state sequences are possible. \nLegal state sequences for the Referee (Figure G-24): \n1, 3    (local user is by default Os player) \n{1, 2}, 3 1, {2, 1}, 3 \n1, 2, 3   (local user is set as Xs player) \n1, {2, 1}, 3 \n1, 2, {1, 2}, 3  \nwhere the curly braces symbolize an  arbitrary number of repetitions of the enclosed states. For \nexample, the second line says that a sequence of Re feree states such that an arbitrary number of \nrepeated transitions from state 1: Opponent\u2019s Turn  to state 2: Local User\u2019s Turn , back to state 1, \netc., ending with state 3: Match Ended  is legal for the Referee. \nLegal state sequences for the Communicator (Figure G-23): \n1, 4, 1, ...", "source": "Page 519", "chapter": "9"}
{"id": "42bb63b0a611-1", "text": "1, 4, 1, ... \n1, 2, 1, ... 1, 2, 3, 1, ... \n1, 2, 4, 1, ... \n1, 2, 3, 4, 1, ...  \nBecause the Communicator does not have a termin al state, none of the sequences is finished. \nLegal state sequences for the Controller (Figure G- 22) are a bit more complicated to determine. \nWe start by defining the following state sub-sequences: \nA:  {1,2}  local player unsuccessfully challenges different opponents  \nB:  A,4   an opponent accepts and local player is assigned Xs \nC:  A,5   an opponent accepts and local player is assigned Os \nD:  B,2   local player is assigned Xs and players are negotiating game version \nE:  D,3,4   different game version agreed, local player is Xs \nF:  D,3,5   different game version agreed, local player is Os \nG:  {4,5}   sequence of board moves, starting with the local player  \nH:  {5,4}   sequence of board moves, starting with the opponent  \nI:  6,1   match finalizing", "source": "Page 519", "chapter": "9"}
{"id": "42bb63b0a611-2", "text": "I:  6,1   match finalizing  \nJ:  4,I   match finished after the local player moved  \nK:  5,I   match finished after the opponent moved \n \nWe use the above sub-sequences to com pose the following composite sequences: \nX:  A,1 | D,1 | D,3,1 | W,I | B,K | C,J | B,H,K | C,G,J \nW:  B | B,H | C | C,G | E | E,H | F | F,G \nY:  W | W,6 | D | Z | Z,6 Z:  B,5 | C,4 | B,H,5 | C,G,4", "source": "Page 519", "chapter": "9"}
{"id": "bc4585d0f362-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  506 \nwhere the vertical line | symbolizes the \u201cor\u201d ope ration. \u201cX\u201d represents all legal sequences that \nlead to state 1, after visiting at least one other state. \u201cW\u201d represents all legal sequences that lead \nto state 4: Board Move Enabled , where it is the local player\u2019s turn. \u201cY\u201d represents all states in \nwhich a network failure may occur and the Co ntroller will next transition to state 2: Activity \nDisabled . \nFinally, legal state sequences for the Controller are as follows:  \n1,7 | A,7 | X,7 | X,2,7 | Y,2,7 | Y,2,X,7 | Y,2,X,2,7 \n \nG.8.3 Unit Tests for States \nIdeally, the unit tests should check  that the object exhibits only the legal sequences of states and \nnot the illegal state sequences. This may be feasible for simple state machines, such as that of the \nReferee (Figure G-24). However, the Controller h as potentially infinite number of both legal and \nillegal state sequences, as seen in Section G.8.2. This is why we take a practical approach of \ncovering all states at least once and all valid transitions at least once. We start by writing unit", "source": "Page 520", "chapter": "9"}
{"id": "bc4585d0f362-1", "text": "tests to cover all identified states at least once (i.e ., each state is reached in at least one test case). \nIn Section G.8.1, we decided that objects with  \u201cknowing\u201d responsibilities have trivial states \nbecause these objects are unlikely to contain cond itional logic statements. Testing these objects is \nsimple by calling their accessor methods for getting or setting attribute values. Objects DB Connection and Interface are \u00abboundary\u00bb objects that  interact with external actors and their \ntesting plan will be made when their actors w ill be available, during design and implementation. \nBased on Figure G-11, we will describe the plan fo r unit testing of the three objects with \u201cdoing\u201d \nresponsibilities: Controller, Communicator, and Referee. \nWe start with the Referee because it has the simplest state machine (Figure G-24) and has a \ndependency (or, association) only with the Controller and Communicator (see Section G.5.1). By examining Referee\u2019s and Controller\u2019s responsibilities,  we conclude that the Referee will likely be \ncalled by the Controller, not the other way ar ound. The Referee responsibilities include: \u201cReferee \nasks Communicator to update the local player\u2019s score if he won a match.\u201d Therefore, we will need only one stub for the Referee unit testing:  the Communicator Stub. We examine the legal", "source": "Page 520", "chapter": "9"}
{"id": "bc4585d0f362-2", "text": "state sequences in Section G.8.2 to determine wh ich sequences will cover all identified states at \nleast once. The simplest sequence is fo r the case when the local user is set as Xs player: 1, 2, \n3, which covers all Referee\u2019s states. \nAssuming that we will be using the Java progra mming language and JUnit as our test framework, \nhere is a pseudocode for a test case that checks if  the Referee correctly transitions to state 2: \nLocal User\u2019s Turn  when the local user is assigned to play Xs. \n \nListing G-1: Example test case for the Referee class. \npublic class RefereeTest { \n  // test case to check that state 2 is visited \n  @Test public void \n    setLocalPlayerX_opponentsTurn_toLocalUsersTurn() {", "source": "Page 520", "chapter": "9"}
{"id": "b9684f930664-0", "text": "Appendix F \uf0b7 User Interface Programming 507\n    // 1. set up \n    Referee testReferee = new Referee( /* constructor params */ ); \n \n    // 2. act \n    testReferee.setLocalPlayerX(true); \n \n    // 3. verify \n    assertEqual(testReferee.isLocalPlayerX(), true); \n    assertEqual(testReferee.isLocalPlayerNext(), true); \n  } \n} \n \nRecall the notation for the test case method in Listing G-1 (see Section 2.7.3): \n\uf0e1methodName \uf0f1_\uf0e1startingState \uf0f1_\uf0e1expectedResult \uf0f11. Set up\n2. Act\n3. Verify\uf0e1methodName \uf0f1_\uf0e1startingState \uf0f1_\uf0e1expectedResult \uf0f11. Set up\n2. Act\n3. Verify\n \nIn Listing G-1, the tested method is the Referee method setLocalPlayerX() , the object is \nstarting in state 1: Opponent\u2019s Turn , and the expected result is that  the Referee will transition to \nstate 2: Local User\u2019s Turn . Thus the test case method name \nsetLocalPlayerX_opponentsTurn_toLocalUsersTurn() .", "source": "Page 521", "chapter": "9"}
{"id": "b9684f930664-1", "text": "setLocalPlayerX_opponentsTurn_toLocalUsersTurn() . \n \nState transitions occur because of  events. Events are conveyed to objects by calling their methods. \nThis is why we need to design unit test case s to test if methods are causing proper state \ntransitions. We know that methods will be derived at  the design stage, so at this point we will \nguess what methods will need to do and given them  names. The Referee will be told when the \nplayers make moves and its key responsibilities stat ed in Section G.5.1 (Table Table G-3) are: \nprevent invalid moves, detect match e nding (\u201cwin\u201d or \u201cdraw\u201d), and apply the RESPONSE TIME \nPOLICY . Based on the design of interaction diagrams (Sections G.6 through G.???) and, based on \nthis design, we know that the Refe ree will need the following methods: \n \npublic interface Referee { \n    // sets attributes isLocalPlayerX and isLocalPlayerNext \n    public void setLocalPlayerX(boolean localPlaysXs); \n     // arbitrates local player's move \n    public boolean isValidMove(int xCoordinate, int yCoordinate); \n     // notifies about opponent's move; sets timer for local user", "source": "Page 521", "chapter": "9"}
{"id": "2eeccd7d48eb-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  508 \n    public void opponentMove(int xCoordinate, int yCoordinate); \n} \nHere we realize that we missed one association in Figure G-12: the Referee will retrieve the board \nstate from the Gameroom to ch eck for valid moves and update it accordingly. Another missed \nassociation is between the Referee and the Play er, because the Referee uses the Player object \nargument to invoke the Controller\u2019s method matchEnded() , as seen below. \nIn the method opponentMove() , the Referee implementation will use a system timer to time \nthe local player\u2019s response. If the local player fa ils to respond within the response time limit, he \nloses the match, the (local) game room is closed and the player is brought to the initial screen. \nThe Referee will need to call the following methods on the Controller: \npublic interface Controller { \n    // notification that local player did not respond in time \n    public void localPlayerUnresponsive(); \n     // notification that the match ended and who won, if any \n    public void matchEnded(Player winner); \n} \nThe Referee will need to call the following methods on the Communicator: TesterRefereeTestRefereeTest\nPlayer\nID\nscore\nstatusPlayer\nID\nscore\nstatuswinnerIDReferee", "source": "Page 522", "chapter": "9"}
{"id": "2eeccd7d48eb-1", "text": "Player\nID\nscore\nstatusPlayer\nID\nscore\nstatuswinnerIDReferee\n#  isLocalPlayerX : boolean\n#  isLocalPlayerNext : boolean\n#  isLocalMoveValid : boolean\n+  setLocalPlayerX(localPlaysXs : boolean)\n+  isLocalPlayerX(): boolean\n+  isLocalPlayerNext() : boolean\n+  isLocalMoveValid(int xCoord, int yCoord) : boolean\n+  getWinnerID() : Player\n\u2013 startTimer()\n\u2013 resetTimer()\n\u2013c h e c k I f W i n s ( )Communicator\n+  updateLocalPlayersScore(score : int)Communicator\n+  updateLocalPlayersScore(score : int)\nController\n+  localPlayerUnresponsive()\n+  matchEnded(winner : Player)Controller\n+  localPlayerUnresponsive()\n+  matchEnded(winner : Player)Test driver\nClass under testTest stubs\ntestReferee\nGameroom\n+  getBoardMatrix() : Array\n+  updateBoardMatrix(x : int, y : int)\n+  setMatchStatus(status : string)\nFigure G-25: Test driver and stubs for testing the Referee class of the game of tic-tac-toe.", "source": "Page 522", "chapter": "9"}
{"id": "a7daedc4675b-0", "text": "Appendix F \uf0b7 User Interface Programming 509\npublic interface Communicator { \n    // notification that local player did not respond \n    public void updateLocalPlayersScore(int score); \n} \nThe complete arrangement for testing the Referee class is shown in Figure G-25. Listing G-2 \nshows two test cases that cover all three states of  the Referee. For the second test case, we prepare \nthe game board so that the next move of the local player (assuming she plays Xs) will result in a \nthree-in-a-row board configuration. \n \nListing G-2: Test cases for the Referee class. \npublic class RefereeTest { \n // test case checks that state 2 is visited (copied from Listing G-1) \n  @Test public void \n    setLocalPlayerX_opponentsTurn_toLocalUsersTurn() { \n \n    // 1. set up \n    Referee testReferee = new Referee( /* constructor params */ ); \n \n    // 2. act \n    testReferee.setLocalPlayerX(true); \n \n    // 3. verify \n    assertEqual(testReferee.isLocalPlayerX(), true); \n    assertEqual(testReferee.isLocalPlayerNext(), true); \n  }", "source": "Page 523", "chapter": "9"}
{"id": "a7daedc4675b-1", "text": "} \n \n  // test case to check that state 3 is visited from state 2 \n  @Test public void \n    isLocalMoveValid_localUsersTurn_matchEnded() { \n \n    // 1. set up \n    Player localPlayer = new Player( ... ); \n    Gameroom gameroomStub = new Gameroom( ... ); \n    Referee testReferee = new Referee(localPlayer, gameroomStub, ...); \n    testReferee.setLocalPlayerX(true); \n    gameroomStub.updateBoardMatrix(0, 0, \"X\"); \n    gameroomStub.updateBoardMatrix(0, 1, \"O\"); \n    gameroomStub.updateBoardMatrix(1, 1, \"X\"); \n    gameroomStub.updateBoardMatrix(1, 0, \"O\"); \n \n    // 2. act \n    boolean ok = testReferee.isLocalMoveValid(2, 2); \n \n    // 3. verify \n    assertEqual(ok, true); \n    assertEqual(testReferee.isLocalPlayerX(), true); \n    assertEqual(testReferee.isLocalPlayerNext(), false); \n    assertEqual(testReferee.getWinnerID(), localPlayer); \n  } \n}", "source": "Page 523", "chapter": "9"}
{"id": "efdd0d201f24-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  510 \nI leave it to the reader to write the unit test cases for the Controller and Communicator. \nG.8.4 Unit Tests for Valid Transitions \nHere we need to write the unit tests to cover a ll valid transitions at least once. Figure G-24 in \nSection G.8.1 shows that there are seven valid transitions between the Referee\u2019s three states. We \nneed to design test cases th at will cause the Referee to cover all seven transitions. \nHow We Did It & Plan of Work \nWe had already written about 100  pages of documentation on ex actly what our program was \ngoing to accomplish and exactly how it was going to do each task. But because the programming \nlanguages were new to us, we didn\u2019t always follow the plans that we wrote. \nMe says : Essentially, by far the most difficult and frustrating aspect was keeping everyone on \ntrack and working together. This heavily restrict ed the amount and degree of work that our group \nproduced. Even at this point, there is still coding  that people were supposed to do that has not \nbeen shared with me so it is hard to determin e what they will decide to implement because it \nnever seems to be what we have agreed on. I k now that situations can always be worse but I", "source": "Page 524", "chapter": "9"}
{"id": "efdd0d201f24-1", "text": "really feel that at almost every point, I faced  an undue amount of frustrating uncertainty about the \nstate of our work. \nMyself says : The second report rolled around and we kne w we had to get things done. Once \nagain, Irene and I started sending emails about st arting the report. We started the report and once \nagain Me was like a ghost. He disappeared a nd reappeared towards the very end of the \nsubmission process, going crazy and fixing up a numb er of different things as well as adding \nadditional diagrams and text to the report. Once again, good, but very annoying timing and not convenient when Irene and I would li ke to get things ahead of time. \nMe says : I didn\u2019t feel as though any of the concepts  learned were not helpful in advancing my \nknowledge of software development because they we re all useful in the production and logical \ncreation of software. Although this may be true, I found that many of these software engineering \nconcepts are tedious and take a lot of time. Some of them take more time than they are worth in \nmy opinion. For example, OCL Contracts are useful in showing all of the preconditions, \npostconditions, and invariants; however, they take a lot of time to enumerate and write, simply", "source": "Page 524", "chapter": "9"}
{"id": "efdd0d201f24-2", "text": "when code for the software can be written with these invariants in mind. In a sense, there are \nother principles that are more useful that also provide this information. \nWe realized that our project required a strong u nderstanding of network protocols, which at the \nstart of the semester none of us was familiar with and had to quic kly learn. Personally, the biggest \nchallenge for Myself was learning to code with mu ltiple new languages in such a short span of \ntime. \nThere wasn\u2019t always an opportunity for every gr oup member to contribute evenly and when it \ncame to spreading the work equally or giving it to the fastest coder, we often chose the latter \nroute. \nMyself says : Me is a very advanced programmer th at knows a wide variety of programming \nlanguages and started to get even more cocky ( like this much wasn\u2019t enough!) when the time", "source": "Page 524", "chapter": "9"}
{"id": "5c69031088cf-0", "text": "Appendix F \uf0b7 User Interface Programming 511\ncame to implement the project. He was, obviously , was very excited to get working on things \nrelated to the demo because he c ould show off his programming skills.  \nMe says : Irene and I spent time in the computer lab working on the demo. Myself showed up at \nthe lab and sat there playing hi s Playstation portable while Irene and I were coding. Myself \neventually left after doing nothing, and later reapp eared to \u201ccheck in on us\u201d and just sat there for \na couple minutes, observing what we were doing and left\u2026 effectively doing nothing. \nWe expected everything would work well togeth er when put together. But, when we put all \ncomponents together nothing worked, it was also due to our lack of experience on building large \nsoftware. We didn\u2019t write out the exact deta iled specification initially for each part. So each \nmember would have a different way on implem enting each part, then none would work at all \ntogether. Many of the topics covered in this class about specific programming methods I had \nalready covered in previous classes. Nonetheless, there were a few topics on the actual design of \nthe project that aided us greatly with our appr oaches. Concepts such as low cohesion and loose", "source": "Page 525", "chapter": "9"}
{"id": "5c69031088cf-1", "text": "coupling gave us insight about the design of va rious classes within our program. This in turn \nmade our program operate in a very organized  and easy to analyze, (and therefore debug), \nmanner. \n \nG.9 Refactoring to Design Patterns \n Developing a distributed game of tic-tac-toe may appear relatively simple, so the design \npresented in Section G.6 may be considered ad equate and the use of patterns may seem to \ncomplicate the design unnecessarily. However, we mu st keep in mind that the given design is \nquite incomplete and many basic functions are unfinished. In addition, it does not support \ndifferent variants of the game of tic-tac-toe. Ther efore, although the given design is simple, we do \nnot know how complex it will be when completed.  Therefore, we cons ider the merits of \nemploying different design patterns. \nG.9.1 Roadmap for Applying Design Patterns \nThis section explains our plan for applying design patterns to improve the current system design. \n \n \nG.9.2 Remote Proxy Design Pattern \nOne way to think about the Communicator is that it is a remote proxy  for the Controller object of \nthe remote player. In this way, the local Contro ller (and other local objects, such as Referee) has", "source": "Page 525", "chapter": "9"}
{"id": "5c69031088cf-2", "text": "an illusion of exchanging messages directly with the remote Controller by interacting with the \nremote Controller\u2019s proxy: the local Communicator.", "source": "Page 525", "chapter": "9"}
{"id": "e7018823c6cd-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  512 \nComputer A Computer B\nController A Communicator ANetwork\nController B Communicator B\nRemote Proxy for Controller B Remote Proxy for Controller A \nTo make the remote proxy pattern more prominen t, we redesign the Communicator\u2019s interface, so \nthat Controller and Communicator implement the same interface. We obtain the class diagram \nshown in Figure G-26. Here, the Player interface should not be confused with PlayerInfo (Figure \nG-12), which is just a passive container of player  information. The local player is represented by \nthe Controller and the remote player is represen ted by its proxy, the Communicator. The rationale \nfor the choice of methods in player interface w ill become apparent later, when we introduce the \nState design pattern. These methods correspond to the events that are delivered to the players. \nAs shown in Figure G-26, both Controller and Communicator maintain references to each other \n(named remotePlayer and localPlayer, respectively) . Recall from Section 5.4 that the real subject \nand remote proxy (stub) need references to each other to allow method calls. remotePlayer\nlocalPlayerController\n#  isAwaitingOpponentAnswer\n#  isInGameroom#  isAwaitingOpponentMove#  isNetworkDown\n+  challenge()", "source": "Page 526", "chapter": "9"}
{"id": "e7018823c6cd-1", "text": "+  challenge()\n+  respondChallenge()+  version()+  respondVersion()\n+  move()Controller\n#  isAwaitingOpponentAnswer\n#  isInGameroom#  isAwaitingOpponentMove#  isNetworkDown\n+  challenge()\n+  respondChallenge()+  version()+  respondVersion()\n+  move()Communicator\n#  opponentID\n#  isAwaitingOpponentAnswer#  connectionStatus\n+  challenge()\n+  respondChallenge()+  version()+  respondVersion()+  move()Communicator\n#  opponentID\n#  isAwaitingOpponentAnswer#  connectionStatus\n+  challenge()\n+  respondChallenge()+  version()+  respondVersion()+  move()remote proxyRemote Proxy for Tic-tac-toe Players\nRealSubjectRealSubject\u00abinterface\u00bb\nPlayer\n+  challenge(opponent : PlayerInfo)\n+  respondChallenge(answer : string)+  version(newVersion : string)+  respondVersion(answer : string)+  move(piece : BoardPiece, player : PlyrInfo)\u00abinterface\u00bb\nPlayer\n+  challenge(opponent : PlayerInfo)\n+  respondChallenge(answer : string)+  version(newVersion : string)+  respondVersion(answer : string)+  move(piece : BoardPiece, player : PlyrInfo)Subject client\nFigure G-26: Communicator and Controller clas ses implement the same interface (Player)", "source": "Page 526", "chapter": "9"}
{"id": "e7018823c6cd-2", "text": "Figure G-26: Communicator and Controller clas ses implement the same interface (Player)\nthat abstracts the common behaviors of a player, regardless of whether he is local or\nremote.", "source": "Page 526", "chapter": "9"}
{"id": "6e176f709ea6-0", "text": "Appendix F \uf0b7 User Interface Programming 513\nThe client class for the Controller is a user inte rface class. The client class for the Communicator \nis a class that will subscribe to database events and dispatch the relevant updates directly to \nCommunicator, Player List, or Leaderboard. \nG.9.3 Publish-Subscribe Design Pattern \nAbove we already considered a distributed Publ ish-Subscribe pattern to improve the system \nresponsiveness. \nReferee could act as subscriber for board mov es from two different publishers: Controller and \nCommunicator. However, the Referee arbitrates onl y the local move because the remote Referee \nalready arbitrated its player\u2019s move and let it be sent to this client. Therefore, the Referee could \ncheck the source of the notification. \nOn the other hand, the Referee is the source of  events after arbitrating the local move\u2014this \noutcome is of interest to both Controller and Communicator (and possibly Leaderboard, too). It is not a good idea to have interleaved publishers a nd subscribers to communicate by publishing and \nsubscribing to each other. \nG.9.4 Command Design Pattern \nA key action in this system that may be cons idered for the Command pattern is to update the \ngame board. Command helps to articulate processing requests and encapsulates any pre-", "source": "Page 527", "chapter": "9"}
{"id": "6e176f709ea6-1", "text": "game board. Command helps to articulate processing requests and encapsulates any pre-\nprocessing needed before the method request is made. \nThe Command pattern may be more broadly useful if we decide to use a Web-based architectural \npattern. In this case the br owser-based client will initiate  a servlet to call its method service()  \nto process the client\u2019s request. See Section 5.2.1 for more details. \nOne may also wish to include the undo/redo cap ability, so the player can undo an accidental \nmove. However, we should keep in mind that undo /redo in a distributed system is much more \ncomplex to support than in a standalone system. For example, once the local player made a move \nthis information is sent to the remote opponent  who will be allowed to make his move. If \nmeanwhile the local player performs undo of the last  move, then this action will cause confusion \nfor the opponent who might already have made hi s own move. A simpler solution is to use two-\nstage commit with \u201cpreview,\u201d as mentioned earlier,  so that players can avoid accidental moves. \nG.9.5 Decorator Design Pattern \nOne may think that the Referee may be a good can didate for using the Decorator pattern. The \nReferee for the standard tic-tac-toe would then be  decorated with additional rules for the revenge", "source": "Page 527", "chapter": "9"}
{"id": "6e176f709ea6-2", "text": "or nine-broad versions. This can be done, however , it would require that exactly one decorator is \nadded for each version in a very specific order. I feel that this is exactly what class inheritance \noffers, and in this case, class inheritance would be my preferred choice:", "source": "Page 527", "chapter": "9"}
{"id": "0afd286941a6-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  514 \nNine-board RefereeRevenge RefereeStandard Referee\n#  isLocalPlayerX\n#  isLocalPlayerNext\n#  isLocalMoveValid\n+  setLocalPlayerX()\n+  isLocalPlayerX()\n+  isLocalPlayerNext()\n+  isLocalMoveValid()\n+  getWinnerID()Standard Referee\n#  isLocalPlayerX\n#  isLocalPlayerNext\n#  isLocalMoveValid\n+  setLocalPlayerX()\n+  isLocalPlayerX()\n+  isLocalPlayerNext()\n+  isLocalMoveValid()\n+  getWinnerID()\n \n \nG.9.6 State Design Pattern \nWe know from Section G.8.1 that the three \u201cdoer\u201d objects (Controller, Communicator, and \nReferee) have relatively complex state machines.  Therefore, it may be useful to consider \nemploying the State design pattern to externalize the state of these objects. Before we redesign \nthe classes, we compile the state tables for diffe rent objects. The following two tables show the \nstates and events for the Controller object. (Not e that two events are missing to complete the \ntable: user-acknowledged  in state 6: Match Finalizing , and network-restored .)", "source": "Page 528", "chapter": "9"}
{"id": "0afd286941a6-1", "text": "1: Challenge Enabled\n2: Activity Disabled\n3: Version Counteroffer\n4: Board Move EnabledCurrent StateNext State\nOutput ActionInput Event\nchallenge\n2: Activity Disabled\ndisplay the status\n5: Board Move Disabledversion\n6: Match Finalizing\n7: Logging outchallenge-response version-response\nshow initial screen[GC5] 4: Move Enabled\n[GC6] 5: Move Disabled\n[GC7] 3: Version Counteroffer\n[GC1,GC2] show gameroom\n[GC3] show initial screen[GC1] 4: Move Enabled\n[GC2] 5: Move Disabled\n[GC3] 1: Challenge Enabled\nGuard Conditions :\nGC1:  challenge-response=\"accepted\"  &  local-plays-Xs\nGC2:  challenge-response=\"accepted\"  &  local-plays-Os\nGC3:  challenge-response=\"rejected\"\nGC4:  board-emptyGC5:  version-response=\"accepted\"  &  local-plays-Xs\nGC6:  version-response=\"accepted\"  &  local-plays-Os\nGC7:  version-response=\"accepted\"\nGC8:  version-response=\"rejected\"Guard Conditions :\nGC1:  challenge-response=\"accepted\"  &  local-plays-XsGC2:  challenge-response=\"accepted\"  &  local-plays-Os", "source": "Page 528", "chapter": "9"}
{"id": "0afd286941a6-2", "text": "GC3:  challenge-response=\"rejected\"\nGC4:  board-emptyGC5:  version-response=\"accepted\"  &  local-plays-Xs\nGC6:  version-response=\"accepted\"  &  local-plays-Os\nGC7:  version-response=\"accepted\"\nGC8:  version-response=\"rejected\"[GC4] 2: Activity Disabled\n5: Board Move Disabled[GC5, GC6] back-to-gameroom\n[GC5] 4: Move Enabled\n[GC6] 5: Move Disabled[GC8] 1: Challenge Enabled\n[GC8] show initial screen\n[GC5, GC6] back-to-gameroom", "source": "Page 528", "chapter": "9"}
{"id": "de105e13d20c-0", "text": "Appendix F \uf0b7 User Interface Programming 515\nmove-piece response-timeout\n1: Challenge Enabled\n2: Activity Disabled\n3: Version Counteroffer4: Board Move EnabledNext State\nOutput ActionInput Event\n5: Board Move Disabledforfeit\nprocess game lost6: Match Finalizing[GC9] update board\n[GC10] process game won[GC9] 5: Board Move Disabled[GC10] 6: Match Finalizingnetwork-outage\n1: Challenge Enabled\nshow initial screen\n6: Match Finalizing\nprocess game won\n1: Challenge Enabled\nshow initial screen1: Challenge Enabled\nshow initial screenCurrent State\n6: Match Finalizing\n7: Logging out2: Activity Disabled\ndisplay warning\n2: Activity Disabled\ndisplay warning\n2: Activity Disabled\ndisplay warning\n2: Activity Disabled\ndisplay warning2: Activity Disabled\ndisplay warning2: Activity Disabled\ndisplay warning\nprocess game lost6: Match Finalizing\nGuard Conditions :\nGC9:    local-player-move &  valid-move\nGC10:  local-player-move &  ending-moveGC11:  opponent-move\nGC12:  opponent-move &  ending-move6: Match Finalizing\nprocess game won[GC11] update board\n[GC12] process game lost[GC11] 4: Board Move Enabled\n[GC12] 6: Match Finalizing", "source": "Page 529", "chapter": "9"}
{"id": "de105e13d20c-1", "text": "[GC12] 6: Match Finalizing\n \nThe state tables for the Communicator and Refe ree are left to the reader as exercise. \nBased on the above state table, we derive th e class interface for the LocalPlayerState and \nRemotePlayerState (Figure G-27). Both of these states implement the Player interface derived \nearlier for the Remote Proxy pattern (Figure G-26). The LocalPlayerState and RemotePlayerState are abstract classes , which is why their names are italicized in Figure G-27. The methods of \nLocalPlayerState correspond to the events that can occur on the Controller object that are listed in \nthe above state table for Controller. As seen, most  of the Controller and Communicator attributes \nfrom Figure G-26 are dropped because their value is replaced by a state object, as explained next.", "source": "Page 529", "chapter": "9"}
{"id": "2f5eeb1439d4-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  516 \nThe abstract base State classes from Figure G-27 are extended by concrete states in Figure G-28. \nThese classes externalize the states for Controller and Communicator. \n \nListing G-3: The Player interface, and Loca lPlayerState and RemotePlayerState base \nclasses (see Figure G-27 for the class diagram). \n \npublic interface Player { \n   public void challenge(PlayerInfo opponent); \n   public void respondChallenge(String answer); \n   public void version(String newVersion); \n   public void respondVersion(String answer); \n   public void move(BoardPiece piece, PlayerInfo player); \n} \n \npublic abstract class LocalPlayerState implements Player { \n   protected Controller context; \n \n   // constructor \u00abinterface\u00bb\nPlayer\n+  challenge(opponent : PlayerInfo)\n+  respondChallenge(answer : string)+  version(newVersion : string)+  respondVersion(answer : string)+  move(piece : BoardPiece, player : PlyrInfo)\u00abinterface\u00bb\nPlayer\n+  challenge(opponent : PlayerInfo)\n+  respondChallenge(answer : string)+  version(newVersion : string)+  respondVersion(answer : string)+  move(piece : BoardPiece, player : PlyrInfo)\nLocalPlayerState\n#  isLocalPlayerX : boolean\n+  challenge()", "source": "Page 530", "chapter": "9"}
{"id": "2f5eeb1439d4-1", "text": "LocalPlayerState\n#  isLocalPlayerX : boolean\n+  challenge()\n+  respondChallenge()+  version()+  respondVersion()+  move()+  responseTimeout()+  forfeit()+  networkOutage()\n+  networkRestored()\n+  userAcknowledged()RemotePlayerState\n#  opponentID\n+  challenge()\n+  respondChallenge()+  version()+  respondVersion()+  move()+  responseTimeout()+  forfeit()+  networkOutage()\n+  networkRestored()\n+  requestReceived()+  responseReceived()RemotePlayerState\n#  opponentID\n+  challenge()\n+  respondChallenge()+  version()+  respondVersion()+  move()+  responseTimeout()+  forfeit()+  networkOutage()\n+  networkRestored()\n+  requestReceived()+  responseReceived()Common player interface\nSpecific \nto local playerCommon \nplayer interface from Remote \nProxy pattern\nCommon \nplayer interface\nSpecific \nto remote playerState Design Pattern for Tic-tac-toe Players built on Remote Proxy\nFigure G-27: Class diagram for State classes of Controller and Communicator obtained by\nextending the Remote Proxy pattern from Figure G-26. This class diagram is completed in\nFigure G-28.", "source": "Page 530", "chapter": "9"}
{"id": "9590c587cce0-0", "text": "Appendix F \uf0b7 User Interface Programming 517\n   public LocalPlayerState(Controller context) { \n      this.context = context; \n   } \n   // event handlers: \n   public void challenge(PlayerInfo opponent) { } \n   public void respondChallenge(String answer) { } \n   public void version(String newVersion) { } \n   public void respondVersion(String answer) { } \n   public void move(BoardPiece piece, PlayerInfo player) { } \n   public void responseTimeout(Player unresponsivePlayer) { } \n   public void forfeit(Player loser) { } \n   public void networkOutage() { } \n   public void networkRestored() { } \n   public void userAcknowledged() { } \n} \n \npublic abstract class RemotePlayerState implements Player { \n \n   protected Communicator context; \n   protected PlayerInfo opponentID; \n \n   // constructor \n   public RemotePlayerState(Communicator context) { \n      this.context = context; \n   } \n   // event handlers: \n   public void challenge(PlayerInfo opponent) { } \n   public void respondChallenge(String answer) { } \n   public void version(String newVersion) { } \n   public void respondVersion(String answer) { }", "source": "Page 531", "chapter": "9"}
{"id": "9590c587cce0-1", "text": "public void respondVersion(String answer) { } \n   public void move(BoardPiece piece, PlayerInfo player) { } \n   public void responseTimeout(Player unresponsivePlayer) { } \n   public void forfeit(Player loser) { } \n   public void networkOutage() { } \n   public void networkRestored() { } \n   public void requestReceived(Object message) { } \n   public void responseReceived(Object message) { } \n} \nThe context class (Controller or Communicator) simply dispatches an incoming event to its \ncurrent state object to handle the event. Listi ng G-4 shows the context classes. Note that all \nconditional logic in the context classes has disappeared because of  applying the State pattern. \n \nListing G-4: The Controller and Communica tor context classes (Figure G-28 shows the \nclass diagram). \n \npublic class Controller { \n \n   LocalPlayerState currentState; // field has package-wide visibility \n \n   public void challenge(PlayerInfo opponent) { \n      currentState.challenge(opponent); \n   } \n   public void respondChallenge(String answer) {", "source": "Page 531", "chapter": "9"}
{"id": "6fdd7d60e1ec-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  518 \n      currentState.respondChallenge(answer); \n   } \n   public void version(String newVersion) { \n      currentState.version(newVersion); \n   } \n   public void respondVersion(String answer) { \n      currentState.respondVersion(answer); \n   } \n   public void move(BoardPiece piece, PlayerInfo player) { \n      currentState.move(piece, player); \n   } \n   public void responseTimeout(Player unresponsivePlayer) { \n      currentState.responseTimeout(unresponsivePlayer); \n   } \n   public void forfeit(Player loser) { \n      currentState.forfeit(loser); \n   } \n   public void networkOutage() { \n      currentState.networkOutage(); \n   } \n   public void networkRestored() { \n      currentState.networkRestored(); \n   } \n   public void userAcknowledged() { \n      currentState.userAcknowledged(); \n   } \n} \n \npublic class Communicator { \n \n   RemotePlayerState currentState; // field visible package-wide \n \n   public void challenge(PlayerInfo opponent) { \n      currentState.challenge(opponent); \n   } \n   public void respondChallenge(String answer) { \n      currentState.respondChallenge(answer); \n   }", "source": "Page 532", "chapter": "9"}
{"id": "6fdd7d60e1ec-1", "text": "currentState.respondChallenge(answer); \n   } \n   public void version(String newVersion) { \n      currentState.version(newVersion); \n   } \n   public void respondVersion(String answer) { \n      currentState.respondVersion(answer); \n   } \n   public void move(BoardPiece piece, PlayerInfo player) { \n      currentState.move(piece, player); \n   } \n   public void responseTimeout(Player unresponsivePlayer) { \n      currentState.responseTimeout(unresponsivePlayer); \n   } \n   public void forfeit(Player loser) { \n      currentState.forfeit(loser); \n   } \n   public void networkOutage() { \n      currentState.networkOutage(); \n   } \n   public void networkRestored() {", "source": "Page 532", "chapter": "9"}
{"id": "3dcbd08da16e-0", "text": "Appendix F \uf0b7 User Interface Programming 519\n      currentState.networkRestored(); \n   } \n   public void requestReceived(Object message) { \n      currentState.requestReceived(message); \n   } \n   public void responseReceived(Object message) { \n      currentState.responseReceived(message); \n   } \n} \nWe show the code for only one state of the Cont roller in Listing G-5. Based on the above state \ntable for the controller, we know that only three events are handled in the Controller state 1: \nChallenge Enabled . \n \nListing G-5: Concrete state class Challe ngeEnabled for the Controller context. \n \npublic class ChallengeEnabled extends LocalPlayerState { \n   public void challenge(PlayerInfo opponent) { \n      // display the status: opponent challenged \n \n      // set the next state of the context: Activity Disabled \n      context.currentState = ... \n   } \n   public void respondChallenge(String answer) { \n      if (answer.equals(\"accepted\") && isLocalPlayerX) { \n         // set the next state of the context: Move Enabled \u00abinterface\u00bb\nPlayer\nLocalPlayerState RemotePlayerState Controller Communicator\nChallengeEnabled ActivityDisabled\nVersionCounteroffer\nBoardMoveEnabled BoardMoveDisabled\nMatchFinalizing Logging outMonitoring WaitingForResponse\nNoResponseReceived", "source": "Page 533", "chapter": "9"}
{"id": "3dcbd08da16e-1", "text": "MatchFinalizing Logging outMonitoring WaitingForResponse\nNoResponseReceived\nConnectionLostcurrentState currentStateContext objectContext object Context objectContext object\nConcrete statesConcrete statesConcrete statesConcrete states\nFigure G-28: Class diagram that combines two design patterns, Remote Proxy and State,\nfor the distributed game of tic-tac-toe.", "source": "Page 533", "chapter": "9"}
{"id": "04c062fb5da5-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  520 \n         context.currentState = ... \n      } \n      else if (answer.equals(\"accepted\") && ! isLocalPlayerX) { \n         // set the next state of the context: Move Disabled \n         context.currentState = ... \n      } \n      else if (answer.equals(\"rejected\") { \n         // set the next state of the context: Challenge Enabled \n         context.currentState = ... \n      } \n      // perhaps should also handle else case for anything... \n   } \n   public void networkOutage() { \n         // set the next state of the context: Activity Disabled \n      context.currentState = ... \n   } \n} \nAs seen, the events that are not  relevant for the given state are not defined\u2014the corresponding \nmethods are inherited from the abstract base state class. \nG.9.7 Model-View-Controller (MVC) Design Pattern \nThe Model-View-Controller pattern is useful for implementing differe nt interaction and \nvisualization techniques for the system data (the  so-called \u201cmodel\u201d part of MVC). We already \ndiscussed splitting the original Controller object in to the part that handles the local player\u2019s \nmoves and the part that displays the remote  player\u2019s moves. These parts correspond to the", "source": "Page 534", "chapter": "9"}
{"id": "04c062fb5da5-1", "text": "moves and the part that displays the remote  player\u2019s moves. These parts correspond to the \n\u201ccontroller\u201d part of MVC and the \u201cview\u201d part of MVC, respectively. A partial class diagram for the \u201cmodel\u201d part of MVC is shown in Figure G-29.  It is partial because the model should include \nMatch Invitation, Invite Queue, and all other \u201cknowing\u201d objects. \nNote that GameBoard and its derived classes implement the Composite  design pattern. The \nComposite  pattern allows for treating a group of objects in the same way as a single instance of an \nobject. The intent is to \u201ccompose\u201d objects into tr ee structures to represent part-whole hierarchies. \nIn our case, NineBoard is composed of nine StandardBoards. \nAs shown in the class diagram in Figure G-29, the nine-board version of tic-tac-toe should not be \nrepresented as a single board with 9 \uf020\uf0b4\uf0209\uf020= 81 pieces, because to enforce th e rules of this game we \nneed to know the identity of the sub-boards. We do not need a special attribute to identify each \nsub-board because the nine boards are created onc e for a match and we can enforce a convention \nthat the first three sub-boards represent the first row, the second three the second row, and the last", "source": "Page 534", "chapter": "9"}
{"id": "04c062fb5da5-2", "text": "three the third row.", "source": "Page 534", "chapter": "9"}
{"id": "ab76df9fb0b0-0", "text": "Appendix F \uf0b7 User Interface Programming 521\nG.10 Concurrency and Multithreading \n \n \n______ TO BE COMPLETED ______ \n \n  \nHow We Did It & Plan of Work \nThe project took a tremendous amount of effort fro m all of the team members who cared. There \nwere several occasions that initial ideas had to  be trashed halfway through and reworked \ncompletely in order to deal with the obstacl e at hand, which then led the majority of \ndocumentation having to be redone by me to refl ect the changes. This was frustrating because we \ncould not move forward with the project because  all the previous documentation was now simply \ninvalidated and no longer accurate because we did not account for problems running out of \nmemory or because the algorithm was not performi ng the way it was supposed to. This gave little \nroom for error in order to get a decent grade. I feel that our schedule did not account for these \ntypes of mistakes that can hinder  a group\u2019s progress and in turn hurt a group\u2019s grades for things \nstudents could not account for beforehand. \u00abinterface\u00bb\nGameBoard\n#  size+  getSize()\n+  addPiece()Gameroom\n#  matchStatus\n+  getStatus()\n+  setStatus()+  getBoard()1boardTic-tac-toe Model part of MVC", "source": "Page 535", "chapter": "9"}
{"id": "ab76df9fb0b0-1", "text": "StandardBoard NineBoardBoardPiece\n#  position\n+  getPosition()\nX_Piece O_Piecepieces\n0..9\nboards9\u00abinterface\u00bb\nGameBoard\n#  size+  getSize()\n+  addPiece()\u00abinterface\u00bb\nGameBoard\n#  size+  getSize()\n+  addPiece()Gameroom\n#  matchStatus\n+  getStatus()\n+  setStatus()+  getBoard()Gameroom\n#  matchStatus\n+  getStatus()\n+  setStatus()+  getBoard()1boardTic-tac-toe Model part of MVC\nStandardBoard NineBoardBoardPiece\n#  position\n+  getPosition()BoardPiece\n#  position\n+  getPosition()\nX_Piece O_Piecepieces\n0..9\nboards9\nFigure G-29: Class diagram for classes that constitute the Model part of the Model-View-\nController design pattern for the game of tic-tac-toe.", "source": "Page 535", "chapter": "9"}
{"id": "6da751aa3070-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  522 \nThe techniques that were the most useful to th e group were undoubtedly working together in the \nlabs every step of the way, especially when codi ng. This way we could get our program to display \nand function exactly as was intended. Although late r on we found that certain ideas we had before \nfor the functionality of our project were a little mo re complicated than we had initially thought, at \nleast we could agree on it as a group and there was no more confusion about the functionality of \nour program amongst our members, (the members th at showed up consistently that is\u2026as we had \none that did not participate very much and rarely showed up to any meetings). \nMe says : This class has taught me that you need on e page of documentation for every line of \ncode. Documentation is key to software projects. I came into this class expecting a lot of coding, \nand have come out really understanding what a software engineer is and why documentation is \nimportant. I do feel that we did a lot of documenta tion, maybe more than needed, versus the real \nworld. \nOne of the things that I found to be the least valuable \nin our project specifically was the design patterns \nbecause it would have been very nice to know them at", "source": "Page 536", "chapter": "9"}
{"id": "6da751aa3070-1", "text": "because it would have been very nice to know them at \nthe beginning of designing the application in order to incorporate them without a very large time overhead. \nAlso, the implementation that we had started long \nbefore knowing about these concepts could not be \nadapted to include many design patterns as it became \ninefficient to do so. A few patterns/techniques \ndescribed in the book were a common sense type of thing for me. I have used these patterns when coding \nbut never thought of them as a technique. \nIrene says : This class teaches you how to deal with \ndifferent types of people, but you might pull out a few \nchunks of hair first. It has definitely opened my eyes to \nthe reality of software engineering. Working in a team can be a nightmare, and I say that not only becau se of my experiences, but because of the qualms \nof many of the other groups as well. When you work with a bunch of incompetent people, \nwithout a doubt the development of your softwa re will be a terrible hardship. Trying to get \nmembers to realize what they need to do an d how they should do it was sadly the most \nchallenging and hardest part of the entire semest er. I will adopt a pace of work at the outset,", "source": "Page 536", "chapter": "9"}
{"id": "6da751aa3070-2", "text": "regardless of the others, that allo ws me to reduce dependence on them. \nThe techniques that were least useful to our  group surprisingly was splitting up the work and \nworking on it gradually. Although this seems as one of the best things to do, it turned out to work \nagainst us in the long run. This was because of proc rastination and just genera l lack of effort from \ncertain members. This in turn put more work  on the people that were willing to shoulder the \nresponsibilities at the end when deadlines approached  and the other team members\u2019 work was still \nnot complete or was of poor quality. I turned out to be one of those people and the additional responsibilities and sheer magnitude of work especi ally for the reports was not pleasant at all. \n \n The design \nunder \ndiscussion \u2026The design \nunder \ndiscussion \u2026", "source": "Page 536", "chapter": "9"}
{"id": "e7ed4f5447d6-0", "text": "523  \nAppendix H  \nSolutions to Selected Problems \n \n \nProblem 2.1 \u2014 Solution \n \nProblem 2.2 \u2014 Solution \n \nProblem 2.3 \u2014 Solution \nEnumerated requirements for the system-to-be: \nREQ1: The system shall periodically read the patie nt\u2019s vital signs, specifically heart rate and \nblood pressure. The system shall detect abnormalities in the patient\u2019s vital signs. The system shall alert the remote system at hospital when an abnormality is detected. \nREQ2: The system shall detect when the patient is  exercising and adjust the safe ranges of vitals. \nREQ3: The system shall verify that its sensors  are working correctly. The system shall report \nsensor failures to the remote hospital. \nREQ4: The system shall monitor its battery powe r. The system shall alert the owner when its \nbattery power is low. \nAs discussed in Section 2.2 (see the discussion of Table 2-1), the above requirements are \nrelatively compound, but Test-Driven Developmen t (TDD) favors elemental requirements. If we \nwere to test REQ1 and the system was not repor ting the blood pressure in a timely manner, the \nentire requirement REQ1 would fail Verification and then it would be impossible to tell if the", "source": "Page 537", "chapter": "9"}
{"id": "e7ed4f5447d6-1", "text": "entire requirement REQ1 would fail Verification and then it would be impossible to tell if the \nalert was broken, or the detection of abnormalities,  or the heart rate sensor, or the blood pressure \nsensor. For this reason, one should split up REQ1 into three elemental requirements: \nREQ1a: The system shall read the patient\u2019s vital signs, specifically heart rate and blood pressure. \nREQ1b: The system shall detect abnormalities in the patient\u2019s vital signs. \nREQ1c: The system shall alert the remote hospital when an abnormality is detected. \nEach of these elemental requirements can be  separately tested, and each test would \nunambiguously identify the failure cause. I leave it to the reader as exercise to break up the \nremaining compound requirements and organize them hierarchically.", "source": "Page 537", "chapter": "9"}
{"id": "4f2200af11f2-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  524 \nA discussion with a medical expert may reveal that  safe ranges of vital signs vary across different \nindividuals, depending on age, gender,  height, weight, chronic condition, hereditary factors, etc. \nThey may vary even for the same person over tim e. Therefore, it may be appropriate to add a \nrequirement to allow a medical professional to adjust the safe ranges when needed: \nREQ5: The system should allow an authorized me dical professional to remotely modify the safe \nranges of vital signs. \nAlthough not explicitly mentioned in the prob lem statement, we may consider providing a \ncapability to reset the system for false alarm or malfunction. Another opti on not mentioned in the \nproblem statement is to alert the patient or peopl e nearby about abnormal vitals or malfunctioning \ndevice (the problem statement requires only alerting the hospital). It may also be of interest to maintain a history of all vitals readings (or di agnostic tests). This option would require extra \nmemory space on the device or communication bandwidth (and battery power). \nFinally, although the problem statement does not mention such feature, it may not be enough to \nhave communication between the hospital and the pa tient\u2019s device only to report alerts or modify", "source": "Page 538", "chapter": "9"}
{"id": "4f2200af11f2-1", "text": "have communication between the hospital and the pa tient\u2019s device only to report alerts or modify \nsafe ranges. The hospital may wish to ping the de vice to find out if it is still working; or, the \ndevice may send periodic \u201chello\u201d messages to repor t that it is alive and functioning properly. \nOne may notice the issue of precise localization of  the system boundary: what functions are to be \ndeveloped versus what is assumed to exist. Fo r example, the way REQ1 is worded it does not \nmention that we need to develop the software for controlling the analog sensors when measuring \nthe vital signs. For the sake of keeping this problem simple, we will assume that the \u201csensors\u201d \ninclude the control hardware and software, and our software-to-be will interact with the \u201csensors\u201d \nvia application programming interfaces (A PIs) to take the acquired data. \nThe first four requirements are mandatory (\u201cshall\u201d type), because the system would not be useful \nif any were missing. By re-reading the problem de scription, we can see that the customer strongly \ndemanded the related features. The above are all functional requirements; the problem description does not mention any non-functional properties. Be cause of medical problem domain, it would be \nappropriate to consider \u201chigh relia bility\u201d as a non-functional requirement.", "source": "Page 538", "chapter": "9"}
{"id": "4f2200af11f2-2", "text": "appropriate to consider \u201chigh relia bility\u201d as a non-functional requirement. \n \nProblem 2.4 \u2014 Solution \n \nProblem 2.5 \u2014 Solution \n \nProblem 2.6 \u2014 Solution \n \nProblem 2.7 \u2014 Solution", "source": "Page 538", "chapter": "9"}
{"id": "c18bc54d017d-0", "text": "Solutions to Selected Problems 525\nProblem 2.8 \u2014 Solution \nDuring a single sitting, the buyer (bidder) only can make a payment. A notification will \nbe sent to the seller (auctioneer) about the su ccessful payment and a request to ship the \nitem. The subsequent activities of tracking th e shipment and asking the buyer and seller \nto rate the transaction must happen in diffe rent sittings. Here shown is only the main \nsuccess scenario. \nUse Case UC- x: BuyItem \nInitiating Actor: Buyer \nActor\u2019s Goal: To purchase auctioned item for which s/he won the bid & have it shipped\nParticipating Actors: Seller, Creditor  \nPreconditions: Buyer  has won the auction and has sufficient funds or credit line to pay \nfor the item. Buyer  is currently logged in the system and is shown a \nhyperlink \u201cPurchase this item.\u201d Seller  has an account to receive \npayment. Seller  already posted the invoice (including shipping and \nhandling costs, optional insurance cost, etc.) and acceptable payment \noptions, such as \u201ccredit card,\u201d \u201cmoney order,\u201d \u201cPayPal.com,\u201d etc. \nPostconditions: Funds are transferred to the seller\u2019s account, minus selling fees. Seller  is \nnotified to ship the item. Aucti on is registered as concluded.", "source": "Page 539", "chapter": "9"}
{"id": "c18bc54d017d-1", "text": "notified to ship the item. Aucti on is registered as concluded. \nFlow of Events for Main Success Scenario:\n\uf0ae 1. Buyer  clicks the hyperlink \u201cPurchase this item\u201d \n\uf0ac 2. System  displays the invoice from seller with acceptable payment options \n\uf0ae 3. Buyer  selects the \u201ccredit card\u201d payment method  \n\uf0ac 4. System  prompts for the credit card information \n\uf0ae 5. Buyer  fills out the credit card information and submits it  \n\uf0ac 6. System  passes the card info and payment amount on to Creditor  for authorization  \n\uf0ae 7. Creditor  replies with the payment authorization message  \n_ \n\uf0bf \n\uf0ac 8. System  (a) credits the seller\u2019s account, minus a selling fee charge; (b) archives the \ntransaction in a database and assigns it a control number; (c) registers the auction as \nconcluded; (d) informs Buyer  of the successful transaction and its control number; and \n(e) sends notification to Seller  about the payment and the shipment address \nThe above use case describes only the key points. In reality, the seller should also be asked for the \nshipping and billing address and to choose a shippi ng type. I am not familiar with how eBay.com", "source": "Page 539", "chapter": "9"}
{"id": "c18bc54d017d-2", "text": "implements this process, so the reader may wish to compare and explain the differences. \nExtensions (alternate scenarios) include: \n\uf0b7 Buyer abandons the purchase or the time allo wed for initiating this use case has expired \n\uf0b7 Buyer selects different payment method, e.g., money order or PayPal.com account \n\uf0b7 Buyer provides invalid credit card information \n\uf0b7 Creditor denies the transaction authorization (i nsufficient funds, incorrect information) \n\uf0b7 Internet connection is lost through the process", "source": "Page 539", "chapter": "9"}
{"id": "5a48ea9d8adf-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  526 \nProblem 2.9 \u2014 Solution \n \nProblem 2.10 \u2014 Solution \nSurely several alternative design solutions are possible, but your basic question is: Does your \ndesign meet all the customer\u2019s needs (as specified in the problem description)? Next, is it easy for \nthe customer to understand that your design ar tifacts are indeed there to meet their needs? \n (a) \nThe Owner is the key actor, but the system is al so activated by the motion detector and by the \n\u201celectric eye\u201d sensor. Additionally, we need a ti mer to schedule the automatic switching off the \nlight. Hence, we have four actors: Owner, Mo tionDetector, Timer, and ElectricEye. Their goals \nwill be explained below. \n (b) \n A possible use case diagram is shown in the following figure: \nAs explained in Section 2.3, the system is always passive and must be provoked to respond. \nHence, automatic switching the light on is re presented as the use case initiated by the motion \ndetector\u2014the motion detector literally operates the light. In this use case, the system starts the \ntimer and after it counts down to zero, the timer switches the light off. \nThe requirements also demand that door closing must include a safety feature of automatic", "source": "Page 540", "chapter": "9"}
{"id": "5a48ea9d8adf-1", "text": "The requirements also demand that door closing must include a safety feature of automatic \nreversal of the door movement. The actual initiator is  the electric eye sensor, and for this purpose, \nwe have the AutomaticReverse use case. For this to  function, the system must arm the electric eye \nsensor in the use cases RemoteClose and ManualC lose (indicated by the communication type OwnerOwnerMotionDetectorMotionDetector\nElectricEyeElectricEyeTimerTimer\u00abinitiate\u00bb \u00abparticipate\u00bb\n\u00abinitiate\u00bb\n\u00abinitiate\u00bb\u00abinitiate\u00bbAutoLightON\nAutoLightOFF\nRemoteOpen\nAutomaticReverseManualOpen\nRemoteClose\nManualClose\u00abparticipate\u00bb\n\u00abparticipate\u00bb", "source": "Page 540", "chapter": "9"}
{"id": "79e86c8899ef-0", "text": "Solutions to Selected Problems 527\n\u00abparticipate\u00bb ). The electric eye sensor is armed only when the garage door closes and not \nwhen it opens. The AutomaticReverse use case can be represented as follows: \nUse Case: AutomaticReverse \nInitiating Actor: ElectricEye (\u201celectric eye\u201d sensor) \nActor\u2019s Goal: To stop and reverse the door movement if someone or something passes \nunder the garage door while it closes. \nPreconditions: The garage door currently is going down and the infrared light beams \nhave been sensed as obstructed. \nPostconditions: The door\u2019s downward motion is stopped and reversed. \nFlow of Events for Main Success Scenario:\n\uf0ae 1. ElectricEye  signals to the system that the infra red light beams have been sensed as \nobstructed \n\uf0bf \n\uf0ac 2. System  (a) stops and reverses the motor movement, and (b) disarms the ElectricEye  \nsensor \n\uf0bf 3. System  detects that the door is in the uppermost position and stops the motor \nA possible extension (alternate scenario) is that  the communication between the system and the \nmotor is malfunctioning and the door keeps movi ng downward. To detect this possibility, we \nwould need to introduce an additiona l sensor to measure the door motion.", "source": "Page 541", "chapter": "9"}
{"id": "79e86c8899ef-1", "text": "would need to introduce an additiona l sensor to measure the door motion. \nAlso, it should be noticed that we assume a simp le Open use case, i.e., the opening operation does \nnot include automatic close after the car passes through the door. (In case this was required, we \nwould need to start another timer or a sensor to initiate the door closing.) \n \n(c) The use diagram is shown in the part (b) above. \n \n(d) For the use case RemoteOpen, the main su ccess scenario may look something like this: \n\uf0ae 1. Owner arrives within the transmission ra nge and clicks the open button on the remote \ncontroller \n\uf0ae 2. The identification code may be contained in  the first message, or in a follow-up one \n\uf0bf \n\uf0ac 3. System (a) verifies that this is a valid code , (b) opens the lock, (c) starts the motor, and \n(d) signals to the user the code validity \n\uf0bf 4. System increments the motor in a loop until the door is completely open \n\uf0ac 5. User enters the garage \nAlternate scenarios include: \n\uf0b7 The receiver cannot decode th e message because the remote transmitter is not properly \npointed for optimal transmission", "source": "Page 541", "chapter": "9"}
{"id": "79e86c8899ef-2", "text": "pointed for optimal transmission \n\uf0b7 The remote controller sends an invalid code. In this and the previous case, the system \nshould sound the alarm after the maximum a llowed number of atte mpts is exhausted", "source": "Page 541", "chapter": "9"}
{"id": "6504f0effb63-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  528 \n\uf0b7 The Owner changes his/her mind and decides to close the door while it is still being \nopened \n It is left to the reader to descr ibe what exactly happens in these cases. \n (e) \nSystem sequence diagram for RemoteOpen: \n \n(f) \nThe domain model could be as follows: (a)\nMain success scenario for RemoteOpen: System\nOwner\nsendOpeningSignal(code)\nverify code\nsignal: valid code\nunlock,\nstart the motor\nincrementthe motorloop: System\nOwner\nsendOpeningSignal(code)\nverify code\nsignal: valid code\nunlock,start the motor\nincrementthe motorloop\nAn alternate scenario for RemoteOpen(b): System\nOwner\nsendOpeningSignal(code)\nverify code\nsignal: invalid code\nsame as mainsuccess scenario\nsound alarmaltloop\nnumTrials <= maxTrials\n[else]: System\nOwner\nsendOpeningSignal(code)\nverify code\nsignal: invalid code\nsame as mainsuccess scenario\nsound alarmaltloop\nnumTrials <= maxTrials\n[else]", "source": "Page 542", "chapter": "9"}
{"id": "2e44eb9cdd58-0", "text": "Solutions to Selected Problems 529\nCommunicator Code\nLockOperator\nlockStatusMotorOperator\nmotorStatusCodeChecker\nnumTrials\nmaxTrialsCodeStore\nconveysRequestsobtains\nnotifiesCodeValidityverifies\nretrievesValidCodes\nnotifiesCodeValidityElectricEye\nLightOperator\nlightStatusMotionDetector AlarmOperatorcontrols\ncontrolsnotifies\n \n(g) \nOperation contracts for RemoteOpen: \n \nProblem 2.11 \u2014 Solution \nThe developer\u2019s intent is to prevent the theft of c ode. Therefore, this is not a legitimate use case. \nProblem 2.12: Restaurant Automation \u2014 Solution \nBrief use case descriptions are as follows. \nUC1: ClockIn  \u2014 Employee records the start time of his/her shift or upon \narriving back from a lunch break, assuming, of course, that the employee clocked-out before going to lunch.  \nUC2: ClockOut  \u2014 Employee records the end time of his/her shift or when \ngoing out for a lunch break. (The system could automatically log out the employee from any open sessions.) \nUC3: LogIn  \u2014 Employee logs-in to the system in order to perform his/her \nnecessary functions. \nUC4: LogOut  \u2014 Employee logs-out of the system, including if another \nemployee needs to use that terminal.", "source": "Page 543", "chapter": "9"}
{"id": "2e44eb9cdd58-1", "text": "employee needs to use that terminal. \nUC5: MarkTableReady  \u2014 Busboy marks a table ready for use after it has been cleaned and \nprepared for a new party. The Host is automa tically notified, so now they can seat a new \ncustomer party at this table.", "source": "Page 543", "chapter": "9"}
{"id": "41148dfe2b83-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  530 \nUC6: SeatTable  \u2014 Host seats a customer, marks the tabl e as occupied and assigns a waiter to it. \nUC7: AddItem  \u2014 Waiter adds an item to a table\u2019s tab. \nUC8: RemoveItem  \u2014 Waiter removes an item from a table\u2019 s tab that does not belong there. The \nManager enters his/her authorization code  to complete the item removal process. \nUC9: AdjustPrice  \u2014 Waiter adjusts the price of a menu item due to a coupon, promotion, or \ncustomer dissatisfaction. \nUC10: ViewTab  \u2014 Waiter views the current tab of a particular table. \nUC11: CloseTab  \u2014 Waiter indicates that a tab has been paid, and that the transaction is \ncompleted. The table\u2019s tab\u2019s values are reset to \u201cempty\u201d or \u201c0\u201d but the transaction is \nrecorded in the database. The system automatic ally notifies the Busboy so that he/she can \nclean the \u201cdirty\u201d table. (There could be an in termediate step to wait until the party leaves \ntheir table and only then the Waiter to re gister a table as waiting to be cleared.) \nUC12: PlaceOrder  \u2014 Waiter indicates that a table\u2019s tab is completed. The kitchen staff (Cook) is", "source": "Page 544", "chapter": "9"}
{"id": "41148dfe2b83-1", "text": "notified that the order must be prepared. \nUC13: MarkOrderReady  \u2014 Cook announces the completion of an order. The status of the order \ntab is changed, the tab is removed from the or der queue in the kitchen, and the appropriate \nWaiter is notified. \nUC14: EditMenu  \u2014 Manager modifies the parameters of a menu item (name, price, description, \netc.) or add/removes an item to the menu. \nUC15: ViewStatistics  \u2014 Manager inspects the statistics of the restaurant. \nUC16: AddEmployee  \u2014 Manager creates a profile for a new employee. The profile will contain \ninformation pertinent to that employee, such as employee name, telephone number, ID, \nsalary and position. \nUC17: RemoveEmployee  \u2014 Manager deletes a profile of a former employee. \nThe use case diagram is show n in Figure H-1. The auxilia ry uses cases UC3 and UC4 for \nlogin/logout are included by other use case (except UC1 and UC2), but the lines are not \ndrawn to avoid cluttering the diagram. There could also be a use case for the Manager to \nedit an existing employee profile when some of the parameters of an employee profile need \nto be changed. The reader should carefully trace the communications between the actors and", "source": "Page 544", "chapter": "9"}
{"id": "41148dfe2b83-2", "text": "to be changed. The reader should carefully trace the communications between the actors and \nthe use cases and compare these with the brief description of the use cases, given above.", "source": "Page 544", "chapter": "9"}
{"id": "d1a030d7981d-0", "text": "Solutions to Selected Problems 531\nI chose to include the database as part of the sy stem because I feel that showing it as an external \nsystem (supporting actor), although true, would not c ontribute much to the in formativeness of the \ndiagram. \nProblem 2.13: Traffic Information \u2014 Solution \nThe use case diagram is shown in Figure H-2. UC1 ViewStatisticsAcrossArea and UC2 ViewStatisticsAlongPath directly ensue from th e problem statement (d escribed at the book \nwebsite, given in Preface). Of course, the system cannot offer meaningful service before it \ncollects sizeable amount of data to extract the st atistics. It is sensible to assume that somebody \n(Administrator) should start the data collection process (UC3). The data collection must be run \nperiodically and that is the task of the Ti mer, which can be implemented as a Cron job \n(http://en.wikipedia.org/wiki/Cron )\u2014an automated process that opera tes at predefined time intervals \nand collects data samples (UC4 and UC5). \nAs part of UC4, collecting the sample includes contacting the Yahoo! Traffic website to get the \nlatest traffic updates for a given location. UC5 includes contacting the Weather.com website to \nread the current weather information. Also, in UC1 and UC2, the statistics are visualized on a", "source": "Page 545", "chapter": "9"}
{"id": "d1a030d7981d-1", "text": "geographic map retrieved fro m the Google Map website. Host\nCookEmployee\nWaiterBusboy\nManagerRestaurant Automation System\nUC5: MarkTableReady\nUC8: RemoveItemUC6: SeatTable\nUC7: AddItem\nUC10: ViewTab\nUC11: CloseTab\nUC12: PlaceOrderUC1: ClockIn\nUC2: ClockOut\nUC3: LogIn\nUC4: LogOut\nUC9: AdjustPrice\nUC13: MarkOrderReady\nUC14: EditMenu\nUC15: ViewStatistics\nUC16: AddEmployee\nUC17: RemoveEmployeeEmployee\n\u00abinclude\u00bb\n\u00abinclude\u00bb\nFigure H-1: The use case diagram for the rest aurant automation project (Problem 2.12).", "source": "Page 545", "chapter": "9"}
{"id": "6d4b74aa77e3-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  532 \nThe system may require login, particularly for the Administrator, but I chose not to show it \nbecause this is unessential to the problem at hand. \nThere are two use cases related with data co llection, UC4 and UC5. The system sequence \ndiagram for UC4 is shown in Figure H-3. The Cr on job can be designed to run both traffic and \nweather data collection at the same time. The UR L request is formed for each ZIP code in the \ngiven area. The traffic server\u2019s response must be processed to extract the traffic data; the data is \nstored only if it is new (not duplicate). A s hort delay (say 2 seconds) is inserted between two \nrequests so that so that the traffic server does not mistake the large number of requests for a \ndenial-of-service attack. \nAlthough the above design shows a single system , a better solution would be to design two \ncompletely independent systems: one for data collection and the other for user interaction : System\nTimer / Cron Jobcollect traffic sample\nre-set the cron-job timerread next zip codeloop     [ for all zip codes ]\nprepare request URLDatabase\nget traffic data (\u201cURL\u201d)\nprocess the responseYahoo! Traffic\nstore traffic sample\ndelay before next queryopt sample data is not duplicate", "source": "Page 546", "chapter": "9"}
{"id": "6d4b74aa77e3-1", "text": "store traffic sample\ndelay before next queryopt sample data is not duplicate\n \nFigure H-3: System sequence diagram for tra ffic data collection use case (Problem 2.13). Traffic Information System\n\u00abparticipate\u00bb\n\u00abinitiate\u00bb\u00abinitiate\u00bb\nUser\nAdministratorDatabase\nTimer /\nCron Job\nWeather.comGoogle Map\nYahoo! Traffic\u00abinitiate\u00bb\u00abparticipate\u00bb\n\u00abinitiate\u00bb\n\u00abinitiate\u00bb\u00abparticipate\u00bb\u00abparticipate\u00bb\n\u00abparticipate\u00bb\n\u00abparticipate\u00bbUC1: ViewStatisticsAcrossArea\nUC3: Start\nUC4: CollectTrafficSample\nUC5: CollectWeatherSampleUC2: ViewStatisticsAlongPath\n \nFigure H-2: The use case diagram for the tr affic information project (Problem 2.13).", "source": "Page 546", "chapter": "9"}
{"id": "766fa4bed32f-0", "text": "Solutions to Selected Problems 533\n(viewing traffic statistics). Their only interacti on is via a common database which contains the \ncollected data and traffic/weather records. \nProblem 2.14: Patient Monitoring \n \n \n \n  \nProblem 2.15: Grocery Inventor y Management Using RFID \n(a) \nWe first need to identify the actors for the software to be developed. Clearly, \nhuman actors include Store Manager and Store Associate. There may be several \nstore managers or store associates, but recall that an actor represents a role, not an individual. Store Manager has three types of interactions with the software-to-be: \n(1) be notified about a depleted stock state; (2) assign the shelf replenishment \ntask; and (3) be notified about a \u201crepleni sh-completed\u201d event. Store Associate has \nthree types of interactions with the software-to-be: (1) be notified about an \nassigned shelf replenishment task; (2) add an  item to the shelf; and (3) generate a \n\u201creplenish-completed\u201d event. In addition, ther e will be an information database that stores \ninventory and task information. \nA key issue is whether the customer is an actor. To  help resolve this issue, Figure H-4 shows the", "source": "Page 547", "chapter": "9"}
{"id": "766fa4bed32f-1", "text": "relationship of human actors that interact with product items. Customer removes items (but may \nalso return an item if he or she changes their mi nd). Store Associate adds items to the shelf, but \nmay also remove items, for example if they reach ed their expiration date. However, as Figure H-4 \nillustrates, human actors do not directly interact with the software-to-be. Rather, it is the RFID \nreader that notifies the software-to-be about adde d or removed items. Therefore, we decide that \nRFID reader is an initiating actor. \nAlthough this may look a bit peculiar, this peculia rity is because use cases are not best suited for \nrepresenting interactions initiated by non-human actors. To confirm with use case descriptions, \nwe will claim that the goal of RFID reader is \u201cTo record removal of an item from a shelf and \nnotify the store manager if replenishment is needed,\u201d which again seems peculiar for a non-\nanimate actor to have a goal. A better approach  to represent such scenarios is to use state \ndiagrams (Chapter 3). \nThe system should automatically send periodic reminders as follows: - to the store manager, in case the replenishment t ask is not assigned within a specified time after \nthe \u201clow-stock\u201d or \u201cout-of-stock\u201d state is detected", "source": "Page 547", "chapter": "9"}
{"id": "766fa4bed32f-2", "text": "the \u201clow-stock\u201d or \u201cout-of-stock\u201d state is detected \n- to the store associate, if the task is not comp leted within a specified time after it is assigned. \nThe summary use cases are as follows: RFID tag", "source": "Page 547", "chapter": "9"}
{"id": "0fb9ab29124d-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  534 \nUC-1: RemoveItem \u2014 RFID Reader notifies th e system that a product item was removed from \nthe shelf. The system also det ects \u201clow-stock\u201d and \u201cout-of-stock\u201d states for a product by checking \nthe product\u2019s item count and notifies Store Manager. (Requirements: REQ1 \u2013 REQ4) \nUC-2: AddItem \u2014 RFID Reader notifies the system  that a product item was placed on the shelf. \n(REQ6) \nUC-3: AssignReplenishTask \u2014 Store Manager assigns a store associate with a task to replenish a \nparticular shelf with a specific product. Store Associate is notified about the details of the \nassigned task. (REQ5) \nUC-4: ViewPendingWork \u2014 Store Manager or Store Associate views their own work that needs \nto be done: Store Manager assigns replenish tasks and Store Associate performs those tasks. Store \nManager may also view the pending tasks assigned to Store Associate(s). \nUC-5: SendReminder \u2014 Timeout Timer sends a reminder to the Store Manager (if the \nreplenishment task is not assigned within a speci fied time) or to the Store Associate (if the \nreplenishment completion is not reported within a specified time).", "source": "Page 548", "chapter": "9"}
{"id": "0fb9ab29124d-1", "text": "replenishment completion is not reported within a specified time). \nUC-6: ReplenishCompleted \u2014 Store Associate inputs in the system that the replenishment task is \ncompleted. The system updates the database and notifies the store manager. (REQ7) \nUse cases UC-3, UC-4, and UC-6 also include user authentication, which is labeled as \nUC-7: Login. \nNotice that there is no point in splitting UC-1  into smaller use cases to address individual \nrequirements, because all of these behaviors should happen together , when appropriate. \nAn important design solution is using a database  to store information about pending work for \nstore employees, i.e., the status of replenishmen t tasks. We cannot rely solely on a token-passing \nmechanism that generates a request for repl enishment once a product count dips below the \nthreshold, then the store manager assigns this t ask, a store associate performs the task, and finally \nsignals its completion. Instead, we must assume that there may be many simultaneous \u201cout-of-\nstock\u201d events and replenishment activities, and there will be randomness involved in the relative \norder of tasks and activities. The store manager ma y not assign the task in the same order as the \n\u201cout-of-stock\u201d events appeared, and the store associ ate may not perform the tasks in the order that Customer", "source": "Page 548", "chapter": "9"}
{"id": "0fb9ab29124d-2", "text": "Store AssociateRFID Reader Software-to-beMain Computer\nRFID TagCustomer\nStore AssociateRFID Reader Software-to-beMain Computer\nRFID Tag\n \nFigure H-4: Relationship of human actors to the software to be developed is mediated by\nthe RFID system (Problem 2.15). This justifies choosing the RFID reader as the initiating\nactor for use cases RemoveItem and AddItem, instead of human actors.", "source": "Page 548", "chapter": "9"}
{"id": "72033a30227a-0", "text": "Solutions to Selected Problems 535\nthe notifications arrived. To facilitate the work  of store employees, we decide that a central \nrepository (database) will store all information about inventory management (events, tasks, \nemployees associated with tasks, etc.). The employees will access this information at their \nconvenience and make decisions based on various priorities and other factors. \n(b) The use case diagram for the supermarket inventor y-management system is shown in Figure H-5. \nTo avoid clutter in the diagram,  the Database actor is shown as not  connected to any use cases. In \nreality, Database is connected to all use cases as  a \u00abparticipating\u00bb actor. Additionally, use cases \nUC-3, UC-4, and UC-6 \u00abinclude\u00bb UC-7: Login (user authentication). \nNotice that UC-4 AssignReplenishTask is not dir ectly initiated by an actor, because it is unlikely \nthat the manager would directly enter UC-4 to  assign a task. The manager may know the task ID \n(after reading an email notification), and may be ab le to retrieve the task directly. However, it is \nmore likely that the manager would first view pending tasks (UC-3: ViewPendingWork) and then", "source": "Page 549", "chapter": "9"}
{"id": "72033a30227a-1", "text": "assign task(s) (UC-4: AssignReplenishTask). Therefore, Figure H-5 indicates that UC-4 \u00abextends\u00bb UC-3. In other words, UC-4 is an opti onal use case, initiated from within UC-3. Seeing \ntasks in context makes for easier and more meaningful decisions. The decision may depend on \ntask priority, employee workload, etc. \u00abextend\u00bbRFID Reader Store\nManager\u00abinitiate\u00bb\n\u00abinitiate\u00bb\u00abinitiate\u00bb\nStore AssociateTimeout Timer\n\u00abinitiate\u00bb\nDatabase\u00abparticipate\u00bb\u00abinitiate\u00bb\u00abinitiate\u00bbSystem for Inventory Management\n\u00abextend\u00bbUC1: RemoveItem\nUC2: AddItem\nUC4: AssignReplenishTask\nUC5: SendReminder\nUC6: ReplenishCompletedUC3: ViewPendingWork\nUC7: Login\u00abinclude\u00bb\nFigure H-5: Use case diagram for supe rmarket inventory-management software\n(Problem\uf0202.10). The actor-to-use-case communica tions without labels are all of the\n\u00abparticipate\u00bb type (omitted to avoid clutter).", "source": "Page 549", "chapter": "9"}
{"id": "60b914f90cdd-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  536 \nFigure H-5 also indicates that UC-3 \u00abextends\u00bb UC-6: after signaling that one task is completed, \nthe store associate may wish to see his other pendi ng tasks and select the next one to work on. \nThese choices for what is considered the primary activity vs. optional exte nsion may need further \ndeliberation. \n(c) \nThis part describes potential extensi ons of the basic inventory system. \nWe might add another user category (or, actor) \u201ch elpout\u201d\u2014this is a store associate who currently \nhas a low workload and wishes to volunteer to assist another. Such associate would be able to see \nall pending replenishment tasks. To preserve priv acy, we may allow store associates to see all \npending task while preserving anonymity of the task assignees. \nAnother option is to allow employees to establis h \u201cfriendship networks,\u201d so members can see \neach other\u2019s pending tasks and offer assistance. Helpout and friendship- network options would \nallow for quicker restocking, reduce the employ ees\u2019 downtime, and and increase morale from \nteamwork. \nIn UC-1: RemoveItem , the system is currently checking for two thresholds: \u201clow-stock\u201d or \u201cout-", "source": "Page 550", "chapter": "9"}
{"id": "60b914f90cdd-1", "text": "of-stock.\u201d The management might decide to check multiple thresholds, e.g., to track the rate of \nsales for different product (not only item counts), or to receive an early warning to contact the \nsupplier in case there is no more of this product in  the stockroom. In addition, different threshold \nvalues may be used for different products. \nIn UC-3: AssignReplenishTask , the store manager might wish to see which employees are \ncurrently on shift, as well as various statistics, such as the total number of tasks currently assigned \nto each employee, or the total number of tasks completed by each employee over a given past interval. In addition, UC-3 should include the option to re-assign a task, in case the manager \nchanged his or her mind (before the task be comes overdue). This is not explicit in the \nrequirements, but can be assumed as needed. \nOne may wonder if UC-3 AssignReplenishTask is  necessary at all. Perhaps it is possible to \nspecify a clever set of business rules that will allo w the system automatically to assign the task as \npart of UC-1: RemoveItem, when the count falls below a threshold? The system would \nautomatically assign the task to an employee wit hout manager\u2019s involvement. What are the merits", "source": "Page 550", "chapter": "9"}
{"id": "60b914f90cdd-2", "text": "of this solution? For example, it may be useful for large and busy supermarkets. Such automation \nwould enable the manager to focus on more impor tant activities, such as improving infrastructure \nand making business decisions. It also avoids th e worst-case scenario where the manager is \nprevented from assigning the task for a long time. Potential problems with an automated task \nassignment include inability to specify a compre hensive set of assignment rules. Also see the \nsolution for Problem 2.11 for potential extensions of  UC-3 that may be difficult to reduce to a set \nof logical rules, and may require human involvement. \nUC-3 may allow store associates to push back or ask for help if they are overloaded or unable to \nwork on the task, e.g., for hea lth reasons. The store associate might  need to react back to an \nassigned task, such as in case the stockroom is out of  this product, or the store is waiting for the \nsupplier to deliver. The question is if this opti on should be part of our system-to-be, or should \nthey use other, independent channels, such as em ail, to inform the manager about problems and \nask for task reassignment.", "source": "Page 550", "chapter": "9"}
{"id": "cef38ab45ec4-0", "text": "Solutions to Selected Problems 537\nWe may consider introducing an additional use case related to the replenishment task, \nUC-8: StartReplenishing , so that the store associate can info rm the system that he or she is \ncurrently restocking the shelf. The purpose of this  use case is to avoid unnecessary message about \nproduct depletion to the store manager. For example, if the store associate puts one item on an empty shelf and the customer immediately removes this item, the system would generate an \nunnecessary \u201cout-of-stock\u201d message for the store ma nager. Also, the reminder messages to the \nstore associate should be avoided if he or she is currently restocking the product. \nThere are several issues to resolve if UC-8: St artReplenishing is introduced. First, when and \nwhere the store associate can signal the start-of-t ask event? He or she may do it from an office \ncomputer, but then get distracted by another task before actually starting the restocking, and then \npostpone restocking for another time or day, or fo rget about it. This scenario would leave the \nsystem in an undefined state for a long time. Anot her option is to assume that the associate will \nsignal the task-start only from the point of replen ishment, using a mobile device. The latter option", "source": "Page 551", "chapter": "9"}
{"id": "cef38ab45ec4-1", "text": "assumes that every associate will be equipped with a mobile device, e.g., smart phone. \nSecond, if the store associate is interrupted by another task during restocking, in the worst case, \nhe may leave the task unfinished. Therefore, the system should start a timeout timer and send reminders if the task is not reported as completed within a specified interval. \nWe may add a use case for store associates who currently have low workload and wish to \nvolunteer to assist others, UC-9: VolunteerHelp . Such an associate would be able to see all \npending replenishment tasks, while preserving anon ymity of the assignees. Another option is to \nallow employees to form \u201cfriendship networks,\u201d so the members can see each other\u2019s pending \ntasks and offer assistance. Volunteering options would allow for quicker restocking, reduce the \nemployees\u2019 downtime, and and increase moral from teamwork. \nMore ideas about extending the ex isting use cases are presented in the solution for Problem 2.11. \nProblem 2.16: Grocery In ventory Management \nNotice that the following solution describes only the relatively straightforward options for the \ninventory management use cases. Ideas for extens ions and unresolved issues are listed after each \nuse case is presented. These extensions should be di scussed with the customer before a decision is", "source": "Page 551", "chapter": "9"}
{"id": "cef38ab45ec4-2", "text": "made about the course of action. The selected f unctions should be truly useful to the customer, \nrather than just a feature bloat. Of course, the constraints on the development time and budget \nmust be factored in. \nThere are two use cases related to the requirements REQ1 \u2013 REQ4: UC-1: RemoveItem and \nUC-5: SendReminder. Detailed description for UC-1: RemoveItem is as follows: \n \nUse Case UC-1: RemoveItem  \nRelated Requirements: REQ1 \u2013 REQ4 \nInitiating Actor: RFID Reader \nActor\u2019s Goal: To update the product item counter  in Database after a product is \nremoved and to notify Store Manager if the product is out of stock \nParticipating Actors: Database, Store Manager, Timeout Timer  \nPreconditions: \u2022 In Database, the product-count \uf03e 0 \n\u2022 Threshold \uf03e 0 specified for \u201cout-of-stock\u201d detection", "source": "Page 551", "chapter": "9"}
{"id": "cf5465bf61d8-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  538 \nPostconditions: \u2022 In Database, the updated product-count \uf0b3 0 \n\u2022 If updated product-count \uf03c Threshold, then: \n - an \u201cout-of-stock\u201d task is record ed in Database that needs to be \n  assigned (currently marked as \u201cunassigned\u201d)  - notification is sent to Store Manager  - Timeout Timer started \nFlow of Events for Main Success Scenario:  \n\uf0ae 1. RFID Reader  reports that a specific tag moved out of coverage \n\uf0ac 2. System  (a) using tag-ID (EPC code) retrie ves product-name and product-count from \nDatabase ; (b) decrements it by 1 \n\uf0ac 3. System  stores the updated product-count to Database  and exits this use case \nFlow of Events for Extensions  (Alternate Scenarios): \n1a. Message from RFID Reader  corrupted/unrecognizable \n\uf0ac 1. System  discards the message, records occurrence in Database , and exits this use case  \n2a. The query result for the tag-ID returned by Database  is nil \n\uf0ac 1. System  discards the message, records occurrence in Database , and exits this use case \n2b. Updated product-count \uf03c 0", "source": "Page 552", "chapter": "9"}
{"id": "cf5465bf61d8-1", "text": "2b. Updated product-count \uf03c 0 \n 1. System  stores all relevant parameters but does not update product-count in Database \n\uf0ac 2. System  signals error to Store Manager  and exits this use case \n2c. Updated product-count \uf03c Threshold (but product-count \uf0b3 0!) \n\uf0ac 1. System  sends notification \u201cout-of-stock\u201d to Store Manager \n\uf0ac 2. System  starts Timeout Timer \n 3. Same as in Step 3 above \nNotice that in the extension scenarios of UC-1 , we assume that corrupted messages from the \nRFID reader are a mild problem (unless they become very frequent!), and so are unrecognizable \ntag IDs (again, unless they become very frequen t!). Therefore, they are silently ignored. \nHowever, if the updated product-count is less than zero, this is cons idered a serious error and it is \nbrought to the attention of the store manager.  (Negative item count is possible because of \nerrouneous detection of remove-item events by the RFID reader, because RFID readers are \nunreliable.) The reader may question these choice s and, by providing compelling arguments, \ndecide otherwise. For example, an unknown ta g-ID (or EPC code) may occur because a new", "source": "Page 552", "chapter": "9"}
{"id": "cf5465bf61d8-2", "text": "product was introduced but never entered in the datab ase. In this case, it may be useful to prompt \nan appropriate store employee to check if the unknown tag-ID corresponds to an actual product. \nThere are more subtleties that should be consider ed in UC-1. For example, what happens if a \ncustomer removes an item, this generates an \u201cout -of-stock\u201d event, but then  the customer changes \nhis or her mind and puts the item back? Another use case (UC-2: AddItem) will detect an added item, but should the system revoke the \u201cout-of-s tock\u201d event? My answer  is no, because this \nbehavior would be too complicated to implem ent, and leaving it alone would not cause major \nproblems. (Of course, a customer may place to the shopping cart a large number of items of the same product, and then put all or most of them back. This incident may result in an unnecessary \n\u201cout-of-stock\u201d event and a consequent replenshment task.) \nOther extension scenarios for UC-1 include the possi bility that the client computer is unable to \naccess the database, or it is unable to deliver the notification to the (mail) server. They are not \nshown in the description of UC-1 and ar e left as an exercise to the reader.", "source": "Page 552", "chapter": "9"}
{"id": "86ea0023958d-0", "text": "Solutions to Selected Problems 539\nFor both UC-1 and UC-2, there is a risk that the ac tual item count in reality is different from what \nthe system thinks it is (and has it recorded in the database). What is the worst thing that can \nhappen because of an incorrect count? \u2014The out-of- stock event will be generated too early or too \nsoon. This not a major concern, if the differen ce between the actual and observed count is small. \nUC-2: AddItem  \u2014 An issue arises if in UC-6: Replenis hCompleted (described below) the store \nassociate manually can enter the total number of items that he restocked. The system could use \nthis product-total to check if the RFID reader erroneously reports more items than the total \npossible. An important issue is whether it is possi ble that a sporadic \u201cadd item\u201d event increments \nthe product-count to a value greater than the to tal. One may argue that if there was no out-of-\nstock event since the last replenishment, then the total cannot be exceeded , because customers do \nnot do replenishment\u2014they just return previous ly removed items. However, it may happen that \nan item is returned after being purchased and then  re-shelved by a store employee. E.g., the item", "source": "Page 553", "chapter": "9"}
{"id": "86ea0023958d-1", "text": "might be purchased before the last replenishmen t task was completed, and returned after the \nreplenishment. \nNotice that in UC-2, the system in not checking any thresholds. For example, at first one might \nthink that by detecting when the item count exceeds a threshold, this  event could be used to signal \nthe completion of the replenshment task. Howeve r, just exceeding a threshold by one does not \nmean that the employee completed th e task, because it does not capture human intention . RFID \nsystem is unreliable, but even if the system c ould detect the threshold event reliably, it cannot \nknow how many items the employee intends to restock. Only the employee doing restocking \nknows when he or she completed the task as inte nded. Therefore, the employee must signal the \ncompletion explicitly (see UC-6: ReplenishCompleted). \n \nUse Case UC-3: AssignReplenishTask\nRelated Requirements: REQ5 \nInitiating Actor: Store Manager \nActor\u2019s Goal: To assign a store associate with a task to replenish a particular shelf \nwith a specific product \nParticipating Actors: Database, Store Associate, Timeout Timer  \nPreconditions: \u2022 In Database, there is \uf0b3 1 unassigned \u201cout-of-stock\u201d task \n\u2022 Store Manager knows the identifier of the task to assign", "source": "Page 553", "chapter": "9"}
{"id": "86ea0023958d-2", "text": "\u2022 Store Manager knows the identifier of the task to assign \nPostconditions: \u2022 In Database, the assigned task is moved from the list of unassigned \ntasks to the list of pending tasks \n\u2022 Notification \u201creplenish-stock \u201d sent to Store Associate; \nTimeout Timer started \nFlow of Events for Main Success Scenario:  \n 1. include:: Login  (UC7) \n\uf0ae 2. Store Manager  uses a task identifier to retrieve an unassigned task \n\uf0ac 3. System  retrieves the requested task from Database  and displays its information \n\uf0ae 4. Store Manager  provides the identifier of a store associate to be assigned the task \n\uf0ac 5. System  checks that the store associate is availa ble, updates the task assignee\u2019s attribute \nwith the store associate identifier, and stores the task as pending to Database  \n\uf0ac 6. System  notifies the Store Associate  about a \u201creplenishment-shelf\u201d task \n\uf0ac 7. System  starts Timeout Timer  and exits this use case  \nFlow of Events for Extensions  (Alternate Scenarios): \n3a. The query result for the unassigned task returned by Database  is nil", "source": "Page 553", "chapter": "9"}
{"id": "67eb865a54ac-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  540 \n\uf0ac 1. System  displays an error message and exits this use case  \n3b. The task type is not \u201cout-of-stock\u201d \n\uf0ac 1. System  displays an error message and exits this use case \n5a. The given identifier for store associate does not exist or the associate is not available \n 1. System  displays an error message a nd asks the user to try again \n 2. Same as in Step 4 above \nThe detailed description of UC-3: AssignReplenishT ask implies that two lists are maintained in \nthe database: unassigned tasks and pending tasks. We may instead maintain a single list of pending tasks, where each pending task is associ ated with the task assi gnee. When an \u201cout-of-\nstock\u201d event occurs in UC-1, the system creates a new pending task for Store Manager: to assign \na restocking task to a Store Associate. \nNotice that in the preconditions for UC-3, the syst em checks that there is al least one unassigned \n\u201cout-of-stock\u201d task, rather than checking whether a product count is lower than a threshold. We \ntrust that an unassigned task is created because product-count \uf03c Threshold, and this is stated as a", "source": "Page 554", "chapter": "9"}
{"id": "67eb865a54ac-1", "text": "postcondition for UC-1. If UC-1 is correctly im plemented, there is no need to check its \npostconditions in UC-3. \nBefore assigning a task in UC-3, the store manager may first check that the store has this product \nin the stockroom. Otherwise, it must be orde red from a supplier. Also, he may check the \navailability of different store associates (to avoid assigning task to an employee who is not on \nshift) and their existing workload. \nAn important issue that needs to be resolved is  whether the manager will see only the restocking \ntasks or all tasks assigned to different employees, such as cleaning, posting promotional coupons \non the shelves, contacting the suppliers, manning the checkout registers, etc. A categorization of tasks would be helpful when picking the employee for a task. Each employee is best suited for a \ndifferent type of job. E.g., do not assing a person of small stature to do heavy-item restocking. \nAnother extension is to support assigning priorities  to tasks. For exampl e, \u201cout-of-stock\u201d has a \ngreater priority than a \u201clow-stock\u201d event; produc ts that are more popular should be restocked \nfirst; products that are more expensive should be r estocked first, etc. The priority may be decided", "source": "Page 554", "chapter": "9"}
{"id": "67eb865a54ac-2", "text": "on other factors, such as supplier agreements, seaso nal products, etc. Another possibility is that \nthe manager may wish to minimize the delay fo r overdue tasks, so these tasks get the highest \npriority. We may also consider the option of having the system automatically to prioritize the \npending tasks, based on a set of logical rules. Th e manager would then assign the highest priority \ntask first (or re-assign, for overdue tasks). \nCurrently, we assume that the manager does not specify the time by which he/she wants the \nreplenishment task done. The priority just reflects on the task\u2019s ranking, but does not guarantee timeliness\u2014no specific deadline is set. Assigning a hi gh priority to a task will ensure that this \ntask will be worked on among the first ones, but  does not guarantee that the task will be \nperformed before a desired deadlin e. Worse, the deadline is not explicitly stated or recorded. \nShould we allow the manager to sp ecify a deadline, and what should happen if the deadline is not \nmet? For example, the system may automatically  reassign the task to another employee without \nbothering sending repeated reminders. This is a business rule that needs to be implemented. \nUC-4: ViewPendingWork  \u2014 Store Manager", "source": "Page 554", "chapter": "9"}
{"id": "a33d2a90fbfe-0", "text": "Solutions to Selected Problems 541\nUC-5: SendReminder ensures that the replenishmen t task is assigned within a reasonable period. \nThis use case also addresses REQ5, so perhaps it can be omitted from the solution (and similar is \ntrue for UC-4: ViewPendingWork), but it is provi ded here for completeness. Detailed description \nfor UC-5: SendReminder is as follows: \n \nUse Case UC-5: SendReminder  \nRelated Requirements: REQ4 and REQ5 \nInitiating Actor: Timeout Timer \nActor\u2019s Goal: To remind Store Manager that the replenishment task must be \nassigned for an out-of-stock product \nParticipating Actors: Store Manager  \nPreconditions: \u2022 Timeout occurred for an un assigned \u201cout-of-stock\u201d task \nPostconditions: \u2022 Count of notification attempts for the task incremented in Database \n\u2022 If attempts-count \uf0a3 max-attempts, then \u201cout-of-stock\u201d notification \n re-sent to Store Manager; else notification sent system-wide \n\u2022 Timeout Timer re-started \nFlow of Events for Main Success Scenario:  \n\uf0ae 1. System  sends notification \u201cout-of-stock\u201d to Store Manager  \n\uf0ac 2. System  starts Timeout Timer  and exits this use case \nFlow of Events for Extensions (Alternate Scenarios):", "source": "Page 555", "chapter": "9"}
{"id": "a33d2a90fbfe-1", "text": "Flow of Events for Extensions (Alternate Scenarios): \n1a. Number of notification attempts exceeded a maximum \n\uf0ac 1. System  sends a store-wide \u201cout-of-stock\u201d notification  \n 2. Same as in Step 2 above \nThe extension scenario accounts for the possibility that the store manager does not react on the \nnotification for a long time, e.g., because he or sh e fell ill or quit the job. Because the store must \ncontinue functioning normally, the system should notify a pre-specified set of workers about this \nexception, so the responsibility can be reassigned. \nThere is an extension of this use case for remindi ng the Store Associate if the shelf-replenishment \ncompletion is not reported within a specified time. I leave it to the reader as an exercise to write \nthis extension of UC-5. \nIf rigid timers are a concern then the system ma y adaptively compute the new timer period before \nexiting this use case. So, during busy shopping peri ods reminders could be sent more often. This \nadaptation would help preventing missed sales on a busy day. However, the developer should \nkeep in mind that many factors (other than  sending frequent reminders) influence timely \ncompletion of the replenishment task, such as availability of the employees, their current \nworkload, availability of products in the stockroom, etc.", "source": "Page 555", "chapter": "9"}
{"id": "a33d2a90fbfe-2", "text": "workload, availability of products in the stockroom, etc. \nIn the current version of UC-5, if a shelf-replenis hment task is overdue, the system first sends a \nreminder only to the store associate, and then st orewide. An option is to add an intermediate \nlevel, where a notification is sent to the manage r, and only if the manager does not react, send it \nstorewide. \nUC-6: ReplenishCompleted  \u2014 The system could also allow th e store associate to enter the total \nnumber of new items that were restocked. Th is way the system would know how many items \nwere actually placed and make a correction if th e reader misreported the item count. This total", "source": "Page 555", "chapter": "9"}
{"id": "5b42c33a411b-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  542 \ncan be used to check that the number of \u201cremove item\u201d events (UC-1) is never greater than the \ntotal, unless there were some \u201cadd item\u201d events (UC-2) in the meantime. \nWhen the store associate is restocking the shelf, we  assume that the items are already tagged with \ntheir RFID tag at another location. If this assumption is not true (i.e., the store associate does tag \nthe items while restocking), then the system may have issues with duplicate readouts of the same \ntag. (Recall that the tag EPC does not distinguish individual items, but rather only the product \ntypes!) We may install a small display on each sh elf to show the associate the current number of \nitems and allow for corrections in case the sy stem got it wrong. However, it would be very \ninefficient if the asso ciate made corrections every time a wrong count is obtained. A more \nefficient approach is to enter the total count at the end of restocking. Of course, this approach \nassumes that the associate knows the correct tota l and enters it correctly into the system! \nProblem 2.17 \u2014 Solution \n \nProblem 2.18 \u2014 Solution \n \nProblem 2.19: Home Access Using Face Recognition", "source": "Page 556", "chapter": "9"}
{"id": "5b42c33a411b-1", "text": "Problem 2.19: Home Access Using Face Recognition \nThe detailed description of AddUser for case (a), lo cal implementation of face recognition, is as \nfollows. (The use case RemoveUser is similar and left as an exercise.) \nUse Case UC-3: AddUser  (sub-use case)  \nRelated Requirements: REQ6 stated in Table 2-1 \nInitiating Actor: Landlord \nActor\u2019s Goal: To register a new resident and record his/her demographic information.\nParticipating actors: Tenant  \nPreconditions: The Landlord is properly authenticated. \nPostconditions: The face recognition system trained on new resident\u2019s face. \nMain Success Scenario:  \n\uf0ae 1. Landlord  requests the system to create a new user record \n\uf0ac 2. System  (a) creates a fresh user record, and (b) prompts for the values of the fields (the \nnew resident\u2019s name, address, telephone, etc.) \n\uf0ae 3. Landlord  fills out the form with the tenant\u2019s  demographic inform ation and signals \ncompletion \n\uf0ac 4. System  (a) stores the values in the record  fields, and (b) prompts for the Tenant \u2019s \n\u201cpassword,\u201d which in this case is one or more images of the Tenant \u2019s face", "source": "Page 556", "chapter": "9"}
{"id": "5b42c33a411b-2", "text": "\u201cpassword,\u201d which in this case is one or more images of the Tenant \u2019s face \n\uf0ae 5. Tenant  poses in front of the camera for a \u201cm ug shot\u201d and signals for image capture \n\uf0ac 6. System  (a) performs and affirms the image capture, (b) runs the recognition training \nalgorithm until the new face is \u201clearned,\u201d (c) signals the training completion, and (d) \nsignals that the new tenant is successf ully added and the process is complete", "source": "Page 556", "chapter": "9"}
{"id": "22112e0f7ee2-0", "text": "Solutions to Selected Problems 543\nFor case (b), where face recognition is provided by a remote company, we need to distinguish a \nnew actor, the FaceReco Company that provides authentication services. The detailed use case is \nas follows: \nUse Case UC-3v2: AddUser \nRelated Requirements: REQ6 stated in Table 2-1 \nInitiating Actor: Landlord \nActor\u2019s Goal: To register a new resident and record his/her demographic information.\nParticipating actors: Tenant, FaceReco  \nPreconditions: The Landlord is properly authenticated. \nPostconditions: The face recognition system trained on new resident\u2019s face. \nMain Success Scenario:  \n\uf0ae 1. Landlord  requests the system to create a new user record \n\uf0ac 2. System  (a) creates a fresh user record, and (b) prompts for the values of the fields (the \nnew resident\u2019s name, address, telephone, etc.) \n\uf0ae 3. Landlord  fills the form with tenant\u2019s demogr aphic information and signals completion \n\uf0ac 4. System  (a) stores the values in the record  fields, and (b) prompts for the Tenant \u2019s \n\u201cpassword,\u201d which in this case is one or more images of the Tenant \u2019s face", "source": "Page 557", "chapter": "9"}
{"id": "22112e0f7ee2-1", "text": "\u201cpassword,\u201d which in this case is one or more images of the Tenant \u2019s face \n\uf0ae 5. Tenant  poses in front of the camera for a \u201cm ug shot\u201d and signals for image capture \n\uf0ac 6. System  (a) performs the image capture, (b) sends the image(s) to FaceReco  for training \nthe face recognition algorithm, and (c) signals to the Landlord  that the training is in \nprogress \n\uf0ae 7. FaceReco  (a) runs the recognition training algo rithm until the new face is \u201clearned,\u201d \nand (b) signals the training completion to the System  \n\uf0ac 8. System  signals to the Landlord  that the new tenant is successfully added and the \nprocess is complete \nNotice that above I assume that FaceReco will do tr aining of their recognition system in real time \nand the Landlord and Tenant will wait until the proc ess is completed. Alternatively, the training \nmay be performed offline and the Landlord notif ied about the results, in which instance the use \ncase ends at step 6. \nProblem 2.20: Automatic Teller Machine \u2014 Solution \n \nProblem 2.21: Virtual Mitosis Lab \u2014 Solution", "source": "Page 557", "chapter": "9"}
{"id": "22112e0f7ee2-2", "text": "Problem 2.21: Virtual Mitosis Lab \u2014 Solution \nThe solution is shown in Figure H-6. The cell elements mentioned in the problem statement \n(described at the book website, given in Preface), di rectly lead to many concepts of the domain \nmodel: bead, centromere, nucleus, cell, guideline, etc. Two animations are mentioned in Figure 2 \n(see the problem statement at the book webs ite), so these lead to the concepts of \nProphaseAnimator and TelophaseAnimator. Also, the Builder concept is derived directly from the \nproblem statement.", "source": "Page 557", "chapter": "9"}
{"id": "763868dbf364-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  544 \nThe concept which may not appear straightforwar d is the StateMachine. We may be tempted to \nshow only the \u201cNext\u201d button, which is mentioned in the problem statement, as a concept. But, \nthat does not tell us what is controlling the overall fl ow of the simulation. This is the task for the \nStateMachine, which keeps track of the current stage and knows when and how to transition to \nthe next one. The \u201cnextStageEnabled\u201d attribute is set true  when the StateMachine is notified of \nthe current stage completion. This lets the user  to proceed to the next stage of mitosis. \nNotice that some concepts, such as Centromere , Bead, and Nucleus, are marked as \u201cthing\u201d-type \nconcepts, because they only contain data a bout position, color, and do not do any work. \nConversely, the \u201cworker\u201d-type concepts, such as  Chromosome and Cell exhibit behaviors. Given \na non-zero displacement, the Chromosome has to bend according to the parabolic equation \nderived in the problem sttement at the book we bsite (given in Preface). The Cell notifies the \nStateMachine when the user completes the required work.", "source": "Page 558", "chapter": "9"}
{"id": "763868dbf364-1", "text": "StateMachine when the user completes the required work. \nIn terms of entity-boundary-control classificati on, StateMachine is a \u00abcontrol\u00bb object because it \ncoordinates the work of other objects. NextButton and Instructions are \u00abboundary\u00bb objects. All other objects are of \u00abentity\u00bb type. \nSome attributes are not shown. For example, b eads, centromere, nucleus, cell, guidelines, etc., \nalso have the size dimension but this is not shown because it is not as important as other attributes. \nAlso, some associations are omitted to avoid clu ttering the diagram. E.g., the animators have to \nnotify the StateMachine about the completion of th e animation. Some concepts are related in \nmore than one way. For example, Chromosome contains  Beads and Centromere, but I chose not \nto show this. Instead, I show what I f eel is more important, which is Beads are-uniformly-\naligned-along  Chromosome and Centromere is-centered-at  Chromosome. These associations are Centromere\ncolor\npositioncenteredAt\nnotifiesCompletion\nManualBuilder\ncontains\nstartsCellChromosome\ncolor\nposition\ndisplacementBead\ncolor\nposition\nNucleus\nvisible\nSpindle\nposition\nlength\u00abcontrol\u00bb\nStateMachine\ntableOfStates\ncurrentState\nnextStageEnabled\nAutoBuilderEquator", "source": "Page 558", "chapter": "9"}
{"id": "763868dbf364-2", "text": "StateMachine\ntableOfStates\ncurrentState\nnextStageEnabled\nAutoBuilderEquator\nProphaseAnimatornotifiesCompletionuniformlyAlignedAlong\nGuideline\nposition* 1\n11\ncontains\n11contains\nnotifiesCompletion\n11 .. 4\n12\ncontains\ncontains1 112makesInvisiblemakesVisible\nTelophaseAnimatorsplitsInTwoStudent\u00abboundary\u00bb\nNextButton\n\u00abboundary\u00bb\nInstructionspushes\ntransitions\ndisplays\nFigure H-6: The domain model for the cell di vision virtual laboratory (Problem 2.16).", "source": "Page 558", "chapter": "9"}
{"id": "2bcb16cc763f-0", "text": "Solutions to Selected Problems 545\nimportant to note because they highlight the ge ometric relationship of the chromosome and its \nelements. \nIn anaphase, a yet-to-be specified  concept has to make spindle fibers visible and centromeres \ndisplaceable. Also, the AutoBuilder manipulates a ll the cell components, and the ManualBuilder \nsnaps the Beads into their fina l position. It is debatable whether the Guideline should be \nassociated with the Nucleus or with the Manua lBuilder, because unlike other concepts, which \ncorrespond to physical parts of the cell, the guidelin es are an abstraction that only serves to help \nthe user construct the cell. I have shown it associated with Nucleus. \nThe notifications shown in the model are tentativ e and need to be reconsidered in the design \nphase. In the Build phase, it makes sense that each Chromoso me notifies the Cell of its \ncompletion. The Cell, in turn, notifies the Bu ilder when it has two Chromosomes completed, \nwhich finally notifies the StateMachine. \nProblem 2.22 \u2014 Solution \n \nProblem 2.23 \u2014 Solution \n \nProblem 2.24 \u2014 Solution \n \nProblem 2.25 \u2014 Solution \n \nProblem 2.26 \u2014 Solution", "source": "Page 559", "chapter": "9"}
{"id": "2bcb16cc763f-1", "text": "Problem 2.26 \u2014 Solution \n \nProblem 2.27 \u2014 Solution \n \nProblem 2.28 \u2014 Solution \n \nProblem 2.29: Fantasy Sto ck Investment \u2014 Solution \n(a) \nBased on the given use case BuyStocks we can  gather the following doing (D) and knowing (K) \nresponsibilities. The concept names are assigned in the rightmost column. \nResponsibility Description Typ Concept Name \nCoordinate actions of all concepts associated with a use case and delegate \nthe work to other concepts. D Controller", "source": "Page 559", "chapter": "9"}
{"id": "a88048ff8177-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  546 \nPlayer\u2019s account contains the available fantasy money currently not \ninvested into stocks (called account balance). Other potential info includes Player\u2019s historic performance and trading patterns. K InvestmentAcct \nA record of all stocks that Player currently owns, along with the quantity \nof shares for each stock, latest stock price, current portfolio value, etc. K Portfolio \nSpecification of the filtering criteria to narrow down the stocks for \nquerying their current prices. Examples properties of stocks include company name, industry sector, price range, etc. K QuerryCriteria \nFetch selected current stock prices by queryi ng StockReportingWebsite. D StockRetriever \nHTML document returned by StockReportingWebsite, containing the \ncurrent stock prices and the number of available shares. K StockPricesDoc\nExtract stock prices and other info from HTML doc StockPricesDoc. D StockExtractor \nInformation about a traded stock, such as tic ker symbol, trading price, etc. K StockInfo \nPrepare HTML documents to send to Player\u2019s Web browser for display. \nE.g., create a page with stock prices retrieved from StockReportingWebsiteD PageCreator \nHTML document that shows Player the current context, what actions can \nbe done, and outcomes of the previous actions/transactions. K InterfacePage", "source": "Page 560", "chapter": "9"}
{"id": "a88048ff8177-1", "text": "be done, and outcomes of the previous actions/transactions. K InterfacePage \nInfo about a product, e.g., company name, pr oduct description, images, \u2026 K Advertisement \nInformation about advertising company; includ es the current account info. K AdvertiserAcct \nChoose randomly next advertisement to be displayed in a new window. \nUpdate revenue generated by posting the banner. D AdvertisePoster\nTransaction form representing the order placed by Player, with stock \nsymbols and number of shares to buy/sell. K OrderForm \nUpdate player\u2019s account and portfolio info after transactions and fees. \nAdjust the portfolio value based on real-world market movements. D AcctHandler \nLog history of all trading transactions, including the details such as \ntransaction type, time, date, player ID, stocks transacted, etc. D Logger \nWatch periodically real-world market movements for all the stocks owned \nby any player in the system. D MarketWatcher \nTrack player performance and rank order the players for rewarding. D PerformTracker\nPersistent information about player accounts, player portfolios, advertiser \naccounts, uploaded advertisements, reve nue generated by advertisements, \nand history of all trading transactions. K Database \nInformation on the Fantasy Stock Investment Website\u2019s generated \nrevenue, in actual monetary units, such as dollars. K RevenueInfo", "source": "Page 560", "chapter": "9"}
{"id": "a88048ff8177-2", "text": "revenue, in actual monetary units, such as dollars. K RevenueInfo \nAlthough it is generally bad idea to mention specific technologies in the domain model, I breach \nthis rule by explicitly mentioning HTML documen ts because I want to highlight that the system \nmust be implemented as a Web application a nd HTML will remain the Web format for the \nforeseeable future. \nIt may not be obvious that we need three concep ts (StockRetriever, StockExtractor, PageCreator) \nto retrieve, extract, format, and display the stock prices. The reader may wonder why a single object could not carry out all of those. Or, perhap s two concepts would suffice? This decision is a \nmatter of judgment and experience, and my choi ce is based on a belief that that the above \ndistribution allocates labor roughly evenly across the objects. Also, the reader may notice that \nabove I gathered more concepts than the use c ase BuyStocks alone can yiel d. Some concepts are \ngeneralized to cover both buying and selling transaction types. Other concepts, such as \nMarketWatcher, PerformTracker and RevenueInfo  are deduced from the system description,", "source": "Page 560", "chapter": "9"}
{"id": "121ff3076a49-0", "text": "Solutions to Selected Problems 547\nrather than from the use case itsel f. Finally, the above table is only partial, because some obvious \nresponsibilities, such as user authen tication, are currently unassigned. \nAlso, having the Portfolio concept alone is pr obably inadequate, because we may want to know \ndetails of each stock a Player owns. For this, we could re-use the StockInfo concept, so that \nPortfolio contains StockInfo. But this may be in adequate because StockInfo represents the current \nstatus of a stock on an exchange and the portfolio information may need a different \nrepresentation. For example, we may want to  know the price at which a stock was bought \noriginally as well as its historic price fluctua tions. Hence, a new concept should be introduced. \nAlso, an additional concept may be introduced fo r Player\u2019s contact and demographic information. \n(b) \nAttributes: Once the concepts are known, most of the attribut es are relatively easy to identify. One attribute \nwhich may not be obvious immediately is the we bsite address of the StockReportingWebsite. Let \nit be denoted as URL_StockRepSite and it natura lly belongs to the StockRetriever concept. \nAssociations: \nIt is left to the reader to identify and justify the associations. My version is shown in Figure H-7.", "source": "Page 561", "chapter": "9"}
{"id": "121ff3076a49-1", "text": "One association that may be questionable at first is \u201casks for stock prices\u201d between MarketWatcher and StockRetriever. The reason is that I assume that MarketWatcher will use the \nservices of StockRetriever to obtain information about market movements, instead of duplicating \nthis functionality. MarketWatcher only decides what  stocks to watch (all owned by any of our \ninvestor players), how frequently, and then convey this information to AcctHandler to update the \nvalues of Portfolios. \n(c) \u00abcontrol\u00bb\nController\u00abentity\u00bb\nInvestmentAcct\ninvestorName\naccountBalance\nrewardBalance\n\u00abcontrol\u00bb\nStockRetriever\nURL_StockRepSite\u00abentity\u00bb\nPageCreator\u00abentity\u00bb\nAcctHandler\u00abentity\u00bb\nPortfolio\nownedStocks\nportfolioValue\u00abboundary\u00bb\nQueryCriteria\nselectedFilters\n\u00abboundary\u00bb\nStockPricesDoc\u00abboundary\u00bb\nInterfacePage\n\u00abentity\u00bb\nAdvertisement\u00abentity\u00bb\nLogger\u00abentity\u00bb\nStockInfo\ntickerSymbol\nsharePrice\navailableShares\u00abentity\u00bb\nAdvertiserAcct\ncompanyName\nbalanceDue\u00abentity\u00bb\nAdvertisePoster\u00abboundary\u00bb\nOrderForm\nstocksToTrade\n\u00abentity\u00bb\nMarketWatcher\u00abentity\u00bb\nStockExtractorgivesPages\nToDisplayreceives\nposts\nreceives\nasksForNewAd\nretrieves\ncontainsupdates\nupdates\nreceives", "source": "Page 561", "chapter": "9"}
{"id": "121ff3076a49-2", "text": "receives\nasksForNewAd\nretrieves\ncontainsupdates\nupdates\nreceives\nprocessesnotifiesextractsasksForStockPrices\nFigure H-7: The domain model for the fantas y stock investment website (Problem 2.18).", "source": "Page 561", "chapter": "9"}
{"id": "ad44906a87f8-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  548 \nThe domain model is shown in Figure H-7. \n(d) Concept types are already labeled in Figure H- 7. Advertisement could be argued as \u00abboundary\u00bb, \nbut I label it as \u00abentity\u00bb, because this is actually the info stored in data base, based on which the \nactual banner is generated. All concepts that appear on the boundary of the system, either \nbetween the system and the user\u2019s browser or be tween the system and the stock reporting website \nare marked as \u00abboundary\u00bb. So far we have two \u00abcontrol\u00bb concepts, and as we process more use \ncases, we may need to introduce dedicated Cont rollers for different uses cases. The remaining \nconcepts are of \u00abentity\u00bb type. \nIt may not be readily apparent that StockRetriever should be a \u00abcontrol\u00bb type concept. First, this \nconcept interacts with actors, in this case StockR eportingWebsite, so it is another entry point into \nour system. The most important reason is that StockRetriever will be assigned many coordination \nactivities, as will be seen later in the solution of Problem 2.21. \nProblem 2.30: Automatic Teller Machine \u2014 Solution \nThe solution is shown in Figure H-8. altid := create()", "source": "Page 562", "chapter": "9"}
{"id": "ad44906a87f8-1", "text": "The solution is shown in Figure H-8. altid := create()\ne := getNext(): Controller : IDChecker : CustomerIDStore : AcctManager : AcctInfo\nbalance := withdraw(amt)altCustomer\nenterCard(): CustomerID\nacct := checkID(id)loop: CashDispenserCtrl : GUI\ndispenseCash()acct != null\nbalance >= 0compare(id, e)enterPIN()askPIN()\nenterCustomerID()\naskAmount()\naskAmt()\nenterAmt()acct := create()\nenterAmount(amt)\nnotifyInvalidID()[else]\nnotifyID()[else]\nFigure H-8: The sequence diagram for the ATM, use case \u201cWithdraw Cash\u201d (Problem 2.19).", "source": "Page 562", "chapter": "9"}
{"id": "df569226e349-0", "text": "Solutions to Selected Problems 549\nProblem 2.31: Online Auction Site \u2014 Solution \nThe solution is shown in Figure H-9. As already st ated, in this simple version I assume that the \nitems have no attribute indicati ng the auction expiration date. \nAlthough viewing bids before making decision is  optional, I assume that this is a likely \nprocedure. Before closing, Seller might want to review how active the bidding is, to decide \nwhether to hold for some more time before closi ng the bid. If bidding is \u201chot,\u201d it may be a good \nidea to wait a little longer. \nThe system loops through the bids and selects the highest automatically, rather than Seller having \nto do this manually. \nNotice that in this solution the system does not no tify the other bidders who lost the auction; this \nmay be added for completeness. \nThe payment processing is part of a separate use case. \nProblem 2.32: Fantasy Sto ck Investment \u2014 Solution \n(a) \nList of responsibilities: \nR1. Send the webpage received from StockReportingW ebsite to StockExtractor for parsing getItem(name): Controller\nSellerviewBids(itemName)\ncloseAuction(itemName)Buyer: ItemsCatalog : ItemInfo\ngetBidsList()\ndisplay bidsBefore   \ndisplaying bids, Controller could sort them in descending order.", "source": "Page 563", "chapter": "9"}
{"id": "df569226e349-1", "text": "display bidsBefore   \ndisplaying bids, Controller could sort them in descending order.\nSeller decidesto go with the highest current bid.\ngetItem(name)\ngetBidsList()\ngetNext() loop\ncompare bid amounts: BidsList\nAutomatically select the highest current bid.: Bid\ngetBidder(): BuyerInfo\ngetAddress()\nsend email notificationsetReserved(true)\n \nFigure H-9: The sequence diagram for the online auction website, use case CloseAuction\n(Problem 2.20).", "source": "Page 563", "chapter": "9"}
{"id": "4342cf4aec8d-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  550 \nR2. Send message to PageCreator to prepare a new webpage and insert the retrieved stock \nprices, the player\u2019s account balan ce, and an advertisement banner \nR3. Send message to AdvertisePoster to select randomly an advertisement \nR4. Pass the webpage to Controller to send it to the player\u2019s web browser for viewing \nFigure H-10 shows a feasible solution. Because StockRetriever is the first object to receive the \nstock prices from a third-party website, it naturally gets assigned R1. In this solution it also gets \nassigned R2 and R4, thus ending up performing mo st of the coordination work. Another option \nwould be to assign R2 to StockExtractor by the principle of Expert Doer , because it first gets hold \nof StockInfo. However, High Cohesion  principle argues against StockExtractor collaborating with \nPageCreator. Parsing HTML docum ents and extraction of stock information is sufficiently \ncomplex that StockExtractor should not be assigned other responsibilities. \nThe diagram in Figure H-10 should be extended to  consider exceptions, such as when the query \nto StockReportingWebsite is ill formatted, in  which case it responds with an HTML document \ncontaining only an error message and no stock prices. \n \nProblem 2.33 \u2014 Solution", "source": "Page 564", "chapter": "9"}
{"id": "4342cf4aec8d-1", "text": "Problem 2.33 \u2014 Solution \n \nProblem 2.34: Patient Monitoring \u2014 Solution \n \nProblem 2.35 \u2014 Solution \nThe reader should note a usability problem with th e given draft design. Consider a scenario where \na vital sign sensor just failed and it reports out-o f-range values, although the patient\u2019s vitals are \ncurrently normal. In this case, first a message w ill be sent to the hospital alerting about abnormal \nvitals. Then, the diagnostic tests will be r un and the sensor will be found faulty. A second extractStocks()\nsi := create()\npostPage(page): StockRetriever : StockExtractor si : StockInfo : PageCreator : InvestmentAcct : AdvertisePoster\nad := selectAd()receive\n(StockPricesDoc)\npage := preparePage(si): Controller\nbal := getBalance()\nalt bal >= 0page :=\ncreateTradingPage()\npage :=\ncreateWarningPage()getInfo()si\nFigure H-10: A sequence diagram for the fantas y stock investment website (Problem 2.21).", "source": "Page 564", "chapter": "9"}
{"id": "14538d884258-0", "text": "Solutions to Selected Problems 551\nmessage will be sent to the hospital informing about  a faulty sensor. The reader should consider \nwhether this scenario would cause confusion w ith the hospital personnel, and how the given \ndesign should be improved to improve the usability.  (Note that running diagnostic tests before \neach measurement may not be a so lution, because the tests may take time and one should assume \nthat the hardware is of good quality and does not break often. A better solution should be \nconceived.) A similar issue exists when the patient  begins exercise\u2014the system first measures the \nvital signs, finds them to be out-of-range, and alerts  the hospital. The vitals will be adjusted in the \nsame cycle, but a false alarm would have been unnecessarily generated. \nFinally, the draft design is unclear about this de tail, but one would hope that all vital signs are \nchecked for abnormality before a single alert is sen t to the hospital, instead of sending individual \nalerts for different out-of-range vitals. This appr oach conserves the battery  energy (although by \nremoving redundant messages it may impact the communication reliability!) \nBelow I solve both (a) and (b) parts of the problem together. Start by observing the way the existing design treat s the Vitals Safe Ranges. It assumes a method", "source": "Page 565", "chapter": "9"}
{"id": "14538d884258-1", "text": "adjust(exercise-mode)  called by the Controller. It is hard to imagine that the new safe \nrange values would be computed in real time, eith er by the Controller or by VSafeRanges. These \nvalues must be pre-computed and available. Be cause safe ranges contain very small amount of \ndata, there is no need to reload the appropriate  values from the database. Instead, VSafeRanges \nwould simply switch to different values, depending on whether the patient is exercising. One can \nimagine that VSafeRanges would have a Boolean attribute isExercising  set by the method \nadjust() . Therefore, a more apt name for this method would be setExercising() . Based \non the current value of isExercising , VSafeRanges\u2019 method getValues()  would return \nappropriate ranges. \nOne may observe that Expert Doer Principle  is not well used, because there are several messages \nthat are sent by objects that acquired the message information second-hand, from other objects that first determined the information needed to  send the message. Specifically, the Controller asks \nAbnormalityDetector, SensorDiagnostic, and Activity Observer to obtain certain information and \nreturn it back to the Controller. Finally, th e Controller sends respective messages to the \nHospitalAlerter and VitalsSafeRanges. If we adhered to Expert Doer , the messages should have", "source": "Page 565", "chapter": "9"}
{"id": "14538d884258-2", "text": "been sent by the original information sources, which in our case are: AbnormalityDetector, \nSensorDiagnostic, and ActivityObserver. \nHowever, the adherence to Expert Doer  would conflict with High Cohesion Principle , because \nthe original information sources would be assigne d an additional responsibility of sending the \nmessages in addition to their primary responsibilit y of determining the relevant information. \nGiven that AbnormalityDetector, SensorDiagnos tic, and ActivityObserver already have non-\ntrivial responsibilities, we should be reluctan t to assign them any additional responsibility. \nA key strength of the given design is that most objects have a low dependency on other objects: \nthey only report their results back to the Cont roller. Only the Controlle r has many need-to-know \nresponsibilities, such as isOutOfRange , isFaulty , and isExercising . This approach \nresults in a low cohesion for the Controller. Al so, the given design achieves low coupling on most \nobjects except the Controller, since other objects are not concerned with communicating data \nother than to the Controller. This is a common tr adeoff in design of real systems which achieves \ncentralization and understandability of the code. Although the Controller has many", "source": "Page 565", "chapter": "9"}
{"id": "ebdfc684e792-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  552 \ncommunication responsibilities, the task is si mplified because the communications follow a \nuniform  pattern: reading \uf0aeclassifying \uf0aealerting. There is one place to look for understanding the \nsystem flow: all sensing tasks follow a uniform chain of actions: \ndata := readSensor( ): Alerter : SensorReader\n[ ok == FALSE ]: Classifier : Controller\nok := isAnomalous( data )\noptsend( Alert )check datawakeup\n \nWe will slightly improve upon this design in the next sequence diagram. \nOne may believe that merging some of the c oncepts would simplify the given design. For \nexample, FailureDetector may appear redundant and SensorDiagnostic sufficient to assume both \nresponsibilities: \u201crun the tests\u201d and \u201cinterpret the re sults.\u201d This assumption would be true only if \none or both of these responsibilities are trivial to implement. \nOther candidates for simplification include: ActivityObserver, ActivityClassifier, and \nActivityModel. Again, this assumption would be true only if some or all of these responsibilities \nare trivial to implement. However, although r eading the activity sensor may not be complex, \nactivity classification is a very complex task. To become convinced, I urge the reader to try to", "source": "Page 566", "chapter": "9"}
{"id": "ebdfc684e792-1", "text": "think about an algorithm that takes acceleromete r input and decides if it represents exercise. I \nsuspect that several more classes would be need ed for a good design, rather than merging the \ngiven three classes. \nTaken to the extreme, this strategy of simp lification would lead to three responsibilities: \n\u201csensing,\u201d \u201cclassification,\u201d and \u201calerting.\u201d However, such \u201csimplification\u201d would actually make \nthe design worse, because each of the associated concepts would be bloated with complex \nresponsibilities. The complexity would be just shif ted from the structure between the classes into \nthe classes themselves. In effect, the complexity  would be hidden inside individual classes. The \nstructure would appear simple, but each class would be very complex! In terms of design principles, the new design would exhibit loose coupling (good) but also low cohesion (bad). We \ncannot avoid the elementary computations needed for \u201csensing,\u201d \u201cclassification,\u201d and \n\u201calerting\u201d\u2014all we can do is to redistribute tho se computations. Good design helps us expose the \nconceptual structure of the computations a nd distribute them across several classes. \nThere is a more subtle coupling problem with the draft design. ActivityClassifier cannot decide if", "source": "Page 566", "chapter": "9"}
{"id": "ebdfc684e792-2", "text": "There is a more subtle coupling problem with the draft design. ActivityClassifier cannot decide if \nthe patient is exercising based on individual samples from the motion sensor. It must maintain a time series data and perform continuous classifi cation of the patient activity. As a result, \nActivityClassifier needs to be \u201cstatefull\u201d  and will maintain a Boolean attribute isExercising . \nEarlier we mentioned that VSafeR anges will also maintain the sa me state variable. The coupling \nproblem arises because the system must ensure th e consistent value for duplicate copies of the", "source": "Page 566", "chapter": "9"}
{"id": "3ccd18ef93c4-0", "text": "Solutions to Selected Problems 553\nstate variable isExercising . This problem can be avoided by maintaining a single copy of \nisExercising  and retrieving it when needed, as shown in this modified design: \nvital := readVitalSign( ): VSafeRanges : VitalSignReader\nwakeup\n[ abnormal == TRUE ]: AbnormalDetect: Controller\nranges := getValues( isExer )abnormal := isOutOfRange(vital, isExer)\noptsend( Hospital Alert Abnormal Vitals )check if in/out: ActivityClassif\nisExer := isExercising()\n \n \nProblem 2.36 \u2014 Solution \n \n \n \nProblem 3.1 \u2014 Solution \n \nProblem 3.2 \u2014 Solution \nWe can name the states as desired, but we mu st ensure that the en tire state space is covered  in our \nstate diagram. The state space is shown in the figur e (a). There are four different states, but there \nis only one type of the event: button-pushed . The corresponding UML state diagram is shown in \nthe figure (b).", "source": "Page 567", "chapter": "9"}
{"id": "66596d28780e-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  554 \nCounting Arming Lockcounter = 0  (if counting down)\nor: duration \uf020\uf0b3threshold\n(if counting up)\nInitializing Stopped\nunlocklockPaused\nresume\npauseState spaceBulb 2\nBulb 1UnlitLit\nUnlit LitState spaceBulb 2\nBulb 1UnlitLit\nUnlit Lit\n(a) (b)button-pushed\nbutton-pushedbutton-pushed button-pushedState diagram\nBulb1 lit\nBulb2 unlit\nBulb1 unlit\nBulb2 litBoth bulbs \nunlit\nBoth bulbs \nlitbutton-pushed\nbutton-pushedbutton-pushed button-pushedState diagram\nBulb1 lit\nBulb2 unlit\nBulb1 unlit\nBulb2 litBoth bulbs \nunlit\nBoth bulbs \nlit\n \n \nProblem 3.3 \u2014 Solution \n(a) \nList of states: \n\uf0b7 Counting  \u2013 In this state, the auto-locking subsystem is counting down (or, up) for the \nduration of the timeout time. (We are assu ming that the lock is currently open.)", "source": "Page 568", "chapter": "9"}
{"id": "66596d28780e-1", "text": "\uf0b7 Stopped \u2013 In this state, the auto-locking subsyste m is idle waiting for the user to open the \nlock. (We are assuming that the lock is currently closed.) \n\uf0b7 ArmingLock \u2013 In this state, the auto-locking subsystem is arming the lock device. \n\uf0b7 Initializing \u2013 In this state, the auto-locking subsystem is initializing the timer for the \nrequested duration of the timeout time. \n\uf0b7 Paused \u2013 In this state, the counting is suspende d (it has not reached the threshold yet) \neither for a given period or indefinitely. \n(b) \nList of events:  \n\uf0b7 Counter expired  \u2013 counter = 0  (if \ncounting down), or: duration \uf0b3 \nthreshold  (if counting up) \n\uf0b7 Lock  \u2013 User requested arming the lock \n\uf0b7 Unlock  \u2013 User requested disarming the lock \n\uf0b7 Pause \u2013 User requested pausing the countdown \n\uf0b7 Resume \u2013 User requested resuming the countdown \nNotice that for the remaining two transitions ( Arming  \uf0ae \nStopped , and Initializing  \uf0ae Counting ) the transition is \nautomatic (after the state activity is completed) and it is not caused \nby an event. \n \nProblem 3.4: Virtual Mitosis Lab \u2014 Solution", "source": "Page 568", "chapter": "9"}
{"id": "66596d28780e-2", "text": "Problem 3.4: Virtual Mitosis Lab \u2014 Solution \nInitial part of the state transition table is show n in Figure H-11. The stages follow each other in \nlinear progression and there is no branching, so it sh ould be relatively easy to complete the table.", "source": "Page 568", "chapter": "9"}
{"id": "c773c398ca84-0", "text": "Solutions to Selected Problems 555\n  StateMachine\n#  states : Hashtable\n#  current : Integer\n#  completed : boolean\n+  next() : Object\n+  complete() : Object+  back() : ObjectThe design is changed so that the Boolean attri bute \u201cnextStageEnabled\u201d is abandoned in favor of \nsplitting each mitosis stage into two states: stage-started  and stage-completed . \nNotice that the domain model in Figure H-6 does not include a concept \nthat would simulate the interph ase stage. Because interphase does not \ninclude any animation and requires no user\u2019s work, we can add a dummy \nobject, which is run when interphase is entered and which immediately \nnotifies the state machine that  interphase is completed. \nPart of the state diagram is shown in Figure H-12. I feel that it is easiest to \nimplement the sub-states by toggling a Boolean va riable, so instead of subdividing the stages into \nstage-started  and stage-completed  as in the table in Figure H-11, the class StateMachine  \nwould have the same number of states as there are stages of mitosis. The Boolean property \ncompleted , which corresponds to the \u201cnextStageEnable d\u201d attribute in Figure H-6, keeps track", "source": "Page 569", "chapter": "9"}
{"id": "c773c398ca84-1", "text": "of whether the particular stage is completed allowi ng the user to proceed to the next stage. The \nclass, shown at the right, has three methods: next() , complete() , and back() , which all \nreturn Object, which is the output issued when  the machine transitions to the next state. Build started\nBuild completedInterphase startedInterphase completedCurrent stateNext state\nOutputInput\nNextCompletion\nnotification\nBuild completed\nBuild end-display\nInterphase started\nInterphase start-display\nInterphase completed\nInterphase end-display\nProphase started\nProphase start-display\nProphase startedProphase completed\nProphase end-display run ProphaseAnimatorProphase startedBack\nBuild started\nBuild start-display\nBuild started\nBuild start-display\nInterphase started\nInterphase start-display\nInterphase started\nInterphase start-display\nFigure H-11. Partial state transition table fo r the mitosis virtual lab (Problem 3.4). The\nempty slots indicate that the input is ignored and the machine remains in the current state.", "source": "Page 569", "chapter": "9"}
{"id": "2ba7e0708698-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  556 \n \nProblem 3.5 \u2014 Solution \nWe identify the two most important entities of the inventory tracking system as Shelf (there are \nmany shelves in the store), and Replenish-Task. Notice that there may be more than one products \nout-of-stock at once. Similarly, there may be sever al replenish tasks currently in the system. See \nFigure H-13 for their state diagrams. \nThe task j is created when a shelf replenishment is needed, i.e., the system detects \u201clow-stock\u201d \nand \u201cout-of-stock\u201d states for a product, rather  than when the store manager assigns a store \nassociate to the task. This way the system can send periodic reminders: \n- to the store manager, in case the replenishmen t task is not assigned within a specified time \n- to the store associate, in case the replenishment task is not completed within a specified time. mitosis stage i\ncomplete /\nshow end-displaynext /\nwarningmitosis stage i\uf02d1\nnext /\nshow \nstart-display\nback / show start-display back / show start-displaycompleted = false completed = truenext /\nshow \nstart-displaymitosis stage i+ 1\ncompleted = true completed = true", "source": "Page 570", "chapter": "9"}
{"id": "2ba7e0708698-1", "text": "show \nstart-displaymitosis stage i+ 1\ncompleted = true completed = true\nFigure H-12: Partial state diagram for the mitosis virtual lab (Problem 3.4).", "source": "Page 570", "chapter": "9"}
{"id": "fdc348a9983b-0", "text": "Solutions to Selected Problems 557\nWe may consider introducing an additional state for the replenishment task, Task-In-Progress, so \nthat the store associate can inform the system that he or she is currently restocking the shelf. The \npurpose of this state is to avoid unnecessary messages about a depletion state to the store \nmanager. For example, if the store associate put s one item on an empty shelf and the customer \nimmediately removes this item, the system w ould generate an unnecessary \u201cout-of-stock\u201d \nmessage for the store manager. The system should al so start a timer to send reminders if the task \nis not reported as completed within a specified interval (see the discussion of a potential use case \nUC-8: StartReplenishing in the solution of Problem 2.10). \nProblem 3.6 \u2014 Solution \n item-addeditem-removed\n[count \uf0b3THRESHOLD]\nShelf_i state:\nTask_j state:Product_i\nstocked\ntask-assigned /\nnotify-associateitem-removed\n[count < THRESH] /\nnotify-manager\nitem-added\nitem-addeditem-removed\n[THRESH > count > 0]\nProduct_i\nlow-stockitem-removed\n[count = 0] /\nnotify-manager\nitem-addedProduct_i\nout-of-stock\ntask-completed /\nnotify-managertimeout /\nnotify-associatetimeout /", "source": "Page 571", "chapter": "9"}
{"id": "fdc348a9983b-1", "text": "task-completed /\nnotify-managertimeout /\nnotify-associatetimeout /\nnotify-manager\nTask_j\nneededTask_j\ncompletedTask_j\nassigned\nFigure H-13: State diagrams for Shelf and Task entities (Problem 3.5).", "source": "Page 571", "chapter": "9"}
{"id": "6f0148019bb4-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  558 \nProblem 3.7: Elevator Control \u2014 Solution \nPart of the interaction diagram is shown in Figure H-14. The UML diagram shows only the \ninteraction sequence for the case when the elevator car arrives at floor f. The other two cases, \nwhen the car departs from the current floor and wh en a physical button is pushed are left to the \nreader as exercise. Notice that we do use several  \u201copt\u201d choices rather than an \u201calt\u201d choice, \nbecause the events (car-arrived, car-dep arted, button pushed) are not mutual \nalternatives. Although car-arrived and car-dep arted cannot happen at the same time, \nthey should not be represented with an \u201ca lt.\u201d Because it may be that neither one of \nthem happened, it is not appropriate to show them as:  \nIF (car-arrived) THEN do- actions-when-car-arrived  \nELSE do-actions-when-car-departed \n(Note : Compare this solution to that of Problem 5-6.) \n setIlluminate(\nfalse)dcf : DoorControl : CarControl : InfoPanel\narrivedAt(f : int)start: ElevatorMain\nloopobf : OutButton ibf : InButton\nilluminate()readFloorSensors()\nreadButtons()", "source": "Page 572", "chapter": "9"}
{"id": "6f0148019bb4-1", "text": "illuminate()readFloorSensors()\nreadButtons()\nadjustDisplay()\nstopMotor()stopAt(f : int)\nopenDoors()\nstartMotor()setIlluminate(false)\nilluminate()opt car  arrived at floor f\ncloseDoors()operateDoors()\n{30 sec.}\noptbutton(s) pushedcar departed opt\nFigure H-14. Partial interaction diagram for the elevator problem (Problem 3.7).", "source": "Page 572", "chapter": "9"}
{"id": "8b62c6f5ab9b-0", "text": "Solutions to Selected Problems 559\nProblem 3.8: OCL Contract for Auction Website \u2014 Solution \nFirst, we need to add one attribute and one opera tion to the original class diagram, to make the \nsolution easier. We will add an attribute heldBy : BuyerInfo  on the class ItemInfo , \nwhich refers to the person to whose name the item is currently reserved (if any). To access this \nattribute, we add operation  getHeldBy() : BuyerInfo  on the same class. \nFinally, we will also need to check for the high est bidder. Unlike old-fashioned auctions where all \nparticipants are in the same room, we cannot assu me that the highest bid will arrive last. The \norder of bid arrivals will depend on the time an  order is placed as well as on network delays. \nTherefore, bids must be explicitly ordered. There is an interesting side issue of how and when the \nclass BidsList  determines the highest bidder. One option is to introduce an operation \ngetHighestBidder() : BuyerInfo  and do sorting every time this operation is invoked. \nAnother option is to sort the bids every time a ne w bid is added, in which case the highest bid is \naccessed as the first item (head) of the list. The r eader may wish to consider which solution is", "source": "Page 573", "chapter": "9"}
{"id": "8b62c6f5ab9b-1", "text": "more efficient. Here, we will opt for th e latter solution, and so the link between BidsList  and \nBid in the original class diagram needs the label {ordered}  near the Bid class symbol, \nindicating that the list of bids is  ordered (from highest to lowest). \nWe will assume that an item in the catalog is e ither available for bidding (then its auction is \nopen), or reserved (then its auction is temporar ily closed, until the payment is processed). If the \nhighest bidder reneges and abandons the bid, then the item again becomes available. Otherwise, if \nthe payment is successful, the item is removed fro m the catalog. Therefore, for the preconditions, \nall we need to check is that the item is not reserved: \ncontext Controller::closeAuction(itemName) pre: \n    !self.findItem(itemName).isReserved()  \nAs for postconditions, we have to ensure that (1 ) the item is reserved and (2) under the name of \nthe highest bidder (given that there was at least one bidder): \ncontext Controller::closeAuction(itemName) post: \n    findItem(itemName).isReserved() \n \ncontext Controller::closeAuction(itemName) post: \n    if not", "source": "Page 573", "chapter": "9"}
{"id": "8b62c6f5ab9b-2", "text": "context Controller::closeAuction(itemName) post: \n    if not \n        findItem(itemName).getBidsList()->isEmpty()     then \n        findItem(itemName).getHeldBy().getName().equals( \n            findItem(itemName).getBidsList()->first(). \n                getName()@pre \n        )  \nNotice that all of the above operations return a single object, except for getBidsList()  which \nreturns a collection. In the latter case, we use the arrow symbol ->. Recall that BidsList", "source": "Page 573", "chapter": "9"}
{"id": "d4d80204bde8-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  560 \nmaintains an {ordered}  list of Bids, so the returned collection is a sequence , and the highest \nbidder is accessed as the first item of the sequence. \nProblem 3.9 \u2014 Solution \n \nProblem 3.10 \u2014 Solution \n \nProblem 3.11 \u2014 Solution \n(a) \nWe identify the elements of the problem domain and show in the following context diagram: \n(1) Patient(3) Vital sign\nsensors(2) Hospital(6) BatterySystem-to-be\n(5) Sensor \nfailure modes(4) Normal ranges for vitals \n(incl. resting vs. exercise)\n(9) Communication system(7) Battery-low threshold\n(8) Motion sensor\n \nThe system-to-be is shown as composed of subsystems  (shown as smaller boxes inside the \nsystem\u2019s box) that implement different requirement s. There are nine sub-domains of the problem \ndomain. The key sub-domains are the patient (1) and the hospital (2). Information about normal \nranges for vital signs (4) and the description of fa ilure modes (5) for sensors are expected to be \nrelatively complex. They need to be specified during the requirements analysis phase, with help", "source": "Page 574", "chapter": "9"}
{"id": "d4d80204bde8-1", "text": "relatively complex. They need to be specified during the requirements analysis phase, with help \nof domain experts. Therefore, they are shown as distinct parts of the problem domain. Although \nthe threshold for low battery power (7) is a single numeric value, such as 10 %, we expect that \nspecial domain expertise is needed to estimate the remaining battery lifetime based on raw data, \nsuch as voltages. Given that wireless comm unication link is relatively unreliable and the \nmonitoring device needs to transmit safety-critical information about patient\u2019s state, we may also \nneed to explicitly consider the character istics of the communication system (9). \nThe following table summarizes the system requirements, based on Problem 2.3 \u2014 Solution: \nRequirement Problem domain Action required on problm dom. \nREQ1: monitor and alert \nabout abnormal vitals patient, specifications of \nnormal vitals, hospital sensing, notifying \nREQ2: monitor activity and \nadjust safe ranges patient, model of activity, \nspec\u2019s of normal vitals sensing, modeling, editing", "source": "Page 574", "chapter": "9"}
{"id": "2f24027e6eec-0", "text": "Solutions to Selected Problems 561\nREQ3: verify sensors and \nalert of failure sensors, failure modes, \nhospital testing, notifying \nREQ4: monitor battery and \nalert of low power battery, patient sensing, notifying \nREQ5: edit vitals safe ranges sp ec\u2019s of normal vitals editing \n \nProblem frames: \nREQ1 requires sensing or observing data from a problem domain (patient). The alert notification \nis considered information display and can be done in many different ways: as a flashing light or a \nblurting sound. Recall that in Problem 2.3 \u2014 So lution we assumed that the instruments include \nthe control hardware and software and our softwa re-to-be will interact with the instruments via \nAPIs to obtain the readings. If this were not th e case, to satisfy REQ1 we would also need a \ncommanded behavior  frame. Such frame would allow other parts of our system to issue \ncommands to inflate the cuff for blood pressure me asurements or activate other sensors during a \nmeasurement cycle. For the sake of simplicity, we assume that such software is already provided \nwith the sensors. Therefore, the most appropriate problem frame for REQ1 is information display . \nHere is the information display frame for REQ1: \nacInformation\nmachineDisplay ~\nReal world\nc: PS! {Blood pressure, Heart rate,", "source": "Page 575", "chapter": "9"}
{"id": "2f24027e6eec-1", "text": "machineDisplay ~\nReal world\nc: PS! {Blood pressure, Heart rate,\nNormal/safe ranges}    [C3]a: PS! {Systolic/Diastolic BP, Pulse count\nSafe-range values} [C1]\nb: VM! {AlertAbnormalVitals}                [E2]Alert ~ \nAbnormal \nvitalsVitals \nmonitoringVitals \nmonitoring\nd: HD! {Displayed info}  [Y4]Hospital \ndisplayC\nDisplaybd\nC\nXCausal domain\nLexical domainC\nXCausal domainLexical domainReal world\nSafe\nrangesPatientC\nX REQ1\n \nThe above frame says that the requirement (in the ellipse) that the alert signals ( d) are generated \nwhen patient vitals ( c) are abnormal will be implemented so that the monitoring software records \nthe sensory data ( a) and sends commands ( b) to the alerts display, when appropriate. The real \nworld consists of two independent domains: the patient (causal domain) and the table of \nsafe/normal vital signs (lexical domain). The latter may be stored in a computer database, but all \nthat matters here is that it is available for lookup when deciding about the measured vitals. \nWe need to include the comparison with safe ranges as part of our problem specification. In", "source": "Page 575", "chapter": "9"}
{"id": "2f24027e6eec-2", "text": "We need to include the comparison with safe ranges as part of our problem specification. In \naddition, the safe ranges may be altered depending of whether the patient is exercising (REQ2) or \nby a remote medical professional (REQ5). The most appropriate problem frame for both REQ2 and REQ5 is simple workpieces , with two different users: exercise monitoring software and \nremote medical professional. Here is the simple workpieces frame for REQ2:", "source": "Page 575", "chapter": "9"}
{"id": "26ff61130319-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  562 \nacEditing toolWorkpieces\nCommand\neffects\nc: SR! {Ranges correspond to activity level}  [Y3] a: ES! {EditingOperations} [E1]\nb: EM! {UserCommands} [E2]Editing \nsoftwareEditing \nsoftwareModified \nsafe ranges\nExercise \nmonitoring \nsubsystem . C\nUserbbSafe \nrangesXSafe \nrangesX\nREQ2\n \nNotice that the workpieces domain of safe ranges is  the same lexical domain as in the information \ndisplay frame for REQ1. In case of REQ2, the user  issuing the editing commands is an exercise \nmonitoring subsystem, which unlike a human user is a causal domain. We model the exercise \nmonitoring subsystem as an information display  frame: \nacReal world\nDisplay ~\nReal world\nc: P! {Not-exercising, Exercising, Cooling-off}  [C3] a: P! {Motion data}       [C1]\nb: AM! {Commands}    [E2]Activity \nmonitoringActivity \nmonitoringRanges ~ \nPatient activity\nRanges \nediting \nsubsystem . C\nDisplaybdPatient\nC\nREQ2\uf0a2\nd: RE! {Adjusted ranges}  [Y4]Information\nmachine", "source": "Page 576", "chapter": "9"}
{"id": "26ff61130319-1", "text": "d: RE! {Adjusted ranges}  [Y4]Information\nmachine\n \nThe \u201cdisplay\u201d domain for this frame is the ra nge editing subsystem represented by the above \nworkpieces frame. The activity monitoring inform ation machine uses motion sensors to detect \npatient motion. If it detects that the patient if exercising, it issues a \u201cdisplay command\u201d, which is \nactually an editing command for the safe ranges editing software (the workpieces frame). \nThe frame concerns for the above simple wor kpieces frame include: overrun\u2014the user (exercise \nmonitoring software or clinician) should not be  able to enter wrong values for safe ranges; \ncompleteness\u2014the system should ensure that all required information for safe ranges is provided. \nIn our problem, frame concerns will mainly d eal with defining what can be sensed from the \nenvironment and how. For example, specifications of normal vital signs may include thresholds \nthat depend on person\u2019s age, gender, chronic c onditions, etc. Similarly, sensing a faulty sensor \nmay involve checking if the measurements are unus ual, such as zero. If the activity sensor does", "source": "Page 576", "chapter": "9"}
{"id": "4bbea40e3fac-0", "text": "Solutions to Selected Problems 563\nnot indicate the slightest activity for an extended period of time, it may be because the sensor is \nfaulty. (Notice that simultaneous variations in th e patient\u2019s vital signs can be considered as an \nindication of activity to verify the activity sensors.) \nRunning diagnostic tests (REQ3) is a required behavior  frame: \nTesting \nsoftwareTesting \nsoftwareVitals \nsensorsTesting \nregimeab\nCControl\nmachineControlled\ndomainRequired\nbehavior\nb: VS! {NormalMode, TestMode}  [C3] a: TS! {RunTest[i]}       [C1]\nVS! {TestResult[i]}   [C2]REQ3\n \nInformation display frame represents REQ4 and simple workpieces frame represents REQ5. \nThese are not described here but le ft to the reader as exercise. \n \n(b) \nFirst, we may represent the patient\u2019s health condition with a following state diagram: \nphysiological-systems-weakened /\ntreatment-unsuccessful /illness-contracted /\nimmune-response-successful /Patient heath-condition state diagram:\ntreatment /treatment-successful /Healthy SickDeteriorating\nRecovering\n \nOur system will model the patient\u2019s health based  on the measurements of patient\u2019s vital signs.", "source": "Page 577", "chapter": "9"}
{"id": "4bbea40e3fac-1", "text": "The state diagram for measuring patient\u2019s vital signs is as shown:", "source": "Page 577", "chapter": "9"}
{"id": "b3cb315fbf11-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  564 \nvitals-out-of-range /\nalert\nvitals-in-range /timer /\nread-sensors     \ntimer /\nread-sensorsObserved vitals state diagram:\nNormal Abnormal\nAcquisition error\ndo: log errorunsuccessful-\nsensor-readout /Measuring\ndo: read BP\ndo: read HR\ntimer /\nread-sensors\n \nThe \u201cnormal\u201d state roughly corresponds to the \u201ch ealthy\u201d state and the \u201cabnormal\u201d state roughly \ncorresponds to the \u201csick\u201d state. Our system ca nnot achieve an accurate correspondence based \nonly on measuring few vital signs. The \u201cmeasured\u201d state indicates the interval during which the \nnext set of measurements is acquired, while the outcome is unknown. This state is derived from \nthe problem description, which states that vital sign measurements cannot be obtained \ninstantaneously. We assume that the vitals me asurement cycle will be continuously repeated, \nregardless of the measured condition, such as \u201cnorma l\u201d or \u201cabnormal.\u201d We also assume that alerts \nare sent out in a fire-and-forget manner\u2014the syst em does not wait for someone at the hospital to \nconfirm that they received the alert. \nAn important question is, what happens if, af ter an abnormal condition, a normal condition is", "source": "Page 578", "chapter": "9"}
{"id": "b3cb315fbf11-1", "text": "measured? Should the system revoke a previous alert about the abnormal condition or should it \ncontinue working silently? An isolated abnor mal measurement may be due to the system \nanomaly. This raises an issue of whether the al ert to the remote hospital should be sent after \nimmediately recording a single abnormal conditio n, or after a certain number of abnormal \nrecordings over a given interval? Another issue is how many subsequent alerts should be sent? \nShould the system keep sending out alerts until th e abnormal state lasts? Such questions can be \nanswered only in consultation with the customer . These are important issues that probably would \nbe missed if it were not for this kind of system analysis. \nWe note also that unsuccessful data acquisition l eads to \u201cAcquisition error\u201d state. Transition from \nthis state to other states is not defined by th e requirements, so should be followed up on with the \ncustomer for clarification. \nFinally, we may wish to consider what happens if the communication link with the remote \nhospital is down. The problem description does no t mention such possibility, so it should be \nfollowed up on with the customer. \nThe state diagram representing a sensor\u2019s operational condition is as shown:", "source": "Page 578", "chapter": "9"}
{"id": "82ac2ad5d548-0", "text": "Solutions to Selected Problems 565\nfailure-detected /\nalert\nfunctional /timer-expired /\nrun-tests     Sensor diagnostics state diagram:\nOperational FaultyTested\n \nThe state \u201ctested\u201d represents the uncertain interv al during which the instrument is diagnosed. We \nassume that once a sensor is tested as \u201cfaulty,\u201d the test is to be trusted and this is the terminal \nstate\u2014the sensor cannot suddenly go back to an  \u201coperational\u201d condition. The system must be \npowered off for repair, rebooted and the sensor will start from the initial state. \nNote that the above assumption may not always be  true. For example, the sensor may be shortly \ndisplaced or detached from the patient\u2019s body and then fall back in place. Such scenarios must be \nanalyzed with a domain expert to decide a suitable domain model. We must also account for a \npossibility that the sensor, although fully f unctional, became detached from the patient. \nThe state diagram for battery power is as shown: \nBattery state diagram:\nbelow-threshold /\nalert\nOperational Lowno-energy /\nDrained\n \nWe assume that even when the battery power is sensed as below the threshold, this battery will \ncontinue providing power for some time. Therefore, \u201clow\u201d is not considered a terminal state.", "source": "Page 579", "chapter": "9"}
{"id": "82ac2ad5d548-1", "text": "However, it is unclear if the device can con tinue functioning correctly during the low-power \nbattery state (before it becomes drained). Will th e vitals measurements be accurate when battery \npower is low? Should we just shut the device o ff or let it continue operating (possibly incorrectly) \nuntil the battery is drained? This issue n eeds to be researched more thoroughly. \nThe patient\u2019s activity state diagram is as shown:", "source": "Page 579", "chapter": "9"}
{"id": "a5e5cb1c2c70-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  566 \nsustained-vigorous-motion /\nadjust-safe-ranges\nvigorous-motion /Patient activity state diagram:\nslowed-motion /\ntime-interval /\nadjust-safe-rangesExercising\nCooling-offNot-exercising\nmoderate-motion /\nno-motion /Active Resting\n \nWe assume that regular activities, such as relaxe d walking, do not significantly affect patient\u2019s \nvital signs compared to the resting state; only a vigorous exercise does. When the patient stops \nexercising, the state diagram does not immediately enter the resting state. The intermediate state \n\u201ccooling-off\u201d symbolizes that the safe ranges should not be reset abruptly for the resting state just \nbecause the patient suddenly stopped exercising. This issue points to the need for a precise \ndefinition of \u201csustained vigorous motion.\u201d It is not appropriate to change the safe ranges \nfrequently for each swift movement or sudden moments of stillness. \n (c) \nYes, as seen from the state diagrams in part (b ) the system does need to behave differently for \nreporting abnormal vital signs versus device failur es. In case of a device failure, part or whole of \nthe measurement system will become unusable  and should cease measuring the corresponding", "source": "Page 580", "chapter": "9"}
{"id": "a5e5cb1c2c70-1", "text": "the measurement system will become unusable  and should cease measuring the corresponding \nvital signs (the terminal state in the sensor st ate diagram). Unlike this, even after detecting \nabnormal vitals, the device should contin ue cycling through the measurements. \nThere are additional issues related to alert reporting.  At first, it may appear that alerts about \nabnormal vital signs have higher priority than al erts about sensor failures or any other alerts. If \nthe patient is exhibiting abnormal vitals, then the remote hospital may need to respond rapidly to \nsave the patient\u2019s life. If a sensor is failing, th is is not likely an urgent matter and can be \naddressed by regular maintenance procedures. Howe ver, one has to wonder how meaningful an \nabnormal-vitals alert is if at the same time  sensors are diagnosed as faulty! One may even \nconclude that sensor-failure alerts should have higher priority than abnormal-vitals alerts. \nOne may wish to go beyond what is asked in the initial problem statement and conceive features \nsuch as alerting the patient about instrument failu res (the problem statement requires only alerting \nthe hospital). Also, if vital signs are abnormal fo r a long time, or no activity is detected from the \npatient, then we might add a feature to activate a sound alarm on the device to alert the patient or", "source": "Page 580", "chapter": "9"}
{"id": "a5e5cb1c2c70-2", "text": "people nearby (again, the problem statem ent requires only alerting the hospital). \nIn case of abnormal vitals, domain analysis shoul d consider how to ensure that the alert is \nattended to. In part (b) above we considered  whether to send out alerts for each observed \nabnormality or only after accumulating evidence of abnormality over an interval. If individual", "source": "Page 580", "chapter": "9"}
{"id": "24902b81758f-0", "text": "Solutions to Selected Problems 567\nalerts are sent, one may assume that recurring alerts will attract operator\u2019s attention at the \nhospital. On the other hand, if a single cumulative al ert is sent, then the system must ensure that \nthe operator acknowledges the receipt of each such alert. When considering the quantity of alert \nmessages for various conditions, we should rememb er that this is a battery-powered device and \nthe need for battery conservation dictates that communication and computing tasks be prioritized. \nIn addition, the battery may die before ensuring that the operator is made aware of the alert, \nwhich means that the hospital-based part of the system must ensure alert reception. This is \nbecoming a system design issue, rather than requirements analysis, so I leave it there. \n \nProblem 3.12 \u2014 Solution \n(a) The following table lists the responsibilities id entified from Problem 3.11 \u2014 Solution and names \nthe concept that will be assigned to carry on these responsibilities: \nResponsibility Concept \nRead out the patient\u2019s blood pressure from a sensor Blood Pressure Reader \nRead out the patient\u2019s heart rate from a sensor Heart Rate Reader \nCompare the vital signs to the safe ranges and detect  if the vitals are outside Abnormality Detector \nHold description of the safe ranges for patient vital signs; measurements \noutside these ranges indicate elevated risk to the patient; should be", "source": "Page 581", "chapter": "9"}
{"id": "24902b81758f-1", "text": "outside these ranges indicate elevated risk to the patient; should be \nautomatically adjusted for patient\u2019s activity Vitals Safe Ranges \nAccept user input for constraints on safe ranges Safe Range Entry \nRead the patient\u2019s activity indicators Activity Observer \nRecognize the type of person\u2019s activity Activity Classifier \nHold description of a given type of person\u2019s activity Activity Model \nSend an alert to a remote hospital Hospital Alerter \nHold information sent to the hospital about abnormal vitals or faulty sensors Hospital Alert \nRun diagnostic tests on analog sensors Sensor Diagnostic \nInterpret the results of diagnostic tests on analog sensors Failure Detector \nHold description of a type of sensor failure Sensor Failure Mode \nRead the remaining batter power Battery Checker \nSend an alert to the patient Patient Alerter \nHold information sent to the patient about low battery Patient Alert \nCoordinate activity and delegate work to other concepts Controller \nFurther analysis may reveal that some of the above concepts may be combined into one. For \nexample, the functionality of Sensor Diagnostic  and Failure Detector may turn out to be \noverlapping. However, without further evid ence I leave them as to separate concepts. \n (b) \nThe attributes are listed within the context of the concept they belong to: \nBlood Pressure Reader \n last Reading = last recorded value \n reading Duration = how long a data acquisition interval lasts", "source": "Page 581", "chapter": "9"}
{"id": "de22183ca32c-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  568 \n reading Frequency = the period for data acquisition \nHeart Rate Reader \n last Reading = same as above \uf0ad \n reading Duration  reading Frequency \nActivity Observer \n collection Frequency = period for collecting activity observations \nActivity Classifier \n is Exercising = indication of the need  to adjust the vital signs safe ranges \nHospital Alerter \n contact Info = network address of the alert recipient \nHospital Alert \n patient Identifier = information about the patient  cause = type of the alert \nBattery Checker \n remaining Power  low Threshold = threshold defining when the batter power is considered low \nPatient Alert \n cause = type of the alert \n \n(c) \nA simplified drawing of the domain model is shown below. \nHR \nsensor\nactivity \nsensorBP \nsensoralerts \ndisplay\nalerts \ndisplaybatteryBP&HR \nsensorstriggers\ntriggers\nsendssendsBlood Pressure Reader \u00abboundary \u00bb\n(doing) - last Reading\n- reading Duration\n- reading Frequency\nHeart Rate Reader \u00abboundary \u00bb\n(doing) - last Reading\n- reading Duration\n- reading Frequency\nAbnormality Detector \u00abentity\u00bb\n(doing)\nVitals Safe Ranges \u00abentity\u00bb\n(knowing)\nSafe Range Entry \u00abboundary \u00bb\n(knowing) - value\nActivity Observer \u00abboundary \u00bb", "source": "Page 582", "chapter": "9"}
{"id": "de22183ca32c-1", "text": "Safe Range Entry \u00abboundary \u00bb\n(knowing) - value\nActivity Observer \u00abboundary \u00bb\n(doing) - collection Frequency\nActivity Classifier \u00abentity\u00bb\n(doing) - is Exercising\nActivity Model \u00abentity\u00bb\n(knowing)\ntriggers\nadjustsinforms\ninforms\nusesinformsuses usesinformsHospital Alerter \u00abboundary \u00bb\n(doing) - contact Info\nHospital Alert \u00abboundary \u00bb\n(knowing) - patient Identifier\n-c a u s e\nSensor Diagnostic \u00abboundary \u00bb\n(doing)\nFailure Detector \u00abentity\u00bb\n(doing)\nSensor Failure Mode \u00abentity\u00bb\n(knowing)\nBattery Checker \u00abboundary \u00bb\n(doing) - remaining Power\n-l o w  T h r e s h o l d\nPatient Alerter \u00abboundary \u00bb\n(doing)\nPatient Alert \u00abboundary \u00bb\n(knowing) - causein hospital\non patientspecifiescomputer \ninputin hospital\n \nTo avoid clutter, the Controller concept is  shown separately, in the following figure.", "source": "Page 582", "chapter": "9"}
{"id": "83ad6ff0bc4c-0", "text": "Solutions to Selected Problems 569\nControllerBlood Pressure Reader\nHeart Rate ReaderSensor Diagnostic\nActivity Observer\nBattery Checkerruns\n \nWe may also notice that the period lengths for observations made by our system are related as: \n BP Reader & HR Reader  <  Sensor Diagnostic   <  Activity Observer  <  Battery Checker \nIn other words, vital signs are recorded frequent ly and battery is checked least frequently. These \nrelationships also indicate the priority or relative importance of the observations. \n (d) \nThe following list indicates the concept type, and in case of \u00abboundary\u00bb concepts it indicates the \nboundary device with which the concept is associated: \nBlood Pressure Reader \u00abboundary\u00bb \uf0ab BP sensor \nHeart Rate Reader \u00abboundary\u00bb \uf0ab HR sensor \nAbnormality Detector \u00abentity\u00bb Vitals Safe Ranges \u00abentity\u00bb \nSafe Range Entry \u00abboundary\u00bb \uf0ab computer input \nActivity Observer \u00abboundary\u00bb \uf0ab activity sensor \nActivity Classifier \u00abentity\u00bb \nActivity Model \u00abentity\u00bb \nHospital Alerter \u00abboundary\u00bb \uf0ae alerts display \nHospital Alert \u00abboundary\u00bb \uf0ae alerts display \nSensor Diagnostic \u00abboundary\u00bb \uf0ab BP & HR sensors \nFailure Detector \u00abentity\u00bb Sensor Failure Mode \u00abentity\u00bb \nBattery Checker \u00abboundary\u00bb \uf0ac battery \nPatient Alerter \u00abboundary\u00bb \uf0ae alerts display", "source": "Page 583", "chapter": "9"}
{"id": "83ad6ff0bc4c-1", "text": "Patient Alerter \u00abboundary\u00bb \uf0ae alerts display \nPatient Alert \u00abboundary\u00bb \uf0ae alerts display \nController \u00abcontroller\u00bb", "source": "Page 583", "chapter": "9"}
{"id": "cbd24f8c1d42-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  570 \nProblem 3.13 \u2014 Solution \n \n \n \nProblem 4.1 \u2014 Solution \n \nProblem 4.2 \u2014 Solution \n \nProblem 4.3 \u2014 Solution \n(a) The solution is shown in Figure H-15. (b) The solution is shown in Figure H-16. \n(c) The cyclomatic complexity can be determined  simply by counting the total number of closed \nregions, as indicated in Figure H-16. \nNotice in Figure H-16 (a) how nodes n4 and n5, which call subroutines, are split into two nodes \neach: one representing the outgoing call and the ot her representing the return of control. The \nresulting nodes are connected to the beginning/end of  the called subroutine, which in our case is \nQuicksort itself.", "source": "Page 584", "chapter": "9"}
{"id": "d429f60303a5-0", "text": "Solutions to Selected Problems 571\n \nIn Section 4.2.1 we encountered two slightly different formulas for calculating cyclomatic \ncomplexity V(G) of a graph G. Using the original formula by McCabe [1974] in the case of \nFigure H-16, we have \nV(G) = 22 \uf02d 19 \uf02b 2\uf0b42 = 7 \nNotice that there are a total of 19 nodes in Quicksort and Partition because nodes n4 and n5 are \neach split in two. Alternatively, [H enderson-Sellers & Tegarden, 1994] linearly-independent  \ncyclomatic complexity for the graph in Figure H-16 yields \nVLI(G) = 22 \uf02d 19 \uf02b 2 \uf02b 1 = 6 \nwhich is what we obtain, as well, by a simple rule: \nVLI(G) = number of closed regions \uf02b 1 = 5 \uf02b 1 = 6 \n(Closed regions are labeled in Figure H-16.) \n  x \uf0acp \uf02d1x \uf0acA[r]\nj \uf0acp\nj \uf0a3r \uf02d1\nA[j] \uf0a3x\ni \uf0aci \uf02b1\nExchange \nA[i] \uf0abA[j]\nExchange", "source": "Page 585", "chapter": "9"}
{"id": "d429f60303a5-1", "text": "Exchange \nA[i] \uf0abA[j]\nExchange \nA[i\uf02b1] \uf0abA[r]Start\nStart\np < r\nEndCall \nQuicksortCall Partition\nCall QuicksortYES NOQuicksort:Partition:\nYES NO\nYES NO\nj \uf0acj \uf02b1\nEnd(a) (b)  \nFigure H-15: Flowchart of the Quicksort algorithm (Problem 4.3).", "source": "Page 585", "chapter": "9"}
{"id": "1a339509a30c-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  572 \nProblem 4.4 \u2014 Solution \n \n  \nProblem 5.1 \u2014 Solution \n \nProblem 5.2 \u2014 Solution \nSeller may want to be notified about the new bids ; Buyer may want to be notified about closing \nthe auction for the item that he/she bid for. \nTherefore, good choices for implementing the Sub scriber interface are SellerInfo and BuyerInfo. \nConversely, good choices for implementing the Pu blisher interface are ItemInfo and BidsList. \nItemInfo publishes the event when the flag \u201crese rved\u201d becomes \u201ctrue.\u201d All the BuyerInfo objects \nin the bidders list receive this event and se nd email notification to the respective bidders. \nConversely, BidsList publishes the event when a new Bid object is added to the list. The \nSellerInfo object receives the event and sends email notification to the respective seller. \n n1\nn4n9\nn14n12\nn15n11\nn17n10n8\nn13\nn16n7\nn3n2\nn6R1\nR2\nR3R4\nR5n3\nn6n2\nn5n1\nn4\uf020\uf0a2\nn4\uf0b2\nn5\uf0a2", "source": "Page 586", "chapter": "9"}
{"id": "1a339509a30c-1", "text": "n4\uf020\uf0a2\nn4\uf0b2\nn5\uf0a2\nn5\uf0b2Quicksort:Partition:\n(a) (b)e1\ne2e3\ne4e5\ne6e7\ne8e9\ne10e11\ne12\ne13\ne14\ne15\ne17\ne19\ne20e16\ne18\ne21\ne22\n \nFigure H-16: Graph of the Quicksort algorithm. Nodes n4 and n5 in (a) are split in two\nnodes each, and these nodes are connected to the called subroutine, which in this case is\nQuicksort itself. If Partition subroutine remains separate, the total number of closed\nregions is 5.", "source": "Page 586", "chapter": "9"}
{"id": "79af3e7eaa3a-0", "text": "Solutions to Selected Problems 573\nEvent Publisher Subscriber \nItem becomes \u201creserved\u201d \n(its auction is closed) ItemInfo BuyerInfo \nNew Bid added to an item\u2019s \nlist of bids BidsList SellerInfo \n \nProblem 5.3: Patient Monitoring \u2014 Solution \n \nProblem 5.4 \u2014 Solution \n \nProblem 5.5 \u2014 Solution \n \nProblem 5.6: Elevator Control \u2014 Solution \nTo solve this problem, it is useful to consider the interaction diagram for the \nsystem before the publisher-subscriber pa ttern is introduced, which is given in \nthe solution of Problem 3.7 (Figure H-14) . From the figure, we can see that \nElevatorMain  is suitable as a Publisher-type class, and \nInformationPanel , CarControl , OutsideButton , and \nInsideButton  are suitable as Subscriber-type classes. Notice that \nInformationPanel  and CarControl  need to know the floor at which \nthe elevator car arrived, which they obtain through arrivedAt(floorNum \n: int) . In contract, for OutsideButton  and InsideButton , the caller \nknows which floor is represented by wh ich button and correspondingly calls \narrived() only on the appropriate objects. We could try having a single event corresponding to", "source": "Page 587", "chapter": "9"}
{"id": "79af3e7eaa3a-1", "text": "arrived() only on the appropriate objects. We could try having a single event corresponding to \nthe elevator car arrival at a floor, but there is  a slight problem. Because the Publisher should be \nagnostic about its Subscribers and should notify in discriminately all Subscribers subscribed for a \nparticular event type, we will have the Pub lisher unnecessarily call the objects corresponding to \nthe buttons other than the ones where the elevator car arrived. The only way that I can think of to \navoid this is to introduce n events corresponding to the car arrival to floor i, where 1 \uf0a3 i \uf0a3 n and n \nis the total number of floors. This does not appear as a more elegant solution, so we stay with the \nsolution where all button objects will be notif ied of the elevator car arrival to floor i, but only the \nappropriate objects will turn off the button illumination. 2\nB\nP235791113\nP1L14681012143\n2\nB\nP235791113\nP1L1468101214\n2\nB\nP235791113\nP1L14681012143", "source": "Page 587", "chapter": "9"}
{"id": "3e171f5d91cf-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  574 \nThe interaction diagram is shown in Figure H-17. No tice that this diagram is almost identical to \nthe one in Figure H-14, except for the operation names. The reader should remind themselves of \nadvantages of the Publish-Subscribed d esign pattern described in Section 5.1. \nIn summary, the Publisher will generate three types of events: \narrivedAt(floorNum : int)  informs a Subscriber that the elevator car arrived at floor \nfloorNum . \ndeparted() informs a Subscriber that the car has departed from the current floor. \npressed(floorNum : int)  informs a Subscriber that th e physical button associated with \nfloor floorNum  was pressed. \nAt first, it may appear that the DoorControl  class is also a subscriber for arrivedAt()  \nevents. However, it is not for the following reason. First, the door should be opened only when \nthe elevator car stopped moving. According to the problem description, the arrivedAt()  \nevent will occur when the elevator car is within 10 cm of the rest position at the floor. That is, it setIlluminate(\nfalse)dcf : DoorControl : CarControl : InfoPanel\narrivedAt(f : int)start: ElevatorMain\nloopobf : OutButton ibf : InButton", "source": "Page 588", "chapter": "9"}
{"id": "3e171f5d91cf-1", "text": "loopobf : OutButton ibf : InButton\narrivedAt(f : int)readFloorSensors()\nreadButtons()\nadjustDisplay()\nstopMotor()arrivedAt(f : int)\nopenDoors()\nstartMotor()setIlluminate(false)\narrivedAt(f : int)opt car  arrived at floor f\noptbutton(s) pushedcloseDoors()\ncar departedoperateDoors()\n{30 sec.}\nopt\nFigure H-17. Partial interaction diagram for the elevator problem (Problem 5.6).", "source": "Page 588", "chapter": "9"}
{"id": "7df470a1df7c-0", "text": "Solutions to Selected Problems 575\nmay still be moving. As s hown in Figure H-17, the \nclass CarControl  stops the motor, and only \nwhen this is done, DoorControl  should be asked \nto open the doors. Acknowledging this fact, one \nmay still try to implement the communication \nbetween CarControl  and DoorControl  using \nthe publish/subscribe mechanism. A potential \nsolution is shown in this figure: \nI hope that the reader can appreciate that this would \nbe a much less elegant solution than the one in \nFigure H-17. In addition, CarControl  and \nDoorControl  would be the only \npublishers/subscribers for each other, so there is no \nbenefit of using the publish/subscribe mechanism \nin this case. \nThe above solution is appropriate for a single-\nthreaded case and I cannot think of another wa y to assign publisher and subscriber roles in a \nsingle-threaded case. In case wh ere multiple threads are implemented, the solution might look \nquite different. \nOne issue that may be particularly confusing is whether OutsideButton  and \nInsideButton  objects should actually be considered as P ublishers, rather than Subscribers. In \nthe current scenario where the system is singl e threaded, it would be meaningless to have", "source": "Page 589", "chapter": "9"}
{"id": "7df470a1df7c-1", "text": "the current scenario where the system is singl e threaded, it would be meaningless to have \nOutsideButton  and InsideButton  objects as Publishers, because they would anyway be \ncalled from the main loop ( ElevatorMain ) just to read the physical button status and pass it to \nother objects. This would not be considered a design improvement. \nHowever, if we had a different scenar io, with multiple threads and if each OutsideButton  and \nInsideButton  object were to run in its own thread, th en it would make sense to have them as \nPublishers, because they would directly read in formation from their associated physical buttons. \nI have not considered carefully the merits of a multithreaded solution, but I have some concerns. \nDepending on the number of floors and elevators, there could potentially be a large number of \nthreads required if each button were to run in a separate thread. This may appear as a \nconceptually more elegant solution, but may resu lt in a logistic nightmare of managing so many \nthreads. And the overall gain compared to a si ngle-threaded solution might not be that great. \nMy intuition for a multi-threaded solution would be to have three threads only, one to read the \nfloor sensors and publish this information to other ob jects, another to read all the physical buttons", "source": "Page 589", "chapter": "9"}
{"id": "7df470a1df7c-2", "text": "(inside and outside ones) and publish this informati on to other objects, and the third thread to do \neverything else. \nProblem 5.7 \u2014 Solution \n dcf : DoorControl : CarControl\nstopMotor()\nopenDoors()\nstartMotor()arrivedAt(f : int)subscribe for motor stopped\nsubscribe for door closed\nmotorStopped()\ndoorsClosed()closeDoors()", "source": "Page 589", "chapter": "9"}
{"id": "04fc65f19381-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  576 \nProblem 5.8 \u2014 Solution \n \nProblem 5.9 \u2014 Solution \nBefore considering various design patterns, one should remember that merely using design \npatterns by itself does not make design better.  We know that design patterns may make \nexisting design more complex. However, they sh ould be considered if using design patterns \nwould make the system to better withstand future changes or make the design easier to understand. In other words, there should be a clear, easy-to-explain advantage achieved by \nusing design patterns. \nWhen anticipating future extensions of this sy stem, we should keep in mind that this is a \nmedical domain and reliability is critical. For th e sake of reliability, it may be best to leave \nthe system as is and not add new features. A feature-laden system will be more prone to \ndefects and new features should be considered onl y if their usefulness is clear and significant. \n\uf0b7 First we consider using the Publish-Subscribe  design pattern. We know that Publish-Subscribe  \nhelps reduce coupling between the objects by introducing indirect communication. It also \nsimplifies future extensions that depend on the even ts generated by the Publisher. It is hard to \nimagine in our system what other features might  depend on events such as \u201cvital-sign-acquired\u201d", "source": "Page 590", "chapter": "9"}
{"id": "04fc65f19381-1", "text": "or \u201cvital-sign-abnormal.\u201d Currently there would be  a single subscriber for each event publisher \nand we cannot anticipate that the need would ari se for more subscribers to any of the system \nevents. Good design practice dictates that if something is hard to imagine, it should left out until \nits necessity becomes clear. \nThere is one place where we might anticipate futu re extensions and that is the ability to send \nalerts to multiple destinations. The existing design se nds alerts only to the hospital. It is easy to \nimagine an extension where alerts about patient \u2019s health condition may be sent to family or \nfriends and even the patient himself may be notif ied about his abnormal vitals. In anticipation of \nsuch future extensions, we would introduce a Publis her of alerts to which an arbitrary number of \nSubscribers can seamlessly be subscribed. A key issue is whether to have each SensorReader \nimplement the PublisherOfAlerts interface. I am again reluctant to add such new responsibilities \nto SensorReaders, so I would introduce a mediator  between a SensorReader and Alerter. The \nSensorReader would remain the same except that it would send alerts to a mediator. The mediator \nwould implement the PublisherOfAlerts interface and different Alerters would implement the \nSubscriberForAlerts interface.", "source": "Page 590", "chapter": "9"}
{"id": "04fc65f19381-2", "text": "SubscriberForAlerts interface. \nWe now consider the other reason for introducing  Publish-Subscribe : a potential coupling \nreduction. We know that the existing Controller h as relatively high coupling coefficient, because \nit has many need-to-know responsibilities\u2014see Probl em 2.35 \u2014 Solution. However, before we \nbring in the additional complexity with Publish-Subscribe , we may consider the following design:", "source": "Page 590", "chapter": "9"}
{"id": "db656670fee5-0", "text": "Solutions to Selected Problems 577\nwake-up: AlerterA : SensorReaderA\n[ bad == TRUE ]: ClassifierA : Controller\nbad := isAnomalous( data )\noptsend( Alert )check dataread dataincrement\ncounterloop [ forever ]\n[ counter % PERIOD_A == 0 ] opt\n \nIn this new design, the Controller has only one  responsibility. It counts the period for each \nsensing type and wakes up the corresponding Sensor Reader. We avoid using timers and the Controller runs a \u201cbig loop\u201d that keeps track of the periods for data checks. Each Sensor Reader \n(Blood Pressure Reader, Heart Rate Reader, Activ ity Observer, Sensor Diagnostic, or Battery \nChecker) acquires two new responsibilities: \n- call a Classifier for its sensory data to detect anomalies \n- send an alert to the Alerter in case of a data anomaly \nIn Problem 2.35 \u2014 Solution, we argued that no additional responsibilities should be assigned to \nsensor readers. Here I would argue that the above  two responsibilities are trivial and the resulting \ncoupling reduction for the Controller is significan t. The key point is that a sensor reader is \nuniquely associated with its classifier, so this is a \u201cgood\u201d type of coupling. The reader just passes", "source": "Page 591", "chapter": "9"}
{"id": "db656670fee5-1", "text": "the acquired data to the classifier, checks the result of isAnomalous() , and if true sends an \nalert to the Alerter. This is a fixed  and uniform  sequence of actions and it is unlikely that more \nresponsibilities would ever be necessary. \nAlthough this new design may be more elegant, we need to consider some practical issues. From \nthe problem statement (see Problem 2.3 at the e nd of Chapter 2), we know that the measurement \nof each vital sign may last on the order of minutes. We should also determine how long each diagnostic test might last. (Measuring and processing the data from the motion \nsensor/accelerometer will likely be relatively f ast. We mentioned earlier that ActivityClassifier \nmaintains time series data and continuously decides if the patient is exercising.) Then we need to \ncompare these parameters with the requirements (t o be provided by the customer) and decide if \nwe need a more powerful hardware or a paralle l/multithreaded solution to meet the real-time \nmonitoring requirement (see Problem 5.19 \u2014 Solution). \n\uf0b7 In a sense, the existing design already uses the Command  design pattern: the Controller \ncommands actions to other components of the syst em (such as SensorReader and Alerter, see the", "source": "Page 591", "chapter": "9"}
{"id": "24d101bf3f27-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  578 \nfirst sequence diagram above). We may formaliz e this arrangement by introducing a Command \ninterface and implementing it by different concrete commands. \n\uf0b7 Another option is using the Decorator  design pattern. Recall that Decorator  is suitable where \nthere is one essential task and several optional task s that may or may not occur together with the \nprimary task. The primary task is vital signs sensing and the other tasks are secondary although \nnot quite optional. In addition, these other tasks (exercise monitoring, diagnostic testing, battery \nmonitoring) do not need to \u201coccur together with the primary task.\u201d Quite contrary, diagnostic \ntesting of sensors must not occur together with vitals sensing! The class diagram using Decorator  \nmight look something like this \nActivityObserv\n+  readSensor()ActivityObserv\n+  readSensor()HR_Reader\n+  readSensor()HR_Reader\n+  readSensor()BP_Reader\n+  readSensor()BP_Reader\n+  readSensor()ControllerController\u00abinterface\u00bb\nSensorReader\n+  readSensor() \nSensDiagnostc\n+  readSensor()nextReaderSubject and\nDecorator interface\nRealSubjects Concrete Decorators\n \nDecorator  helps anticipate adding more secondary tasks in the future. Note that measuring other", "source": "Page 592", "chapter": "9"}
{"id": "24d101bf3f27-1", "text": "Decorator  helps anticipate adding more secondary tasks in the future. Note that measuring other \nvital signs (such as blood oxygen saturation, body temperature, etc.) would fall under the primary \ntask. Example additional secondary tasks include : alerting the patient to take medications; \nalerting the patient to exercise regularly, etc. \nAnother option is to think of the Classifier and Alerter classes as \u201cdecorators\u201d to their \nSensorReader class. Again, data classificati on and anomaly alerting are not optional tasks. \nHowever, this line of thought may have some merit if we consider various advanced signal-\nprocessing capabilities. For example, the system ma y optionally monitor tren ds in vital signs over \ndays or weeks. Or, the system may compare the pa tient\u2019s vitals at night (during sleep) to those \nduring the day. In addition, vital sign \u201cabnorma lity\u201d may be defined as a pattern in time series \ndata, instead of the current simple checking of boundary values (safe ranges). Let us assume that \nour customer chose not to pursue such extensions now. \nOur conclusion from the above discussion is that using Decorator  would not confer clear \nadvantages over the existing design. Therefore,  at this time we opt against using it.", "source": "Page 592", "chapter": "9"}
{"id": "24d101bf3f27-2", "text": "\uf0b7 We know from Problem 3.11 \u2014 Solution (b) that state diagrams can be defined for different \nsensing tasks. Hence, one may consider using the State  design pattern. However, all the state \ndiagrams from Problem 3.11 \u2014 Solution are very si mple with essentially two states: \u201cgood data\u201d \nand \u201cbad data.\u201d The system has two \u201cmodes\u201d of behavior: when patient is exercising versus \nresting. The \u201cstate\u201d will be maintained explicitly (attribute isExercising  of \nActivityClassifier, see Problem 2.35 \u2014 Solution). We may consider extracting the state", "source": "Page 592", "chapter": "9"}
{"id": "3c48cbc59f34-0", "text": "Solutions to Selected Problems 579\ninformation into a separate State class. However,  it is not clear that such intervention would \nvisibly improve the existing design. Therefore, we decide against using the State  design pattern. \n\uf0b7 Finally, we consider using the Proxy  design pattern. Using the Remote Proxy  pattern would be \nsuitable for crossing the network barrier between the monitoring device and the remote hospital. I \nwill not explore the details of this option here. Instead, I will consider using the Protection Proxy  \npattern for controlling the access to the data stored on the patient device. \n \nProblem 5.10 \u2014 Solution \nThis is a small system that implements relativel y simple business logic, and the main complexity \nis in interacting with the da tabase. Although this system is  currently relatively small and \nintroducing patterns would offer relatively small ad vantages, we anticipate that the system will \ngrow in the number of supported features. Seve ral potential extensions are discussed in the \nsolution of Problem 2.10(c) and Problem 2.11. Mo reover, the store is unlikely to make a major \ninvestment in RFID infrastructure only to use it for basic inventory management. Therefore, the \npatterns that will be used for the new design d escribed below are introduced primarily in the", "source": "Page 593", "chapter": "9"}
{"id": "3c48cbc59f34-1", "text": "patterns that will be used for the new design d escribed below are introduced primarily in the \nanticipation of an evolving and growing system . The design patterns will make it easier to add \nnew functions and new user types. The performance  is not considered a major issue, other than \nthat there is a need to introduce concurrency. \nBecause the Monitor\u2019s activity should not hold ot her classes from doing their work, the Monitor \nshould be implemented in a separate thread, and I indicated this in the class diagram below. I will \nleave the multithreading issue aside for now and focus only on the patterns that improve the \nquality of software design. For conc urrency, see Problem 5.20 \u2014 Solution. \nBy reviewing the existing interaction diagrams, we can notice that: \n\uf0b7 All use cases include the complexity of data base interaction, whic h may not be obvious \nfrom the UML diagrams (it would be visible in the implementation code) \n\uf0b7 Some use cases, particularly UC-2 and UC-6, already follow a very simple logic (directly \nfrom the business rules from which they are deri ved) and it is likely that introducing any \npattern would only make their design worse. \nHowever, as we go about improving the existi ng design, we should keep in mind the overall", "source": "Page 593", "chapter": "9"}
{"id": "3c48cbc59f34-2", "text": "benefit or drawback of proposed changes, rather  than being focused on an individual use case. As \nwe will see, some of the proposed changes will make  the design of some use cases more complex. \nHowever, if such a change significantly improves the design of other use case(s) then we should \nadopt it. Very rarely a design modification will uniformly contribute onl y positive results across \nthe entire system. Rather, the impact of a proposed  change should be, on balance, positive, even if \nsome parts of design will slightly worsen. And, we should consider how the proposed change will \nimpact the future evolution of our software. \nIt is useful to start by drawing the class diagra m of the existing system. It helps to see all the \nclasses and their functions in one place:", "source": "Page 593", "chapter": "9"}
{"id": "2b686f72ddb8-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  580 \ndatabase\ncontroller\ncontrollermailer\ndatabaseReaderIface\n+ receive(evt : RFIDEvent)\n\u2013 increment(prodCount : int)\u2013 decrement(prodCount : int)Messenger\n+ send(msg : string)\n\u2013 emailTo (userID : string, msg : string)\nMonitorThread\n. . .\n+ sleep(time : long)DBaseConn\n+ getProductInfo(tagID : string) : ProductInfo\n+ recordProductInfo(prodInfo : ProductInfo)+ getPendingTasks(userID : string) : TaskInfo[ ]\n+ getPendingTask(taskID : string) : TaskInfo\n+ recordPendingTask(taskInfo : TaskInfo)+ removePendingTask(taskID : string)+ recordCompletedTask(taskInfo : TaskInfo)+ recordStatistics(infoType: string, value : Object)\nuser interfacecontroller\nDispatcher\n+ createTask(taskInfo: TaskInfo)\n+ getPendingTasks(userID : string) : list\n+ assignTask(taskID : string, userID : string)\n+ closeTask(taskID)+ sendReminder(taskInfo: TaskInfo)+ sendSystemwideReminder(taskInfo: TaskInfo)\u2013 checkUserType(userID : string)\u2013 incrementNumOfAlertAttempts()\nProductInfo\n\u2013 EPCcode_ : string\n\u2013 name_ : string\u2013 price_ : float\u2013 count_ : longTaskInfo\n\u2013 type_ : string\n\u2013 timeAssigned_ : long", "source": "Page 594", "chapter": "9"}
{"id": "2b686f72ddb8-1", "text": "\u2013 type_ : string\n\u2013 timeAssigned_ : long\n\u2013 assignedTo_ : stringTaskInfo\n\u2013 type_ : string\n\u2013 timeAssigned_ : long\n\u2013 assignedTo_ : string quantitytagID = productID\n \nWe notice that Dispatcher is essentially a c ontroller class, named so better to reflect its \nresponsibilities. Interacting with the database is a nontrivial task and we look at associations to \nDBaseConn to see if some can be removed. The M onitor\u2019s essential task is periodic review of \npending tasks to determine if some are overdue . Because task information is stored in the \ndatabase, breaking the association between th e Monitor and DBaseConn would probably make \nfor a more complex solution. One the other hand,  it the association of the RFID ReaderInterface \nand DBaseConn seems avoidable. \nThe ReaderInterface class is too involved in th e other classes\u2019 business\u2014it is explicitly telling the \nDispatcher what to do (see the sequence diag ram for UC-1). The ReaderInterface should be \nconcerned with obtaining input from RFID readers and neutrally delivering these messages to the \nController (or, Dispatcher). It should be always  available to process quickly the incoming events \nfrom RFID readers. Therefore, the first interven tion is to remove the association between the", "source": "Page 594", "chapter": "9"}
{"id": "2b686f72ddb8-2", "text": "from RFID readers. Therefore, the first interven tion is to remove the association between the \nReaderInterface and DBaseConn. Instead, the ReaderInterface will be implemented as a publisher \nof two types of events: itemAdded()  and itemRemoved() . This publisher will accept \nsubscribers of the type TagEventSubscriber. (Note:  If we wish to keep statistics of erroneous \nmessages from RFID readers, then we need to introduce one more event type. I leave this as an \nexercise to the reader. However, notice that the Dispatcher will be able to handle the situations \nwhere the tag ID is unrecognizable or product co unt is negative, see the sequence diagram for \nUC-1.) \nNotice that no class other than the Dispatcher should subscribe for ReaderInterface events, \nbecause only a single class (in our case the Dispat cher) should implement the business rules about", "source": "Page 594", "chapter": "9"}
{"id": "95b2595dc397-0", "text": "Solutions to Selected Problems 581\nwhat to do when an item count falls low. This cl ass will tell others what to do when a particular \nsituation occurs. If several classes implemente d the same business rule then, should the rule \nchange, all these classes would need to be modifi ed. Such approach is highly prone to coding \nerrors or some instances may be missed. \nNext, we notice that many methods in the Dispatcher let other cla sses tell the Dispatcher what to \ndo. This makes the coupling between the client cl ass and the Dispatcher even stronger. Some of \nthese methods will be modified (and coupling strength reduced) by implementing the TagEventSubscriber interface. The remaining st rong coupling is between the Monitor and the \nDispatcher. The Monitor\u2019s responsibility is to det ect overdue tasks and notify others about it, but \nnot to tell them what to do. Therefore, we impl ement the Monitor as a publisher of two types of \nevents: taskOverdue()  and assigneeUnresponsive() .This publisher will accept \nsubscribers of the type TaskOverdueSubscriber. \nOne may wonder if it is worth introducing a Publish-Subscribe relationship between the \nMessenger and other classes that use its services. I do not believe that this would improve the \ndesign and in fact may make it even more complicated. It would not make much sense to have the", "source": "Page 595", "chapter": "9"}
{"id": "95b2595dc397-1", "text": "Messenger \u201csubscribe\u201d for \u201csend\u201d events. Afte r all, how can the Messenger know which \n\u201cpublishers\u201d generate the \u201csend\u201d event?! The Messenger should not do anything else but email \nthe text messages that are prepared for it by its clie nts. The only thing that is important is that the \nMessenger\u2019s method send()  returns quickly and does not hold the caller on hold until the email \nis actually sent. \nI leave it to the reader to draw the modified sequence diagrams. After this exercise, the reader \nmay notice that UC-1 is simpler, but UC-2 woul d become more complex, so a question may arise \nif it is worth introducing Publish-Subscribe betw een the ReaderInterface and Dispatcher. I argue \nthat although the current gains may be minor, we should also consider the likelihood of evolving \nand extending the inventory system. We anticip ate that the inventory system as currently \ndesigned provides only the basic functionality, and it  is likely that it will need to be extended. \nTherefore, implementing the ReaderInterface a nd Monitor as publishers will facilitate future \nextensions of this system with more features. \nAnother complex class in the above diagram is  DBaseConn. In the current design, it accepts \nrequests to query or modify different tables and pr epares SQL statements on behalf of the clients.", "source": "Page 595", "chapter": "9"}
{"id": "95b2595dc397-2", "text": "Should DBaseConn become a subscriber for events published by the Dispatcher? I feel this would \nbe inappropriate, for many reasons. The Dispatcher is not really an originator of events in our \nsoftware-to-be\u2014it is merely relaying events fro m the ReaderInterface and Monitor, slightly \nmodified. In addition, the coupling between the Dispatcher and DBaseConn does not really \ninvolve any business logic (data processing rules)\u2014it is just about storing or retrieving data from \nthe database. It is also not a good idea to have DBaseConn subscribe directly to the \nReaderInterface publisher and bypass the Disp atcher, because then the DBaseConn would be \ngiven an additional responsibilit y of implementing the business logic for processing the events it \nreceives from its publishers (e.g., generating out- of-stock tasks). I believe that DBaseConn should \ndeal only with storing or retrieving data from th e database and leave business decisions to other \nclasses. Therefore, I decide that there are no more reasonable opportunities to employ Publish-\nSubscribe. This decision must be revisited at th e time the design will be modified to handle the \nconcurrency issues.", "source": "Page 595", "chapter": "9"}
{"id": "b298bbc43e7b-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  582 \nWe notice that the class DBaseConn will eventually use the services of a \njava.sql.Connection  and java.sql.Statement  (assuming that the code will be \nprogrammed in Java, but other object-oriented la nguages offer similar da tabase interfaces). We \nmay just wish discard the DBaseConn and let the c lients (Dispatcher and Monitor) work directly \nwith the database interfaces. However, this appr oach would leave other classes polluted with SQL \ncode. Therefore, I decide to keep the DBaseConn,  but with a simplified interface. We can reduce \nthe number of operations by passing the table name  as a parameter. The new class looks like so: \n \npublic class DBaseConn { \n   private static Connection con = null; // assigned in constructor \n    public DBaseConn() {       ...       con = DriverManager.getConnection( ... ); \n   } \n    public static void storeProduct(String table, ProductInfo product)       throws Exception {       PreparedStatement stat = \n         buildProductInsertionStatement(table, product); \n      stat.execute();       stat.close();    }     private static PreparedStatement buildProductInsertionStatement( \n      String table, ProductInfo product", "source": "Page 596", "chapter": "9"}
{"id": "b298bbc43e7b-1", "text": "String table, ProductInfo product \n   ) throws SQLException {       PreparedStatement ps = con.prepareStatement(          \"INSERT INTO \" + table + \" VALUES (?, ?, ?, ?);\");       ps.setString(1, product.EPCcode_); \n      ps.setString(2, product.name_); \n      ps.setFloat(3, product.price_);       ps.setLong(4, product.count_);       return ps;    } \n \n   // assumes that the \"value\" argument will retrieve a single record    public static ProductInfo retrieveProduct(       String table, String key, Object val    ) throws Exception { \n      PreparedStatement stat = buildQueryStatement(table, key, val); \n      ResultSet res = stat.executeQuery();       ProductInfo product = new ProductInfo();       product.EPCcode_ = res.getString(\"EPCcode\");       product.name_ = res.getString(\"name\"); \n      product.price_ = res.getFloat(\"price\"); \n      product.count_ = res.getString(\"count\");       res.close();       stat.close();       return product; \n   } \n    private static PreparedStatement buildQueryStatement(       String table, String key, Object val", "source": "Page 596", "chapter": "9"}
{"id": "c6b66c5f4598-0", "text": "Solutions to Selected Problems 583\n   ) throws SQLException { \n      PreparedStatement ps = con.prepareStatement(          \"SELECT * FROM \" + table + \" WHERE \" + key \" = ?;\"); \n      if (param instanceof String) { \n         ps.setString(1, (String)val);       } else if (param instanceof Integer) {          ps.setInt(1, (Integer)val. intValue());       } else if (param instanceof Float) { \n         ps.setFloat(1, (Float)val. floatValue()); \n      }       ...       } else {          throw new SQLException(\"unknown data type for value\"); \n      } \n      return ps;    }    ... // other methods ... } \n \nThe new class diagram looks like this: \nmailer\ndatabase database\nDispatcher\n+ itemAdded(tagID : string)\n+ itemRemoved(tagID : string)\n+ taskOverdue(taskInfo: TaskInfo)+ assigneeUnresponsive(taskInfo: TaskInfo)\n+ assignTask(taskID : string, userID : string)\n+ closeTask(taskID)\u2013 isOutOfStock(productID : string)\n\u2013 processOutOfStock(productID : string)\n\u2013 recordReminder(taskID : string) controller\nuser interfaceMessenger\n+ send(msg : string)\n\u2013 emailTo (userID : string, msg : string)\nsubscriberThread\u00abinterface\u00bb\njava.sql.Connection\u00abinterface\u00bb", "source": "Page 597", "chapter": "9"}
{"id": "c6b66c5f4598-1", "text": "subscriberThread\u00abinterface\u00bb\njava.sql.Connection\u00abinterface\u00bb\njava.sql.Statement\nsubscriberReaderIface\n+ receive(evt : RFIDEvent)\npublisherpublisher\nMonitor\n\u00abinterface\u00bb\nTaskOverdueSubscriber\n+ taskOverdue(taskInfo: TaskInfo)\n+ assigneeUnresponsive(tskInfo: TaskInfo)\u00abinterface\u00bb\nTagEventSubscriber\n+ itemAdded(tagID : string)\n+ itemRemoved(tagID : string)\u00abinterface\u00bb\nTagEventSubscriber\n+ itemAdded(tagID : string)\n+ itemRemoved(tagID : string)DBaseConn\n+ storeProduct (table : string, product : ProductInfo)\n+ storeTask (table : string, task : TaskInfo)\n+ storeStatistic (table : string, key : string, val : Object, count : int)\n+ retrieveProduct (table : string, key : string, val : Object) : ProductInfo\n+ retrieveTask (table : string, key : string, val : Object) : TaskInfo[ ]\n+ delete (table : string, key : string)\n \nIt may appear that too many functions are still in the Dispatcher. One may wonder if perhaps the \nDispatcher should not implement both subscriber  interfaces, but rather they should be \nimplemented by two different subscribers\u2014one fo r RFID events and the other for task-neglect", "source": "Page 597", "chapter": "9"}
{"id": "c6b66c5f4598-2", "text": "implemented by two different subscribers\u2014one fo r RFID events and the other for task-neglect \nevents? Or, should the Monitor just take the necessary actions itself, without help of the \nDispatcher or another object? I believe having the Dispatcher combine both subscribers is not a", "source": "Page 597", "chapter": "9"}
{"id": "91315b0244cd-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  584 \nproblem. First, we cannot make a perfect separ ation between RFID and task related events, \nbecause an RFID event may end up creating a restocking task. Second, Dispatcher\u2019s functions are \nat least coherent with one another. Second, the Dispatcher implements two subscriber interfaces, \nso it is only loosely coupled with its clients (publishers). \nBecause of the above three interventions, the clas ses in the new class di agram are less coupled \n(lower number of connections) and more cohesi ve (some classes have fewer responsibilities than \nbefore, and none has more), compared to the pr evious design. Next, we look if there are \nopportunities for additional improvements by a pplying more design patterns. Notice that the \nabove class diagram is not final and the additi onal interventions described below may require \nupdates in the class diagram. \nThe Strategy  pattern does not seem to be suitable because there are no complex alternative \nstrategies implemented in our current inventory system. \nThe State  pattern may seem relevant because the system does implement state tracking and \ntransitions (see Problem 3.5 \u2014 Solution). Because th e shelf or task state is derived by simple \ncomparison of database information, implementing a State pattern to keep track of the current", "source": "Page 598", "chapter": "9"}
{"id": "91315b0244cd-1", "text": "comparison of database information, implementing a State pattern to keep track of the current \nstate and decide the next state would not improve the design. \nThe Proxy  pattern may be considered in its Protection Proxy  version as a way to ensure that the \naccesses to data are appropriate for the user\u2019s access rights. Here is another example where we \nshould look across several use cases when consider ing the merits of introducing a pattern. Let us \nconsider UC-3 (ViewPendingWork) in isolation and assume that the system would remain frozen \nand no new functions would be a dded. We observe that we are dealing with only two types of \nusers, and they do not require a variety of comb inations of access rights. Then a simple Boolean \nlogic allows for a clean and simple design, as already present\u2014a proxy-based solution would \nappear only to add unnecessary complexity. Howeve r, the system should also ensure in UC-6 \n(ReplenishCompleted) that the user requesting a task closure has had this task assigned to him; \notherwise, the closure should be rejected. If pr otection proxies were used, then the proxy would \nensure that the user could access and close onl y those tasks fitting his or her access rights. \nTherefore, when considered in the context of the entire system, the protection proxy may become \nattractive.", "source": "Page 598", "chapter": "9"}
{"id": "91315b0244cd-2", "text": "attractive. \nIn addition, one may argue that it is likely that this system will evolve to include many other \nfunctions. In such case, we can foresee distingui shing more user types in  the future, such as \ndifferent levels of management, cashiers, etc. Fo r example, in the solution of Problem 2.10(c), we \nmentioned a possibility to add another user cat egory, \u201chelpout,\u201d for employees who wish to \nvolunteer and help. If \u201chelpout\u201d is introduced, bo th UC-3 and UC-6 will have to implement \nadditional logic to check database access rights.  Generally, it is easier to experiment with \ndifferent policies if the access control is impl emented using protection proxies. Then, a new \npolicy can be implemented simply by deploying a different proxy class. \nSee the example described in Section 5.2.4 ab out using the Protection Proxy pattern. If the \nProtection Proxy pattern is introduced, the above  class diagram for the new design needs to be \nmodified to include new proxies, DBConnManager and DBConnAssociate. The protection proxy will be generated the first time the user access es the database during the current session and will \nbe destroyed when the user logs out of the system.", "source": "Page 598", "chapter": "9"}
{"id": "213b489c1cef-0", "text": "Solutions to Selected Problems 585\nIf UC-3 allows the manager to view different st atistics or employee profiles and requires complex \nvisualization, we may consider using a Virtual Proxy  to speed up the loading of the initial screen \nand avoid generating complex vi sualizations until the manager wishes to see them. Sending \nemails is a relatively complex task, so we may consider introducing a Remote Proxy  between the \nMessenger and the mail server. However, The M essenger has a single responsibility, which is \nsending emails, and given that modern program ming languages have good libraries to support \ncommunication with mail servers, introducing a furt her Proxy it is not necessary. In a sense, the \nMessenger itself is a Proxy for the mail server. \nThe Command  pattern helps to explicitly articulat e processing requests and encapsulate any \npreprocessing potentially needed before the method request is made. Upon closer examination, \nwe realize that java.sql.Statement  is designed to implement the Command pattern: the \nclient prepares an SQL statement and passes it to the Statement\u2019s method execute() . Other \nopportunities to use the Command pattern may arise if the system were to support more complex \ntask management, such as revoking a pending task (this is not an undo  of assign-task!) or \nreassigning it to a different associate.", "source": "Page 599", "chapter": "9"}
{"id": "213b489c1cef-1", "text": "reassigning it to a different associate. \nUsing Command pattern from the ReaderInterface to Dispatcher would not be appropriate \nbecause Command is a stronger coupling than Publ ish-Subscribe. The ReaderInterface must be \nunencumbered to quickly process incoming RFID events. \nn summary, the main changes from the original design are as follows: The sequence diagrams \nfor all use cases will be modified with the new methods of the updated DBaseConn class. In \naddition, the sequence diagrams for UC-1 and UC-2  will significantly change to include Publish-\nSubscribe, itemRemoved()  for UC-1 and  itemAdded()  for UC-2. UC-3 will simplify by \nremoving the checking for the user type (the pr otection proxy will take care of retrieving the \nappropriate list of pending tasks). UC-4 will re main almost unchanged (except for the database \naccess). UC-5 will significantly change to include Publish-Subscribe. UC-6 will remain almost \nunchanged (except for the database access). Notice that  the database proxy will return nil if user \ntries to close a non-existing task, or a task that was assigned to someone else (unless the user is a \nmanager). \nProblem 5.11 \u2014 Solution \n \nProblem 5.12 \u2014 Solution \n \nProblem 5.13 \u2014 Solution", "source": "Page 599", "chapter": "9"}
{"id": "213b489c1cef-2", "text": "Problem 5.12 \u2014 Solution \n \nProblem 5.13 \u2014 Solution \n \nProblem 5.14 \u2014 Solution \n I", "source": "Page 599", "chapter": "9"}
{"id": "45bf36e0469b-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  586 \nProblem 5.15 \u2014 Solution \n(a) \nSubstituting the yield()  method call for wait()  is correct but not efficient\u2014this is so called \na busy-wait \u201cspin loop,\u201d which wastes an unbounded amount of CPU time spinning uselessly. On \nthe other hand, wait -based version rechecks conditions only when some other thread provides \nnotification that the object\u2019s state has changed. \n(b) This is not correct. When an action is resumed, the waiting thread does not know if the condition \nis actually met; it only knows that it has been woken up. Also, there may be several threads \nwaiting for the same condition, and only one will be  able to proceed. So it must check again. \nCheck the reference [Sand\u00e9n, 2004] for details. \nProblem 5.16 \u2014 Solution \nParking lot occupancy monitoring. I will show two different UML diagrams for the two threads. The treads execute independently, \nand the only place they interact is when the shared  object is locked/unlocked or in coordination \nusing wait()  / notify() . \nIf a thread finds the shared object already lock ed, it is blocked and waiting until the lock is", "source": "Page 600", "chapter": "9"}
{"id": "45bf36e0469b-1", "text": "released. The lock transfer is performed by th e underlying operating system, so it is not the \napplication developer\u2019s responsibility.", "source": "Page 600", "chapter": "9"}
{"id": "7f95d97900aa-0", "text": "Solutions to Selected Problems 587\nThe UML diagram for the EnterThread  is shown in Figure H-18. Notice that the thread first \ngrabs the shared state, updates it, and releases it. Only then is the ticket issued and the pole is \nlifted. This is so that the other thread (Ex itThread) does not need to wait too long to access the \nshared state, if needed. \nIf the occupancy  becomes equal to capacity , the shared object will post the signal \u201cparking \nfull,\u201d e.g., it will turn on the re d light. No new cars will be allowed into the lot. In this case the \nmethod isFull()  on SharedState  returns true . \nIf the lot is already full, the thread calls wait()  and gets suspended until the other thread calls \nnotify() . \nConversely, the UML diagram for the ExitThread  is shown in Figure H-19. \nThe two threads, as designed above, can interact saf ely and the two diagrams can be connected at \nany point. Car: EnterThread : ExitThread\nCar: SharedState\nrequestEntry()\nlock()\nfull := isFull()\nalt full == false\n[else]occupancy++carEntered()\nopt occupancy == capacity\nsignal: \u201cparking full\"\nunlock()\nissue ticket\n& lift entrance pole", "source": "Page 601", "chapter": "9"}
{"id": "7f95d97900aa-1", "text": "signal: \u201cparking full\"\nunlock()\nissue ticket\n& lift entrance pole\nwait()transfer lock\ntransfer lockloop\n \nFigure H-18. Enter thread of the parking lot system, Problem 5.16.", "source": "Page 601", "chapter": "9"}
{"id": "a6d458a11cd8-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  588 \nProblem 5.17 \u2014 Solution \n \nProblem 5.18 \u2014 Solution \n \nProblem 5.19 \u2014 Solution \nBefore one thinks about making a design multithreaded, one should consider whether \nmultithreading is needed. Multithreading can improve  system performance but may also make the \nsystem design significantly more complex. We note that even if we decide against using \nmultithreading, potential concurrency issues mu st be identified and clearly addressed. For \nexample, recall that the safe ranges can be upda ted remotely by authorized hospital personnel. \nThe existing design is not clear about how poten tial concurrency issues between the local and \nremote software components that use Vitals Sa fe Ranges are resolved. We observe that the \nremote user would not edit the safe ranges in place, but would rather prepare the whole set of new \nvalues and send it to replace the old values at once. \nWe observe that the draft design is relatively simple and multithreading would certainly not make \nit simpler. As for the performance, we observe that all the observed variables vary relatively \nslowly: most physiological signals experience ch ange on the spans of seconds or even minutes. \nSo, at first it may appear that performance is not  an issue. However, from the problem statement", "source": "Page 602", "chapter": "9"}
{"id": "a6d458a11cd8-1", "text": "(see Problem 2.3 at the end of Chapter 2), we  know that the measurements cannot be taken Car: EnterThread : ExitThread\nCar: SharedState\nrequestExit()\nlock()\noccupancy \uf020\uf02d\uf02d\nopt occupancy == capacity \uf02d1\nremove signal \u201cparking full\"\nprocess payment\n& lift exit poletransfer lockcarExited()\nnotify()\nunlock()\n \nFigure H-19. Exit thread of the parking lot system, Problem 5.16.", "source": "Page 602", "chapter": "9"}
{"id": "19e10371e32d-0", "text": "Solutions to Selected Problems 589\ncontinuously and instantaneously\u2014measuring a bl ood pressure or heart rate may take a minute \nper each sample. Therefore, if a single thread vis its different sensor readers, just reading a blood \npressure and heart rate sample may take \uf0b3 2 minutes! Meanwhile, all other tasks would be \nwaiting for their turn. Running diagnostic tests may also take significant amount of time, although tests cannot be run at the same time while measu rements are performed. The key point is that we \nmust consider the characteristics and needs of the real-world problem domain instead of just \nlimiting our discussion to abstract issues of c oncurrency and design elegance. Our problem \nstatement is not specific enough about how frequent ly measurements should be taken or any other \nperformance requirements. At this point I will assume that we opted for multithreading, but I \ncaution that a real implementation would require much more careful analysis of the merits of introducing multithreading into our system. \nAn optimal solution is to read each sensor in a different thread. Each thread is responsible for \nreading data, checking these data, and then (as necessary) sending an alert based on the data. \nGiven that data acquisition periods are different for different sensors (vital signs are recorded \nfrequently and battery is checked least frequently),  each thread would set its own timer and, when", "source": "Page 603", "chapter": "9"}
{"id": "19e10371e32d-1", "text": "awakened, process its own sensor. There are a tota l of four sensors in the given design: blood \npressure, heart rate, motion, and battery power sensor.  In addition, the diagnostic test could be run \nin its own thread and communications with the hospital may run in a separate thread. Because \nwireless communication is highly unreliable and messages may need to be retransmitted multiple \ntimes, it is a good idea to separate the communi cation from measurement tasks. That makes a \ntotal of six threads: \nThread ID  Source Object (Publisher) \uf0ae Receiver (Subscriber) \uf0ae Server Thread \nThread 1 Blood Pressure Reader         \uf0ae Abnormality Detector   \uf0ae \n[uses: sensor hardware ] \n[uses: Vitals Safe Ranges ] Hospital Alerter \nThread 2 Heart Rate Reader                \uf0ae Abnormality Detector   \uf0ae \n[uses: sensor hardware ] [uses: Vitals Safe Ranges ] Hospital Alerter \nThread 3 Sensor Diagnostic                \uf0ae Failure Detector            \uf0ae \n[uses: sensor hardware ] Hospital Alerter \nThread 4 Activity Observer                \uf0ae Activity Classifier \n[uses: Vitals Safe Ranges ]  \nThread 5 Hospital Alerter [uses: Vitals Safe Ranges ]  \nThread 6 Battery Checker                   \uf0ae Patient Alerter", "source": "Page 603", "chapter": "9"}
{"id": "19e10371e32d-2", "text": "Thread 6 Battery Checker                   \uf0ae Patient Alerter  \nNote that there is no need for the Controller\u2014each  thread acts as the Controller for its own set of \nobjects. Thread 6 could be the main thread that does all supporting tasks, because battery \nchecking is relatively infrequent and of low priority. \nThere are the following issues w ith a multithreaded solution: \n\uf0b7 Vital sign readers will run independently (each in their own thread) and read the vital signs: \nblood pressure and heart rate. If bot h vitals happen to be out-of-range , two alerts will be sent to \nthe hospital, which should preferably be avoided given the need to conserve the battery energy. \nOne option is to join()  the vitals threads and send only one alert, if and when needed. \n\uf0b7 A race condition (or deadlock, or livelock) ma y occur between the vitals readers (Threads 1 \nand 2) and the activity observer (Thread 4), because the activity observer may write new Vitals", "source": "Page 603", "chapter": "9"}
{"id": "dfb79f87337c-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  590 \nSafe Ranges while the vitals reader s read the Vitals Safe Ranges. In  addition, recall that the safe \nranges can be updated remotely by authorized hos pital personnel. This is why the above table \nshows that Thread 5 uses Vitals Safe Ranges. (Cu rrently Thread 5 is assumed to correspond to the \nHospital Alerter class, but this name is not ad equate because it does not capture the bidirectional \ncommunication between the hospital and the m onitoring device.) A potential race condition \nshould be avoided by exclusion synchronization  among the threads. The activity observer should \nbe assigned highest priority, because vitals may be misinterpreted when the patient is exercising. \nthrd1 : AbnormalDetect : VSafeRanges\nacquire lockthrd4 : ActivityClassif\nrelease lockacquire lock\n[ blocked ]\ntransfer lockregion\nranges := getValues()\nadjust( exercise-mode )\n \n\uf0b7 A race condition may occur between the vitals  readers (Threads 1 a nd 2) and the sensor \ndiagnostic (Thread 3), because the sensor diagnostic  may attempt to test the sensor hardware \nwhile the vitals readers try to acquire the senso r readings. This problem should be avoided by \nexclusion synchronization  among the threads.", "source": "Page 604", "chapter": "9"}
{"id": "dfb79f87337c-1", "text": "exclusion synchronization  among the threads. \n\uf0b7 A race condition may occur between the threads th at generate alerts for the hospital (Threads 1, \n2, and 3) while two or more of them try to ha nd over a HospitalAlert message to the hospital \nalerter (Thread 5) to communicate the message to th e hospital. Note that the HospitalAlert thread \nmay take considerable time for reliable transmission of messages, because multiple \nretransmissions and waiting for acknowledgements may be needed. A potential race condition \nshould be avoided by condition synchronization  among the threads. We introduce a new object: a \nqueue for alerts. Note that it is unclear whether the queue should be prioritized so that abnormal-\nvitals alerts should have greater priority over senso r-failure alerts. After all, how meaningful is an \nabnormal-vitals alert if at the same time sensors are diagnosed as faulty?!", "source": "Page 604", "chapter": "9"}
{"id": "ea9d38d04add-0", "text": "Solutions to Selected Problems 591\nrelease lockthrd3 : FailureDetectr : AlertQueue\nacquire lockthrd5 : HospitalAlerter\nnotify()wait()\n[ blocked ]\ntransfer lockregion\nappend( alert)\nalert := retrieveAlert()thrd1 : AbnormalDetect\nacquire lock\n[ blocked ]\nsend msg[ forever ] loop\ntransfer lock\n \n \nProblem 5.20 \u2014 Solution \nConcurrency in the supermarket inventory management system. \n \nProblem 5.21 \u2014 Solution \n \nProblem 5.22 \u2014 Solution \nDistributed Publisher-Subscriber design pattern using Java RMI.  \nProblem 5.23 \u2014 Solution \nSecurity for an online grocery store. The key pa irs used for secure communication in our system \nare shown in Figure H-20. Due to the stated re quirements, all information exchanges must be \nconfidential.", "source": "Page 605", "chapter": "9"}
{"id": "843521bd059d-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  592 \n \n(a) There must be at least three public-private key pairs issued: \n(i)\n Merchant\u2019s pair: (\uf02b\nMK, \uf02d\nMK) \n(ii) Customer\u2019s pair: (\uf02b\nCK, \uf02d\nCK) \n(iii) Bank\u2019s pair: (\uf02b\nBK, \uf02d\nBK) \nRecall that every receiver must have his/her ow n private key and the corresponding public key \ncan be disclosed to multiple senders. Because ever y actor at some point receives information, \nthey all must be given their own key pair. \n \n(b) I assume that each actor generates his/her own ke y pair, that is, there is no special agency \ndedicated for this purpose. \nThe Merchant issues its pair and sends \n\uf02b\nMK to both the Bank and Customer. It is reasonable to \nsend \uf02b\nMK only once to the Bank for the lifetime of th e key pair, because it can be expected that \nthe Merchant and Bank will have regular message exchanges. Conversely, it is reasonable to send \n\uf02b\nMK to the customer once per shopping session, b ecause the shopping sessions can be expected to \nbe very rare events. Customer Merchant Bank\nplace order (\u201cselected items\")", "source": "Page 606", "chapter": "9"}
{"id": "843521bd059d-1", "text": "be very rare events. Customer Merchant Bank\nplace order (\u201cselected items\")\nenter credit card info (\u201cpayment amount\u201c)\nprocess payment (\u201ccard info\")enter selection (\u201citems catalog\u201c)\napprove transaction (\u201ccard info\u201c, \u201cpayment amount\")\nnotify outcome (\u201cresult value\u201c)\nnotify outcome (\u201cresult value\u201c)\uf02b\nMK\uf02d\nMK\n\uf02b\nCK \uf02d\nCK\n\uf02b\nBK\n\uf02d\nBK\uf02b\nBK\n\uf02b\nMK \uf02d\nMK\n\uf02d\nCK\uf02b\nCK\nFigure H-20. Key pairs needed for secure co mmunication. See text for explanation.", "source": "Page 606", "chapter": "9"}
{"id": "aba04c90e988-0", "text": "Solutions to Selected Problems 593\nThe Customer issues his/her pair and sends \uf02b\nCK to the Merchant only. Because shopping session \nlikely is a rare event, \uf02b\nCK should be sent at the start of every shopping session. \nThe Bank sends its public key \uf02b\nBK to the Merchant, who keeps a copy and forwards a copy to the \nCustomer. \uf02b\nBK will be sent to the Merchant once for the lifetime of the key pair, but the Merchant \nwill forward it to the Customer every time th e Customer is prompted for the credit card \ninformation. \n \n(c) \nAs shown in Figure H-20, every actor keeps their own private key \uf02d\niK secret. Both the Bank and \nCustomer will have the Merchant\u2019s public key \uf02b\nMK. Only the Merchant will have \uf02b\nCK, and both \nthe Merchant and customer will have \uf02b\nBK. \n \n(d) \nThe key uses in encryption/decryption are shown in Figure H-20. A public key \uf02b\niK is used for \nencryption and a private key \uf02d\niK is used for decryption. \nThere is an interesting observation to make about  the transaction authorization procedure. Here, \nthe Customer encrypts their credit card information using \uf02b", "source": "Page 607", "chapter": "9"}
{"id": "aba04c90e988-1", "text": "the Customer encrypts their credit card information using \uf02b\nBK and sends to the Merchant who \ncannot read it (because it does not have \uf02d\nBK). The Merchant needs to  supply the information \nabout the payment amount, which can be appended to the Customer\u2019s message or sent in a \nseparate message. It may be tempting to suggest that the Customer encrypts both their credit card \ninformation and the payment amount, and the Merchant  just relays this message. However, they \npayment amount information must be encrypted by the Merchant, because the Customer may \nspoof this information and subm it smaller than the actual amount. \nThe actual process in reality is more complex, because there are many more actors involved and \nthey rarely operate as their own key-makers. Th e interested reader should consult [Ford & Baum, \n2001]. A summary of the SET (Secure Electronic Transaction) system for ensuring the security of \nfinancial transactions on the Internet can be found online at http://mall.jaring.m y/faqs.html#set . \nProblem 5.24 \u2014 Solution \n \n  \nProblem 6.1 \u2014 Solution", "source": "Page 607", "chapter": "9"}
{"id": "208c54780d1e-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  594 \nProblem 6.2 \u2014 Solution \nWhat we got in Listing 6-13 is equivalent to Listing 6-1; what we need to get should be \nequivalent to Listing 6-7. For the sake of simplic ity, I will assume that all elements that are left \nunspecified are either arbitrary strings of charact ers (class name and semester) or integers (class \nindex and enrollment). Otherwise, the listing belo w would be much longer if I tried to model \nthem realistically, as well. \nListing H-1: XML Schema for class rosters. \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n10 \n11 \n12 \n13 \n14 \n14a \n15 \n16 \n17 \n18 \n19 \n20 \n21 \n22 \n23 \n24 \n25 \n26 \n27 \n28 \n29 \n30 \n31 \n32 \n33 \n34 \n35 \n36 \n37 \n38 \n39 \n40 \n41 \n42 \n43 \n44 \n45", "source": "Page 608", "chapter": "9"}
{"id": "208c54780d1e-1", "text": "40 \n41 \n42 \n43 \n44 \n45 \n46 <?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" \n            targetNamespace=\"http://any.website.net/classRoster\" \n            xmlns=\"http://any.website.net/classRoster\" \n            elementFormDefault=\"qualified\"> \n \n  <xsd:element name=\"class-roster\"> \n    <xsd:complexType> \n      <xsd:sequence> \n        <xsd:element name=\"class-name\" type=\"xsd:string\"/> \n        <xsd:element name=\"index\" type=\"xsd:integer\"/> \n        <xsd:element name=\"semester\" type=\"xsd:string\"/> \n        <xsd:element name=\"enrollment\" type=\"xsd:integer\"/> \n        <xsd:element ref=\"student\" \n                     minOccurs=\"0\" maxOccurs=\"unbounded\"> \n      </xsd:sequence> \n    </xsd:complexType> \n  </xsd:element> \n \n  <xsd:element name=\"student\"> \n    <xsd:complexType> \n      <xsd:sequence> \n        <xsd:element name=\"student-id\"> \n          <xsd:simpleType>", "source": "Page 608", "chapter": "9"}
{"id": "208c54780d1e-2", "text": "<xsd:simpleType> \n            <xsd:restriction base=\"xsd:string\"> \n              <xsd:pattern value=\"\\d{3}00\\d{4}\"/> \n            </xsd:restriction> \n          </xsd:simpleType> \n        </xsd:element> \n \n        <xsd:element name=\"name\"> \n          <xsd:complexType> \n            <xsd:sequence> \n              <xsd:element name=\"first-name\" type=\"xsd:string\"/> \n              <xsd:element name=\"last-name\" type=\"xsd:string\"/> \n            </xsd:sequence> \n          </xsd:complexType> \n        </xsd:element> \n \n        <xsd:element name=\"school-number\"> \n          <xsd:simpleType> \n            <xsd:restriction base=\"xsd:string\"> \n              <xsd:pattern value=\"\\d{2}\"/> \n            </xsd:restriction> \n          </xsd:simpleType> \n        </xsd:element>", "source": "Page 608", "chapter": "9"}
{"id": "819ae048a897-0", "text": "Solutions to Selected Problems 595\n47 \n48 \n49 \n50 \n51 \n52 \n53 \n54 \n55 \n56 \n57 \n58 \n59 \n60 \n61 \n62 \n63 \n64 \n65 \n66 \n67 \n68 \n69 \n70 \n71 \n72 \n73         <xsd:element name=\"graduation\" type=\"xsd:gYear\"/> \n        <xsd:element name=\"grade\" minOccurs=\"0\"> \n          <xsd:simpleType> \n            <xsd:restriction base=\"xsd:string\"> \n              <xsd:enumeration value=\"A\"/> \n              <xsd:enumeration value=\"B+\"/> \n              <xsd:enumeration value=\"B\"/> \n              <xsd:enumeration value=\"C+\"/> \n              <xsd:enumeration value=\"C\"/> \n              <xsd:enumeration value=\"D\"/> \n              <xsd:enumeration value=\"F\"/> \n            </xsd:restriction> \n          </xsd:simpleType> \n        </xsd:element> \n      </xsd:sequence> \n \n      <xsd:attribute name=\"status\"  use=\"required\"> \n        <xsd:simpleType> \n          <xsd:restriction base=\"xsd:string\">", "source": "Page 609", "chapter": "9"}
{"id": "819ae048a897-1", "text": "<xsd:restriction base=\"xsd:string\"> \n            <xsd:enumeration value=\"full-time\"/> \n            <xsd:enumeration value=\"part-time\"/> \n          </xsd:restriction> \n        </xsd:simpleType> \n      </xsd:attribute> \n    </xsd:complexType> \n  </xsd:element> \n</xsd:schema> \n \n \nProblem 6.3 \u2014 Solution", "source": "Page 609", "chapter": "9"}
{"id": "8cbab0675f3a-0", "text": "596  \nReferences \n \n1. A. J. Albrecht, \u201cMeasuring application development productivity,\u201d Procedings of the \nIBM Applications Development Symposium , pp. 83, Monterey, CA, October 1979. \n2. J. Al Dallal, \u201cMeasuring the discriminative power of object-oriented class cohesion \nmetrics,\u201d IEEE Transactions on Software Engineering , to appear, 2011. \n3. B. A. Allan, R. C. Armstrong, A. P. Wolfe, J. Ray, D. E. Bernholdt, and J. A. Kohl, \n\u201cThe CCA core specification in a distributed memory SPMD framework,\u201d Concurrency \nand Computation: Practice and Experience , vol. 14, pp. 323-345, 2002. \n4. E. B. Allen, and T. M. Khoshgoftaar , \u201cMeasuring coupling and cohesion: An \ninformation-theory approach,\u201d Proceedings of the Sixth IEEE International Software \nMetrics Symposium , pp. 119-127, November 1999. \n5. E. Armstrong, J. Ball, S. Bodoff, D. Bode Ca rson, I. Evans, D. Green, K. Haase, and E.", "source": "Page 610", "chapter": "9"}
{"id": "8cbab0675f3a-1", "text": "Jendrock, The J2EE\u2122 1.4 Tutorial: For Sun Java Sy stem Application Server Platform \nEdition 8.2 , Sun Microsystems, Inc., December 5, 2005. Online at:  \nhttp://java.sun.com/j2ee/1.4/d ocs/tutorial/doc/index.html   \n6. R. M. Baecker, \u201cSorting out sorting: A case study of software visualization for teaching \ncomputer science,\u201d in Stasko, J., Domingue, J ., Brown, M., and Price, B. (Editors), \nSoftware Visualization: Programming as a Multimedia Experience , pp. 369-381, The \nMIT Press, Cambridge, MA, 1998. Online at: http://kmdi.utoronto.ca/rmb/papers/B7.pdf   \n7. C. H. Bennett, \u201cOn the nature and origin of complexity in discrete, homogeneous, \nlocally-interacting systems,\u201d Foundations of Physics , vol. 16, pp. 585-592, 1986. \n8. C. H. Bennett, \u201cInformation, dissipation, and the definition of organization,\u201d in D. Pines \n(Editor), Emerging Syntheses in Science , Addison-Wesley, Reading, MA, 1987.", "source": "Page 610", "chapter": "9"}
{"id": "8cbab0675f3a-2", "text": "9. C. H. Bennett, \u201cHow to define complexity in physics, and why,\u201d in W. H. Zurek \n(Editor), Complexity, Entropy, and the Physics of In formation, SFI Studies in the Science \nof Complexity, vol. VIII , pp. 137-148, Addison-Wesley, Redwood City, CA, 1990. \n10. I. Ben-Shaul, O. Holder, and B. Lavva, \u201cDynamic adaptation and deployment of \ndistributed components in Hadas,\u201d IEEE Transactions on Software Engineering , vol. 27, \nno. 9, pp. 769-787, September 2001. \n11. J. Bosak and T. Bray, \u201cXML and the second-generation Web,\u201d Scientific American , \npp.89-93, May 1999. Online at:  \nhttp://www.sciam.com/article.cfm ?articleID=0008C786-91DB-1CD6-\nB4A8809EC588EEDF&catID=2", "source": "Page 610", "chapter": "9"}
{"id": "378936ed4348-0", "text": "References 597\n12. R. Bramley, K. Chiu, S. Diwan, D. Gannon,  M. Govindaraju, N. Mukhi, B. Temko, and \nM. Yechuri, \u201cA component based services architecture for building distributed \napplications,\u201d Proceedings of the Ninth IEEE In ternational Symposium on High \nPerformance Distributed Computing (HPDC'00) , pp. 51-, Pittsburgh, PA, August 2000. \n13. L. C. Briand, J. W. Daly, and J. K. W\u00fcst, \u201cA unified framework for coupling \nmeasurement in object-oriented systems,\u201d IEEE Transactions on Software Engineering , \nvol. 25, no. 1, pp. 91-121, January 1999. \n14. L. C. Briand, S. Morasca, and V. R. B asili, \u201cProperty-based software engineering \nmeasurement,\u201d IEEE Transactions on Software Engineering , vol. 22, no. 1, pp. 68-85, \nJanuary 1996. \n15. F. P. Brooks, The Mythical Man-Month: Essays on Software Engineering, 20th \nAnniversary Edition , Addison-Wesley Inc., Reading, MA, 1995.", "source": "Page 611", "chapter": "9"}
{"id": "378936ed4348-1", "text": "Anniversary Edition , Addison-Wesley Inc., Reading, MA, 1995. \n16. M. Broy, A. Deimel, J. Henn, K. Koskimies, F. Pl\u00e1\u0161il, G. Pomberger, W. Pree, M. Stal, \nand C. Szyperski, \u201cWhat characterizes a (software) component?,\u201d Software \u2013 Concepts \n& Tools , vol. 19, pp. 49-56, 1998. \n17. F. Buschmann, R. Meunier, H. Rohnert, P. Sommerlad, and M. Stal, Pattern-Oriented \nSoftware Architecture: A System of Patterns , John Wiley & Sons, Inc., New York, 1996. \n18. K. L. Calvert and M. J. Donahoo, TCP/IP Sockets in Java: Practical Guide for \nProgrammers , Morgan Kaufmann Publishers, San Francisco, CA, 2002. \n19. D. Caromel and J. Vayssi\u00e8re, \u201cA security framework for reflective Java applications,\u201d \nSoftware\u2014Practice & Experience (John Wiley & Sons, Inc.) , vol. 33, no. 9, 821-846, \nJuly 2003.", "source": "Page 611", "chapter": "9"}
{"id": "378936ed4348-2", "text": "July 2003. \n20. E. R. Carroll, \u201cEstimating software based on use case points,\u201d Proceedings of the 2005 \nACM Conference on Object-Oriented, Programming, Systems, Languages, and \nApplications (OOPSLA '05) , pp. 257-265, San Diego, CA, October 2005. \n21. R. Chellappa, P. J. Phillips, and D. Reynolds (Editors), Special Issue on Biometrics: \nAlgorithms and Applications of Fingerp rint, Iris, Face, Gait, and Multimodal \nRecognition, Proceedings of the IEEE , vol. 94, no. 11, November 2006. \n22. G. Chen and B. K. Szymanski, \u201cObject-oriented paradigm: Component-oriented \nsimulation architecture: Toward inte roperability and interchangeability,\u201d Proceedings of \nthe 2001 Winter Simulation Conference (WSC 2001) , pp. 495-501, Arlington, VA, \nDecember 2001. \n23. M. Cohn, User Stories Applied: For Agile Software Development , Addison-Wesley, \nBoston, MA, 2004.", "source": "Page 611", "chapter": "9"}
{"id": "378936ed4348-3", "text": "Boston, MA, 2004. \n24. M. Cohn, \u201cEstimating with use case points,\u201d Methods & Tools , vol. 13, no. 3, pp. 3-13, \nFall 2005. Online at: http://www.methodsandtools.com/ archive/archive.php?id=25   \n25. M. Cohn, Agile Estimating and Planning , Prentice-Hall PTR, Upper Saddle River, NJ, \n2006.", "source": "Page 611", "chapter": "9"}
{"id": "cdf329576491-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  598 \n 26. D. Coleman, P. Arnold, S. Bodoff, C. Dollin, H. Gilchrist, F. Hayes, and P. Jeremaes, \nObject-Oriented Development: The Fusion Method , Prentice-Hall, Inc., Englewood \nCliffs, NJ, 1994. \n27. L. L. Constantine and L. A. D. Lockwood, Software for Use: A Practical Guide to the \nModels and Methods of Usage-Centered Design , Addison-Wesley Professional / ACM \nPress, Reading, MA, 1999. \n28. L. L. Constantine, G. J. Myers, and W. P. Stevens, \u201cStructured design,\u201d IBM Systems \nJournal , vol. 13, no. 2, pp. 115-139, May 1974. \n29. K. Cusing, \u201cWhy projects fail,\u201d Computer Weekly , November 21, 2002. \n30. M. A. Cusumano, \u201cThe changing software business: Moving from products to services,\u201d \nIEEE Computer , vol. 41, no. 1, pp. 20-27, January 2008.", "source": "Page 612", "chapter": "9"}
{"id": "cdf329576491-1", "text": "31. G. Cybenko and B. Brewington, \u201cThe foundatio ns of information push and pull,\u201d In D. \nO\u2019Leary (Editor), Mathematics of Information , Springer-Verlag, 1998. Online at: \nhttp://actcomm.dartmouth.ed u/papers/cybenko:push.pdf   \n32. R. Davies and F. Pfenning, \u201cA modal analysis of staged computation,\u201d Journal of the \nACM (JACM) , vol. 48, no. 3, pp. 555-604, May 2001. \n33. A. Denning, Active X Controls Inside Out , Second Edition, Microsoft Press, Redmond, \nWashington, 1997. \n34. M. J. Donahoo and K. L. Calvert, Pocket Guide to TCP/IP Sockets (C Version) , Morgan \nKaufmann Publishers, San Francisco, CA, 2001. \n35. P. Dourish, \u201cUsing metalevel techniques in a flexible toolkit for CSCW applications,\u201d \nACM Transactions on Computer -Human Interaction (TOCHI) , vol. 5, no. 2, pp.109-155, \nJune 1998.", "source": "Page 612", "chapter": "9"}
{"id": "cdf329576491-2", "text": "June 1998. \n36. B. Eckel, Thinking in Java , Third Edition, Prentice Hall PTR, Upper Saddle River, NJ, \n2003. Online at: http://www.mindview.net/Books   \n37. The Economist, \u201cSecurity through viral propagation,\u201d The Economist , pp. 7-8 of the \nspecial section: Technology Quarterly, December 4, 2004. Online at:  \nhttp://www.economist.com./s cience/tq/displayStory .cfm?story_id=3423046   \n38. J. Eder, G. Kappel, and M. Schrefl, \u201cCoup ling and cohesion in object-oriented systems,\u201d \nProceedings of the Conference on Information and Knowledge Management , Baltimore, \nMA, 1992. \n39. P. Th. Eugster, P. A. Felber, R. Guerraoui, and A.-M. Kermarrec, \u201cThe many faces of \npublish/subscribe,\u201d ACM Computing Surveys , vol. 35, no. 2, pp. 114-131, June 2003. \n40. M. E. Fayad and D. C. Schmidt, \u201cObject-oriented application frameworks,\u201d", "source": "Page 612", "chapter": "9"}
{"id": "cdf329576491-3", "text": "Communications of the ACM , vol. 40, no. 10, pp. 32-38, October 1997. \n41. N. E. Fenton and S. L. Pfleeger, Software Metrics: A Rigorous  and Practical Approach , \nSecond Edition (Revised Printing), PWS Publishing Company (International Thomson Publishing), Boston, MA, 1998.", "source": "Page 612", "chapter": "9"}
{"id": "7933073eb3d0-0", "text": "References 599\n42. R. P. Feynman, R. W. Allen, and T. Hey, Feynman Lectures on Computation , Perseus \nPublishing, 2000. \n43. W. Ford and M. S. Baum, Secure Electronic Commerce: Building the Infrastructure for \nDigital Signatures and Encryption , Second Edition, Prentice Hall PTR, Upper Saddle \nRiver, NJ, 2001. \n44. M. Fowler, Analysis Patterns: Reusable Object Models , Addison-Wesley, Inc., Reading, \nMA, 1997. \n45. M. Fowler, Refactoring: Improving the Design of Existing Code , Addison-Wesley, Inc., \nReading, MA, 2000. \n46. M. Fowler, UML Distilled: A Brief Guide to the Standard Object Modeling Language , \nThird Edition, Addison-Wesley, Inc., Reading, MA, 2004.  \n47. E. Gamma, R. Helm, R. Johnson, and J. Vlissides. Design Patterns: Elements of \nReusable Object-Oriented Software , Addison Wesley Longman, Inc., Reading, MA, \n1995. \nThe pattern descriptions are available online, e.g.,  \nhttp://www.dofactory.com /Patterns/Patterns.aspx", "source": "Page 613", "chapter": "9"}
{"id": "7933073eb3d0-1", "text": "http://www.dofactory.com /Patterns/Patterns.aspx   \n48. M. Gell-Mann and C. Tsallis (Editors), Nonextensive Entropy: Interdisciplinary \nApplication , Oxford University Press, 2004. \n49. M. Gladwell, The Tipping Point: How Little Things Can Make a Big Difference , Back \nBay Books / Little, Brown and Co., New York, NY, 2000. \n50. E. G. Goodaire and M. M. Parmenter, Discrete Mathematics with Graph Theory , Third \nEdition, Pearson Prentice Hall, Upper Saddle River, NJ, 2006. \n51. S. D. Guttenplan, The Languages of Logic: An Introduction to Formal Logic , Basil \nBlackwell, 1986. \n52. M. H. Halstead, Elements of Software Science , Elsevier North-Holland, New York, NY, \n1977. \n53. R. Harrison, S. J. Counsell, and R. V. Nithi, \u201cAn evaluation of the MOOD set of object-\noriented software metrics,\u201d IEEE Transactions on Software Engineering , vol. 24, no. 6, \npp. 491-496, June 1998.", "source": "Page 613", "chapter": "9"}
{"id": "7933073eb3d0-2", "text": "pp. 491-496, June 1998. \n54. A. Helal, W. Mann, H. Elzabadani, J. King,  Y. Kaddourah, and E. Jansen, \u201cGator Tech \nsmart house: A programmable pervasive space,\u201d IEEE Computer , vol. 38, no. 3, pp 64-\n74, March 2005. \n55. B. Henderson-Sellers, Object-Oriented Metrics: Measures of Complexity , Prentice-Hall \nInc., Upper Saddle River, NJ, 1996. \n56. B. Henderson-Sellers, L. L. Constantine, and I. M. Graham, \u201cCoupling and cohesion: \nTowards a valid suite of object-oriented metrics,\u201d Object-Oriented Systems , vol. 3, no. 3, \n143-158, 1996.", "source": "Page 613", "chapter": "9"}
{"id": "db893e21053a-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  600 \n 57. B. Henderson-Sellers and D. Tegarden, \u201cThe theoretical extension of two versions of \ncyclomatic complexity to multiple entry/exit modules,\u201d Software Quality Journal , vol. 3, \nno. 4, pp. 253-269, December 1994. \n58. M. Henning, \u201cThe rise and fall of CORBA,\u201d ACM Queue , vol. 4, no. 5, pp. 28-34, June \n2006. Online at: http://acmqueue.co m/rd.php?c.396   \n59. J. Henry and D. Gotterbarn, \u201cCoupling a nd cohesion in object-oriented design and \ncoding,\u201d Proceedings of the 1996 ACM 24th Annual  Conference on Computer Science , \npp. 149, Philadelphia, PA, 1996. \n60. J. C. Hou et al ., J-Sim: Component-Based, Compositional Simulation Environment. \nOnline at: http://www.j-sim.org/   \n61. M. E. C. Hull, P. N. Nicholl, P. Houston, and N. Rooney, \u201cTowards a visual approach \nfor component-based software development,\u201d Software \u2013 Concepts & Tools , vol. 19, pp.", "source": "Page 614", "chapter": "9"}
{"id": "db893e21053a-1", "text": "154-160, 2000. \n62. D. Ince, Software Development: Fashioning the Baroque , Oxford University Press, \nOxford, UK, 1988. \n63. M. Jackson, Software Requirements and Specifica tions: A Lexicon of Practice, \nPrinciples and Prejudices , Addison-Wesley Professional, Reading, MA, 1995. \n64. M. Jackson, Problem Frames: Analyzing and St ructuring Software Development \nProblems , Addison-Wesley Professional, Reading, MA, 2001. \n65. I. Jacobson, G. Booch, and J. Rumbaugh, The Unified Software Development Process , \nAddison-Wesley, Reading, MA, 1999. \n66. M. Johnson, The trick to controlling bean customization. JavaWorld , November 1997. \nOnline at: http://www.javaworld.com/javaworld/jw-11-1997/jw-11-beans.html   \n67. C. Jones, \u201cPatterns of large software systems: Failure and success,\u201d IEEE Computer , \nvol. 28, no. 3, pp. 86-87, 1995. \n68. P. Joshi and R. K. Joshi, \u201cQuality analys is of object oriented cohesion metrics,\u201d", "source": "Page 614", "chapter": "9"}
{"id": "db893e21053a-2", "text": "Proceedings of the 7th International Conf erence on the Quality of Information and \nCommunications Technology (QUATIC 2010) , pp. 319-324, Porto, Portugal, \nSeptember/October 2010. \n69. R. Kanigel, The One Best Way: Freder ick Winslow Taylor and the Enigma of Efficiency , \nThe MIT Press, Cambridge, MA, 2005. \n70. J. Karlsson and K. Ryan, \u201cA cost-value approach for prioritizing requirements,\u201d IEEE \nSoftware , vol. 14, no. 5, pp. 67-74, September/October 1997. \n71. G. Karner, \u201cMetrics for Objectory,\u201d Diploma Thesis, University of Link\u00f6ping, Sweden, \nNo. LiTH-IDA-Ex-9344:21. December 1993. \n72. C. Kelleher and R. Pausch, \u201cLowering the barriers to programming: A taxonomy of \nprogramming environments and la nguages for novice programmers,\u201d ACM Computing \nSurveys , vol. 37, no. 2, pp. 83-137, June 2005.", "source": "Page 614", "chapter": "9"}
{"id": "4273c3e6655d-0", "text": "References 601\n73. B. Kirwan and L. K. Ainsworth (Editors), A Guide to Task Analysis , CRC Press (Taylor \n& Francis, Ltd.), Atlanta, GA, 1992. \n74. B. A. Kitchenham, S. L. Pfleeger, and N. E.  Fenton, \u201cTowards a fra mework for software \nmeasurement validation,\u201d IEEE Transactions on Software Engineering , vol. 21, no. 12, \npp. 929-944, December 1995. \n75. G. Krasner and S. Pope, \u201cA cookbook for usi ng the model-view-controller user interface \nparadigm in Smalltalk-80,\u201d Journal of Object-Oriented Programming , vol. 1, no. 3, pp. \n26-49, August/September 1988. \n76. B. Krishnamurthy and J. Rexford, Web Protocols and Practice: HTTP/1.1, Networking \nProtocols, Caching, and Traffic Measurement , Addison-Wesley, Inc., Reading, MA, \n2001. \n77. S. Kusumoto, F. Matukawa, K. Inoue, S. Hana busa, and Y. Maegawa, \u201cEstimating effort", "source": "Page 615", "chapter": "9"}
{"id": "4273c3e6655d-1", "text": "by use case points: Method, tool and case study,\u201d Proceedings of the IEEE 10th \nInternational Symposium on So ftware Metrics (METRICS\u201904) , pp. 292-299, September \n2004. \n78. A. van Lamsweerde, Requirements Engineering: From System Goals to UML Models to \nSoftware Specifications , John Wiley & Sons, Ltd., Chichester, England, 2009. \n79. C. Larman, Applying UML and Patterns: An Introduction to Object-Oriented Analysis \nand Design and Iterative Development , Third Edition, Pearson Education, Inc., Upper \nSaddle River, NJ, 2005. \n80. C. Larman and V.R. Basili, \u201cIterative and incremental developments: A brief history,\u201d \nIEEE Computer , vol. 36, no. 6, pp. 47-56, June 2003. \n81. D. Lea, Concurrent Programming in Java , Second Edition, Addison-Wesley Longman, \nInc., Reading, MA, 2000. \n82. D. Lee and W. W. Chu, \u201cComparative analysis of six XML schema languages,\u201d \nDepartment of Computer Science, Univers ity of California, Los Angeles, CA, June", "source": "Page 615", "chapter": "9"}
{"id": "4273c3e6655d-2", "text": "Department of Computer Science, Univers ity of California, Los Angeles, CA, June \n2000. Online at: http://cobase-www.cs.uc la.edu/tech-docs/dong won/ucla-200008.html   \n83. D. H. Lorenz and J. Vlissides, \u201cPluggabl e reflection: Decoupling meta-interface and \nimplementation,\u201d Proceedings of the 25th International Conference on Software \nEngineering , Portland, OR, pp. 3, May 2003. \n84. A. A. Lovelace, \u201cTranslator\u2019s notes to an ar ticle on Babbage\u2019s Analytical Engine,\u201d In R. \nTaylor (Editor), Scientific Memoirs , vol. 3, pp. 691-731, September 1843. \n85. A. MacCormack, \u201cProduct-development practic es that work: How Internet companies \nbuild software,\u201d MIT Sloan Management Review, pp. 75-84, Winter 2001. Reprint \nnumber 4226. \n86. J. Maeda (Editor), Creative Code: Aesthetics + Computation , Thames & Hudson, \nLondon, UK, 2004. \n87. P. Maes, \u201cConcepts and experiments in computation reflection,\u201d ACM SIGPLAN Notices", "source": "Page 615", "chapter": "9"}
{"id": "4273c3e6655d-3", "text": "(OOPSLA \u201887 Proceedings) , vol. 22, no. 12, pp. 147-155, December 1987.", "source": "Page 615", "chapter": "9"}
{"id": "bc1421429e55-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  602 \n 88. K. Malan and K. Halland, \u201cExamples that can do harm in learning programming,\u201d \nCompanion to the 19th Annual ACM SIGPLAN Conference on Object-oriented \nProgramming Systems, Languages, and Applications (OOPSLA '04) , Vancouver, BC, \nCanada, pp. 83-87, October 2004. \n89. R. Malan, R. Letsinger, and D. Coleman, Object-Oriented Development at Work: Fusion \nin the Real World , Prentice-Hall PTR, Upper Saddle River, NJ, 1996. \n90. A. Marcoux, C. Maurel, F. Migeon, and P.  Sall\u00e9, \u201cGeneric operational decomposition \nfor concurrent systems: Semantics and reflection,\u201d Progress in Computer Research , \nNova Science Publishers, Inc., pp. 225-242, 2001. \n91. R. C. Martin, Agile Software Development, Prin ciples, Patterns, and Practices , Prentice \nHall, Upper Saddle River, NJ, 2003. \n92. H. Masuhara and A. Yonezawa, \u201cReflection in concurrent object-oriented languages,\u201d \nFormal Methods for Distributed Processing: A Survey of Object-Oriented Approaches ,", "source": "Page 616", "chapter": "9"}
{"id": "bc1421429e55-1", "text": "Formal Methods for Distributed Processing: A Survey of Object-Oriented Approaches , \nCambridge University Press, New York, NY, 2001. \n93. J. McGovern, S. Tyagi, M. Stevens, and S. Mathew, Java Web Services Architecture , \nMorgan Kaufmann Publishers, San Francisco, CA, 2003. \n94. G. McGraw, Software Security: Building Security In , Addison-Wesley / Pearson \nEducation, Inc., Boston, MA, 2006. \n95. J. McGrenere, R. M. Baecker, and K. S. Booth, \u201cAn evaluation of a multiple interface \ndesign solution for bloated software,\u201d Proc. ACM CHI 2002, ACM CHI Letters , vol. 4, \nno. 1, pp. 164-170, 2002. \n96. W. E. McUmber and B. H. C. Cheng, \u201cA general framework for formalizing UML with \nformal languages,\u201d Proceedings of the IEEE/ACM International Conference on Software \nEngineering (ICSE\u201901) , Toronto, Canada, pp.433-442, May 2001. \n97. A. J. Menezes, P. C. van Oorschot, and S. A. Vanstone, Handbook of Applied", "source": "Page 616", "chapter": "9"}
{"id": "bc1421429e55-2", "text": "Cryptography , CRC Press, LLC, Boca Raton, FL, 1997. Whole text available for \ndownload online at: http://www.cacr.math. uwaterloo.ca/hac/   \n98. B. Meyer, \u201cThe dependent dele gate dilemma,\u201d in M. Broy, J. Gr\u00fcnbauer, D. Harel, and \nT. Hoare (Eds.), Engineering Theories of Software Intensive Systems\u2014NATO Science \nSeries II. Mathematics, Physics and Chemistry vol. 195 , pp. 105-118, Springer, 2005. \n99. G. A. Miller, \u201cThe magical number 7 plus or  minus two: Some limits on our capacity for \nprocessing information,\u201d Psychological Review , vol. 63, pp. 81-97, 1957. \n100. A. Mitchell and J. F. Power, \u201cUsing object-level run-time metrics to study coupling \nbetween objects,\u201d Proceedings of the 2005 ACM Sy mposium on Applied Computing \n(SAC '05) , Santa Fe, NM, March 2005. \n101. P. Mohagheghi, B. Anda, and R. Conrad i, \u201cEffort estimation of use cases for \nincremental large-scale software development,\u201d Proceedings of the 27th IEEE/ACM", "source": "Page 616", "chapter": "9"}
{"id": "bc1421429e55-3", "text": "incremental large-scale software development,\u201d Proceedings of the 27th IEEE/ACM \nInternational Conference on Software Engineering (ICSE\u201905) , pp. 303-311, St Louis, \nMO, 2005.", "source": "Page 616", "chapter": "9"}
{"id": "c4213f04b5a4-0", "text": "References 603\n102. M. C. Mozer, \u201cThe Adaptive House,\u201d Departme nt of Computer Science, University of \nColorado, Boulder, CO. Web page last visited in December 2004.  \nOnline at: http://www.cs.colorado.edu/~mozer/house/   \n103. P. Mulet, J. Malenfant, and P. Cointe, \u201cTowards a methodology for explicit composition \nof metaobjects,\u201d ACM SIGPLAN Notices , vol. 30, no. 10, pp. 316-330, October 1995. \n104. G. C. Murphy, D. Notkin, and K. Sullivan, \u201cS oftware reflexion models: Bridging the gap \nbetween source and high-level models,\u201d ACM SIGSOFT Software Engineering Notes , \nvol. 20, no. 4, pp. 18-28, October 1995. \n105. J. Mylopoulos, L. Chung, and B. Nixon,  \u201cRepresenting and using nonfunctional \nrequirements: A process- oriented approach,\u201d IEEE Transactions on Software \nEngineering , vol. 23, no. 3/4, pp. 127-155, 1998. \n106. S. Nageswaran, \u201cTest effort estimation using use case points,\u201d Cognizant Technology", "source": "Page 617", "chapter": "9"}
{"id": "c4213f04b5a4-1", "text": "Solutions Quality Week 2001 , San Francisco, CA, June 2001. Online at: \nhttp://www.cognizant.c om/html/content/cogcommunity /Test_Effort_Estimation.pdf   \n107. A. Newell and H. A. Simon, \u201cGPS: A program that simulates human thought,\u201d In H. \nBillings (Editor), Lernende Automaten , Munich: R. Oldenbourg KG, pp. 109-124, 1961.  \nReprinted in: E. A. Feigenbaum, J. Feldman, and P. Armer (Editors), Computers and \nThought , Menlo Park: AAAI Press; Cambridge: MIT Press, pp. 279-293, 1995. \n108. A. Newell and H. A. Simon, Human Problem Solving , Prentice-Hall, Englewood Cliffs, \nNJ, 1972. \n109. S. Ogawa and F. T. Piller, \u201cReducing the risks of new product development,\u201d MIT Sloan \nManagement Review , pp. 65-71, Winter 2006. Reprint number 47214. \n110. R. Osherove, The Art Of Unit Testing: With Examples in .NET , Manning Publications \nCo., Greenwich, CT, 2009.", "source": "Page 617", "chapter": "9"}
{"id": "c4213f04b5a4-2", "text": "Co., Greenwich, CT, 2009. \n111. T. J. Ostrand, E. J. Weyuker, and R. M. Bell, \u201cWhere the bugs are,\u201d Proceedings of the \n2004 ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA \n'04), Boston, MA, pp. 86-96, July 2004. \n112. D. O\u2019Sullivan and T. Igoe, Physical Computing: Sensing and Controlling the Physical \nWorld with Computers , Thomson Course Technology PTR, Boston, MA, 2004.  \nSee also Tom Igoe\u2019s webpage on Physical Computing at: http://tigoe.net/pcomp/index.shtml   \n113. D. L. Parnas, \u201cOn the criteria to be used in decomposing systems,\u201d Communications of \nthe ACM , vol. 15, no. 12, pp. 1053-1058, December 1972.  \n114. H. Petroski, The Evolution of Useful Things: How Everyday Artifacts\u2014From Forks and \nPins to Paper Clips and Zippers\u2014Came to Be as They Are . Alfred A. Knopf, Inc., New \nYork, NY, 1992.", "source": "Page 617", "chapter": "9"}
{"id": "c4213f04b5a4-3", "text": "York, NY, 1992. \n115. J. Raskin, \u201cComments are more important than code,\u201d ACM Queue , vol. 3, no. 2, pp. 64-\nff, March 2005. \n116. J. Raskin, The Humane Interface: New Directi ons for Designing Interactive Systems , \nACM Press and Addison-Wesley, Reading, MA, 2000.", "source": "Page 617", "chapter": "9"}
{"id": "df09bc9d9a5e-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  604 \n 117. M. Richmond and J. Noble, \u201cReflections on remote reflection,\u201d Australian Computer \nScience Communications , vol. 23, no. 1, pp. 163-170, January-February 2001. \n118. K. H. Rosen, Discrete Mathematics and Its Applications , Sixth Edition, McGraw-Hill, \nNew York, NY, 2007. \n119. B. Sand\u00e9n, \u201cCoping with Java threads,\u201d IEEE Computer , vol. 37, no. 4, pp. 20-27, April \n2004. \n120. M. Satyanarayanan and D. Narayanan, \u201cMu lti-fidelity algorithms for interactive mobile \napplications,\u201d Wireless Networks , vol. 7, no. 6, pp. 601-607, November 2001. \n121. G. Schneider and J. P. Winters, Applying Use Cases: A Practical Guide , Second Edition, \nAddison-Wesley Professional, Reading, MA, 2001. \n122. L. M. Seiter, J. Palsberg, and K. J. Lieb erherr, \u201cEvolution of object behavior using", "source": "Page 618", "chapter": "9"}
{"id": "df09bc9d9a5e-1", "text": "context relations,\u201d ACM SIGSOFT Software Engineering Notes , vol. 21, no. 6, pp. 46-\n57, November 1996. \n123. B. C. Smith, \u201cReflection and semantics in LISP,\u201d Proceedings of the 11th ACM \nSIGACT-SIGPLAN Symposium on Prin ciples of Programming Languages , Salt Lake \nCity, UT, pp. 23-35, 1984. \n124. B. C. Smith, Reflection and Semantics in a Procedural Language, Ph. D. thesis, MIT/- \nLCS/TR-272, Cambridge, Massachusetts , January 1982. Available at:  \nhttp://www.lcs.mit.edu /publications/sp ecpub.php?id=840   \n125. I. Sommerville, Software Engineering , Seventh Edition, Addison-Wesley Publ. Ltd., \nEdinburgh Gate, England, 2004. \n126. J. T. Stasko, J. B. Domingue, M. H. Brown, and B. A. Price (Editors), Software \nVisualization: Programming as a Multimedia Experience , The MIT Press, Cambridge, \nMA, 1998. \n127. W. R. Stevens, B. Fenner, and A. M. Rudoff, Unix Network Programming, Vol. 1: The", "source": "Page 618", "chapter": "9"}
{"id": "df09bc9d9a5e-2", "text": "Sockets Networking API , Third Edition, Addison-Wesley (Pearson Education, Inc.), \nBoston, MA, 2004. \n128. G. T. Sullivan, \u201cAspect-oriented programming using reflection and metaobject \nprotocols,\u201d Communications of the ACM , vol. 44, no. 10, pp. 95-97, October 2001. \n129. Sun Microsystems, Inc., JavaBeans API sp ecification. Mountain View, CA, Available \nat: http://www.javasoft.com/beans/   \n130. Sun Microsystems, Inc., JavaServer Pages. Mountain View, CA. Available at: \nhttp://java.sun.com/pro ducts/jsp/index.html   \n131. Sun Microsystems, Inc., The Java Tutorial: A Practical Guide for Programmers , \u00a9 \n1995-2005 Sun Microsystems, Inc., Last update: April 15, 2005. Online at:  \nhttp://java.sun.com/docs/bo oks/tutorial/index.html   \n132. B. K. Szymanski and G. Chen, \u201cA component  model for discrete event simulation,\u201d in \nR.Wyrzykowski, J. Dongarra, M. Paprzy cki, and J. Wasniewski (Editors), Proceedings \nof the 4th International Conference Pa rallel Processing and Applied Mathematics", "source": "Page 618", "chapter": "9"}
{"id": "2a477e0a00aa-0", "text": "References 605\n(PPAM 2001) , pp. 580-594, Naleczow, Poland, September 2001. Revised Papers \nappeared in Lecture Notes in Computer Science 2328, Springer-Verlag, 2002. \n133. R. N. Taylor, N. Medvidovi \u0107, and E. M. Dashofy, Software Architecture: Foundations, \nTheory, and Practice , John Wiley & Sons, Inc., Hoboken, NJ, 2010. \n134. M. W. Tobias, Locks, Safes and Security: An International Police Reference , Second \nEdition, Charles C. Thomas Publ. Ltd., Springfield, IL, 2000. \n135. H.-Y. Tyan, A. Sobeih, and J. C. Hou, \u201cT owards composable and extensible network \nsimulation,\u201d Proceedings of the 19th International Parallel and Distributed Processing \nSymposium (IPDPS 2005) , CD-ROM/Abstracts Proceedings, Denver, CO, April 2005. \n136. K. J. Vicente, Cognitive Work Analysis: Toward Safe, Productive, and Healthy \nComputer-Based Work , Lawrence Erlbaum Associates, Publishers, Mahwah, NJ, 1999.", "source": "Page 619", "chapter": "9"}
{"id": "2a477e0a00aa-1", "text": "137. M. V\u00f6lter, M. Kircher, and U. Zdun, Remoting Patterns: Foundations of Enterprise, \nInternet and Realtime Distributed Object Middleware , John Wiley & Sons, Ltd., \nChichester, England, 2005. \n138. J. Waldo, G. Wyant, A. Wollrath, and S. Kendall, A Note on Distributed Computing. \nTechnical Report SMLI TR-94-29, Sun Microsystems Laboratories Inc., Mountain View, CA, November 1994. Available at: http://research.sun.com /techrep/1994/abstract-\n29.html   \nAlso in: Lecture Notes In Computer Science; Vol. 1222: Selected Presentations and \nInvited Papers Second International Works hop on Mobile Object Systems\u2014Towards the \nProgrammable Internet , pp. 49-64, Springer-Verlag Publ., 1996. \n139. R. T. Watson, M.-C. Boudreau, P. T. York, M. E. Greiner, and D. Wynn, Jr., \u201cThe \nbusiness of open source,\u201d Communications of the ACM , vol. 51, no. 4, pp. 41-46, April \n2008.", "source": "Page 619", "chapter": "9"}
{"id": "2a477e0a00aa-2", "text": "2008. \n140. E. J. Weyuker, \u201cEvaluating software complexity measures,\u201d IEEE Transactions on \nSoftware Engineering , vol. 14, no. 9, pp. 1357-1365, September 1988. \n141. R. J. Whiddett, Concurrent Programming for Software Engineers , Chichester, West \nSussex: Ellis Horwood; New York: Halsted Press, 1987. \n142. R. Wirfs-Brock and A. McKean, Object Design: Roles, Responsibilities, and \nCollaborations , Addison-Wesley, Boston, MA, 2003. \n143. A. Wollrath, R. Riggs, and J. Waldo, \u201cA distributed object model for the Java system,\u201d \nUSENIX Computing Systems , vol. 9, no. 4, Fall 1996. \n144. J. Woodcock and M. Loomes, Software Engineering Mathematics: Formal Methods \nDemistifyed , Pitman, 1988.", "source": "Page 619", "chapter": "9"}
{"id": "4c30582eb17b-0", "text": "606  \nAcronyms and Abbreviations \n \nNote: WhatIs.com provides definitions, computer  terms, tech glossaries, and acronyms at: http://whatis.techtarget.com/   \n \nA2A  \u2014 Application-to-Application \nAES  \u2014 Advanced Encryption Standard \nAI \u2014 Artificial Intelligence  \nAOP  \u2014 Aspect-Oriented Programming \nAPI \u2014 Application Programming Interface \nAWT  \u2014 Abstract Widget Toolkit (Java package) \nAXIS  \u2014 Apache eXtensible Interaction System \nB2B \u2014 Business-to-Business  \nBOM  \u2014 Business Object Model \nBPEL4WS  \u2014 Business Process Execution Language \nfor Web Services \nCA \u2014 Certification Authority \nCBDI  \u2014 Component Based Development and \nIntegration \nCDATA  \u2014 Character Data \nCORBA  \u2014 Common Object Request Broker \nArchitecture \nCOTS  \u2014 Commercial Off-the-shelf \nCPU  \u2014 Central Processing Unit \nCRC  \u2014 Candidates, Responsibilities, Collaborators \ncards \nCRM  \u2014 Customer Relationship Management \nCRUD  \u2014 Create, Read, Update, Delete \nCSV  \u2014 Comma Separated Value \nCTS  \u2014 Clear To Send \nDCOM  \u2014 Distributed Component Object Model \nDOM  \u2014 Document Object Model \nDTD  \u2014 Document Type Definition \nEJB \u2014 Enterprise JavaBean", "source": "Page 620", "chapter": "9"}
{"id": "4c30582eb17b-1", "text": "DTD  \u2014 Document Type Definition \nEJB \u2014 Enterprise JavaBean \nFSM  \u2014 Finite State Machine \nFTP  \u2014 File Transfer Protocol \nFURPS+  \u2014 Functional Usability Reliability \nPerformance Supportability + ancillary \nGPS  \u2014 General Problem Solver; Global Positioning \nSystem \nGRASP  \u2014 General Responsibility Assignment \nSoftware Patterns \nGUI  \u2014 Graphical User Interface \nHTML  \u2014 HyperText Markup Language \nHTTP  \u2014 HyperText Transport Protocol HTTPS  \u2014 Hypertext Transfer Protocol over Secure \nSocket Layer \nIDE \u2014 Integrated Development Environment \nIDL \u2014 Interface Definition Language \nIEEE  \u2014 Institute of Electrical and Electronics \nEngineers \nIP \u2014 Internet Protocol \nIPv4  \u2014 Internet Protocol version 4 \nIT \u2014 Information Technology \nJAR  \u2014 Java Archive \nJDBC  \u2014 Java Database Connectivity \nJDK  \u2014 Java Development Kit \nJRE  \u2014 Java Runtime Environment \nJSP \u2014 Java Server Page \nJVM  \u2014 Java Virtual Machine \nLAN  \u2014 Local Area Network \nMDA  \u2014 Model Driven Architecture \nMIME  \u2014 Multipurpose Internet Mail Extensions \nMVC  \u2014 Model View Controller (software design \npattern) \nOASIS  \u2014 Organization for the Advancement of \nStructured Information Standards \nOCL  \u2014 Object Constraint Language", "source": "Page 620", "chapter": "9"}
{"id": "4c30582eb17b-2", "text": "Structured Information Standards \nOCL  \u2014 Object Constraint Language \nOMG  \u2014 Object Management Group \nOO \u2014 Object Orientation; Object-Oriented \nOOA  \u2014 Object-Oriented Analysis \nOOD  \u2014 Object-Oriented Design \nORB  \u2014 Object Request Broker \nOWL  \u2014 Web Ontology Language \nPAN  \u2014 Personal Area Network \nPC \u2014 Personal Computer \nPCDATA  \u2014 Parsed Character Data \nPDA  \u2014 Personal Digital Assistant \nQName  \u2014 Qualified Name (in XML) \nQoS \u2014 Quality of Service \nP2P \u2014 Peer-to-Peer \nPI \u2014 Processing Instruction (XML markup) \nPKI \u2014 Public Key Infrastructure \nRDD  \u2014 Responsibility-Driven Design \nRDF  \u2014 Resource Description Framework", "source": "Page 620", "chapter": "9"}
{"id": "0255e1626353-0", "text": "Acronyms and Abbreviations 607\nRFC  \u2014 Request For Comments; Remote Function Call \nRFID  \u2014 Radio Frequency Identification \nRMI  \u2014 Remote Method Invocation (Java package) \nRPC  \u2014 Remote Procedure Call \nRSS \u2014 Really Simple Syndication \nRTS  \u2014 Request To Send \nRTSJ  \u2014 Real-Time Specification for Java \nRUP  \u2014 Rational Unified Process \nSE \u2014 Software Engineering \nSGML  \u2014 Standard Generalized Markup Language \nSMTP  \u2014 Simple Mail Transfer Protocol \nSOA  \u2014 Service Oriented Architecture \nSOAP  \u2014 Simple Object Access Protocol; Service \nOriented Architecture Protocol; Significantly \nOverloaded Acronym Phenomenon \nSSL \u2014 Secure Socket Layer \nSuD \u2014 System under Discussion \nTCP  \u2014 Transport Control Protocol \nTDD  \u2014 Test-Driven Development \nTLA  \u2014 Temporal Logic of Actions \nUAT  \u2014 User Acceptance Test \nUDDI  \u2014 Universal Description, Discovery, and \nIntegration UDP  \u2014 User Datagram Protocol \nUML  \u2014 Unified Modeling Language \nURI \u2014 Unified Resource Identifier \nURL  \u2014 Unified Resource Locator \nURN  \u2014 Unified Resource Name \nUUID  \u2014 Universal Unique Identifier \nVLSI  \u2014 Very Large Scale Integration \nW3C  \u2014 World Wide Web Consortium", "source": "Page 621", "chapter": "9"}
{"id": "0255e1626353-1", "text": "W3C  \u2014 World Wide Web Consortium \nWAP  \u2014 Wireless Access Protocol \nWEP  \u2014 Wired Equivalent Privacy \nWG \u2014 Working Group \nWi-Fi  \u2014 Wireless Fidelity (synonym for IEEE 802.11) \nWML  \u2014 Wireless Markup Language \nWS \u2014 Web Service \nWSDL  \u2014 Web Services Description Language \nWWW  \u2014 World Wide Web \nXMI  \u2014 XML Metadata Interchange \nXML  \u2014 eXtensible Markup Language \nXP \u2014 eXtreme Programming \nXPath  \u2014 XML Path \nXSL  \u2014 eXtensible Stylesheet Language \nXSLT  \u2014 eXtensible Stylesheet Language Transform", "source": "Page 621", "chapter": "9"}
{"id": "41fbc614b27a-0", "text": "608  \nIndex \n \nSymbols \n\uf0d9 (and) \u2026  \n\uf024 (exists) \u2026  \n\uf022 (for all) \u2026  \n\uf0db (if and only if) \u2026  \n\uf0de (implies) \u2026  \n\uf0d8 (not) \u2026  \n\uf0da (or) \u2026  \nJava Classes \nArrayList   [ java.util.* ] \u2026  \nAttributeList   [ org.xml.sax.* ] \u2026  \nBufferedReader   [ java.io.* ] \u2026  \nClass   [ java.lang.* ] \u2026  \nConstructor   [ java.lang.reflect.* ] \u2026  \nDocumentHandler   [ org.xml.sax.* ] \u2026  \nField   [ java.lang.reflect.* ] \u2026  \nHashMap   [ java.util.* ] \u2026  \nHashtable   [ java.util.* ] \u2026  \nInputStream   [ java.io.* ] \u2026  \nInputStreamReader   [ java.io.* ] \u2026  \nIOException   [ java.io.* ] \u2026  \nIterator   [ java.util.* ] \u2026 \nMethod   [ java.lang.reflect.* ] \u2026  \nOutputStreamWriter   [ java.io.* ] \u2026  \nParser   [ org.xml.sax.* ] \u2026  \nPrintWriter   [ java.io.* ] \u2026  \nSerializable   [ java.io.* ] \u2026  \nSerialPort   [ javax.comm.* ] \u2026  \nServerSocket   [ java.net.* ] \u2026", "source": "Page 622", "chapter": "9"}
{"id": "41fbc614b27a-1", "text": "ServerSocket   [ java.net.* ] \u2026  \nSocket   [ java.net.* ] \u2026  \nTooManyListenersException   [ java.util.* ] \u2026  \nVector   [ java.util.* ] \u2026  \nXML Keywords \nANY  [ XML/DTD ] \u2026  \nATTLIST   [ XML/DTD ] \u2026  CDATA   [ XML/DTD ] \u2026  \nDOCTYPE   [ XML/DTD ] \u2026  \nELEMENT   [ XML/DTD ] \u2026  \nFIXED   [ XML/DTD ] \u2026  \nIMPLIED   [ XML/DTD ] \u2026  \nPCDATA   [ XML/DTD ] \u2026  \nREQUIRED   [ XML/DTD ] \u2026  \n \n \nA \nAbsolute scale. See Scales \nAbstraction \u2026  \nAbuse case ...  \nAcceptance test ...  Access control \u2026  \nAccess designation ...  \nAccessor. See Getter method \nActivity diagram \u2026  \nActor \u2026  \nOffstage \u2026  \nPrimary \u2026  \nSupporting \u2026  \nAdaptive house \u2026  \nAggregation \u2026  \nAgile method \u2026  Agile planning \u2026  \nAlgorithm \u2026  \nAnalysis \u2026  Applet \u2026  \nApplication \u2026  \nArchitectural style \u2026 Architecture, software \u2026  \nArtifact \u2026  \nArtificial intelligence \u2026  Aspect-Oriented Programming \u2026  \nAssociation \u2026  \nAttribute \u2026  Authentication \u2026", "source": "Page 622", "chapter": "9"}
{"id": "12691568d0e4-0", "text": "Index \n 609\nAutonomic computing \u2026  \nB \nBean. See Java Beans \nBinding \u2026  Biometrics \u2026  \nBlack box \u2026  \nBlack box testing \u2026  Boundary, system \u2026  \nBroker pattern. See Design patterns \nBrooks, Frederick P., Jr. \u2026  Bug \u2026  \nC \nChunking \u2026  Ciphertext \u2026  \nClass \u2026  \nAbstract \u2026  \nBase \u2026  \nDerived \u2026  Inner \u2026  \nClass diagram \u2026  \nClient object \u2026  Code \u2026  \nCohesion \u2026  \nCommand pattern. See Design patterns \nComment \u2026  \nCommunication diagram \u2026  \nComplexity \u2026  \nCyclomatic \u2026  \nHalstead\u2019s method \u2026  \nMcCabe \u2026  Size-based metrics \u2026  \nComponent \u2026  \nComponent diagram \u2026  \nComposite \u2026  \nComposition \u2026  Concept \u2026  \nConceptual modeling \u2026  \nConclusion \u2026  Concurrent programming \u2026  \nConjunction \u2026  \nConstraint \u2026  Constructor \u2026  \nContent model \u2026  \nContext diagram \u2026  Contract \u2026  \nContradiction \u2026  Controller. See Design patterns \nCoordination \u2026  \nCoupling \u2026  \nCorrectness \u2026  Cost estimation \u2026  \nCritical region \u2026  \nCross-cutting concern \u2026  Cryptography \u2026  \nCryptosystem \u2026  \nPublic-key \u2026  \nSymmetric \u2026  \nD \nData structure \u2026  Data-driven design \u2026", "source": "Page 623", "chapter": "9"}
{"id": "12691568d0e4-1", "text": "Symmetric \u2026  \nD \nData structure \u2026  Data-driven design \u2026  \nDecryption \u2026  Defect \u2026  \nDelegation \u2026 \nDelegation event model \u2026  De Morgan\u2019s laws \u2026  \nDependency \u2026  \nDesign \u2026  Design patterns \nBehavioral \u2026  \nBroker \u2026  Command \u2026  \nDecorator \u2026  \nGRASP \u2026  Observer \u2026  \nProxy \u2026  \nPublish-Subscribe \u2026  State ...  \nStructural \u2026  \nDiffie-Hellman algorithm \u2026  \nDisjunction \u2026  \nDistributed computing \u2026  Divide-and-conquer. See Problem solving \nDocument, XML \u2026  \nDocumentation \u2026  DOM \u2026  \nDomain layer \u2026  \nDomain model \u2026  Domain object \u2026  \nE \nEffort estimation \u2026 Embedded processor \u2026  \nEmergent property, system \u2026", "source": "Page 623", "chapter": "9"}
{"id": "931285b3fd96-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  610 \n Encapsulation \u2026  \nEncryption \u2026  \nEquivalence \u2026  \nError \u2026  Estimation. See Project estimation \nEthnography \u2026  \nEvent \u2026  \nKeyboard focus \u2026  \nEvent-driven application \u2026  \nException \u2026  \nExistential quantification \u2026  \nExpert rule \u2026  Extension point \u2026  \nExtreme programming \u2026  \nF \nFailure \u2026  Fault \u2026  \nFault tolerance \u2026  Feature, system \u2026  \nFeynman, Richard P. \u2026  \nFingerprint reader \u2026  Finite state machine \u2026  \nFixture (in testing) \u2026  \nFormal specification \u2026  Frame \u2026  \nFramework \u2026  \nFunctional requirement \u2026  FURPS+, system requirements \u2026  \nG \nGeneralization \u2026  Getter method ...  \nGoal specification \u2026  \nGraph theory \u2026  \nGraphical user interface \u2026  \nGRASP pattern. See Design patterns  \nH \nHandle \u2026  \nHeuristics \u2026  HTML \u2026  \nHTTP \u2026  \nHuman working memory \u2026  Hypothesis \u2026  \nI \nImplementation \u2026  Implication \u2026  \nIndirection \u2026  \nInheritance \u2026  \nInput device \u2026  Instance, class \u2026  \nIntegration testing \u2026  \nInteraction diagram \u2026  Interface, software \u2026  \nInterval scale. See Scales \nInterview, requirements elicitation \u2026  \nIntrospection \u2026", "source": "Page 624", "chapter": "9"}
{"id": "931285b3fd96-1", "text": "Interview, requirements elicitation \u2026  \nIntrospection \u2026  \nInstruction \u2026  Iterative lifecycle \u2026  \nJ \nJackson, Michael \u2026 Java, programming language \u2026  \nJava Beans \u2026  \nJUnit \u2026  \nK \nKanban ...  Keyboard \u2026  Keyword \u2026  \nKleene operators \u2026  \nL \nLatency \u2026  Layer \u2026  \nLayered architecture \u2026  Layout \u2026  \nLifecycle, software \u2026  \nLifeline \u2026  Link \u2026  \nListener \u2026  \nLogic \u2026  \nM \nMaintenance \u2026  Markup language \u2026  Marshalling \u2026  \nMenu \u2026  \nMessage \u2026  \nMessaging \u2026  \nMetadata \u2026  Metaphor \u2026  \nMethod \u2026  \nMiddleware \u2026", "source": "Page 624", "chapter": "9"}
{"id": "66fa9217d7c9-0", "text": "Index \n 611\nMiller, George A. \u2026  \nMinimum Description Length problem \u2026  \nModel \u2026  \nModel Driven Architecture \u2026  Modular design \u2026  \nMultithreaded application \u2026  \nMutator. See Setter method \nMutual exclusion (mutex) \u2026  \nN \nNamespace, XML \u2026  Naming service \u2026  \nNavigability arrow \u2026  \nNegation \u2026  \nNetwork \nLocal Area Network (LAN) \u2026  Wireless \u2026  \nNetwork programming \u2026  \nNode \u2026  Nominal scale. See Scales \nNon-functional requirement \u2026  \nO \nObject, software \u2026  Object Request Broker (ORB). See Broker pattern \nObserver pattern. See Design patterns \nOMG (Object Management Group) \u2026  \nOntology \u2026  \nOOA (Object-oriented analysis) \u2026  OOD (Object-oriented design) \u2026  \nOperation \u2026  \nOperator, logical \u2026  Ordinal scale. See Scales \nP \nPackage \u2026  \nPackage diagram \u2026  \nParnas, David L. \u2026  \nParsing \u2026  \nPattern. See Design patterns  \nPen, as input device \u2026  Performance \u2026  \nPersistence \u2026  \nPetri nets \u2026  Plaintext \u2026  \nPolymorphism \u2026  \nPort \u2026  Postcondition \u2026  Precondition \u2026  \nPredicate logic \u2026  \nPremise \u2026  \nProblem frame \u2026  Problem solving \u2026  \nProcess \u2026", "source": "Page 625", "chapter": "9"}
{"id": "66fa9217d7c9-1", "text": "Premise \u2026  \nProblem frame \u2026  Problem solving \u2026  \nProcess \u2026  \nProcessing instruction, XML \u2026  Productivity factor \u2026  \nProgram \u2026  \nProject estimation \u2026  \nProject management \u2026  \nProperty \u2026  \nAccess \u2026  \nEditor \u2026  \nPropositional logic \u2026  Protocol \u2026  \nPrototype \u2026  \nProxy pattern. See Design patterns \nPublic-key cryptosystem. See Cryptosystem \nPublisher-subscriber pattern. See Design patterns \nPull vs. push \u2026  \nQ \nQualified name (QName) \u2026  Quantifier \u2026  Query \u2026  \nQueue \u2026  \nQuote tag, XML \u2026  \nR \nRatio scale. See Scales \nReactive application. See Event-driven application  \nReal-time specification for Java (RTSJ) \u2026  \nRefactoring \u2026  \nReference \u2026  \nReflection \u2026  \nRegistry, naming \u2026  Reifying \u2026  \nRelationship, class \u2026  \nIs-a \u2026  Part-of \u2026  \nUses-a \u2026  \nRemote Method Invocation (RMI) \u2026  Remote object \u2026  \nRequirement \u2026  \nRequirements elicitation. See Requirements gathering \nRequirements engineering \u2026  \nRequirements gathering \u2026", "source": "Page 625", "chapter": "9"}
{"id": "41cb06f803a9-0", "text": "Ivan Marsic  \uf0b7 Rutgers University  612 \n Requirements specification \u2026  \nResponsibility \u2026  \nResponsibility-driven design \u2026  \nReuse \u2026  Reversible actions \u2026  \nRFID \u2026  \nRisk analysis \u2026  Role \u2026  \nRS-232. See Serial port \nRule-based expert system \u2026  \nS \nSafety, thread \u2026  Scale types \u2026  \nAbsolute \u2026  \nInterval \u2026  Nominal \u2026  \nOrdinal \u2026  \nRatio \u2026  \nSchema, XML \u2026  \nScope, name \u2026  \nScrum ...  Security \u2026  \nSecurity testing ...  \nSemantics \u2026  Sensor \u2026  \nSeparation of concerns \u2026  \nSequence diagram \u2026  Serial port \u2026  \nServer object \u2026  \nService \u2026  Service-Oriented Architecture (SOA) \u2026 \nServlet, Java \u2026  \nSetter method ...  \nSGML (Standard Generalized Markup Language) \u2026  \nSkeleton \u2026  SOAP \u2026  \nSocket, network \u2026  \nSoftware development process \u2026  Software engineering \u2026  \nSoftware lifecycle \u2026  \nStakeholder \u2026  State, object \u2026  \nState machine diagram \u2026  \nState variable \u2026  Stereotype \u2026  \nStory points. See User story points \nStub \u2026  Symbol, UML \u2026  \nSystem \u2026  \nBehavior \u2026  \nBoundary \u2026  State \u2026  \nSystem sequence diagram \u2026", "source": "Page 626", "chapter": "9"}
{"id": "41cb06f803a9-1", "text": "Behavior \u2026  \nBoundary \u2026  State \u2026  \nSystem sequence diagram \u2026  \nSystem under discussion (SuD) \u2026  System use case \u2026  \nT \nTablet \u2026  Tautology \u2026  \nTest case ...  \nTest-driven development (TDD) \u2026 \nTesting \u2026  \nAll-edges coverage \u2026  All-nodes coverage \u2026  \nAll-paths coverage \u2026  \nBlack-box \u2026  Coverage-based \u2026  \nTest driver \u2026  \nTest stub \u2026  White-box \u2026  \nThread \u2026  \nSynchronization \u2026  \nTiered architecture \u2026  \nTLA+ specification language \u2026  \nTool \u2026  Toolkit \u2026  \nTransition diagram \u2026 \nTranslation \u2026  Transformation \u2026  \nInverse \u2026  \nTrapdoors function \u2026  \nTraversal, graph \u2026  \nTree data structure \u2026  Typecasting \u2026  \nU \nUML, See Unified Modeling Language \nUndo/redo \u2026  \nUnified Modeling Language (UML) \u2026  \nUnified Process \u2026  Unit testing \u2026  \nUniversal quantification \u2026  \nUP. See Unified Process \nUsage scenario \u2026  \nUse case \u2026", "source": "Page 626", "chapter": "9"}
{"id": "be06a277e792-0", "text": "Index \n 613\nAlternate scenario \u2026  \nDetailed description \u2026  \nInstance \u2026  \nMain success scenario \u2026  Schema \u2026  \nUse case diagram \u2026  \nUse case points \u2026  User \u2026  \nUser story \u2026  \nUser story points \u2026  \nV \nValidation \u2026  Verification \u2026  \nVelocity \u2026  \nVersion control \u2026  Visibility \u2026  \nVision statement \u2026  \nVisual modeling \u2026  \nW \nWait set, threads \u2026  Waterfall methodology \u2026  \nWeb method \u2026  \nWeb service \u2026  \nWeb Services Definition Language (WSDL) \u2026  White box testing \u2026  \nWicked problem \u2026  \nWindow \u2026  Wizard-of-Oz experiment \u2026  \nX \nXLink \u2026  XML \u2026  \nXPath \u2026  \nXSLT \u2026  \nY \n \nZ \nZ specification language \u2026", "source": "Page 627", "chapter": "9"}
